argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=10
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=ind9.proof
argv[9] = --spec-iospecs=ind9.iospecs
argv[10] = ind9.spec
argv[11] = ind9.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.3791945
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/ind9.c
argv[10] = -o
argv[11] = par_tmpdir/ind9.c.bc.tmp
argv[12] = -m32

/home/indrajit/scratch/tests/eq-test/ind9.c:9:18: warning: implicitly declaring library function 'malloc' with type 'void *(unsigned int)' [-Wimplicit-function-declaration]
    list* node = malloc(sizeof(list));
                 ^
/home/indrajit/scratch/tests/eq-test/ind9.c:9:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'
1 warning generated.
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/ind9.spec.etfg
argv[11] = par_tmpdir/ind9.c.bc
argv[12] = -o
argv[13] = par_tmpdir/ind9.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function make_list</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 110 time spent: 0:0:0 [0.000213s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 135 time spent: 0:0:0 [0.000251s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 1622 time spent: 0:0:0 [0.017684s total; 0.000011 per start]
expr_simplify_solver: num_starts 813 time spent: 0:0:0 [0.044347s total; 0.000055 per start]
expr_simplify_syntactic: num_starts 813 time spent: 0:0:0 [0.358647s total; 0.000441 per start]
expr_simplify_select_on_store: num_starts 14 time spent: 0:0:0 [0.050385s total; 0.003599 per start]
expr_simplify_store_on_store: num_starts 68 time spent: 0:0:0 [0.007783s total; 0.000114 per start]
expr_simplify_using_lhs_set_helper: num_starts 285 time spent: 0:0:0 [0.430152s total; 0.001509 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 2178 time spent: 0:0:0 [0.428164s total; 0.000197 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 284 time spent: 0:0:0 [0.001395s total; 0.000005 per start]
expr_simplify_eq: num_starts 92 time spent: 0:0:0 [0.001290s total; 0.000014 per start]
expr_simplify_or: num_starts 8 time spent: 0:0:0 [0.000011s total; 0.000001 per start]
expr_simplify_not: num_starts 1 time spent: 0:0:0 [0.000004s total; 0.000004 per start]
expr_simplify_ite: num_starts 107 time spent: 0:0:0 [0.004935s total; 0.000046 per start]
canonicalize_expr_tree: num_starts 217 time spent: 0:0:0 [0.005742s total; 0.000026 per start]
expr_simplify_memalloc_using_memlabel: num_starts 156 time spent: 0:0:0 [0.000458s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 34 time spent: 0:0:0 [0.049989s total; 0.001470 per start]
memlabels_are_independent: num_starts 78 time spent: 0:0:0 [0.000153s total; 0.000002 per start]
get_arithmetic_addsub_atoms: num_starts 476 time spent: 0:0:0 [0.000208s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 428 time spent: 0:0:0 [0.006836s total; 0.000016 per start]
expr_is_consts_struct_constant: num_starts 1569 time spent: 0:0:0 [0.001027s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 4145 time spent: 0:0:0 [0.435787s total; 0.000105 per start]
expr_do_simplify_helper_cache: num_starts 4145 time spent: 0:0:0 [0.003609s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 205 time spent: 0:0:0 [0.000168s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 205 time spent: 0:0:0 [0.000736s total; 0.000004 per start]
array_constant_equals: num_starts 383 time spent: 0:0:0 [0.000808s total; 0.000002 per start]
sort_dfa_canonical: num_starts 154522 time spent: 0:0:1 [1.262124s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 57 time spent: 0:0:0 [0.006918s total; 0.000121 per start]
combo_dfa_xfer_and_meet: num_starts 105 time spent: 0:0:0 [0.473603s total; 0.004511 per start]
alias_val_xfer_and_meet: num_starts 105 time spent: 0:0:0 [0.333776s total; 0.003179 per start]
get_sprel_map_from_avail_exprs: num_starts 136 time spent: 0:0:0 [0.018966s total; 0.000139 per start]
update_memlabels_for_memslot_locs: num_starts 30 time spent: 0:0:0 [0.000180s total; 0.000006 per start]
populate_gen_and_kill_sets_for_edge: num_starts 210 time spent: 0:0:0 [0.025665s total; 0.000122 per start]
compute_simplified_loc_exprs_for_edge: num_starts 622 time spent: 0:0:0 [0.325411s total; 0.000523 per start]
compute_locs_definitely_written_on_edge: num_starts 210 time spent: 0:0:0 [0.000161s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 150 time spent: 0:0:0 [0.162013s total; 0.001080 per start]
edge_update_memlabel_map_for_mlvars: num_starts 105 time spent: 0:0:0 [0.004318s total; 0.000041 per start]
add_new_locs_based_on_edge: num_starts 105 time spent: 0:0:0 [0.052614s total; 0.000501 per start]
expand_locset_to_include_slots_for_memmask: num_starts 173 time spent: 0:0:0 [0.001181s total; 0.000007 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_execution_constructor.src.spec.make_list.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.make_list.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.make_list.: 6e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.make_list.: 8e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 3.1e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 3.2e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 3.4e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.7e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 4.5e-05s (num_starts 1; 0.0000s/start)
main.3.: 0.000105s (num_starts 1; 0.0001s/start)
get_lr_status_for_loc_ids.: 0.000128s (num_starts 18; 0.0000s/start)
expr_is_hidden_reg.: 0.000139s (num_starts 162; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000165s (num_starts 10; 0.0000s/start)
expr_is_callee_save_const.: 0.000171s (num_starts 166; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000174s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000196s (num_starts 193; 0.0000s/start)
populate_memlabel_map.visit2.calling.compute_lr_status_for_expr.: 0.000201s (num_starts 6; 0.0000s/start)
compute_sprel_relations.: 0.000218s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.00023s (num_starts 1; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000232s (num_starts 24; 0.0000s/start)
graph_locs_add_all_specvars.: 0.000294s (num_starts 1; 0.0003s/start)
graph_locs_add_all_indvars.: 0.000304s (num_starts 1; 0.0003s/start)
populate_locid2expr_map.: 0.000349s (num_starts 2; 0.0002s/start)
graph_locs_add_exvregs_for_edge.: 0.000352s (num_starts 54; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.00036s (num_starts 6; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000386s (num_starts 1; 0.0004s/start)
graph_locs_add_local_vars_for_edge.: 0.000488s (num_starts 54; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000492s (num_starts 2; 0.0002s/start)
graph_locs_add_all_local_vars.: 0.00053s (num_starts 1; 0.0005s/start)
lr_status_meet.: 0.00062s (num_starts 132; 0.0000s/start)
expr_represents_llvm_undef.: 0.000679s (num_starts 168; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000707s (num_starts 105; 0.0000s/start)
compute_reachable_memlabels_map.: 0.000917s (num_starts 3; 0.0003s/start)
sp_version_relations_val_t::meet.: 0.001054s (num_starts 1785; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.001061s (num_starts 1; 0.0011s/start)
def_analysis::xfer_and_meet.: 0.001131s (num_starts 108; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001134s (num_starts 1; 0.0011s/start)
populate_memlabel_map.visit2.update_callee_memlabels.: 0.001313s (num_starts 6; 0.0002s/start)
populate_transitive_closure.: 0.00146s (num_starts 1; 0.0015s/start)
canonicalize_llvm_nextpcs.: 0.001558s (num_starts 1; 0.0016s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.001578s (num_starts 1; 0.0016s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.001675s (num_starts 105; 0.0000s/start)
graph_with_locs_constructor.src.spec.make_list.: 0.001695s (num_starts 1; 0.0017s/start)
populate_exit_return_values_for_llvm_method.: 0.001716s (num_starts 1; 0.0017s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001723s (num_starts 1; 0.0017s/start)
tfg::collect_assumes_around_edge.: 0.002065s (num_starts 135; 0.0000s/start)
compute_z3_expr.: 0.002512s (num_starts 212; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.003316s (num_starts 112; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003756s (num_starts 174; 0.0000s/start)
create_closure_matrix.: 0.003882s (num_starts 135; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.004181s (num_starts 105; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.005149s (num_starts 2; 0.0026s/start)
graph_with_predicates_constructor.src.spec.make_list.: 0.005316s (num_starts 1; 0.0053s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.005379s (num_starts 1; 0.0054s/start)
graph_with_aliasing_constructor.src.spec.make_list.: 0.005504s (num_starts 1; 0.0055s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.005773s (num_starts 2230; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.005795s (num_starts 93; 0.0001s/start)
graph_visit_exprs.: 0.006782s (num_starts 4; 0.0017s/start)
query:convert_from_z3.: 0.007564s (num_starts 212; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.make_list.: 0.007647s (num_starts 1; 0.0076s/start)
graph_with_simplified_assets_constructor.src.spec.make_list.: 0.008169s (num_starts 1; 0.0082s/start)
query:convert_to_z3.: 0.010937s (num_starts 212; 0.0001s/start)
graph_identify_back_edges.: 0.010964s (num_starts 6; 0.0018s/start)
graph_identify_natural_loops.: 0.011495s (num_starts 6; 0.0019s/start)
tfg_constructor.src.spec.make_list.after_transitive_closure.: 0.012173s (num_starts 1; 0.0122s/start)
tfg_constructor.src.spec.make_list.post_parsing.: 0.012178s (num_starts 1; 0.0122s/start)
tfg_constructor.src.spec.make_list.after_string_contents.: 0.012183s (num_starts 1; 0.0122s/start)
tfg_constructor.src.spec.make_list.after_compute_max_memlabel_varnum.: 0.012188s (num_starts 1; 0.0122s/start)
tfg_constructor.src.spec.make_list.: 0.012193s (num_starts 1; 0.0122s/start)
tfg::populate_loc_definedness.before_solve.: 0.012267s (num_starts 2; 0.0061s/start)
tfg::populate_loc_definedness.before_initialize.: 0.012869s (num_starts 2; 0.0064s/start)
tfg::populate_loc_definedness.: 0.013307s (num_starts 2; 0.0067s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.014841s (num_starts 1; 0.0148s/start)
populate_branch_affecting_locs.: 0.014903s (num_starts 2; 0.0075s/start)
find_dominators.: 0.015038s (num_starts 10; 0.0015s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.01512s (num_starts 1; 0.0151s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.015551s (num_starts 1; 0.0156s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.017363s (num_starts 105; 0.0002s/start)
compute_regions.: 0.01743s (num_starts 6; 0.0029s/start)
graph_to_stream.: 0.018287s (num_starts 1; 0.0183s/start)
create_sp_version_relations_lattice_at_pc.: 0.019347s (num_starts 135; 0.0001s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.024044s (num_starts 105; 0.0002s/start)
query:simplify-z3.: 0.02434s (num_starts 428; 0.0001s/start)
populate_simplified_to_state.: 0.027328s (num_starts 3; 0.0091s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.028668s (num_starts 1622; 0.0000s/start)
populate_simplified_assets.: 0.037972s (num_starts 6; 0.0063s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.041937s (num_starts 105; 0.0004s/start)
tfg_preprocess.dst.llvm.make_list.: 0.043927s (num_starts 1; 0.0439s/start)
tfg::tfg_preprocess.: 0.043931s (num_starts 1; 0.0439s/start)
get_tfg.: 0.055129s (num_starts 1; 0.0551s/start)
get_function_tfg_map.make_list.: 0.055194s (num_starts 1; 0.0552s/start)
get_function_tfg_map.: 0.055197s (num_starts 1; 0.0552s/start)
avail_exprs_create_submap.: 0.059584s (num_starts 315; 0.0002s/start)
main.2.: 0.065544s (num_starts 1; 0.0655s/start)
populate_locs_potentially_modified_on_edge.: 0.068268s (num_starts 3; 0.0228s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.080977s (num_starts 105; 0.0008s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.102242s (num_starts 1622; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.104863s (num_starts 1622; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.106258s (num_starts 3; 0.0354s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.125067s (num_starts 1622; 0.0001s/start)
compute_lr_status_for_expr.: 0.170927s (num_starts 141; 0.0012s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.17156s (num_starts 119; 0.0014s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.171789s (num_starts 119; 0.0014s/start)
compute_new_lr_status_on_locs.: 0.275629s (num_starts 105; 0.0026s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.294913s (num_starts 172; 0.0017s/start)
populate_loc_liveness.: 0.31723s (num_starts 2; 0.1586s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.334029s (num_starts 105; 0.0032s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.430543s (num_starts 285; 0.0015s/start)
tfg_postprocess_after_pointsto_analysis.: 0.45968s (num_starts 1; 0.4597s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.473797s (num_starts 105; 0.0045s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.487373s (num_starts 1; 0.4874s/start)
ftmap_run_pointsto_analysis.: 0.995892s (num_starts 1; 0.9959s/start)
parse_consts_db.: 7.34391s (num_starts 1; 7.3439s/start)
main.: 8.51434s (num_starts 1; 8.5143s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:23 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:23 : Reading in SPEC-LLVM I/O specification from file ind9.iospecs...</MSG>
<MSG>0:23 : Computing equivalence for function: make_list...</MSG>
<MSG>0:23 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:23 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:24 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:24 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG make_list (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:25 : product-TFG make_list: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : product-TFG make_list: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : product-TFG make_list created 3 possibilities in group make_list.A...</MSG>
<MSG>0:25 : Chose (for CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:25 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2...</MSG>
<MSG>0:25 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2...</MSG>
<MSG>0:25 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : Adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:25 : make_list.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:25 : make_list.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:25 : make_list.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:25 : make_list.A2: Propagated 1 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : make_list.A2: Added the 1 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:25 : make_list.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:25 : make_list.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:25 : make_list.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : Done adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 2859808244            ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    14 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
      2.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      7.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      9.: eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      10.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      11.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:25 : Added correlation to the product-TFG make_list.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:25 : Chose (after CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 2859808244            ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    14 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
      2.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      7.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      9.: eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      10.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      11.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:25 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:25 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:25 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial5-prove4...</MSG>
<MSG>0:26 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:26 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:26 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial0-prove14...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:33 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:33 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:33 : make_list.A2 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:33 : make_list.A2 (d:2, s:0, sp: 10): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:33 : Chosen product-TFG make_list.A2 will be explored later...</MSG>
<MSG>0:33 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG make_list.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A3...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A3...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A3: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : make_list.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A3: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : make_list.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : make_list.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : make_list.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
158669 : not(140275) : BOOL                        : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda93, ite(and(bvule(0, Lambda93), bvule(Lambda93, 4294967295)), false, false)), lambda(Lambda94, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5)))))))), ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5)))))))), ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5)))))))), ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5))))))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140458 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 84215045) )
140287 : 1 { 0x1 +1.0e1025 } : INT                 : 1
164186 : sum_is(140458, 140287) : BOOL             : false
164192 : or(158669, 164186) : BOOL                 : false

ce =
=counter_example_begin z3.ce5 8360db5ea19fd9c5dd899b9142e34f6
=input.spec-%var-arr-1
1 : Lambda93 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda94 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
20 : eq(15, 19) : BOOL
21 : 170 { 0xaa -86 } : BV:8
22 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
25 : eq(15, 24) : BOOL
26 : 53 { 0x35 } : BV:8
27 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
28 : eq(15, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
31 : eq(15, 30) : BOOL
32 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
33 : eq(15, 32) : BOOL
34 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
35 : eq(15, 34) : BOOL
36 : 244 { 0xf4 -12 } : BV:8
37 : 5 { 0x5 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 18, 38) : BV:8
40 : ite(31, 18, 39) : BV:8
41 : ite(28, 29, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 13, 14) : BV:32
48 : eq(47, 16) : BOOL
49 : eq(47, 19) : BOOL
50 : eq(47, 22) : BOOL
51 : eq(47, 24) : BOOL
52 : eq(47, 27) : BOOL
53 : eq(47, 30) : BOOL
54 : eq(47, 32) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 18, 56) : BV:8
58 : ite(53, 18, 57) : BV:8
59 : ite(52, 29, 58) : BV:8
60 : ite(51, 26, 59) : BV:8
61 : ite(50, 18, 60) : BV:8
62 : ite(49, 21, 61) : BV:8
63 : ite(48, 18, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 13, 14) : BV:32
66 : eq(65, 16) : BOOL
67 : eq(65, 19) : BOOL
68 : eq(65, 22) : BOOL
69 : eq(65, 24) : BOOL
70 : eq(65, 27) : BOOL
71 : eq(65, 30) : BOOL
72 : eq(65, 32) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 18, 74) : BV:8
76 : ite(71, 18, 75) : BV:8
77 : ite(70, 29, 76) : BV:8
78 : ite(69, 26, 77) : BV:8
79 : ite(68, 18, 78) : BV:8
80 : ite(67, 21, 79) : BV:8
81 : ite(66, 18, 80) : BV:8
82 : bvadd(13, 14) : BV:32
83 : eq(82, 16) : BOOL
84 : eq(82, 19) : BOOL
85 : eq(82, 22) : BOOL
86 : eq(82, 24) : BOOL
87 : eq(82, 27) : BOOL
88 : eq(82, 30) : BOOL
89 : eq(82, 32) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 18, 91) : BV:8
93 : ite(88, 18, 92) : BV:8
94 : ite(87, 29, 93) : BV:8
95 : ite(86, 26, 94) : BV:8
96 : ite(85, 18, 95) : BV:8
97 : ite(84, 21, 96) : BV:8
98 : ite(83, 18, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : lambda(10, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(9, 100) : MAP[BV:32 -> BV:32]
102 : sym_const(101) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda96 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda97 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
20 : eq(15, 19) : BOOL
21 : 170 { 0xaa -86 } : BV:8
22 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
25 : eq(15, 24) : BOOL
26 : 53 { 0x35 } : BV:8
27 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
28 : eq(15, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
31 : eq(15, 30) : BOOL
32 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
33 : eq(15, 32) : BOOL
34 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
35 : eq(15, 34) : BOOL
36 : 244 { 0xf4 -12 } : BV:8
37 : 5 { 0x5 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 18, 38) : BV:8
40 : ite(31, 18, 39) : BV:8
41 : ite(28, 29, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 13, 14) : BV:32
48 : eq(47, 16) : BOOL
49 : eq(47, 19) : BOOL
50 : eq(47, 22) : BOOL
51 : eq(47, 24) : BOOL
52 : eq(47, 27) : BOOL
53 : eq(47, 30) : BOOL
54 : eq(47, 32) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 18, 56) : BV:8
58 : ite(53, 18, 57) : BV:8
59 : ite(52, 29, 58) : BV:8
60 : ite(51, 26, 59) : BV:8
61 : ite(50, 18, 60) : BV:8
62 : ite(49, 21, 61) : BV:8
63 : ite(48, 18, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 13, 14) : BV:32
66 : eq(65, 16) : BOOL
67 : eq(65, 19) : BOOL
68 : eq(65, 22) : BOOL
69 : eq(65, 24) : BOOL
70 : eq(65, 27) : BOOL
71 : eq(65, 30) : BOOL
72 : eq(65, 32) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 18, 74) : BV:8
76 : ite(71, 18, 75) : BV:8
77 : ite(70, 29, 76) : BV:8
78 : ite(69, 26, 77) : BV:8
79 : ite(68, 18, 78) : BV:8
80 : ite(67, 21, 79) : BV:8
81 : ite(66, 18, 80) : BV:8
82 : bvadd(13, 14) : BV:32
83 : eq(82, 16) : BOOL
84 : eq(82, 19) : BOOL
85 : eq(82, 22) : BOOL
86 : eq(82, 24) : BOOL
87 : eq(82, 27) : BOOL
88 : eq(82, 30) : BOOL
89 : eq(82, 32) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 18, 91) : BV:8
93 : ite(88, 18, 92) : BV:8
94 : ite(87, 29, 93) : BV:8
95 : ite(86, 26, 94) : BV:8
96 : ite(85, 18, 95) : BV:8
97 : ite(84, 21, 96) : BV:8
98 : ite(83, 18, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : lambda(10, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(9, 100) : MAP[BV:32 -> BV:32]
102 : sym_const(101) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda73 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
11 : eq(6, 10) : BOOL
12 : 170 { 0xaa -86 } : BV:8
13 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
16 : eq(6, 15) : BOOL
17 : 53 { 0x35 } : BV:8
18 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
19 : eq(6, 18) : BOOL
20 : 117 { 0x75 } : BV:8
21 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
22 : eq(6, 21) : BOOL
23 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
24 : eq(6, 23) : BOOL
25 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
26 : eq(6, 25) : BOOL
27 : 244 { 0xf4 -12 } : BV:8
28 : 5 { 0x5 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 9, 29) : BV:8
31 : ite(22, 9, 30) : BV:8
32 : ite(19, 20, 31) : BV:8
33 : ite(16, 17, 32) : BV:8
34 : ite(14, 9, 33) : BV:8
35 : ite(11, 12, 34) : BV:8
36 : ite(8, 9, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 4, 5) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 10) : BOOL
41 : eq(38, 13) : BOOL
42 : eq(38, 15) : BOOL
43 : eq(38, 18) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 9, 47) : BV:8
49 : ite(44, 9, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 9, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : ite(39, 9, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 4, 5) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 13) : BOOL
60 : eq(56, 15) : BOOL
61 : eq(56, 18) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 9, 65) : BV:8
67 : ite(62, 9, 66) : BV:8
68 : ite(61, 20, 67) : BV:8
69 : ite(60, 17, 68) : BV:8
70 : ite(59, 9, 69) : BV:8
71 : ite(58, 12, 70) : BV:8
72 : ite(57, 9, 71) : BV:8
73 : bvadd(4, 5) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 10) : BOOL
76 : eq(73, 13) : BOOL
77 : eq(73, 15) : BOOL
78 : eq(73, 18) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 9, 82) : BV:8
84 : ite(79, 9, 83) : BV:8
85 : ite(78, 20, 84) : BV:8
86 : ite(77, 17, 85) : BV:8
87 : ite(76, 9, 86) : BV:8
88 : ite(75, 12, 87) : BV:8
89 : ite(74, 9, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform15 : BV:32
4 : Lambda98 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda99 : BV:32
7 : 574694591 { 0x224124bf +1.50893390e197 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda74 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
11 : eq(6, 10) : BOOL
12 : 170 { 0xaa -86 } : BV:8
13 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
16 : eq(6, 15) : BOOL
17 : 53 { 0x35 } : BV:8
18 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
19 : eq(6, 18) : BOOL
20 : 117 { 0x75 } : BV:8
21 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
22 : eq(6, 21) : BOOL
23 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
24 : eq(6, 23) : BOOL
25 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
26 : eq(6, 25) : BOOL
27 : 244 { 0xf4 -12 } : BV:8
28 : 5 { 0x5 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 9, 29) : BV:8
31 : ite(22, 9, 30) : BV:8
32 : ite(19, 20, 31) : BV:8
33 : ite(16, 17, 32) : BV:8
34 : ite(14, 9, 33) : BV:8
35 : ite(11, 12, 34) : BV:8
36 : ite(8, 9, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 4, 5) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 10) : BOOL
41 : eq(38, 13) : BOOL
42 : eq(38, 15) : BOOL
43 : eq(38, 18) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 9, 47) : BV:8
49 : ite(44, 9, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 9, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : ite(39, 9, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 4, 5) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 13) : BOOL
60 : eq(56, 15) : BOOL
61 : eq(56, 18) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 9, 65) : BV:8
67 : ite(62, 9, 66) : BV:8
68 : ite(61, 20, 67) : BV:8
69 : ite(60, 17, 68) : BV:8
70 : ite(59, 9, 69) : BV:8
71 : ite(58, 12, 70) : BV:8
72 : ite(57, 9, 71) : BV:8
73 : bvadd(4, 5) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 10) : BOOL
76 : eq(73, 13) : BOOL
77 : eq(73, 15) : BOOL
78 : eq(73, 18) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 9, 82) : BV:8
84 : ite(79, 9, 83) : BV:8
85 : ite(78, 20, 84) : BV:8
86 : ite(77, 17, 85) : BV:8
87 : ite(76, 9, 86) : BV:8
88 : ite(75, 12, 87) : BV:8
89 : ite(74, 9, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%arr
1 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1256949359 ] -> 5, [ 1256949360; 1256949360 ] -> 244, [ 1256949361; 1256949361 ] -> 53, [ 1256949362; 1256949362 ] -> 117, [ 1256949363; 1256949363 ] -> 170, [ 1256949364; 1728446691 ] -> 5, [ 1728446692; 1728446695 ] -> 0, [ 1728446696; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1256949359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1256949360; 1256949363 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1256949364; 1728446691 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1728446692; 1728446695 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1728446696; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
619445555
=counter_example_end


failcond-expr = or(not(true), sum_is(map_get(input.spec-%var-arr-1, 0), 1)):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
</MSG>
<MSG>0:33 : make_list.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : make_list.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : make_list.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
158669 : not(140275) : BOOL                        : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda93, ite(and(bvule(0, Lambda93), bvule(Lambda93, 4294967295)), false, false)), lambda(Lambda94, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(3, bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5)))))))), ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(2, bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5)))))))), ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(1, bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5)))))))), ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446692), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949363), 170, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446693), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949361), 53, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949362), 117, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446694), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1728446695), 0, ite(eq(bvadd(bvmul(4, Lambda94), 2859808244), 1256949360), 244, 5))))))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140458 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 84215045) )
140287 : 1 { 0x1 +1.0e1025 } : INT                 : 1
164186 : sum_is(140458, 140287) : BOOL             : false
164192 : or(158669, 164186) : BOOL                 : false

ce =
=counter_example_begin z3.ce5 8360db5ea19fd9c5dd899b9142e34f6
=input.spec-%var-arr-1
1 : Lambda93 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda94 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
20 : eq(15, 19) : BOOL
21 : 170 { 0xaa -86 } : BV:8
22 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
25 : eq(15, 24) : BOOL
26 : 53 { 0x35 } : BV:8
27 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
28 : eq(15, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
31 : eq(15, 30) : BOOL
32 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
33 : eq(15, 32) : BOOL
34 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
35 : eq(15, 34) : BOOL
36 : 244 { 0xf4 -12 } : BV:8
37 : 5 { 0x5 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 18, 38) : BV:8
40 : ite(31, 18, 39) : BV:8
41 : ite(28, 29, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 13, 14) : BV:32
48 : eq(47, 16) : BOOL
49 : eq(47, 19) : BOOL
50 : eq(47, 22) : BOOL
51 : eq(47, 24) : BOOL
52 : eq(47, 27) : BOOL
53 : eq(47, 30) : BOOL
54 : eq(47, 32) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 18, 56) : BV:8
58 : ite(53, 18, 57) : BV:8
59 : ite(52, 29, 58) : BV:8
60 : ite(51, 26, 59) : BV:8
61 : ite(50, 18, 60) : BV:8
62 : ite(49, 21, 61) : BV:8
63 : ite(48, 18, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 13, 14) : BV:32
66 : eq(65, 16) : BOOL
67 : eq(65, 19) : BOOL
68 : eq(65, 22) : BOOL
69 : eq(65, 24) : BOOL
70 : eq(65, 27) : BOOL
71 : eq(65, 30) : BOOL
72 : eq(65, 32) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 18, 74) : BV:8
76 : ite(71, 18, 75) : BV:8
77 : ite(70, 29, 76) : BV:8
78 : ite(69, 26, 77) : BV:8
79 : ite(68, 18, 78) : BV:8
80 : ite(67, 21, 79) : BV:8
81 : ite(66, 18, 80) : BV:8
82 : bvadd(13, 14) : BV:32
83 : eq(82, 16) : BOOL
84 : eq(82, 19) : BOOL
85 : eq(82, 22) : BOOL
86 : eq(82, 24) : BOOL
87 : eq(82, 27) : BOOL
88 : eq(82, 30) : BOOL
89 : eq(82, 32) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 18, 91) : BV:8
93 : ite(88, 18, 92) : BV:8
94 : ite(87, 29, 93) : BV:8
95 : ite(86, 26, 94) : BV:8
96 : ite(85, 18, 95) : BV:8
97 : ite(84, 21, 96) : BV:8
98 : ite(83, 18, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : lambda(10, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(9, 100) : MAP[BV:32 -> BV:32]
102 : sym_const(101) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda96 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda97 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
20 : eq(15, 19) : BOOL
21 : 170 { 0xaa -86 } : BV:8
22 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
23 : eq(15, 22) : BOOL
24 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
25 : eq(15, 24) : BOOL
26 : 53 { 0x35 } : BV:8
27 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
28 : eq(15, 27) : BOOL
29 : 117 { 0x75 } : BV:8
30 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
31 : eq(15, 30) : BOOL
32 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
33 : eq(15, 32) : BOOL
34 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
35 : eq(15, 34) : BOOL
36 : 244 { 0xf4 -12 } : BV:8
37 : 5 { 0x5 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 18, 38) : BV:8
40 : ite(31, 18, 39) : BV:8
41 : ite(28, 29, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 13, 14) : BV:32
48 : eq(47, 16) : BOOL
49 : eq(47, 19) : BOOL
50 : eq(47, 22) : BOOL
51 : eq(47, 24) : BOOL
52 : eq(47, 27) : BOOL
53 : eq(47, 30) : BOOL
54 : eq(47, 32) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 18, 56) : BV:8
58 : ite(53, 18, 57) : BV:8
59 : ite(52, 29, 58) : BV:8
60 : ite(51, 26, 59) : BV:8
61 : ite(50, 18, 60) : BV:8
62 : ite(49, 21, 61) : BV:8
63 : ite(48, 18, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 13, 14) : BV:32
66 : eq(65, 16) : BOOL
67 : eq(65, 19) : BOOL
68 : eq(65, 22) : BOOL
69 : eq(65, 24) : BOOL
70 : eq(65, 27) : BOOL
71 : eq(65, 30) : BOOL
72 : eq(65, 32) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 18, 74) : BV:8
76 : ite(71, 18, 75) : BV:8
77 : ite(70, 29, 76) : BV:8
78 : ite(69, 26, 77) : BV:8
79 : ite(68, 18, 78) : BV:8
80 : ite(67, 21, 79) : BV:8
81 : ite(66, 18, 80) : BV:8
82 : bvadd(13, 14) : BV:32
83 : eq(82, 16) : BOOL
84 : eq(82, 19) : BOOL
85 : eq(82, 22) : BOOL
86 : eq(82, 24) : BOOL
87 : eq(82, 27) : BOOL
88 : eq(82, 30) : BOOL
89 : eq(82, 32) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 18, 91) : BV:8
93 : ite(88, 18, 92) : BV:8
94 : ite(87, 29, 93) : BV:8
95 : ite(86, 26, 94) : BV:8
96 : ite(85, 18, 95) : BV:8
97 : ite(84, 21, 96) : BV:8
98 : ite(83, 18, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : lambda(10, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(9, 100) : MAP[BV:32 -> BV:32]
102 : sym_const(101) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda73 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
11 : eq(6, 10) : BOOL
12 : 170 { 0xaa -86 } : BV:8
13 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
16 : eq(6, 15) : BOOL
17 : 53 { 0x35 } : BV:8
18 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
19 : eq(6, 18) : BOOL
20 : 117 { 0x75 } : BV:8
21 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
22 : eq(6, 21) : BOOL
23 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
24 : eq(6, 23) : BOOL
25 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
26 : eq(6, 25) : BOOL
27 : 244 { 0xf4 -12 } : BV:8
28 : 5 { 0x5 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 9, 29) : BV:8
31 : ite(22, 9, 30) : BV:8
32 : ite(19, 20, 31) : BV:8
33 : ite(16, 17, 32) : BV:8
34 : ite(14, 9, 33) : BV:8
35 : ite(11, 12, 34) : BV:8
36 : ite(8, 9, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 4, 5) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 10) : BOOL
41 : eq(38, 13) : BOOL
42 : eq(38, 15) : BOOL
43 : eq(38, 18) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 9, 47) : BV:8
49 : ite(44, 9, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 9, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : ite(39, 9, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 4, 5) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 13) : BOOL
60 : eq(56, 15) : BOOL
61 : eq(56, 18) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 9, 65) : BV:8
67 : ite(62, 9, 66) : BV:8
68 : ite(61, 20, 67) : BV:8
69 : ite(60, 17, 68) : BV:8
70 : ite(59, 9, 69) : BV:8
71 : ite(58, 12, 70) : BV:8
72 : ite(57, 9, 71) : BV:8
73 : bvadd(4, 5) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 10) : BOOL
76 : eq(73, 13) : BOOL
77 : eq(73, 15) : BOOL
78 : eq(73, 18) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 9, 82) : BV:8
84 : ite(79, 9, 83) : BV:8
85 : ite(78, 20, 84) : BV:8
86 : ite(77, 17, 85) : BV:8
87 : ite(76, 9, 86) : BV:8
88 : ite(75, 12, 87) : BV:8
89 : ite(74, 9, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform15 : BV:32
4 : Lambda98 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda99 : BV:32
7 : 574694591 { 0x224124bf +1.50893390e197 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda74 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
11 : eq(6, 10) : BOOL
12 : 170 { 0xaa -86 } : BV:8
13 : 1728446693 { 0x670600e5 +1.4690229e79 } : BV:32
14 : eq(6, 13) : BOOL
15 : 1256949361 { 0x4aeb8671 +1.84004032e22 } : BV:32
16 : eq(6, 15) : BOOL
17 : 53 { 0x35 } : BV:8
18 : 1256949362 { 0x4aeb8672 +1.84004044e22 } : BV:32
19 : eq(6, 18) : BOOL
20 : 117 { 0x75 } : BV:8
21 : 1728446694 { 0x670600e6 +1.4690241e79 } : BV:32
22 : eq(6, 21) : BOOL
23 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
24 : eq(6, 23) : BOOL
25 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
26 : eq(6, 25) : BOOL
27 : 244 { 0xf4 -12 } : BV:8
28 : 5 { 0x5 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 9, 29) : BV:8
31 : ite(22, 9, 30) : BV:8
32 : ite(19, 20, 31) : BV:8
33 : ite(16, 17, 32) : BV:8
34 : ite(14, 9, 33) : BV:8
35 : ite(11, 12, 34) : BV:8
36 : ite(8, 9, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 4, 5) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 10) : BOOL
41 : eq(38, 13) : BOOL
42 : eq(38, 15) : BOOL
43 : eq(38, 18) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 9, 47) : BV:8
49 : ite(44, 9, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 9, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : ite(39, 9, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 4, 5) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 13) : BOOL
60 : eq(56, 15) : BOOL
61 : eq(56, 18) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 9, 65) : BV:8
67 : ite(62, 9, 66) : BV:8
68 : ite(61, 20, 67) : BV:8
69 : ite(60, 17, 68) : BV:8
70 : ite(59, 9, 69) : BV:8
71 : ite(58, 12, 70) : BV:8
72 : ite(57, 9, 71) : BV:8
73 : bvadd(4, 5) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 10) : BOOL
76 : eq(73, 13) : BOOL
77 : eq(73, 15) : BOOL
78 : eq(73, 18) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 9, 82) : BV:8
84 : ite(79, 9, 83) : BV:8
85 : ite(78, 20, 84) : BV:8
86 : ite(77, 17, 85) : BV:8
87 : ite(76, 9, 86) : BV:8
88 : ite(75, 12, 87) : BV:8
89 : ite(74, 9, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%arr
1 : 2859808244 { 0xaa7535f4 -1435159052 -1.91570901e213 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1256949359 ] -> 5, [ 1256949360; 1256949360 ] -> 244, [ 1256949361; 1256949361 ] -> 53, [ 1256949362; 1256949362 ] -> 117, [ 1256949363; 1256949363 ] -> 170, [ 1256949364; 1728446691 ] -> 5, [ 1728446692; 1728446695 ] -> 0, [ 1728446696; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1256949359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1256949360; 1256949363 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1256949364; 1728446691 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1728446692; 1728446695 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1728446696; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1728446692 { 0x670600e4 +1.4690217e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1728446695 { 0x670600e7 +1.4690253e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1256949360 { 0x4aeb8670 +1.84004020e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1256949363 { 0x4aeb8673 +1.84004056e22 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
619445555
=counter_example_end


</MSG>
<MSG>0:33 : Discovered that the correlation was useless for the product-TFG make_list.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : make_list.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : make_list.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : make_list.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : make_list.A1: Propagated 1 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : make_list.A1: Added the 1 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : make_list.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : make_list.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : make_list.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 2859808244            ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:33 : Added correlation to the product-TFG make_list.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (after CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 2859808244            ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:33 : make_list.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:33 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : make_list.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:33 : make_list.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:33 : make_list.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:33 : make_list.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:33 : make_list.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : make_list.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:33 : make_list.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:34 : make_list.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial4-prove4...</MSG>
<MSG>0:34 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:34 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:34 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:34 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:34 : make_list.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:34 : make_list.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:34 : make_list.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 5 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:37 : make_list.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial0-prove6...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:37 : make_list.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:37 : make_list.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:37 : make_list.A1 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:37 : make_list.A1 (d:2, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:37 : product-TFG make_list.A1: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:37 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:37 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:37 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:37 : product-TFG make_list.A1: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:37 : product-TFG make_list.A1 created 1 possibilities in group make_list.A1.B...</MSG>
<MSG>0:37 : Chose (for CE propagation) product-TFG make_list.A1.B1 (d:2, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:37 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:37 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:37 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:37 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:37 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:37 : Identified no common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:37 : Adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:37 : make_list.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:37 : make_list.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:37 : make_list.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:37 : make_list.A1.B1: Propagated 3 out of 7 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:37 : make_list.A1.B1: Added the 3 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:37 : make_list.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:37 : make_list.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:37 : make_list.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : Done adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:37 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:37 : Added correlation to the product-TFG make_list.A1.B1 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:37 : Chose (after CE propagation) product-TFG make_list.A1.B1 (d:2, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:37 : make_list.A1.B1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:37 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:37 : make_list.A1.B1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:37 : make_list.A1.B1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:37 : make_list.A1.B1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:38 : make_list.A1.B1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:38 : make_list.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:38 : make_list.A1.B1 (d:2, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:38 : product-TFG make_list.A1.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:38 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:38 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:38 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:38 : product-TFG make_list.A1.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:38 : product-TFG make_list.A1.B1 created 1 possibilities in group make_list.A1.B1.C...</MSG>
<MSG>0:38 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1 (d:2, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:38 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:38 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:38 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:38 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:38 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:38 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:38 : Adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Adding node L0%0%d_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Propagated 6 out of 9 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Added the 6 propagated CEs at PC L0%0%d_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:38 : make_list.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : make_list.A1.B1.C1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : Done adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:38 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 17, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce457      1.:z3v487.ce461
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:38 : Added correlation to the product-TFG make_list.A1.B1.C1 (d:3, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:38 : Chose (after CE propagation) product-TFG make_list.A2 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:38 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:38 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:38 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:38 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:38 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:38 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:38 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:38 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:38 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:38 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:38 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:38 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:38 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:38 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:38 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:38 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:39 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:39 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:39 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:39 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:39 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5


<MSG>0:39 : make_list.A2 (d:2, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>0:39 : make_list.A2 (d:2, s:0, sp: 10): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:40 : product-TFG make_list.A2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : product-TFG make_list.A2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : product-TFG make_list.A2 created 1 possibilities in group make_list.A2.B...</MSG>
<MSG>0:40 : Chose (for CE propagation) product-TFG make_list.A2.B1 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:40 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:40 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:40 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:40 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:40 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:40 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:40 : Adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:40 : make_list.A2.B1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:40 : make_list.A2.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:40 : make_list.A2.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:40 : make_list.A2.B1: Propagated 3 out of 7 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:40 : make_list.A2.B1: Added the 3 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:40 : make_list.A2.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:40 : make_list.A2.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:40 : make_list.A2.B1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : Done adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:40 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:40 : Added correlation to the product-TFG make_list.A2.B1 (d:2, s:0, sp: 10) and created a correlation entry...</MSG>
<MSG>0:40 : Chose (after CE propagation) product-TFG make_list.A2.B1 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:40 : make_list.A2.B1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:40 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:40 : make_list.A2.B1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:40 : make_list.A2.B1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:40 : make_list.A2.B1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:40 : make_list.A2.B1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:40 : make_list.A2.B1 (d:2, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>0:40 : make_list.A2.B1 (d:2, s:0, sp: 10): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:41 : product-TFG make_list.A2.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:41 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:41 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:41 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:41 : product-TFG make_list.A2.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:41 : product-TFG make_list.A2.B1 created 1 possibilities in group make_list.A2.B1.C...</MSG>
<MSG>0:41 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:41 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:41 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:41 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:41 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:41 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:41 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:41 : Adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Updating dst fcall edge using src fcall edge for toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Adding node L3%6%bbentry_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Propagated 6 out of 9 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Added the 6 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:41 : make_list.A2.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A2.B1.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : Done adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0, 0)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce602      1.:z3v487.ce606
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce602      1.:z3v487.ce606
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    24 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      6.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
      7.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      8.: false                 ==  true
      9.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      10.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      11.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      15.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      17.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      18.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      19.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      20.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      21.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      22.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      23.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:41 : Added correlation to the product-TFG make_list.A2.B1.C1 (d:3, s:0, sp: 10) and created a correlation entry...</MSG>
<MSG>0:41 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:3, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 6 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 17, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce457      1.:z3v487.ce461
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:41 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:41 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:41 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:41 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:41 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:41 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:41 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:41 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:41 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:44 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht8-prove_trivial3-prove5...</MSG>
<MSG>0:44 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:44 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:44 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 5 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht6-prove_trivial1-prove5...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A1.B1.C1 (d:4, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : make_list.A1.B1.C1 (d:4, s:0, sp: 10): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:49 : Chosen product-TFG make_list.A1.B1.C1 will be explored later...</MSG>
<MSG>0:49 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:3, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 6 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0, 0)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce602      1.:z3v487.ce606
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce602      1.:z3v487.ce606
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    24 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      6.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
      7.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      8.: false                 ==  true
      9.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      10.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      11.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      15.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      17.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      18.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      19.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      20.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      21.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      22.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      23.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:49 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht10-prove_trivial4-prove6...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:55 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:55 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:55 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:55 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:10 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht24-prove_trivial4-prove20...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:10 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>1:10 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:10 : make_list.A2.B1.C1 (d:4, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>1:10 : make_list.A2.B1.C1 (d:4, s:0, sp: 30): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>1:10 : Chosen product-TFG make_list.A2.B1.C1 will be explored later...</MSG>
<MSG>1:10 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>1:10 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:4, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:10 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:10 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 8 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 5 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:10 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>1:10 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:10 : make_list.A1.B1.C1 (d:4, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>1:10 : make_list.A1.B1.C1 (d:4, s:0, sp: 10): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:11 : product-TFG make_list.A1.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:11 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:11 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:11 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:11 : product-TFG make_list.A1.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:11 : product-TFG make_list.A1.B1.C1 created 1 possibilities in group make_list.A1.B1.C1.D...</MSG>
<MSG>1:11 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:4, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:11 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>1:11 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>1:11 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:11 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:11 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Adding node L0%0%d_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Adding edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Propagated 16 out of 16 counter-examples across edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Added the 16 propagated CEs at PC L0%0%d_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : make_list.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:11 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 7, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1177      1.:z3.ce1180      2.:z3v487.ce1183      3.:z3.ce1186
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1141      1.:z3.ce1177      2.:z3.ce1180      3.:z3.ce1186
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1180      1.:z3.ce1186
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    7 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:11 : Added correlation to the product-TFG make_list.A1.B1.C1.D1 (d:7, s:0, sp: 10) and created a correlation entry...</MSG>
<MSG>1:11 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:4, s:0, sp: 30) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:11 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:11 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:11 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>1:11 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:11 : make_list.A2.B1.C1 (d:4, s:0, sp: 30): checked newly added edge and inferred invariants...</MSG>
<MSG>1:11 : make_list.A2.B1.C1 (d:4, s:0, sp: 30): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:12 : product-TFG make_list.A2.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:12 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:12 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:12 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:12 : product-TFG make_list.A2.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:12 : product-TFG make_list.A2.B1.C1 created 1 possibilities in group make_list.A2.B1.C1.D...</MSG>
<MSG>1:12 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:4, s:0, sp: 30) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 14 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:12 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>1:12 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>1:12 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:12 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:12 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>1:12 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:12 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Adding node L3%6%bbentry_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Adding edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Propagated 14 out of 14 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Added the 14 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 7, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    28 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      9.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      10.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      11.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      15.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      17.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      18.: false                 ==  true
      19.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      20.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      21.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      23.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      24.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      25.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      26.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      27.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:12 : Added correlation to the product-TFG make_list.A2.B1.C1.D1 (d:7, s:0, sp: 30) and created a correlation entry...</MSG>
<MSG>1:12 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:7, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 15 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 7, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1177      1.:z3.ce1180      2.:z3v487.ce1183      3.:z3.ce1186
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1141      1.:z3.ce1177      2.:z3.ce1180      3.:z3.ce1186
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1180      1.:z3.ce1186
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    7 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:12 : make_list.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>1:12 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:12 : make_list.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:12 : make_list.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:12 : make_list.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:12 : make_list.A1.B1.C1.D1: Relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:12 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:12 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:19 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht7-prove_trivial1-prove6...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1177      1.:z3.ce1180      2.:z3v487.ce1183      3.:z3.ce1186      4.:z3.ce1319      5.:z3.ce1301      6.:z3v487.ce1302
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1141      1.:z3.ce1177      2.:z3.ce1180      3.:z3.ce1186      4.:z3.ce1301
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1180      1.:z3.ce1186
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:19 : make_list.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>1:19 : make_list.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1177      1.:z3.ce1180      2.:z3v487.ce1183      3.:z3.ce1186      4.:z3.ce1319      5.:z3.ce1301      6.:z3v487.ce1302
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1141      1.:z3.ce1177      2.:z3.ce1180      3.:z3.ce1186      4.:z3.ce1301
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1180      1.:z3.ce1186
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:19 : make_list.A1.B1.C1.D1 (d:7, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>1:19 : make_list.A1.B1.C1.D1 (d:7, s:0, sp: 16): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:21 : product-TFG make_list.A1.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:21 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:21 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:21 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:21 : product-TFG make_list.A1.B1.C1.D1: Found 1 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:21 : product-TFG make_list.A1.B1.C1.D1 created 1 possibilities in group make_list.A1.B1.C1.D1.E...</MSG>
<MSG>1:21 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:7, s:0, sp: 16) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 20 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:21 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>1:21 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>1:21 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>1:21 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:21 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>1:21 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:21 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Adding edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Propagated 6 out of 20 counter-examples across edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Added the 6 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:21 : make_list.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:21 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:21 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    3 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1934907996)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce457      1.:z3v487.ce461      2.:z3.ce663      3.:z3v487.ce664      4.:z3.ce643      5.:z3v487.ce644      6.:z3.ce683      7.:z3v487.ce703      8.:z3.ce1576
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3.ce1576
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce644      2.:z3v487.ce723      3.:z3.ce743
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce461      1.:z3v487.ce723
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce461

L0%0%d_Lfor.body%1%fcallEnd: (d:5, s:0, sp: 6)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    2 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce1177      1.:z3.ce1180      2.:z3v487.ce1183      3.:z3.ce1186      4.:z3.ce1319      5.:z3.ce1301      6.:z3v487.ce1302      7.:z3v487.ce1508      8.:z3.ce1541
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1186      1.:z3v487.ce1508
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1141      1.:z3.ce1177      2.:z3.ce1180      3.:z3.ce1186      4.:z3.ce1301
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1180      1.:z3.ce1186
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1186

L0%0%d_Lfor.cond%1%bbentry: (d:4, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce5      1.:z3v487.ce218      2.:z3.ce217      3.:z3.ce235      4.:z3.ce1457      5.:z3v487.ce1462
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3v487.ce1462
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235      3.:z3.ce253
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce217      2.:z3.ce235
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:21 : Added correlation to the product-TFG make_list.A1.B1.C1.D1.E1 (d:11, s:0, sp: 16) and created a correlation entry...</MSG>
<MSG>1:21 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:7, s:0, sp: 30) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 14 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 7, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    28 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      9.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      10.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      11.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      15.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      17.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      18.: false                 ==  true
      19.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      20.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      21.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      23.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      24.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      25.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      26.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      27.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:21 : make_list.A2.B1.C1.D1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>1:21 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:21 : make_list.A2.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:21 : make_list.A2.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:21 : make_list.A2.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:21 : make_list.A2.B1.C1.D1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:21 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:21 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:21 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:23 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>1:23 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:23 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:23 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:23 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:23 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:42 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht28-prove_trivial4-prove24...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:42 : make_list.A2.B1.C1.D1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>1:42 : make_list.A2.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:42 : make_list.A2.B1.C1.D1 (d:7, s:0, sp: 30): checked newly added edge and inferred invariants...</MSG>
<MSG>1:42 : make_list.A2.B1.C1.D1 (d:7, s:0, sp: 54): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:43 : product-TFG make_list.A2.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:43 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:43 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:43 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:43 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:43 : product-TFG make_list.A2.B1.C1.D1: Found 2 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:43 : product-TFG make_list.A2.B1.C1.D1 created 2 possibilities in group make_list.A2.B1.C1.D1.E...</MSG>
<MSG>1:43 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:7, s:0, sp: 54) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 14 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:43 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>1:43 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>1:43 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:43 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:43 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>1:43 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:43 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:43 : make_list.A2.B1.C1.D1.E2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:43 : make_list.A2.B1.C1.D1.E2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:43 : make_list.A2.B1.C1.D1.E2: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:43 : make_list.A2.B1.C1.D1.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:43 : make_list.A2.B1.C1.D1.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:43 : make_list.A2.B1.C1.D1.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Propagated 4 out of 19 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Added the 4 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Finished executing CG's add edge function...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:44 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:44 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 1503266444)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:44 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E2 (d:9, s:0, sp: 54) and created a correlation entry...</MSG>
<MSG>1:44 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E1 (d:7, s:0, sp: 54) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 14 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:44 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>1:44 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>1:44 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:44 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:44 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>1:44 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:44 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E1: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E1: Propagated 4 out of 19 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E1: Added the 4 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:45 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:45 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1503266444)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2186
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2186
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:5, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce2161      8.:z3.ce2225
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce2161
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:4, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce2083      5.:z3.ce2118
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce2118
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:45 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E1 (d:11, s:0, sp: 54) and created a correlation entry...</MSG>
<MSG>1:45 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:9, s:0, sp: 54) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 22 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 1503266444)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:45 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1262      1.:z3.ce1975
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce5      1.:z3.ce1918
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:53 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:53 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:26 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>2:26 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:27 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:27 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:27 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:27 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:28 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:28 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:28 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:28 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:28 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:28 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:39 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:39 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:39 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:39 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4865:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:42 : make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 54): checked newly added edge and inferred invariants...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 55): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:42 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>2:42 : Checking equivalence proof...</MSG>
<MSG>2:48 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3.ce845      3.:z3.ce867      4.:z3v487.ce889      5.:z3v487.ce911      6.:z3v487.ce933      7.:z3.ce2004      8.:z3.ce2250
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce606      1.:z3.ce2004      2.:z3v487.ce2481      3.:z3v487.ce2646
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce602      1.:z3v487.ce606      2.:z3v487.ce889      3.:z3.ce955
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce606      1.:z3v487.ce889
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 31-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 32-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce606

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3v487.ce1259      3.:z3.ce1262      4.:z3v487.ce1613      5.:z3.ce1614      6.:z3.ce1633      7.:z3.ce1975      8.:z3.ce2047      9.:z3v487.ce2285
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1262      1.:z3.ce1975      2.:z3v487.ce2395      3.:z3v487.ce2446      4.:z3v487.ce2531      5.:z3v487.ce2611      6.:z3v487.ce2696
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1253      1.:z3.ce1256      2.:z3.ce1262      3.:z3v487.ce1654      4.:z3.ce1653
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1256      1.:z3.ce1262
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 52-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 53-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 54-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 61-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 62-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 63-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 64-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 65-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 66-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 67-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 68-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, sum_get(map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry), 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1262

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3v487.ce20      2.:z3.ce19      3.:z3.ce41      4.:z3.ce1857      5.:z3.ce1918      6.:z3v487.ce2314
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce5      1.:z3.ce1918      2.:z3v487.ce2360      3.:z3v487.ce2411      4.:z3v487.ce2496      5.:z3v487.ce2576      6.:z3v487.ce2661
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41      3.:z3.ce63
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce5      1.:z3.ce19      2.:z3.ce41
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 26 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 31 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function make_list. 145.21s, query:smt.: 78.1254s (num_starts 302; 0.2587s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 138.187s (num_starts 526; 0.2627s/start)ftmap_run_pointsto_analysis.: 21.9961s (num_starts 705; 0.0312s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 8e-06s (num_starts 9; 0.0000s/start)
prune_dst_memslots.: 1.6e-05s (num_starts 7; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.8e-05s (num_starts 7; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.3e-05s (num_starts 12; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 2.3e-05s (num_starts 12; 0.0000s/start)
get_paths_with_matching_to_pc.: 2.8e-05s (num_starts 11; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 3.6e-05s (num_starts 41; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 4.5e-05s (num_starts 1; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd.: 6.1e-05s (num_starts 1; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart.: 9.2e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000109s (num_starts 4; 0.0000s/start)
remove_complex_bv_exprs.: 0.000122s (num_starts 7; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000162s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart.: 0.000276s (num_starts 5; 0.0001s/start)
prove_trivial.: 0.000279s (num_starts 296; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000313s (num_starts 3; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000313s (num_starts 12; 0.0000s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000357s (num_starts 6; 0.0001s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallEnd.inductive-invariants.: 0.000366s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000406s (num_starts 1; 0.0004s/start)
ce_perform_memory_fuzzing.: 0.000421s (num_starts 350; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000485s (num_starts 76; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000501s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000504s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000508s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000511s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000532s (num_starts 1; 0.0005s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.000552s (num_starts 1; 0.0006s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000561s (num_starts 162; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000607s (num_starts 7; 0.0001s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.00064s (num_starts 183; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 0.000683s (num_starts 766; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000685s (num_starts 7; 0.0001s/start)
compute_bv_bool_eqclass.: 0.000735s (num_starts 7; 0.0001s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000737s (num_starts 99; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000752s (num_starts 526; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000797s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000807s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed;-trivial.: 0.00081s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000812s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed;-trivial.: 0.000815s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000817s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000818s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.000818s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed.: 0.00082s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-trivial.: 0.000822s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000823s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.000824s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000824s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed.: 0.000826s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.000829s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned.: 0.000832s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000833s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.000836s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000845s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned;-trivial.: 0.000847s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000848s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000853s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned.: 0.000857s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000864s (num_starts 1; 0.0009s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.001001s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.001003s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.001008s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.00101s (num_starts 1; 0.0010s/start)
collect_dst_to_src_submap_preds.: 0.001054s (num_starts 526; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001113s (num_starts 1; 0.0011s/start)
get_sprel_map_pair.: 0.001117s (num_starts 81; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001118s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001119s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001124s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.00113s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001136s (num_starts 1; 0.0011s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001194s (num_starts 15; 0.0001s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001202s (num_starts 10; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.: 0.001407s (num_starts 1; 0.0014s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.00148s (num_starts 230; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001497s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-trivial.: 0.001498s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.0015s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001503s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001515s (num_starts 1; 0.0015s/start)
removeMostPromising.: 0.001597s (num_starts 37; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.001601s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.001607s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.00161s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.00162s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess.: 0.001625s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.001636s (num_starts 2; 0.0008s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001736s (num_starts 9; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.001775s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.001778s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed;-trivial.: 0.00178s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-trivial.: 0.001783s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.001785s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.001786s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.001796s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed.: 0.0018s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.00181s (num_starts 2; 0.0009s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.: 0.00184s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001845s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed;-trivial.: 0.001851s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001855s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001855s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed;-trivial.: 0.00186s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001862s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.001864s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.001871s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed.: 0.001872s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed.: 0.00188s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.001883s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.001885s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-trivial.: 0.001889s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.001892s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.001895s (num_starts 1; 0.0019s/start)
tfg_suffixpath_get_expr_helper.: 0.001902s (num_starts 33; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.001953s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-trivial.: 0.001962s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.001967s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00198s (num_starts 2; 0.0010s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.001982s (num_starts 7; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001984s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001985s (num_starts 2; 0.0010s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001999s (num_starts 9; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.002009s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002021s (num_starts 2; 0.0010s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002043s (num_starts 1; 0.0020s/start)
interesting_wp_exprs_apply_trans_funs.: 0.002044s (num_starts 9; 0.0002s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.002047s (num_starts 92; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002073s (num_starts 1; 0.0021s/start)
proof_query_is_trivial_helper.: 0.002076s (num_starts 546; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.002145s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-trivial.: 0.002151s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.002156s (num_starts 2; 0.0011s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002214s (num_starts 1; 0.0022s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002305s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-trivial.: 0.002373s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002374s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002381s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002386s (num_starts 1; 0.0024s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.002389s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.0024s (num_starts 1; 0.0024s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.002441s (num_starts 28; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.: 0.002506s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002568s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear;-trivial.: 0.002577s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002581s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-trivial.: 0.002598s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.0026s (num_starts 1; 0.0026s/start)
parse_yices_model.: 0.002758s (num_starts 1; 0.0028s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.00288s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.002885s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-trivial.: 0.002897s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.002901s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002927s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002929s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.002934s (num_starts 1; 0.0029s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.002937s (num_starts 593; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.002942s (num_starts 1; 0.0029s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.003091s (num_starts 12; 0.0003s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.00327s (num_starts 7; 0.0005s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.003529s (num_starts 108; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.003531s (num_starts 9; 0.0004s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.003565s (num_starts 301; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.003633s (num_starts 19; 0.0002s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.004082s (num_starts 290; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed;-trivial.: 0.004116s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.004123s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.004139s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed.: 0.00415s (num_starts 4; 0.0010s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.004171s (num_starts 405; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.004236s (num_starts 11; 0.0004s/start)
pth_collect_preds_using_atom_func.: 0.004309s (num_starts 66; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.004377s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-trivial.: 0.004385s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004595s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.004606s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed;-trivial.: 0.00481s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.004814s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.004825s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed.: 0.004831s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.004836s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.004841s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.004852s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess.: 0.004858s (num_starts 2; 0.0024s/start)
collect_assumes_around_edge.: 0.004909s (num_starts 12; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005019s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00502s (num_starts 2; 0.0025s/start)
parse_cvc4_model.: 0.00502s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.005032s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed;-trivial.: 0.005034s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.005038s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.005041s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.005049s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned;-trivial.: 0.005049s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.005052s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed.: 0.005055s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.005065s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned.: 0.005074s (num_starts 2; 0.0025s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.005182s (num_starts 98; 0.0001s/start)
get_unrolled_loop_paths_from.: 0.00528s (num_starts 7; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.005341s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed;-trivial.: 0.005352s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.005357s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.005374s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed.: 0.005386s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.005398s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.005412s (num_starts 4; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.005416s (num_starts 2; 0.0027s/start)
proof_query_is_trivial.: 0.005471s (num_starts 526; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.00553s (num_starts 2; 0.0028s/start)
tfg_edge_composition_get_assumes.: 0.005592s (num_starts 66; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-trivial.: 0.005645s (num_starts 4; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.005655s (num_starts 4; 0.0014s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.005784s (num_starts 327; 0.0000s/start)
get_intersected_lr_status.: 0.006009s (num_starts 705; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.006025s (num_starts 593; 0.0000s/start)
expr_is_hidden_reg.: 0.006026s (num_starts 6864; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 0.006387s (num_starts 2; 0.0032s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.0065s (num_starts 4; 0.0016s/start)
construct_linear_combination_exprs.: 0.007653s (num_starts 295; 0.0000s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.007753s (num_starts 6; 0.0013s/start)
expr_is_callee_save_const.: 0.007886s (num_starts 6892; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.007898s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-trivial.: 0.007928s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.00794s (num_starts 6; 0.0013s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.007942s (num_starts 516; 0.0000s/start)
identify_address_taken_local_variables.: 0.007942s (num_starts 3; 0.0026s/start)
generate_aliasing_constraints_from_expr.: 0.008268s (num_starts 1273; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.008514s (num_starts 7; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.008517s (num_starts 4; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.008547s (num_starts 4; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.008562s (num_starts 4; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.008612s (num_starts 4; 0.0022s/start)
set_result_and_counter_example.: 0.008628s (num_starts 302; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess.: 0.008638s (num_starts 4; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.008686s (num_starts 4; 0.0022s/start)
ldr_decomposition.: 0.008934s (num_starts 162; 0.0001s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.008974s (num_starts 9; 0.0010s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.008993s (num_starts 185; 0.0000s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.009013s (num_starts 301; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-trivial.: 0.009168s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.009175s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed;-trivial.: 0.009268s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.00927s (num_starts 1; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown;-trivial.: 0.009274s (num_starts 1; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.009276s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.009276s (num_starts 1; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown.: 0.009286s (num_starts 1; 0.0093s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.009286s (num_starts 706; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.009299s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed.: 0.00931s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed;-trivial.: 0.009423s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.009429s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.009452s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed.: 0.009463s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.009484s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-trivial.: 0.009523s (num_starts 11; 0.0009s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.009605s (num_starts 516; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.009642s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.009677s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.009697s (num_starts 4; 0.0024s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.: 0.009747s (num_starts 2; 0.0049s/start)
graph_with_guessing_sync_preds.: 0.009933s (num_starts 526; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.010214s (num_starts 6; 0.0017s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.010263s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear;-trivial.: 0.0104s (num_starts 4; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.01041s (num_starts 4; 0.0026s/start)
bv_const_ref_map2expr_map.: 0.010524s (num_starts 295; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.010964s (num_starts 301; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011053s (num_starts 5; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.011078s (num_starts 5; 0.0022s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.011573s (num_starts 185; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-trivial.: 0.011846s (num_starts 8; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.011867s (num_starts 8; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-trivial.: 0.012312s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.012322s (num_starts 4; 0.0031s/start)
get_next_potential_correlations.: 0.012375s (num_starts 9; 0.0014s/start)
cg_src_dst_tfg_copy.: 0.012989s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-trivial.: 0.013407s (num_starts 7; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.013419s (num_starts 7; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.013457s (num_starts 7; 0.0019s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.013535s (num_starts 66; 0.0002s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.013575s (num_starts 2; 0.0068s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.013784s (num_starts 66; 0.0002s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.013831s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.014463s (num_starts 6; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.014571s (num_starts 6; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.01462s (num_starts 4; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.014651s (num_starts 4; 0.0037s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.015278s (num_starts 66; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015676s (num_starts 7; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.015717s (num_starts 7; 0.0022s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.015981s (num_starts 6; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.015986s (num_starts 8; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016045s (num_starts 7; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.016186s (num_starts 7; 0.0023s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.016813s (num_starts 9; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.017314s (num_starts 10; 0.0017s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.017578s (num_starts 6290; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018578s (num_starts 8; 0.0023s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.018655s (num_starts 7; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.018745s (num_starts 8; 0.0023s/start)
tfg::get_aliasing_constraints_for_edge.: 0.021213s (num_starts 241; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.02123s (num_starts 2660; 0.0000s/start)
determinize_value_expr_map.: 0.021458s (num_starts 20193; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.022572s (num_starts 4; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.022576s (num_starts 4; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.022614s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess.: 0.022637s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-trivial.: 0.022987s (num_starts 8; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.023008s (num_starts 8; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.023992s (num_starts 8; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.02418s (num_starts 8; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-trivial.: 0.024271s (num_starts 8; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed.: 0.024375s (num_starts 8; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.024461s (num_starts 3; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.024479s (num_starts 3; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-trivial.: 0.02517s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.025188s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.025568s (num_starts 10; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.02563s (num_starts 10; 0.0026s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-trivial.: 0.025925s (num_starts 20; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026717s (num_starts 12; 0.0022s/start)
tfg::populate_loc_definedness.post_dfa.: 0.0268s (num_starts 706; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.027104s (num_starts 14; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.027183s (num_starts 14; 0.0019s/start)
graph_locs_add_exvregs_for_edge.: 0.027209s (num_starts 5362; 0.0000s/start)
simplify_bv_add_atomic.: 0.02722s (num_starts 1218; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.027303s (num_starts 14; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.027379s (num_starts 14; 0.0020s/start)
get_sprel_map_pair_at_pc.: 0.027436s (num_starts 230; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.027477s (num_starts 14; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.027551s (num_starts 14; 0.0020s/start)
graph_locs_add_local_vars_for_edge.: 0.028022s (num_starts 5362; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.028371s (num_starts 10; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.028434s (num_starts 10; 0.0028s/start)
predicate_canonicalized.: 0.029556s (num_starts 295; 0.0001s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.030308s (num_starts 7; 0.0043s/start)
expr_represents_llvm_undef.: 0.030415s (num_starts 6906; 0.0000s/start)
lr_status_meet.: 0.030687s (num_starts 5251; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.03152s (num_starts 2660; 0.0000s/start)
compute_sprel_relations.: 0.031585s (num_starts 705; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.032079s (num_starts 16; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.032224s (num_starts 16; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.032275s (num_starts 16; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.032378s (num_starts 16; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.032528s (num_starts 16; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.032571s (num_starts 16; 0.0020s/start)
graph_locs_add_all_exvregs.: 0.032621s (num_starts 705; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.033233s (num_starts 705; 0.0000s/start)
graph_locs_add_all_specvars.: 0.033548s (num_starts 705; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.033801s (num_starts 4; 0.0085s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.033823s (num_starts 4; 0.0085s/start)
gen_pred_from_coeff_row.simplify.: 0.033848s (num_starts 295; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.033908s (num_starts 4; 0.0085s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.033955s (num_starts 4; 0.0085s/start)
get_lr_status_for_loc_ids.: 0.034001s (num_starts 1425; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.034762s (num_starts 14; 0.0025s/start)
propagate_sprels.: 0.034858s (num_starts 705; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.035067s (num_starts 14; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.037489s (num_starts 14; 0.0027s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.037753s (num_starts 18; 0.0021s/start)
ldr_decompose_and_linear_solve.: 0.038241s (num_starts 162; 0.0002s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.038446s (num_starts 7; 0.0055s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.03902s (num_starts 7; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.041238s (num_starts 21; 0.0020s/start)
bv_linear_solve.: 0.041738s (num_starts 162; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.041754s (num_starts 13; 0.0032s/start)
sp_version_relations_val_t::meet.: 0.041938s (num_starts 70453; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.04229s (num_starts 26; 0.0016s/start)
query:bv_solve.: 0.042651s (num_starts 162; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.043333s (num_starts 10; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.043432s (num_starts 10; 0.0043s/start)
graph_to_stream.: 0.043792s (num_starts 4; 0.0109s/start)
def_analysis::xfer_and_meet.: 0.04412s (num_starts 5371; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.04647s (num_starts 6; 0.0077s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.047511s (num_starts 6; 0.0079s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.048241s (num_starts 22; 0.0022s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.048626s (num_starts 22; 0.0022s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.049854s (num_starts 5371; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.050907s (num_starts 17; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.051508s (num_starts 25; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.054584s (num_starts 23; 0.0024s/start)
bv_solve_returning_intermediate_structures.: 0.055299s (num_starts 162; 0.0003s/start)
get_unrolled_paths_from.: 0.056121s (num_starts 55; 0.0010s/start)
graph_locs_add_all_llvmvars.: 0.056306s (num_starts 705; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-trivial.: 0.058219s (num_starts 26; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-trivial.: 0.060027s (num_starts 26; 0.0023s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.061755s (num_starts 908; 0.0001s/start)
create_closure_matrix.: 0.062488s (num_starts 8357; 0.0000s/start)
bvsolve_cache_query.miss1.: 0.064159s (num_starts 162; 0.0004s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.064436s (num_starts 763; 0.0001s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.064977s (num_starts 6; 0.0108s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.065793s (num_starts 14; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.066295s (num_starts 14; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.066743s (num_starts 27; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.066767s (num_starts 21; 0.0032s/start)
bvsolve_cache_query.: 0.067236s (num_starts 162; 0.0004s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.067369s (num_starts 7227; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-trivial.: 0.070749s (num_starts 24; 0.0029s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.072013s (num_starts 5370; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.072179s (num_starts 1106; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.073177s (num_starts 1040; 0.0001s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.073702s (num_starts 47; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.073794s (num_starts 25; 0.0030s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.073896s (num_starts 47; 0.0016s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.07584s (num_starts 24; 0.0032s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.078733s (num_starts 50; 0.0016s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.08103s (num_starts 40; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082013s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082032s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082041s (num_starts 1; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.082054s (num_starts 1; 0.0821s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond.: 0.08206s (num_starts 1; 0.0821s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.08207s (num_starts 1; 0.0821s/start)
populate_simplified_to_state.: 0.082485s (num_starts 706; 0.0001s/start)
collect_aliasing_constraints_around_path_helper.: 0.083588s (num_starts 269; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.084523s (num_starts 40; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08484s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084855s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084865s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.084876s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess.: 0.084884s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.084894s (num_starts 1; 0.0849s/start)
collect_aliasing_constraints_around_path.: 0.08551s (num_starts 175; 0.0005s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.086439s (num_starts 11; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-trivial.: 0.088423s (num_starts 36; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088559s (num_starts 1; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08857s (num_starts 1; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088577s (num_starts 1; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.088587s (num_starts 1; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess.: 0.088591s (num_starts 1; 0.0886s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.088601s (num_starts 1; 0.0886s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.089211s (num_starts 301; 0.0003s/start)
gen_pred_from_coeff_row.: 0.090642s (num_starts 295; 0.0003s/start)
solve_for_bv_points.: 0.091019s (num_starts 162; 0.0006s/start)
compute_preds_for_bv_points.: 0.092461s (num_starts 75; 0.0012s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.092898s (num_starts 98; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09388s (num_starts 1; 0.0939s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.093892s (num_starts 1; 0.0939s/start)
counter_example_satisfies_preds.: 0.094251s (num_starts 1176; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098124s (num_starts 1; 0.0981s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.098136s (num_starts 1; 0.0981s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.098344s (num_starts 31; 0.0032s/start)
graph_locs_add_all_indvars.: 0.101845s (num_starts 705; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10511s (num_starts 1; 0.1051s/start)
tfg::collect_assumes_around_edge.: 0.105504s (num_starts 10733; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.108235s (num_starts 36; 0.0030s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallStart.inductive-invariants.: 0.109978s (num_starts 15; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.110666s (num_starts 3; 0.0369s/start)
collect_assumes_around_path_helper.: 0.110839s (num_starts 593; 0.0002s/start)
graph_with_paths::collect_assumes_around_path.: 0.113152s (num_starts 593; 0.0002s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.117472s (num_starts 162; 0.0007s/start)
populate_locid2expr_map.: 0.117598s (num_starts 705; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-trivial.: 0.129908s (num_starts 43; 0.0030s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.135388s (num_starts 593; 0.0002s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.136835s (num_starts 30; 0.0046s/start)
create_sp_version_relations_lattice_at_pc.: 0.14205s (num_starts 8357; 0.0000s/start)
check_node_stability_after_CE_addition.: 0.143743s (num_starts 236; 0.0006s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.144735s (num_starts 2660; 0.0001s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.144847s (num_starts 301; 0.0005s/start)
populate_dominator_and_postdominator_relations.: 0.145543s (num_starts 705; 0.0002s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.14572s (num_starts 5614; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.149087s (num_starts 69; 0.0022s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.160547s (num_starts 6209; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167867s (num_starts 2; 0.0839s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167902s (num_starts 2; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167919s (num_starts 2; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.167953s (num_starts 2; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned.: 0.167964s (num_starts 2; 0.0840s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.167982s (num_starts 2; 0.0840s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.174132s (num_starts 6229; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176112s (num_starts 1; 0.1761s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176123s (num_starts 1; 0.1761s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176134s (num_starts 1; 0.1761s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176141s (num_starts 1; 0.1761s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.176152s (num_starts 1; 0.1762s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.176166s (num_starts 1; 0.1762s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.177572s (num_starts 59; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities..: 0.180579s (num_starts 4; 0.0451s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.180598s (num_starts 4; 0.0451s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.184467s (num_starts 1070; 0.0002s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.185501s (num_starts 1463; 0.0001s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallStart.inductive-invariants.: 0.190052s (num_starts 23; 0.0083s/start)
lhs_set_sort.: 0.192417s (num_starts 230; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193413s (num_starts 2; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193424s (num_starts 2; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.193444s (num_starts 2; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess.: 0.193455s (num_starts 2; 0.0967s/start)
expr_linear_relation_holds::visit.var.: 0.200014s (num_starts 6968; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.206701s (num_starts 2; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.206713s (num_starts 2; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.206734s (num_starts 2; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess.: 0.206746s (num_starts 2; 0.1034s/start)
graph_visit_exprs_and_keys.: 0.207627s (num_starts 705; 0.0003s/start)
compute_expr_eqclasses_at_pc.: 0.209354s (num_starts 7; 0.0299s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.211823s (num_starts 10; 0.0212s/start)
cg_add_node.: 0.213713s (num_starts 10; 0.0214s/start)
tfg::populate_loc_definedness.before_solve.: 0.213786s (num_starts 706; 0.0003s/start)
expr_substitute_using_available_exprs_submap.: 0.226292s (num_starts 2496; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228013s (num_starts 1; 0.2280s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228024s (num_starts 1; 0.2280s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.228041s (num_starts 1; 0.2280s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond.: 0.228048s (num_starts 1; 0.2280s/start)
create_new_corr_graph_edge.new_node.: 0.236422s (num_starts 9; 0.0263s/start)
create_new_corr_graph_edge.: 0.237028s (num_starts 12; 0.0198s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.247927s (num_starts 1; 0.2479s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.247932s (num_starts 1; 0.2479s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24794s (num_starts 1; 0.2479s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.247942s (num_starts 1; 0.2479s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.247952s (num_starts 1; 0.2480s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown.: 0.247963s (num_starts 1; 0.2480s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.247978s (num_starts 1; 0.2480s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.247986s (num_starts 1; 0.2480s/start)
compute_ssa_vars_renaming_map.: 0.249021s (num_starts 705; 0.0004s/start)
populate_simplified_assets.: 0.255605s (num_starts 1412; 0.0002s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-trivial.: 0.26362s (num_starts 122; 0.0022s/start)
populate_transitive_closure.: 0.268938s (num_starts 2149; 0.0001s/start)
graph_visit_exprs.: 0.276574s (num_starts 1409; 0.0002s/start)
tfg::populate_loc_definedness.before_initialize.: 0.276752s (num_starts 706; 0.0004s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.283174s (num_starts 3; 0.0944s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.291478s (num_starts 3; 0.0972s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.29164s (num_starts 3; 0.0972s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.292271s (num_starts 3; 0.0974s/start)
tfg::populate_loc_definedness.: 0.29874s (num_starts 706; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.300527s (num_starts 3; 0.1002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.300687s (num_starts 3; 0.1002s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.30158s (num_starts 593; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 0.306228s (num_starts 1; 0.3062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.306232s (num_starts 1; 0.3062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-all-proof-path-optimizations.: 0.306237s (num_starts 1; 0.3062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.30624s (num_starts 1; 0.3062s/start)
populate_locs_potentially_modified_on_edge.: 0.310245s (num_starts 706; 0.0004s/start)
counter_example_falsifies_preds.: 0.314824s (num_starts 120; 0.0026s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-trivial.: 0.318415s (num_starts 103; 0.0031s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.324166s (num_starts 1; 0.3242s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.33434s (num_starts 1; 0.3343s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 0.355475s (num_starts 1; 0.3555s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 0.355475s (num_starts 1; 0.3555s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 0.355476s (num_starts 1; 0.3555s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 0.355478s (num_starts 1; 0.3555s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363169s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.36317s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.36318s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false.: 0.363187s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 0.365052s (num_starts 1; 0.3651s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 0.365056s (num_starts 1; 0.3651s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 0.365065s (num_starts 1; 0.3651s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 0.36507s (num_starts 1; 0.3651s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.366868s (num_starts 22; 0.0167s/start)
compute_vars_reaching_definitions.: 0.395345s (num_starts 705; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.396472s (num_starts 1; 0.3965s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.396472s (num_starts 1; 0.3965s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.396482s (num_starts 1; 0.3965s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false.: 0.396489s (num_starts 1; 0.3965s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.400152s (num_starts 6290; 0.0001s/start)
counter_example_evaluate_preds.: 0.405856s (num_starts 1296; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410377s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410379s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410384s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410388s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.4104s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false.: 0.410404s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.410414s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon).: 0.410417s (num_starts 1; 0.4104s/start)
evaluate_function_call.: 0.414164s (num_starts 82; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.423149s (num_starts 1; 0.4231s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.423154s (num_starts 1; 0.4232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.423158s (num_starts 1; 0.4232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.423168s (num_starts 1; 0.4232s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate.: 0.423173s (num_starts 1; 0.4232s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.423179s (num_starts 1; 0.4232s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.431688s (num_starts 6290; 0.0001s/start)
graph_ec_apply_trans_funs_helper.0.: 0.457131s (num_starts 1413; 0.0003s/start)
graph_ec_apply_trans_funs_helper.: 0.464169s (num_starts 1422; 0.0003s/start)
query:convert_from_z3.: 0.46478s (num_starts 12225; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.46652s (num_starts 2; 0.2333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.466543s (num_starts 2; 0.2333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 0.466586s (num_starts 2; 0.2333s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned.: 0.466599s (num_starts 2; 0.2333s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.468242s (num_starts 1422; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.469028s (num_starts 1; 0.4690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.469034s (num_starts 1; 0.4690s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.469037s (num_starts 1; 0.4690s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.469047s (num_starts 1; 0.4690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate.: 0.469051s (num_starts 1; 0.4691s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.469059s (num_starts 1; 0.4691s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.47005s (num_starts 1403; 0.0003s/start)
computeWP_for_pred_across_ec.: 0.474915s (num_starts 1403; 0.0003s/start)
query:convert_to_z3.: 0.495004s (num_starts 12225; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.502034s (num_starts 3; 0.1673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.502063s (num_starts 3; 0.1674s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.504846s (num_starts 1; 0.5048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.504851s (num_starts 1; 0.5049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.504854s (num_starts 1; 0.5049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.506841s (num_starts 2; 0.2534s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned.: 0.506854s (num_starts 2; 0.2534s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.506875s (num_starts 2; 0.2534s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.510849s (num_starts 6290; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.515381s (num_starts 1; 0.5154s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.515383s (num_starts 1; 0.5154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.515386s (num_starts 1; 0.5154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.515388s (num_starts 1; 0.5154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.515396s (num_starts 1; 0.5154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false.: 0.515399s (num_starts 1; 0.5154s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.515405s (num_starts 1; 0.5154s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.51595s (num_starts 2; 0.2580s/start)
populate_branch_affecting_locs.: 0.530978s (num_starts 706; 0.0008s/start)
avail_exprs_create_submap.: 0.531436s (num_starts 18870; 0.0000s/start)
tfg_relax_pointsto_vals_on_edge.: 0.544471s (num_starts 61; 0.0089s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.545237s (num_starts 593; 0.0009s/start)
edge_composition_apply_trans_funs_on_pred.: 0.549168s (num_starts 526; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.550538s (num_starts 1; 0.5505s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.550538s (num_starts 1; 0.5505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.550543s (num_starts 1; 0.5505s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.550543s (num_starts 1; 0.5505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.550558s (num_starts 1; 0.5506s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false.: 0.550564s (num_starts 1; 0.5506s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.550575s (num_starts 1; 0.5506s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon).: 0.552987s (num_starts 2; 0.2765s/start)
propagate_nodece_across_edge.: 0.564057s (num_starts 74; 0.0076s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.568767s (num_starts 706; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.568776s (num_starts 1; 0.5688s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.568779s (num_starts 1; 0.5688s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.568794s (num_starts 1; 0.5688s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false.: 0.568798s (num_starts 1; 0.5688s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.621095s (num_starts 3; 0.2070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.621146s (num_starts 3; 0.2070s/start)
put_smtlib_string_in_file.: 0.63141s (num_starts 604; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.634945s (num_starts 1; 0.6349s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.634956s (num_starts 1; 0.6350s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.634961s (num_starts 1; 0.6350s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640462s (num_starts 1; 0.6405s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640468s (num_starts 1; 0.6405s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640471s (num_starts 1; 0.6405s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.640651s (num_starts 5; 0.1281s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned.: 0.640671s (num_starts 5; 0.1281s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.642282s (num_starts 3; 0.2141s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed.: 0.642292s (num_starts 3; 0.2141s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.642312s (num_starts 3; 0.2141s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.642841s (num_starts 1; 0.6428s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.642842s (num_starts 1; 0.6428s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.642857s (num_starts 1; 0.6429s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false.: 0.642863s (num_starts 1; 0.6429s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.645348s (num_starts 7; 0.0922s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.64722s (num_starts 41; 0.0158s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.649293s (num_starts 224; 0.0029s/start)
graph_identify_back_edges.: 0.664939s (num_starts 5948; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682552s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682558s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.68256s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.682574s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate.: 0.68258s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.682587s (num_starts 1; 0.6826s/start)
graph_identify_natural_loops.: 0.69495s (num_starts 5948; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695583s (num_starts 1; 0.6956s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695592s (num_starts 1; 0.6956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695598s (num_starts 1; 0.6956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.697516s (num_starts 3; 0.2325s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned.: 0.697525s (num_starts 3; 0.2325s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.69754s (num_starts 3; 0.2325s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 0.719276s (num_starts 1; 0.7193s/start)
decide_hoare_triple_helper;-trivial.: 0.721655s (num_starts 296; 0.0024s/start)
find_dominators.: 0.729806s (num_starts 7358; 0.0001s/start)
compute_z3_expr.: 0.733955s (num_starts 12527; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.759632s (num_starts 2; 0.3798s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.759692s (num_starts 2; 0.3798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 0.773996s (num_starts 24; 0.0322s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.785896s (num_starts 6290; 0.0001s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.792486s (num_starts 230; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 0.801586s (num_starts 1; 0.8016s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.841626s (num_starts 3; 0.2805s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 0.841774s (num_starts 3; 0.2806s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.849026s (num_starts 4; 0.2123s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.849267s (num_starts 4; 0.2123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 0.852599s (num_starts 18; 0.0474s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.856205s (num_starts 1; 0.8562s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.856206s (num_starts 1; 0.8562s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.856206s (num_starts 1; 0.8562s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.856224s (num_starts 1; 0.8562s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate.: 0.856233s (num_starts 1; 0.8562s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.856247s (num_starts 1; 0.8562s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.862133s (num_starts 1; 0.8621s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.862143s (num_starts 1; 0.8621s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.862151s (num_starts 1; 0.8622s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.864776s (num_starts 2; 0.4324s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned.: 0.864787s (num_starts 2; 0.4324s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.87832s (num_starts 9; 0.0976s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.884201s (num_starts 1; 0.8842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.884206s (num_starts 1; 0.8842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.88421s (num_starts 1; 0.8842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.884228s (num_starts 1; 0.8842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate.: 0.884232s (num_starts 1; 0.8842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.88424s (num_starts 1; 0.8842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.887603s (num_starts 1; 0.8876s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.88761s (num_starts 1; 0.8876s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.887612s (num_starts 1; 0.8876s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.887628s (num_starts 1; 0.8876s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate.: 0.887632s (num_starts 1; 0.8876s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.887639s (num_starts 1; 0.8876s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.895696s (num_starts 7; 0.1280s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.898638s (num_starts 4; 0.2247s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.898675s (num_starts 4; 0.2247s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.89875s (num_starts 4; 0.2247s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.898895s (num_starts 4; 0.2247s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.900915s (num_starts 4; 0.2252s/start)
collect_inductive_preds_around_path.: 0.912391s (num_starts 526; 0.0017s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.934095s (num_starts 4; 0.2335s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.953073s (num_starts 4; 0.2383s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.01755s (num_starts 1; 1.0176s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.01756s (num_starts 1; 1.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.01756s (num_starts 1; 1.0176s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.02445s (num_starts 230; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 1.02678s (num_starts 5; 0.2054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned.: 1.0268s (num_starts 5; 0.2054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 1.05537s (num_starts 15; 0.0704s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallEnd.inductive-invariants.: 1.07212s (num_starts 8; 0.1340s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.10878s (num_starts 4; 0.2772s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.10882s (num_starts 4; 0.2772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.10883s (num_starts 4; 0.2772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 1.1118s (num_starts 8; 0.1390s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear.: 1.11182s (num_starts 8; 0.1390s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 1.11187s (num_starts 8; 0.1390s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.13369s (num_starts 1; 1.1337s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.13369s (num_starts 1; 1.1337s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1337s (num_starts 1; 1.1337s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1337s (num_starts 1; 1.1337s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.13372s (num_starts 1; 1.1337s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false.: 1.13372s (num_starts 1; 1.1337s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.13373s (num_starts 1; 1.1337s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon).: 1.13373s (num_starts 1; 1.1337s/start)
tfg_preprocess.dst.ind.make_list.: 1.14404s (num_starts 703; 0.0016s/start)
tfg::tfg_preprocess.: 1.14615s (num_starts 703; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.15287s (num_starts 5; 0.2306s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.15297s (num_starts 5; 0.2306s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 1.15307s (num_starts 5; 0.2306s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 1.15321s (num_starts 5; 0.2306s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 1.1566s (num_starts 3; 0.3855s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17778s (num_starts 5; 0.2356s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17783s (num_starts 5; 0.2356s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.17793s (num_starts 5; 0.2356s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned.: 1.19144s (num_starts 12; 0.0993s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20037s (num_starts 1; 1.2004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2116s (num_starts 2; 0.6058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.21167s (num_starts 2; 0.6058s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 1.23171s (num_starts 6290; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 1.24173s (num_starts 22; 0.0564s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 1.24408s (num_starts 2976; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.24681s (num_starts 6; 0.2078s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 1.25059s (num_starts 2976; 0.0004s/start)
do_ssa_transformation.: 1.30311s (num_starts 705; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess.: 1.31811s (num_starts 30; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.32744s (num_starts 5; 0.2655s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.32747s (num_starts 5; 0.2655s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 1.33942s (num_starts 13; 0.1030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear.: 1.33947s (num_starts 13; 0.1030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.35835s (num_starts 1; 1.3583s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.35835s (num_starts 1; 1.3584s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.35835s (num_starts 1; 1.3584s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.35837s (num_starts 1; 1.3584s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false.: 1.35837s (num_starts 1; 1.3584s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.35838s (num_starts 1; 1.3584s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 1.36352s (num_starts 4; 0.3409s/start)
compute_lr_status_for_expr.: 1.37799s (num_starts 4858; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.43249s (num_starts 6; 0.2387s/start)
query:simplify-z3.: 1.4433s (num_starts 24590; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 1.45029s (num_starts 16; 0.0906s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 1.51673s (num_starts 2; 0.7584s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.51974s (num_starts 7; 0.2171s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond.: 1.51998s (num_starts 7; 0.2171s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.53829s (num_starts 9; 0.1709s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57104s (num_starts 2; 0.7855s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57106s (num_starts 2; 0.7855s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57107s (num_starts 2; 0.7855s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 1.57369s (num_starts 5; 0.3147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear.: 1.57371s (num_starts 5; 0.3147s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 1.57374s (num_starts 5; 0.3147s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.: 1.60956s (num_starts 1; 1.6096s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 1.62161s (num_starts 5; 0.3243s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 1.62161s (num_starts 5; 0.3243s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-all-proof-path-optimizations.: 1.62163s (num_starts 5; 0.3243s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 1.62165s (num_starts 5; 0.3243s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.64416s (num_starts 7; 0.2349s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.64463s (num_starts 7; 0.2349s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 1.64773s (num_starts 45; 0.0366s/start)
compute_regions.: 1.67313s (num_starts 5948; 0.0003s/start)
compute_new_lr_status_on_locs.: 1.67902s (num_starts 6290; 0.0003s/start)
add_fresh_counterexample_at_pc_and_propagate.: 1.68452s (num_starts 133; 0.0127s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.68818s (num_starts 455; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.70608s (num_starts 5; 0.3412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.70638s (num_starts 5; 0.3413s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 1.70649s (num_starts 5; 0.3413s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 1.70658s (num_starts 5; 0.3413s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.72322s (num_starts 4; 0.4308s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.72325s (num_starts 4; 0.4308s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.72327s (num_starts 4; 0.4308s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80443s (num_starts 6; 0.3007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80457s (num_starts 2; 0.9023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80458s (num_starts 2; 0.9023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 1.81505s (num_starts 6; 0.3025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear.: 1.81507s (num_starts 6; 0.3025s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.82974s (num_starts 9; 0.2033s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.83018s (num_starts 9; 0.2034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess.: 1.83152s (num_starts 18; 0.1018s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 1.92575s (num_starts 4; 0.4814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 2.02955s (num_starts 5; 0.4059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown.: 2.02957s (num_starts 5; 0.4059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 2.02961s (num_starts 5; 0.4059s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 2.07474s (num_starts 377; 0.0055s/start)
corr_graph::add_edge().: 2.0758s (num_starts 12; 0.1730s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.08632s (num_starts 9; 0.2318s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 2.12481s (num_starts 27; 0.0787s/start)
check_wfconds_on_edge.: 2.17079s (num_starts 27; 0.0804s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.23669s (num_starts 7; 0.3195s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 2.23716s (num_starts 7; 0.3196s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.25696s (num_starts 5; 0.4514s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon).: 2.25886s (num_starts 6; 0.3765s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 2.3168s (num_starts 12; 0.1931s/start)
corr_graph_add_correlation.: 2.31722s (num_starts 12; 0.1931s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 2.40388s (num_starts 12; 0.2003s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 2.41056s (num_starts 1978; 0.0012s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 2.42159s (num_starts 6; 0.4036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.47792s (num_starts 10; 0.2478s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.47806s (num_starts 10; 0.2478s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.47813s (num_starts 10; 0.2478s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 2.47832s (num_starts 10; 0.2478s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 2.47856s (num_starts 10; 0.2479s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 2.48972s (num_starts 3; 0.8299s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed.: 2.53694s (num_starts 36; 0.0705s/start)
apply_mask_and_overlay_array_constant.: 2.61662s (num_starts 1978; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.6428s (num_starts 8; 0.3304s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.67424s (num_starts 10; 0.2674s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 2.68481s (num_starts 21; 0.1278s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 2.6917s (num_starts 19; 0.1417s/start)
counter_example_translate_on_edge_composition_helper.: 2.76708s (num_starts 1133; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92693s (num_starts 6; 0.4878s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92699s (num_starts 6; 0.4878s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92702s (num_starts 6; 0.4878s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 2.93509s (num_starts 12; 0.2446s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear.: 2.93514s (num_starts 12; 0.2446s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 2.93522s (num_starts 12; 0.2446s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.: 2.96849s (num_starts 2; 1.4842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.00491s (num_starts 3; 1.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.05109s (num_starts 3; 1.0170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.05112s (num_starts 3; 1.0170s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.05113s (num_starts 3; 1.0170s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 3.057s (num_starts 28; 0.1092s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 3.11684s (num_starts 7; 0.4453s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.11844s (num_starts 11; 0.2835s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 3.14391s (num_starts 1; 3.1439s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 3.14391s (num_starts 1; 3.1439s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 3.14392s (num_starts 1; 3.1439s/start)
guarded_predicate_set_and.: 3.17678s (num_starts 301; 0.0106s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 3.20068s (num_starts 51; 0.0628s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 3.40882s (num_starts 6; 0.5681s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown.: 3.40885s (num_starts 6; 0.5681s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 3.40889s (num_starts 6; 0.5681s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.93332s (num_starts 12; 0.3278s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.01291s (num_starts 12; 0.3344s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.01296s (num_starts 12; 0.3344s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.: 4.11874s (num_starts 2; 2.0594s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.20275s (num_starts 6; 0.7005s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 4.20293s (num_starts 6; 0.7005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.2346s (num_starts 4; 1.0586s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.23463s (num_starts 4; 1.0587s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.23464s (num_starts 4; 1.0587s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 4.24891s (num_starts 20; 0.2124s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.51476s (num_starts 15; 0.3010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 4.6008s (num_starts 6; 0.7668s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown.: 4.60082s (num_starts 6; 0.7668s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 4.60086s (num_starts 6; 0.7668s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.61155s (num_starts 7; 0.6588s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.61159s (num_starts 7; 0.6588s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 4.63696s (num_starts 15; 0.3091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear.: 4.63701s (num_starts 15; 0.3091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-all-proof-path-optimizations.: 4.66476s (num_starts 3; 1.5549s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 4.87937s (num_starts 42887; 0.0001s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 5.09263s (num_starts 4; 1.2732s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.50584s (num_starts 5; 1.1012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.50589s (num_starts 5; 1.1012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.50591s (num_starts 5; 1.1012s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.: 5.56661s (num_starts 1; 5.5666s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.60735s (num_starts 16; 0.3505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.60769s (num_starts 16; 0.3505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 5.608s (num_starts 16; 0.3505s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 5.60837s (num_starts 16; 0.3505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 5.63475s (num_starts 17; 0.3315s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown.: 5.63482s (num_starts 17; 0.3315s/start)
check_equivalence_proof.: 5.9246s (num_starts 1; 5.9246s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.9396s (num_starts 9; 0.6600s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 5.93985s (num_starts 9; 0.6600s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 6.13708s (num_starts 20; 0.3069s/start)
decide_hoare_triple.: 6.14921s (num_starts 13; 0.4730s/start)
dst_edge_composition_proves_false.: 6.15473s (num_starts 9; 0.6839s/start)
get_next_dst_edge_composition_to_correlate.: 6.19459s (num_starts 10; 0.6195s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.69323s (num_starts 7; 0.9562s/start)
liveness_analysis_conservative::xfer_and_meet.: 6.85798s (num_starts 5491; 0.0012s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd).: 7.06845s (num_starts 19; 0.3720s/start)
populate_loc_liveness.: 7.15283s (num_starts 706; 0.0101s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 7.23189s (num_starts 6; 1.2053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.25202s (num_starts 6; 1.2087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.25209s (num_starts 6; 1.2087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.25214s (num_starts 6; 1.2087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.25408s (num_starts 15; 0.4836s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 7.31437s (num_starts 67; 0.1092s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 7.32218s (num_starts 36; 0.2034s/start)
check_preds_on_edge_compositions.: 7.37813s (num_starts 32; 0.2306s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.64306s (num_starts 29; 0.2636s/start)
ce_reconcile_sorts_and_values.: 7.91831s (num_starts 353; 0.0224s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.16441s (num_starts 14; 0.5832s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 8.43633s (num_starts 14; 0.6026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 8.43637s (num_starts 14; 0.6026s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart).: 8.54719s (num_starts 35; 0.2442s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 8.62405s (num_starts 3; 2.8747s/start)
tfg_postprocess_after_pointsto_analysis.: 8.69501s (num_starts 705; 0.0123s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 9.23776s (num_starts 15; 0.6159s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 9.2378s (num_starts 15; 0.6159s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 9.30947s (num_starts 60; 0.1552s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.55578s (num_starts 26; 0.3675s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear.: 9.64554s (num_starts 62; 0.1556s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 9.96628s (num_starts 17; 0.5863s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 9.96635s (num_starts 17; 0.5863s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 10.1885s (num_starts 6229; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 10.4044s (num_starts 15; 0.6936s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 10.4047s (num_starts 15; 0.6936s/start)
parse_z3_model.: 10.6282s (num_starts 351; 0.0303s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 10.6853s (num_starts 18; 0.5936s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 10.6854s (num_starts 18; 0.5936s/start)
read_counter_examples_from_channel.: 10.7214s (num_starts 185; 0.0580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 10.9066s (num_starts 18; 0.6059s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 11.8702s (num_starts 4; 2.9676s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.9752s (num_starts 11; 1.0887s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 12.1461s (num_starts 6229; 0.0019s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 13.1307s (num_starts 45547; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 13.1927s (num_starts 42887; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 13.549s (num_starts 16; 0.8468s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 13.5493s (num_starts 16; 0.8468s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 13.936s (num_starts 42887; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 13.9656s (num_starts 27; 0.5172s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown.: 13.9657s (num_starts 27; 0.5172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 14.8186s (num_starts 45; 0.3293s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown.: 15.7025s (num_starts 64; 0.2454s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 15.7566s (num_starts 6; 2.6261s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 16.3057s (num_starts 29; 0.5623s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 17.2312s (num_starts 27; 0.6382s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown.: 17.2313s (num_starts 27; 0.6382s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 18.0056s (num_starts 51; 0.3531s/start)
expr_do_simplify_using_lhs_set_and_precond.: 18.5644s (num_starts 8464; 0.0022s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 18.9996s (num_starts 7; 2.7142s/start)
ftmap_run_pointsto_analysis.: 21.9961s (num_starts 705; 0.0312s/start)
tfg_run_pointsto_analysis.: 22.0631s (num_starts 705; 0.0313s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 22.9059s (num_starts 52; 0.4405s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd).: 22.9285s (num_starts 151; 0.1518s/start)
decide_hoare_triple_helper;per-query-type;linear.: 23.0582s (num_starts 121; 0.1906s/start)
tfg_populate_structs_after_ssa_construction.: 23.2683s (num_starts 705; 0.0330s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 25.0976s (num_starts 705; 0.0356s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-all-proof-path-optimizations.: 25.7156s (num_starts 42; 0.6123s/start)
decide_hoare_triple_helper;-all-proof-path-optimizations.: 25.7177s (num_starts 42; 0.6123s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart).: 25.8674s (num_starts 147; 0.1760s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 27.452s (num_starts 15; 1.8301s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 27.4522s (num_starts 15; 1.8301s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 27.4523s (num_starts 15; 1.8302s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 27.4526s (num_starts 15; 1.8302s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 27.4529s (num_starts 15; 1.8302s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned.: 27.5131s (num_starts 41; 0.6711s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 27.9893s (num_starts 4; 6.9973s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 30.305s (num_starts 19; 1.5950s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 30.3911s (num_starts 59; 0.5151s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 36.9341s (num_starts 53; 0.6969s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 48.8s (num_starts 66; 0.7394s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry).: 51.9495s (num_starts 67; 0.7754s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 62.8314s (num_starts 154; 0.4080s/start)
query:smt.: 78.1254s (num_starts 302; 0.2587s/start)
spawn_smt_query.: 88.8513s (num_starts 302; 0.2942s/start)
solver_provable.: 99.5667s (num_starts 301; 0.3308s/start)
solver_satisfiable-cache-miss.: 99.6284s (num_starts 302; 0.3299s/start)
solver_satisfiable.: 99.6314s (num_starts 302; 0.3299s/start)
expr_is_provable.: 99.811s (num_starts 301; 0.3316s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 99.8212s (num_starts 301; 0.3316s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 99.8389s (num_starts 301; 0.3317s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 99.8577s (num_starts 301; 0.3318s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 103.061s (num_starts 301; 0.3424s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 103.097s (num_starts 301; 0.3425s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 103.103s (num_starts 301; 0.3425s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 111.721s (num_starts 188; 0.5943s/start)
update_invariant_state_for_edges.: 128.932s (num_starts 12; 10.7443s/start)
cg_check_new_cg_ec.: 129.016s (num_starts 12; 10.7513s/start)
correl_entry_apply.: 129.017s (num_starts 12; 10.7514s/start)
is_expr_equal_using_lhs_set_and_precond.: 133.805s (num_starts 230; 0.5818s/start)
prove.: 133.808s (num_starts 230; 0.5818s/start)
prove_spawn_and_join_helper.: 133.809s (num_starts 230; 0.5818s/start)
expandProductCFG.: 135.225s (num_starts 13; 10.4019s/start)
prove_spawn_and_join.: 135.928s (num_starts 230; 0.5910s/start)
prove_wrapper.proof_query_not_trivial.: 135.979s (num_starts 230; 0.5912s/start)
prove_wrapper.: 136.473s (num_starts 526; 0.2595s/start)
decide_hoare_triple_check_ub.: 137.061s (num_starts 526; 0.2606s/start)
bestFirstSearch.: 137.801s (num_starts 1; 137.8007s/start)
decide_hoare_triple_helper.: 138.187s (num_starts 526; 0.2627s/start)
decide_hoare_triple_with_alias_cons.: 139.88s (num_starts 526; 0.2659s/start)
Time taken for equivalence check.: 143.749s (num_starts 1; 143.7490s/start)

counters:
# of Paths Prunned through CE propagation.: 1
# of assume sat failures for undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry.: 3
# of assume sat failures for undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d.: 26
# of assume sat failures for undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry.: 29
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 1
# of paths enumerated.: 24
# of paths expanded.: 12
# of queries to linear solver.: 162
# of smt-solver-queries.: 302
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_ecs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_to_pcs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_ecs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_to_pcs.: 1
num-backtrackings.: 8
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 4
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 4
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 8
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 8
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 13
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 10
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 12
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 14
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 18
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 24
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 5
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 13
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 32
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 25
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 27
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 21
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 13
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 351
total-correlation-possibilities.: 13
total-correlation-possibilities-mod-lsprels.: 13
total-correlations-explored.: 13

flags:
dst-aloc.: 0
dst-edges.: 9
dst-nodes.: 9
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 6
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 7
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 13
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 31
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 26
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 21
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 5
final-CG-num-invariants.: 41
final-CG-super-edges.: 0
src-edges.: 6
src-nodes.: 6
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 109.60
final-CG-time-to-total-time-ratio.: 0.80
query-time-to-total-time-ratio.: 0.55

Context stats:
exprs: count: 304472
sorts: count: 22105
num_proof_queries: 230
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	125469
	        hit ratio:	0.936207
m_simplify_solver:
	----------- total:	34732
	        hit ratio:	0.643959
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	12288
	        hit ratio:	0.811768
m_z3_solver_substitution:
	----------- total:	12365
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	12366
	        hit ratio:	0
m_is_expr_not_equal_syntactic:
	----------- total:	338
	        hit ratio:	0.997041
m_expr_size:
	----------- total:	74038
	        hit ratio:	0.819039
m_contains_only_constants_or_sp_versions:
	----------- total:	2943
	        hit ratio:	0.650017
m_expr_evaluates_to_constant_visitor:
	----------- total:	359820
	        hit ratio:	0.567028
m_sort_dfa_canonicalize:
	----------- total:	1140438
	        hit ratio:	0.990353
m_expr_convert_to_iexpr:
	----------- total:	12715
	        hit ratio:	0.737161

z3_solver expr_query_cache entry size: 302
	----------- total:	302
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[  24.5700,   42.0353) (avg.   35.2962)  : 52
[  42.0353,   71.9156) (avg.   55.1829)  : 58
[  71.9156,  123.0360) (avg.   97.0219)  : 33
[ 123.0360,  210.4947) (avg.  165.6415)  : 40
[ 210.4947,  360.1225) (avg.  273.5337)  : 74
[ 360.1225,  616.1114) (avg.  445.2953)  : 30
[ 616.1114, 1054.0671) (avg.  993.3420)  : 6
[1054.0671, 1803.3386) (avg. 1187.1905)  : 2
[1803.3386, 3085.2211) (avg. 2674.2463)  : 6
[3085.2211, 5278.3150) (avg. 5277.3150)  : 1
histogram (number of quantifiers in query)
[ 0,  2) (avg.  0)                       : 1
[ 2,  4) (avg.  0)                       : 0
[ 4,  6) (avg.  0)                       : 0
[ 6,  8) (avg.  6)                       : 79
[ 8, 10) (avg.  9)                       : 194
[10, 12) (avg. 10)                       : 28
[12, 14) (avg.  0)                       : 0
[14, 16) (avg.  0)                       : 0
[16, 18) (avg.  0)                       : 0
[18, 20) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 46, 119) (avg.  46)                    : 1
[119, 192) (avg. 184)                    : 61
[192, 265) (avg. 242)                    : 49
[265, 337) (avg. 288)                    : 7
[337, 410) (avg. 370)                    : 15
[410, 483) (avg. 444)                    : 64
[483, 555) (avg. 498)                    : 39
[555, 628) (avg. 584)                    : 58
[628, 701) (avg. 642)                    : 5
[701, 773) (avg. 751)                    : 3
Top 10 highest time taking queries:
1. [5.277s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.3
2. [3.042s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.4
3. [3.040s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
4. [2.701s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.4
5. [2.533s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.1
6. [2.378s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
7. [2.351s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
8. [1.196s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.3
9. [1.178s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.6
10. [1.040s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2

<MSG>2:48 : Successfully computed equivalence for function: make_list.</MSG>

tfg_edge_expr_wp_fn: num_starts 142 time spent: 0:0:0 [0.004176s total; 0.000029 per start]
tfg_computeWP: num_starts 1343 time spent: 0:0:0 [0.420702s total; 0.000313 per start]
tfg_get_simplified_to_state_for_edge: num_starts 3809 time spent: 0:0:0 [0.008109s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 8630 time spent: 0:0:0 [0.014019s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 12557 time spent: 0:0:0 [0.017628s total; 0.000001 per start]
add_nodeces_at_pc_and_propagate: num_starts 144 time spent: 0:0:1 [1.223854s total; 0.008499 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 24 time spent: 0:0:2 [2.054574s total; 0.085607 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 801 time spent: 0:0:2 [2.698711s total; 0.003369 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 405 time spent: 0:0:0 [0.370990s total; 0.000916 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 650 time spent: 0:0:2 [2.578249s total; 0.003967 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 4595 time spent: 0:0:2 [2.918843s total; 0.000635 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 708 time spent: 0:0:0 [0.077376s total; 0.000109 per start]
tfg_graph_get_vars_written_on_edge: num_starts 650 time spent: 0:0:0 [0.029103s total; 0.000045 per start]
cg_with_rank_add_CE_at_pc: num_starts 236 time spent: 0:0:0 [0.657506s total; 0.002786 per start]
graph_with_ce_add_CE_at_pc: num_starts 143 time spent: 0:0:0 [0.007923s total; 0.000055 per start]
graph_with_guessing_add_CE_at_pc: num_starts 236 time spent: 0:0:0 [0.652869s total; 0.002766 per start]
point_set_add_point_using_CE: num_starts 908 time spent: 0:0:0 [0.196038s total; 0.000216 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 908 time spent: 0:0:0 [0.198639s total; 0.000219 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 168 time spent: 0:0:0 [0.499676s total; 0.002974 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 168 time spent: 0:0:0 [0.296440s total; 0.001765 per start]
expr_label_memlabels_using_memlabel_map: num_starts 62791 time spent: 0:0:1 [1.794187s total; 0.000029 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 2318 time spent: 0:0:0 [0.104804s total; 0.000045 per start]
expr_simplify_solver: num_starts 35079 time spent: 0:0:2 [2.794596s total; 0.000080 per start]
expr_simplify_syntactic: num_starts 35467 time spent: 0:0:14 [14.632023s total; 0.000413 per start]
expr_simplify_select_on_store: num_starts 5051 time spent: 0:0:13 [13.590603s total; 0.002691 per start]
expr_simplify_store_on_store: num_starts 388 time spent: 0:0:0 [0.019485s total; 0.000050 per start]
expr_simplify_using_lhs_set_helper: num_starts 8610 time spent: 0:0:18 [18.676551s total; 0.002169 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 81070 time spent: 0:0:18 [18.599700s total; 0.000229 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 39168 time spent: 0:0:0 [0.162272s total; 0.000004 per start]
expr_simplify_eq: num_starts 3895 time spent: 0:0:0 [0.046659s total; 0.000012 per start]
expr_simplify_or: num_starts 44 time spent: 0:0:0 [0.000057s total; 0.000001 per start]
expr_simplify_and: num_starts 1832 time spent: 0:0:0 [0.011843s total; 0.000006 per start]
expr_simplify_not: num_starts 17 time spent: 0:0:0 [0.000060s total; 0.000004 per start]
expr_simplify_implies: num_starts 473 time spent: 0:0:0 [0.004606s total; 0.000010 per start]
expr_simplify_ite: num_starts 2191 time spent: 0:0:0 [0.101672s total; 0.000046 per start]
canonicalize_expr_tree: num_starts 12464 time spent: 0:0:0 [0.474608s total; 0.000038 per start]
expr_simplify_memalloc_using_memlabel: num_starts 2623 time spent: 0:0:0 [0.010177s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 5964 time spent: 0:0:13 [13.341843s total; 0.002237 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 350 time spent: 0:0:0 [0.569352s total; 0.001627 per start]
memlabels_are_independent: num_starts 996 time spent: 0:0:0 [0.007373s total; 0.000007 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 302 time spent: 0:0:0 [0.168901s total; 0.000559 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 302 time spent: 0:0:0 [0.164365s total; 0.000544 per start]
is_overlapping_atoms_pair_syntactic: num_starts 302 time spent: 0:0:0 [0.144688s total; 0.000479 per start]
is_overlapping_considering_type_constraints: num_starts 302 time spent: 0:0:0 [0.004465s total; 0.000015 per start]
find_offset_wrt_typed_variable_pointer: num_starts 302 time spent: 0:0:0 [0.004422s total; 0.000015 per start]
is_gep_inbounds_offset: num_starts 302 time spent: 0:0:0 [0.002930s total; 0.000010 per start]
get_arithmetic_addsub_atoms: num_starts 52180 time spent: 0:0:0 [0.039736s total; 0.000001 per start]
expr_is_variable_start: num_starts 404 time spent: 0:0:0 [0.000113s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 19512 time spent: 0:0:0 [0.289351s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 19552 time spent: 0:0:0 [0.018181s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 125961 time spent: 0:0:17 [17.991894s total; 0.000143 per start]
expr_do_simplify_helper_cache: num_starts 125961 time spent: 0:0:0 [0.140979s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 5938 time spent: 0:0:0 [0.007074s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 5938 time spent: 0:0:0 [0.018587s total; 0.000003 per start]
evaluate_expr_and_check_bounds: num_starts 4852 time spent: 0:0:3 [3.022624s total; 0.000623 per start]
array_constant_equals: num_starts 177513 time spent: 0:0:0 [0.179994s total; 0.000001 per start]
sort_dfa_canonical: num_starts 1287089 time spent: 0:0:3 [3.116229s total; 0.000002 per start]
expr_convert_to_iexpr: num_starts 12775 time spent: 0:0:2 [2.281153s total; 0.000179 per start]
combo_dfa_xfer_and_meet: num_starts 6229 time spent: 0:0:12 [12.136215s total; 0.001948 per start]
alias_val_xfer_and_meet: num_starts 6229 time spent: 0:0:10 [10.174858s total; 0.001633 per start]
get_sprel_map_from_avail_exprs: num_starts 9001 time spent: 0:0:0 [0.232326s total; 0.000026 per start]
update_memlabels_for_memslot_locs: num_starts 2067 time spent: 0:0:0 [0.007923s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 12580 time spent: 0:0:0 [0.648786s total; 0.000052 per start]
compute_simplified_loc_exprs_for_edge: num_starts 29813 time spent: 0:0:6 [6.986182s total; 0.000234 per start]
compute_locs_definitely_written_on_edge: num_starts 12580 time spent: 0:0:0 [0.005330s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 3616 time spent: 0:0:1 [1.107613s total; 0.000306 per start]
edge_update_memlabel_map_for_mlvars: num_starts 6290 time spent: 0:0:0 [0.795816s total; 0.000127 per start]
add_new_locs_based_on_edge: num_starts 6229 time spent: 0:0:7 [7.895027s total; 0.001267 per start]
expand_locset_to_include_slots_for_memmask: num_starts 5655 time spent: 0:0:0 [0.051369s total; 0.000009 per start]
total: num_starts 1 time spent: 0:2:56 [176.218851s total; 176.218851 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 145.26s.
ftmap_run_pointsto_analysis.: 21.9961s (num_starts 705; 0.0312s/start)s.
EQ Time after pointsto analysis: 123.266s.
EQ Time after pointsto analysis and smt_query: -13.207s.
EQ Time after pointsto analysis and smt_query and bv-solve: -13.2742s.
Equivalence proof found. The programs are equivalent.
