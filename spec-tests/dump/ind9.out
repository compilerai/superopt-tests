argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=ind9.proof
argv[9] = --spec-iospecs=ind9.iospecs
argv[10] = ind9.spec
argv[11] = ind9.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.2678082
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/ind9.c
argv[10] = -o
argv[11] = par_tmpdir/ind9.c.bc.tmp
argv[12] = -m32

/home/indrajit/scratch/tests/eq-test/ind9.c:9:18: warning: implicitly declaring library function 'malloc' with type 'void *(unsigned int)' [-Wimplicit-function-declaration]
    list* node = malloc(sizeof(list));
                 ^
/home/indrajit/scratch/tests/eq-test/ind9.c:9:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'
1 warning generated.
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/ind9.spec.etfg
argv[11] = par_tmpdir/ind9.c.bc
argv[12] = -o
argv[13] = par_tmpdir/ind9.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function make_list</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 110 time spent: 0:0:0 [0.000204s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 135 time spent: 0:0:0 [0.000222s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 1622 time spent: 0:0:0 [0.016539s total; 0.000010 per start]
expr_simplify_solver: num_starts 813 time spent: 0:0:0 [0.041289s total; 0.000051 per start]
expr_simplify_syntactic: num_starts 813 time spent: 0:0:0 [0.331849s total; 0.000408 per start]
expr_simplify_select_on_store: num_starts 14 time spent: 0:0:0 [0.047884s total; 0.003420 per start]
expr_simplify_store_on_store: num_starts 68 time spent: 0:0:0 [0.007311s total; 0.000108 per start]
expr_simplify_using_lhs_set_helper: num_starts 285 time spent: 0:0:0 [0.396785s total; 0.001392 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 2178 time spent: 0:0:0 [0.394906s total; 0.000181 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 284 time spent: 0:0:0 [0.001230s total; 0.000004 per start]
expr_simplify_eq: num_starts 92 time spent: 0:0:0 [0.001227s total; 0.000013 per start]
expr_simplify_or: num_starts 8 time spent: 0:0:0 [0.000009s total; 0.000001 per start]
expr_simplify_not: num_starts 1 time spent: 0:0:0 [0.000004s total; 0.000004 per start]
expr_simplify_ite: num_starts 107 time spent: 0:0:0 [0.004531s total; 0.000042 per start]
canonicalize_expr_tree: num_starts 217 time spent: 0:0:0 [0.005221s total; 0.000024 per start]
expr_simplify_memalloc_using_memlabel: num_starts 156 time spent: 0:0:0 [0.000439s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 34 time spent: 0:0:0 [0.047489s total; 0.001397 per start]
memlabels_are_independent: num_starts 78 time spent: 0:0:0 [0.000148s total; 0.000002 per start]
get_arithmetic_addsub_atoms: num_starts 476 time spent: 0:0:0 [0.000182s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 428 time spent: 0:0:0 [0.006477s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 1569 time spent: 0:0:0 [0.000969s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 4145 time spent: 0:0:0 [0.402251s total; 0.000097 per start]
expr_do_simplify_helper_cache: num_starts 4145 time spent: 0:0:0 [0.003505s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 205 time spent: 0:0:0 [0.000162s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 205 time spent: 0:0:0 [0.000699s total; 0.000003 per start]
array_constant_equals: num_starts 383 time spent: 0:0:0 [0.000704s total; 0.000002 per start]
sort_dfa_canonical: num_starts 154542 time spent: 0:0:1 [1.107618s total; 0.000007 per start]
expr_convert_to_iexpr: num_starts 53 time spent: 0:0:0 [0.006436s total; 0.000121 per start]
combo_dfa_xfer_and_meet: num_starts 105 time spent: 0:0:0 [0.439570s total; 0.004186 per start]
alias_val_xfer_and_meet: num_starts 105 time spent: 0:0:0 [0.308139s total; 0.002935 per start]
get_sprel_map_from_avail_exprs: num_starts 136 time spent: 0:0:0 [0.018000s total; 0.000132 per start]
update_memlabels_for_memslot_locs: num_starts 30 time spent: 0:0:0 [0.000168s total; 0.000006 per start]
populate_gen_and_kill_sets_for_edge: num_starts 210 time spent: 0:0:0 [0.023995s total; 0.000114 per start]
compute_simplified_loc_exprs_for_edge: num_starts 622 time spent: 0:0:0 [0.301773s total; 0.000485 per start]
compute_locs_definitely_written_on_edge: num_starts 210 time spent: 0:0:0 [0.000163s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 150 time spent: 0:0:0 [0.152165s total; 0.001014 per start]
edge_update_memlabel_map_for_mlvars: num_starts 105 time spent: 0:0:0 [0.004165s total; 0.000040 per start]
add_new_locs_based_on_edge: num_starts 105 time spent: 0:0:0 [0.049734s total; 0.000474 per start]
expand_locset_to_include_slots_for_memmask: num_starts 173 time spent: 0:0:0 [0.001172s total; 0.000007 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 0s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.make_list.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.make_list.: 8e-06s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 2.7e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 2.9e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 3.3e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 4.5e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 5.3e-05s (num_starts 1; 0.0001s/start)
main.3.: 9.2e-05s (num_starts 1; 0.0001s/start)
get_lr_status_for_loc_ids.: 0.000115s (num_starts 18; 0.0000s/start)
expr_is_hidden_reg.: 0.000125s (num_starts 162; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000161s (num_starts 2; 0.0001s/start)
expr_is_callee_save_const.: 0.000164s (num_starts 166; 0.0000s/start)
determinize_value_expr_map.: 0.000172s (num_starts 193; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000179s (num_starts 10; 0.0000s/start)
compute_sprel_relations.: 0.000194s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000204s (num_starts 1; 0.0002s/start)
populate_memlabel_map.visit2.calling.compute_lr_status_for_expr.: 0.000213s (num_starts 6; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000224s (num_starts 24; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000262s (num_starts 1; 0.0003s/start)
graph_locs_add_all_specvars.: 0.000264s (num_starts 1; 0.0003s/start)
populate_locid2expr_map.: 0.000276s (num_starts 2; 0.0001s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000335s (num_starts 6; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000354s (num_starts 54; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000384s (num_starts 1; 0.0004s/start)
graph_locs_add_local_vars_for_edge.: 0.000388s (num_starts 54; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000424s (num_starts 1; 0.0004s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000447s (num_starts 2; 0.0002s/start)
lr_status_meet.: 0.000572s (num_starts 132; 0.0000s/start)
expr_represents_llvm_undef.: 0.000652s (num_starts 168; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000687s (num_starts 105; 0.0000s/start)
compute_reachable_memlabels_map.: 0.000913s (num_starts 3; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.000923s (num_starts 1; 0.0009s/start)
sp_version_relations_val_t::meet.: 0.000945s (num_starts 1785; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000948s (num_starts 1; 0.0009s/start)
def_analysis::xfer_and_meet.: 0.001145s (num_starts 108; 0.0000s/start)
populate_transitive_closure.: 0.001251s (num_starts 1; 0.0013s/start)
populate_memlabel_map.visit2.update_callee_memlabels.: 0.00132s (num_starts 6; 0.0002s/start)
graph_with_locs_constructor.src.spec.make_list.: 0.001423s (num_starts 1; 0.0014s/start)
canonicalize_llvm_nextpcs.: 0.001443s (num_starts 1; 0.0014s/start)
populate_exit_return_values_for_llvm_method.: 0.001593s (num_starts 1; 0.0016s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.001615s (num_starts 105; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.001674s (num_starts 1; 0.0017s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00181s (num_starts 1; 0.0018s/start)
tfg::collect_assumes_around_edge.: 0.001901s (num_starts 135; 0.0000s/start)
compute_z3_expr.: 0.002431s (num_starts 212; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.003197s (num_starts 112; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003499s (num_starts 174; 0.0000s/start)
create_closure_matrix.: 0.003657s (num_starts 135; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.004022s (num_starts 105; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.004903s (num_starts 2; 0.0025s/start)
graph_with_predicates_constructor.src.spec.make_list.: 0.004914s (num_starts 1; 0.0049s/start)
graph_with_aliasing_constructor.src.spec.make_list.: 0.005035s (num_starts 1; 0.0050s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.005292s (num_starts 1; 0.0053s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.005512s (num_starts 2230; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.005943s (num_starts 93; 0.0001s/start)
graph_visit_exprs.: 0.006538s (num_starts 4; 0.0016s/start)
query:convert_from_z3.: 0.007082s (num_starts 212; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.make_list.: 0.007233s (num_starts 1; 0.0072s/start)
graph_with_simplified_assets_constructor.src.spec.make_list.: 0.007416s (num_starts 1; 0.0074s/start)
tfg_constructor.src.spec.make_list.after_transitive_closure.: 0.009105s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.make_list.post_parsing.: 0.00911s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.make_list.after_string_contents.: 0.009115s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.make_list.after_compute_max_memlabel_varnum.: 0.00912s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.make_list.: 0.009123s (num_starts 1; 0.0091s/start)
graph_identify_back_edges.: 0.009573s (num_starts 6; 0.0016s/start)
graph_identify_natural_loops.: 0.010042s (num_starts 6; 0.0017s/start)
query:convert_to_z3.: 0.010411s (num_starts 212; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.01186s (num_starts 2; 0.0059s/start)
tfg::populate_loc_definedness.before_initialize.: 0.012455s (num_starts 2; 0.0062s/start)
tfg::populate_loc_definedness.: 0.01287s (num_starts 2; 0.0064s/start)
find_dominators.: 0.0135s (num_starts 10; 0.0014s/start)
populate_branch_affecting_locs.: 0.014179s (num_starts 2; 0.0071s/start)
compute_regions.: 0.01557s (num_starts 6; 0.0026s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.015591s (num_starts 1; 0.0156s/start)
graph_to_stream.: 0.015713s (num_starts 1; 0.0157s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.015893s (num_starts 1; 0.0159s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.01636s (num_starts 1; 0.0164s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.016483s (num_starts 105; 0.0002s/start)
create_sp_version_relations_lattice_at_pc.: 0.018049s (num_starts 135; 0.0001s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.022641s (num_starts 105; 0.0002s/start)
query:simplify-z3.: 0.022923s (num_starts 428; 0.0001s/start)
populate_simplified_to_state.: 0.025477s (num_starts 3; 0.0085s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.026586s (num_starts 1622; 0.0000s/start)
populate_simplified_assets.: 0.034698s (num_starts 6; 0.0058s/start)
tfg_preprocess.dst.llvm.make_list.: 0.038775s (num_starts 1; 0.0388s/start)
tfg::tfg_preprocess.: 0.038777s (num_starts 1; 0.0388s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.039463s (num_starts 105; 0.0004s/start)
main.2.: 0.048947s (num_starts 1; 0.0489s/start)
get_tfg.: 0.049118s (num_starts 1; 0.0491s/start)
get_function_tfg_map.make_list.: 0.049175s (num_starts 1; 0.0492s/start)
get_function_tfg_map.: 0.049177s (num_starts 1; 0.0492s/start)
avail_exprs_create_submap.: 0.055918s (num_starts 315; 0.0002s/start)
populate_locs_potentially_modified_on_edge.: 0.063007s (num_starts 3; 0.0210s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.075914s (num_starts 105; 0.0007s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.095253s (num_starts 1622; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.097648s (num_starts 1622; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.097724s (num_starts 3; 0.0326s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.116604s (num_starts 1622; 0.0001s/start)
compute_lr_status_for_expr.: 0.156914s (num_starts 141; 0.0011s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.157469s (num_starts 119; 0.0013s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.157682s (num_starts 119; 0.0013s/start)
compute_new_lr_status_on_locs.: 0.253057s (num_starts 105; 0.0024s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.276597s (num_starts 172; 0.0016s/start)
populate_loc_liveness.: 0.298815s (num_starts 2; 0.1494s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.308363s (num_starts 105; 0.0029s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.397123s (num_starts 285; 0.0014s/start)
tfg_postprocess_after_pointsto_analysis.: 0.4332s (num_starts 1; 0.4332s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.439728s (num_starts 105; 0.0042s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.46133s (num_starts 1; 0.4613s/start)
ftmap_run_pointsto_analysis.: 0.932365s (num_starts 1; 0.9324s/start)
parse_consts_db.: 6.35333s (num_starts 1; 6.3533s/start)
main.: 7.43136s (num_starts 1; 7.4314s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:13 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:21 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:21 : Reading in SPEC-LLVM I/O specification from file ind9.iospecs...</MSG>
<MSG>0:21 : Computing equivalence for function: make_list...</MSG>
<MSG>0:21 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:21 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:22 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:22 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG make_list (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:23 : product-TFG make_list: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG make_list: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG make_list created 3 possibilities in group make_list.A...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : make_list.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : make_list.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : make_list.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : make_list.A2: Propagated 0 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : make_list.A2: Added the 0 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : make_list.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : make_list.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : make_list.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:23 : Added correlation to the product-TFG make_list.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:23 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:23 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht10-prove_trivial3-prove7...</MSG>
<MSG>0:26 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:26 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:26 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:34 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial0-prove14...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11


<MSG>0:34 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:34 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11


<MSG>0:34 : make_list.A2 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:34 : make_list.A2 (d:2, s:0, sp: 10): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:34 : Chosen product-TFG make_list.A2 will be explored later...</MSG>
<MSG>0:34 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:34 : Chose (for CE propagation) product-TFG make_list.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:34 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A3...</MSG>
<MSG>0:34 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A3...</MSG>
<MSG>0:34 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:34 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:34 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:34 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:34 : Adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A3: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:34 : make_list.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A3: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:34 : make_list.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:34 : make_list.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:34 : make_list.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
182742 : not(140275) : BOOL                        : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda89, ite(and(bvule(0, Lambda89), bvule(Lambda89, 4294967295)), false, false)), lambda(Lambda90, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 682954988), 198, 251)))))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140447 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 4227595259) )
140287 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140687 : sum_is(140447, 140287) : BOOL             : false
182743 : or(182742, 140687) : BOOL                 : false

ce =
=counter_example_begin z3.ce5 1ab7bae0ea580e8f6555b38e4ca2b7
=input.spec-%var-arr-1
1 : Lambda89 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda90 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda92 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda93 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda69 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform13 : BV:32
4 : Lambda94 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda95 : BV:32
7 : 574694591 { 0x224124bf +1.50893390e197 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda70 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 682954987 ] -> 251, [ 682954988; 682954988 ] -> 198, [ 682954989; 682954989 ] -> 239, [ 682954990; 682954990 ] -> 119, [ 682954991; 1278990523 ] -> 251, [ 1278990524; 1278990527 ] -> 0, [ 1278990528; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 682954987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 682954988; 682954991 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 682954992; 1278990523 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1278990524; 1278990527 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1278990528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 682954991 { 0x28b510ef +1.41457927e210 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
619445555
=counter_example_end


failcond-expr = or(not(true), sum_is(map_get(input.spec-%var-arr-1, 0), 1)):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
</MSG>
<MSG>0:34 : make_list.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:34 : make_list.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:34 : make_list.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : Done adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:34 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
182742 : not(140275) : BOOL                        : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda89, ite(and(bvule(0, Lambda89), bvule(Lambda89, 4294967295)), false, false)), lambda(Lambda90, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(3, bvmul(4, Lambda90), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(2, bvmul(4, Lambda90), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(1, bvmul(4, Lambda90), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990524), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990525), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 682954989), 239, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 682954990), 119, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990526), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 1278990527), 0, ite(eq(bvadd(bvmul(4, Lambda90), 4218941382), 682954988), 198, 251)))))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140447 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 4227595259) )
140287 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140687 : sum_is(140447, 140287) : BOOL             : false
182743 : or(182742, 140687) : BOOL                 : false

ce =
=counter_example_begin z3.ce5 1ab7bae0ea580e8f6555b38e4ca2b7
=input.spec-%var-arr-1
1 : Lambda89 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda90 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda92 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda93 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda69 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform13 : BV:32
4 : Lambda94 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda95 : BV:32
7 : 574694591 { 0x224124bf +1.50893390e197 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda70 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 682954987 ] -> 251, [ 682954988; 682954988 ] -> 198, [ 682954989; 682954989 ] -> 239, [ 682954990; 682954990 ] -> 119, [ 682954991; 1278990523 ] -> 251, [ 1278990524; 1278990527 ] -> 0, [ 1278990528; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 682954987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 682954988; 682954991 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 682954992; 1278990523 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1278990524; 1278990527 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1278990528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 682954991 { 0x28b510ef +1.41457927e210 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
619445555
=counter_example_end


</MSG>
<MSG>0:34 : Discovered that the correlation was useless for the product-TFG make_list.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:34 : Chose (for CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:34 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1...</MSG>
<MSG>0:34 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1...</MSG>
<MSG>0:34 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:34 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:34 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:34 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:34 : Adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:34 : make_list.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:34 : make_list.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:34 : make_list.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:34 : make_list.A1: Propagated 0 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:34 : make_list.A1: Added the 0 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:34 : make_list.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:34 : make_list.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:34 : make_list.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : Done adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:34 : Added correlation to the product-TFG make_list.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:34 : Chose (after CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:34 : make_list.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:34 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:34 : make_list.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:34 : make_list.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:34 : make_list.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:34 : make_list.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:34 : make_list.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:35 : make_list.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:37 : make_list.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial2-prove7...</MSG>
<MSG>0:37 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:37 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:37 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:38 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:38 : make_list.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:38 : make_list.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:38 : make_list.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 5 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:41 : make_list.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial0-prove6...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343


<MSG>0:41 : make_list.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:41 : make_list.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343


<MSG>0:41 : make_list.A1 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:41 : make_list.A1 (d:2, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:42 : product-TFG make_list.A1: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : product-TFG make_list.A1: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : product-TFG make_list.A1 created 1 possibilities in group make_list.A1.B...</MSG>
<MSG>0:42 : Chose (for CE propagation) product-TFG make_list.A1.B1 (d:2, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:42 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:42 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:42 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:42 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:42 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:42 : Identified no common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:42 : Adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:42 : make_list.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:42 : make_list.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:42 : make_list.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:42 : make_list.A1.B1: Propagated 6 out of 13 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:42 : make_list.A1.B1: Added the 6 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:42 : make_list.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:42 : make_list.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:42 : make_list.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : Done adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:42 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:42 : Added correlation to the product-TFG make_list.A1.B1 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:42 : Chose (after CE propagation) product-TFG make_list.A1.B1 (d:2, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:42 : make_list.A1.B1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:42 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:42 : make_list.A1.B1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:42 : make_list.A1.B1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:42 : make_list.A1.B1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:42 : make_list.A1.B1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:42 : make_list.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:42 : make_list.A1.B1 (d:2, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:42 : product-TFG make_list.A1.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : product-TFG make_list.A1.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:42 : product-TFG make_list.A1.B1 created 1 possibilities in group make_list.A1.B1.C...</MSG>
<MSG>0:42 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1 (d:2, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:42 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:42 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:42 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:42 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:42 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:42 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:42 : Adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Adding node L0%0%d_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Propagated 9 out of 15 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Added the 9 propagated CEs at PC L0%0%d_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:42 : make_list.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : make_list.A1.B1.C1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : Done adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:42 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 5, 0)
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce752
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:42 : Added correlation to the product-TFG make_list.A1.B1.C1 (d:3, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:42 : Chose (after CE propagation) product-TFG make_list.A2 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11


<MSG>0:42 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:42 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:42 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:42 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:42 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:42 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:42 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:43 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 9 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:43 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:43 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:43 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:43 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:43 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11


<MSG>0:43 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:43 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11


<MSG>0:43 : make_list.A2 (d:2, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>0:43 : make_list.A2 (d:2, s:0, sp: 10): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:44 : product-TFG make_list.A2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:44 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:44 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:44 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:44 : product-TFG make_list.A2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:44 : product-TFG make_list.A2 created 1 possibilities in group make_list.A2.B...</MSG>
<MSG>0:44 : Chose (for CE propagation) product-TFG make_list.A2.B1 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:44 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:44 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:44 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:44 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:44 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:44 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:44 : Adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:44 : make_list.A2.B1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:44 : make_list.A2.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:44 : make_list.A2.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:44 : make_list.A2.B1: Propagated 5 out of 12 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:44 : make_list.A2.B1: Added the 5 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:44 : make_list.A2.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:44 : make_list.A2.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:44 : make_list.A2.B1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : Done adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:44 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:44 : Added correlation to the product-TFG make_list.A2.B1 (d:2, s:0, sp: 10) and created a correlation entry...</MSG>
<MSG>0:44 : Chose (after CE propagation) product-TFG make_list.A2.B1 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:44 : make_list.A2.B1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:44 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:44 : make_list.A2.B1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:44 : make_list.A2.B1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:44 : make_list.A2.B1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:44 : make_list.A2.B1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:44 : make_list.A2.B1 (d:2, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>0:44 : make_list.A2.B1 (d:2, s:0, sp: 10): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:45 : product-TFG make_list.A2.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:45 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:45 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:45 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:45 : product-TFG make_list.A2.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:45 : product-TFG make_list.A2.B1 created 1 possibilities in group make_list.A2.B1.C...</MSG>
<MSG>0:45 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1 (d:2, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:45 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:45 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:45 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:45 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:45 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:45 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:45 : Adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Updating dst fcall edge using src fcall edge for toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Adding node L3%6%bbentry_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Propagated 9 out of 14 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Added the 9 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:45 : make_list.A2.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A2.B1.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : Done adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce967      1.:z3v487.ce971
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce967      1.:z3v487.ce971
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    24 preds:
      0.: 219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      1.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      2.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      3.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      4.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      6.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      7.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      9.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      10.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      11.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      12.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      13.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      14.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      15.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      16.: 219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      17.: false                 ==  true
      18.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      19.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      20.: 219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      21.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      23.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:45 : Added correlation to the product-TFG make_list.A2.B1.C1 (d:3, s:0, sp: 10) and created a correlation entry...</MSG>
<MSG>0:45 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:3, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 5, 0)
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce752
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:45 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:45 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:45 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:48 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht8-prove_trivial3-prove5...</MSG>
<MSG>0:48 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:48 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:50 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:50 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 5 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:54 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht6-prove_trivial1-prove5...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:54 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>0:54 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:54 : make_list.A1.B1.C1 (d:4, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:54 : make_list.A1.B1.C1 (d:4, s:0, sp: 10): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:54 : Chosen product-TFG make_list.A1.B1.C1 will be explored later...</MSG>
<MSG>0:54 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:54 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:3, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce967      1.:z3v487.ce971
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce967      1.:z3v487.ce971
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    24 preds:
      0.: 219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      1.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      2.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      3.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      4.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      6.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      7.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      9.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      10.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      11.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      12.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      13.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      14.: 219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      15.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      16.: 219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      17.: false                 ==  true
      18.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      19.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      20.: 219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      21.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      23.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:54 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:54 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:54 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>0:58 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:59 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:59 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:59 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:59 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht24-prove_trivial4-prove20...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : make_list.A2.B1.C1 (d:4, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>1:27 : make_list.A2.B1.C1 (d:4, s:0, sp: 30): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>1:27 : Chosen product-TFG make_list.A2.B1.C1 will be explored later...</MSG>
<MSG>1:27 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>1:27 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:4, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:27 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 7 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 5 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>1:27 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : make_list.A1.B1.C1 (d:4, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>1:27 : make_list.A1.B1.C1 (d:4, s:0, sp: 10): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:27 : product-TFG make_list.A1.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:27 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:27 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:27 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:27 : product-TFG make_list.A1.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>1:27 : product-TFG make_list.A1.B1.C1 created 1 possibilities in group make_list.A1.B1.C1.D...</MSG>
<MSG>1:27 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:4, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:27 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>1:27 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>1:27 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:27 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:27 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>1:27 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:27 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Adding node L0%0%d_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Adding edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Propagated 18 out of 18 counter-examples across edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Added the 18 propagated CEs at PC L0%0%d_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : make_list.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:27 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 2, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1596      1.:z3v487.ce1599      2.:z3.ce1602      3.:z3.ce1605      4.:z3.ce1608      5.:z3.ce1611
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1593      1.:z3.ce1602      2.:z3.ce1611
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1602      1.:z3.ce1611
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    7 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : Added correlation to the product-TFG make_list.A1.B1.C1.D1 (d:7, s:0, sp: 10) and created a correlation entry...</MSG>
<MSG>1:27 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:4, s:0, sp: 30) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:27 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:27 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:28 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>1:28 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:28 : make_list.A2.B1.C1 (d:4, s:0, sp: 30): checked newly added edge and inferred invariants...</MSG>
<MSG>1:28 : make_list.A2.B1.C1 (d:4, s:0, sp: 30): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:29 : product-TFG make_list.A2.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:29 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:29 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:29 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:29 : product-TFG make_list.A2.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>1:29 : product-TFG make_list.A2.B1.C1 created 1 possibilities in group make_list.A2.B1.C1.D...</MSG>
<MSG>1:29 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:4, s:0, sp: 30) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:29 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>1:29 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>1:29 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:29 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:29 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>1:29 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>1:29 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Adding node L3%6%bbentry_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Adding edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Propagated 19 out of 19 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Added the 19 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1702      1.:z3v487.ce1705      2.:z3.ce1708      3.:z3.ce1711      4.:z3.ce1714      5.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    28 preds:
      0.: 276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      1.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      2.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      3.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: 276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      9.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      10.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      11.: false                 ==  true
      12.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      15.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      16.: 276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      17.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      18.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      19.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      20.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      21.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: 276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      23.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      24.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      25.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      26.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      27.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:29 : Added correlation to the product-TFG make_list.A2.B1.C1.D1 (d:7, s:0, sp: 30) and created a correlation entry...</MSG>
<MSG>1:29 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:7, s:0, sp: 10) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 2, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1596      1.:z3v487.ce1599      2.:z3.ce1602      3.:z3.ce1605      4.:z3.ce1608      5.:z3.ce1611
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1593      1.:z3.ce1602      2.:z3.ce1611
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1602      1.:z3.ce1611
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    7 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:29 : make_list.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>1:29 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:29 : make_list.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:29 : make_list.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:29 : make_list.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:29 : make_list.A1.B1.C1.D1: Relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:29 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:29 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:29 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 6 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:30 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:36 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht7-prove_trivial1-prove6...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce1596      1.:z3v487.ce1599      2.:z3.ce1602      3.:z3.ce1605      4.:z3.ce1608      5.:z3.ce1611      6.:z3.ce1774
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1593      1.:z3.ce1602      2.:z3.ce1611      3.:z3.ce1792
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1602      1.:z3.ce1611
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:36 : make_list.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>1:36 : make_list.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 19-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce756      1.:z3.ce752      2.:z3v487.ce1044      3.:z3.ce1024      4.:z3v487.ce1025      5.:z3.ce1064      6.:z3.ce1084
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce756      1.:z3v487.ce1025      2.:z3.ce1104      3.:z3.ce1124
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce756      1.:z3.ce1104
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce756

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 20-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce1596      1.:z3v487.ce1599      2.:z3.ce1602      3.:z3.ce1605      4.:z3.ce1608      5.:z3.ce1611      6.:z3.ce1774
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1593      1.:z3.ce1602      2.:z3.ce1611      3.:z3.ce1792
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1602      1.:z3.ce1611
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 21-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1611

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce380      1.:z3.ce379      2.:z3v487.ce343      3.:z3.ce344      4.:z3.ce361      5.:z3.ce397      6.:z3v487.ce415      7.:z3.ce416      8.:z3v487.ce433      9.:z3.ce451
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397      3.:z3.ce469
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce343      1.:z3.ce344      2.:z3.ce397
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [5]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce343

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:36 : make_list.A1.B1.C1.D1 (d:7, s:0, sp: 10): checked newly added edge and inferred invariants...</MSG>
<MSG>1:36 : make_list.A1.B1.C1.D1 (d:7, s:0, sp: 16): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:38 : product-TFG make_list.A1.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:38 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:38 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:38 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:38 : product-TFG make_list.A1.B1.C1.D1: Found 1 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:38 : product-TFG make_list.A1.B1.C1.D1 created 1 possibilities in group make_list.A1.B1.C1.D1.E...</MSG>
<MSG>1:38 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:7, s:0, sp: 16) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:38 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>1:38 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>1:38 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>1:38 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:38 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>1:38 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:38 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Adding edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Propagated 1 out of 19 counter-examples across edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: marking unstable at L0%0%d_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL0%0%d_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140734 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140756 : bvult(140726, 140734) : BOOL              : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda10068, ite(and(bvule(0, Lambda10068), bvule(Lambda10068, 0)), true, ite(and(bvule(1, Lambda10068), bvule(Lambda10068, 4294967295)), false, false))), lambda(Lambda10069, ite(and(bvule(0, Lambda10069), bvule(Lambda10069, 4294967295)), 0, 0))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140447 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(1, unit, 0) )
140278 : 0 { 0x0 +1.0e1025 } : INT                 : 0
206411 : sum_is(140447, 140278) : BOOL             : false
207630 : or(140756, 206411) : BOOL                 : false

ce =
=counter_example_begin z3.ce1903 a1239d5e6154f8ce4f5d0ab891ddcd8
=nextpc_const.1
1 : 2016706810 { 0x783480fa +1.41018605e113 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10069 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 767630659 ] -> 0, [ 767630660; 767630660 ] -> 0, [ 767630661; 767630661 ] -> 0, [ 767630662; 767630662 ] -> 0, [ 767630663; 767630663 ] -> 0, [ 767630664; 767630664 ] -> 0, [ 767630665; 767630665 ] -> 0, [ 767630666; 767630666 ] -> 0, [ 767630667; 767630667 ] -> 0, [ 767630668; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2645806172 { 0x9db3cc5c -1649161124 -1.40467405e188 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3313866784 { 0xc5859820 -981100512 -1.4370498e12 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 189 , m_adder -> 97), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2016706810 , 1000 , 8 ) -> 767630660, () -> 1628001812, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1936240466 { 0x7368af52 +1.81785035e103 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 767630659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 767630660; 767630667 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 767630668; 2645806171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645806172; 2645806175 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2645806176; 3313866783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3313866784; 3313866787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3313866788; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1410912117 { 0x5418cf75 +1.19383108e41 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1665942003 { 0x634c41f3 +1.59576261e71 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 767630660 { 0x2dc11d44 +1.50870561e220 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1522260486 { 0x5abbda06 +1.46759104e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3313866784 { 0xc5859820 -981100512 -1.4370498e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3313866787 { 0xc5859823 -981100509 -1.4370534e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2645806172 { 0x9db3cc5c -1649161124 -1.40467405e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2645806175 { 0x9db3cc5f -1649161121 -1.40467441e188 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 189 , m_adder -> 97), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1436859421
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry), sum_is(map_get(input.spec-%var-arr-1, 0), 0)):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:38 : make_list.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>1:38 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:38 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:38 : Failed correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd: failcond = wfcond.from_pcL0%0%d_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140734 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140756 : bvult(140726, 140734) : BOOL              : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda10068, ite(and(bvule(0, Lambda10068), bvule(Lambda10068, 0)), true, ite(and(bvule(1, Lambda10068), bvule(Lambda10068, 4294967295)), false, false))), lambda(Lambda10069, ite(and(bvule(0, Lambda10069), bvule(Lambda10069, 4294967295)), 0, 0))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140447 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(1, unit, 0) )
140278 : 0 { 0x0 +1.0e1025 } : INT                 : 0
206411 : sum_is(140447, 140278) : BOOL             : false
207630 : or(140756, 206411) : BOOL                 : false

ce =
=counter_example_begin z3.ce1903 a1239d5e6154f8ce4f5d0ab891ddcd8
=nextpc_const.1
1 : 2016706810 { 0x783480fa +1.41018605e113 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10069 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 767630659 ] -> 0, [ 767630660; 767630660 ] -> 0, [ 767630661; 767630661 ] -> 0, [ 767630662; 767630662 ] -> 0, [ 767630663; 767630663 ] -> 0, [ 767630664; 767630664 ] -> 0, [ 767630665; 767630665 ] -> 0, [ 767630666; 767630666 ] -> 0, [ 767630667; 767630667 ] -> 0, [ 767630668; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2645806172 { 0x9db3cc5c -1649161124 -1.40467405e188 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3313866784 { 0xc5859820 -981100512 -1.4370498e12 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 189 , m_adder -> 97), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2016706810 , 1000 , 8 ) -> 767630660, () -> 1628001812, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1936240466 { 0x7368af52 +1.81785035e103 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 767630659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 767630660; 767630667 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 767630668; 2645806171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645806172; 2645806175 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2645806176; 3313866783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3313866784; 3313866787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3313866788; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1410912117 { 0x5418cf75 +1.19383108e41 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1665942003 { 0x634c41f3 +1.59576261e71 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 767630660 { 0x2dc11d44 +1.50870561e220 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1522260486 { 0x5abbda06 +1.46759104e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3313866784 { 0xc5859820 -981100512 -1.4370498e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3313866787 { 0xc5859823 -981100509 -1.4370534e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2645806172 { 0x9db3cc5c -1649161124 -1.40467405e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2645806175 { 0x9db3cc5f -1649161121 -1.40467441e188 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 189 , m_adder -> 97), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1436859421
=counter_example_end


</MSG>
<MSG>1:38 : Discovered that the correlation was useless for the product-TFG make_list.A1.B1.C1.D1.E1 (d:7, s:0, sp: 16)...</MSG>
<MSG>1:38 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:7, s:0, sp: 30) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1702      1.:z3v487.ce1705      2.:z3.ce1708      3.:z3.ce1711      4.:z3.ce1714      5.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    28 preds:
      0.: 276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      1.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      2.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      3.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: 276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      9.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      10.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      11.: false                 ==  true
      12.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      15.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      16.: 276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      17.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      18.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      19.: eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      20.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      21.: eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: 276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      23.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      24.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      25.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))))  ==  true
      26.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      27.: 276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:38 : make_list.A2.B1.C1.D1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>1:38 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:38 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:39 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:39 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:39 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:39 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:11 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht28-prove_trivial4-prove24...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1702      1.:z3v487.ce1705      2.:z3.ce1708      3.:z3.ce1711      4.:z3.ce1714      5.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:12 : make_list.A2.B1.C1.D1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>2:12 : make_list.A2.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1702      1.:z3v487.ce1705      2.:z3.ce1708      3.:z3.ce1711      4.:z3.ce1714      5.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:12 : make_list.A2.B1.C1.D1 (d:7, s:0, sp: 30): checked newly added edge and inferred invariants...</MSG>
<MSG>2:12 : make_list.A2.B1.C1.D1 (d:7, s:0, sp: 54): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:14 : product-TFG make_list.A2.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:14 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:14 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:14 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:14 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:14 : product-TFG make_list.A2.B1.C1.D1: Found 2 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:14 : product-TFG make_list.A2.B1.C1.D1 created 2 possibilities in group make_list.A2.B1.C1.D1.E...</MSG>
<MSG>2:14 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:7, s:0, sp: 54) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:14 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>2:14 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>2:14 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:14 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>2:14 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>2:14 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>2:14 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Propagated 5 out of 19 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Added the 5 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Finished executing CG's add edge function...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2419      1.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2419      1.:z3.ce1717
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:14 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 54) and created a correlation entry...</MSG>
<MSG>2:14 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E1 (d:7, s:0, sp: 54) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:14 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>2:14 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>2:14 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:14 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>2:14 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>2:14 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>2:14 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E1: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:14 : make_list.A2.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E1: Propagated 5 out of 19 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E1: Added the 5 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:15 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>2:15 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:4, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3.ce2623      9.:z3v487.ce2652
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3.ce2623
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:5, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce1702      1.:z3v487.ce1705      2.:z3.ce1708      3.:z3.ce1711      4.:z3.ce1714      5.:z3.ce1717      6.:z3v487.ce2761      7.:z3.ce2691      8.:z3.ce2726
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1717      1.:z3.ce2691
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:4, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2550      10.:z3.ce2562      11.:z3.ce2567
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2567
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:15 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E1 (d:13, s:0, sp: 54) and created a correlation entry...</MSG>
<MSG>2:15 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 54) from a frontier of size 2...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 25 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 25 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 20 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2419      1.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2419      1.:z3.ce1717
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:15 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 11 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:16 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>2:16 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:16 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>2:16 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2419      1.:z3.ce1717
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2419      1.:z3.ce1717
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:42 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:43 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:43 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:10 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>3:10 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:11 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:11 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:11 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:11 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:12 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:12 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 11 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>3:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 11 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:20 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 20)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 24)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 10)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 7)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 7)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:22 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:23 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:23 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:23 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:23 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:28 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>3:28 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:30 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:30 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:31 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:31 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 21)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 25)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 11 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 23 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 21)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 25)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 27 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 21)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 25)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 21)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 25)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:38 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:39 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:39 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:39 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:39 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 21)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 25)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>3:42 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 21)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 25)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:42 : make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 57): checked newly added edge and inferred invariants...</MSG>
<MSG>3:42 : make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 57): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:42 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>3:42 : Checking equivalence proof...</MSG>
<MSG>3:47 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 21)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 28-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3.ce1231      3.:z3v487.ce1230      4.:z3.ce1252      5.:z3.ce1274      6.:z3.ce1296      7.:z3v487.ce1297      8.:z3v487.ce2376      9.:z3.ce2343      10.:z3v487.ce2532
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce971      1.:z3.ce2343      2.:z3v487.ce2532      3.:z3v487.ce2956      4.:z3v487.ce2990      5.:z3v487.ce3176
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce967      1.:z3v487.ce971      2.:z3v487.ce1230      3.:z3v487.ce1253      4.:z3.ce1318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce971      1.:z3v487.ce1253
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [23]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 29-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 30-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219481](sum_is[219480](219407, 1), eq[219309](spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 31-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219482](sum_is[219480](219407, 1), eq[219411](spec-%tmpvar-1.L3%6%bbentry, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 32-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219483](sum_is[219480](219407, 1), eq[219470](spec-%tmpvar-2.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 33-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219484](sum_is[219480](219407, 1), eq[219472](spec-%var-new_l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 34-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219485](sum_is[219480](219407, 1), eq[219473](input.spec-%var-l-0.L3%6%bbentry, sum_init[219410](SORT2EXPR.VAR, 1, prod_init[219409](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 35-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219486](sum_is[219480](219407, 1), eq[219474](input.spec-%var-l-0.L3%6%bbentry, sum_init[219413](SORT2EXPR.VAR, 1, prod_init[219412](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 36-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219487](sum_is[219480](219407, 1), eq[219475](input.spec-%var-l-0.L3%6%bbentry, sum_init[219415](SORT2EXPR.VAR, 1, prod_init[219414](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 37-->219407 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219488](sum_is[219480](219407, 1), eq[219476](input.spec-%var-l-0.L3%6%bbentry, sum_init[219417](SORT2EXPR.VAR, 1, prod_init[219416](SORT2EXPR.VAR, sum_get[219408](219407, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 38-->219418 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219490](sum_is[219489](219418, 1), eq[219477](input.spec-%var-l-0.L3%6%bbentry, sum_init[219421](SORT2EXPR.VAR, 1, prod_init[219420](SORT2EXPR.VAR, sum_get[219419](219418, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 39-->219422 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219492](sum_is[219491](219422, 1), eq[219478](input.spec-%var-l-0.L3%6%bbentry, sum_init[219464](SORT2EXPR.VAR, 1, prod_init[219424](SORT2EXPR.VAR, sum_get[219423](219422, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 40-->219465 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[219494](sum_is[219493](219465, 1), eq[219479](input.spec-%var-l-0.L3%6%bbentry, sum_init[219468](SORT2EXPR.VAR, 1, prod_init[219467](SORT2EXPR.VAR, sum_get[219466](219465, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce971

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 25)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 41-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce2458      1.:z3v487.ce2497      2.:z3.ce2419      3.:z3v487.ce1702      4.:z3v487.ce1705      5.:z3.ce1708      6.:z3.ce1711      7.:z3.ce1714      8.:z3.ce1717
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2419      1.:z3.ce1717      2.:z3.ce2776      3.:z3v487.ce2889      4.:z3.ce3031      5.:z3v487.ce3090      6.:z3v487.ce3141
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1699      1.:z3.ce1708      2.:z3.ce1717      3.:z3.ce1964
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1708      1.:z3.ce1717
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [27]: 42-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 43-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 44-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 45-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 46-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 47-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 48-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 49-->eq(spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 50-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 51-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276524](sum_is[276523](276289, 1), eq[275619](spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 52-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276525](sum_is[276523](276289, 1), eq[275620](spec-%tmpvar-1.L3%6%bbentry, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 53-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276526](sum_is[276523](276289, 1), eq[276159](spec-%tmpvar-2.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 54-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276527](sum_is[276523](276289, 1), eq[276160](spec-%var-new_l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 55-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 56-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 57-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 58-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 59-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 60-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276528](sum_is[276523](276289, 1), eq[276514](input.spec-%var-l-0.L3%6%bbentry, sum_init[276486](SORT2EXPR.VAR, 1, prod_init[276389](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 61-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276529](sum_is[276523](276289, 1), eq[276515](input.spec-%var-l-0.L3%6%bbentry, sum_init[276488](SORT2EXPR.VAR, 1, prod_init[276487](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 62-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276530](sum_is[276523](276289, 1), eq[276516](input.spec-%var-l-0.L3%6%bbentry, sum_init[276490](SORT2EXPR.VAR, 1, prod_init[276489](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 63-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276531](sum_is[276523](276289, 1), eq[276517](input.spec-%var-l-0.L3%6%bbentry, sum_init[276492](SORT2EXPR.VAR, 1, prod_init[276491](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 64-->276493 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276533](sum_is[276532](276493, 1), eq[276518](input.spec-%var-l-0.L3%6%bbentry, sum_init[276496](SORT2EXPR.VAR, 1, prod_init[276495](SORT2EXPR.VAR, sum_get[276494](276493, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 65-->276497 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276535](sum_is[276534](276497, 1), eq[276519](input.spec-%var-l-0.L3%6%bbentry, sum_init[276500](SORT2EXPR.VAR, 1, prod_init[276499](SORT2EXPR.VAR, sum_get[276498](276497, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 66-->276501 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276537](sum_is[276536](276501, 1), eq[276520](input.spec-%var-l-0.L3%6%bbentry, sum_init[276504](SORT2EXPR.VAR, 1, prod_init[276503](SORT2EXPR.VAR, sum_get[276502](276501, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 67-->276289 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276538](sum_is[276523](276289, 1), eq[276521](input.spec-%var-l-0.L3%6%bbentry, sum_init[276506](SORT2EXPR.VAR, 1, prod_init[276505](SORT2EXPR.VAR, sum_get[276388](276289, 1), ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 68-->276507 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[276540](sum_is[276539](276507, 1), eq[276522](input.spec-%var-l-0.L3%6%bbentry, sum_init[276510](SORT2EXPR.VAR, 1, prod_init[276509](SORT2EXPR.VAR, sum_get[276508](276507, 1), ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1717

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 11)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce99      1.:z3v487.ce11      2.:z3.ce12      3.:z3.ce33      4.:z3v487.ce56      5.:z3.ce55      6.:z3.ce77      7.:z3v487.ce121      8.:z3v487.ce143      9.:z3v487.ce2222      10.:z3.ce2245      11.:z3.ce2255
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce11      1.:z3.ce2255      2.:z3v487.ce2807      3.:z3v487.ce2854      4.:z3v487.ce2906      5.:z3v487.ce3055      6.:z3v487.ce3106
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77      3.:z3.ce165
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce11      1.:z3.ce12      2.:z3.ce77
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 22-->eq(spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    3 preds:
      0.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce11

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 32 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 33 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function make_list. 205.97s, query:smt.: 114.151s (num_starts 439; 0.2600s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 199.29s (num_starts 548; 0.3637s/start)ftmap_run_pointsto_analysis.: 31.157s (num_starts 930; 0.0335s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 1.1e-05s (num_starts 9; 0.0000s/start)
compute_tfg_pred_eqclass.: 2e-05s (num_starts 7; 0.0000s/start)
prune_dst_memslots.: 2e-05s (num_starts 7; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 2.1e-05s (num_starts 12; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.2e-05s (num_starts 12; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 2.8e-05s (num_starts 34; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.5e-05s (num_starts 11; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 5e-05s (num_starts 1; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd.: 5.3e-05s (num_starts 1; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart.: 0.000102s (num_starts 2; 0.0001s/start)
remove_complex_bv_exprs.: 0.000126s (num_starts 7; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000156s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000171s (num_starts 3; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000211s (num_starts 6; 0.0000s/start)
prove_trivial.: 0.000267s (num_starts 281; 0.0000s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000268s (num_starts 5; 0.0001s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart.: 0.000302s (num_starts 6; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000316s (num_starts 1; 0.0003s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000321s (num_starts 12; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000339s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00034s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000342s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000342s (num_starts 1; 0.0003s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallEnd.inductive-invariants.: 0.000346s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000358s (num_starts 1; 0.0004s/start)
graph_edge_contains_unknown_function_call.: 0.00044s (num_starts 74; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000578s (num_starts 176; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000634s (num_starts 7; 0.0001s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000673s (num_starts 196; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000674s (num_starts 547; 0.0000s/start)
compute_bv_bool_eqclass.: 0.000679s (num_starts 7; 0.0001s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000679s (num_starts 99; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000732s (num_starts 7; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000772s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed;-trivial.: 0.000775s (num_starts 1; 0.0008s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000775s (num_starts 548; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000776s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000777s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed;-trivial.: 0.000778s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000781s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000782s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed.: 0.000784s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000786s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed.: 0.000788s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000789s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000793s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000819s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned;-trivial.: 0.000823s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000824s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000829s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned.: 0.000833s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000838s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.000842s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-trivial.: 0.000843s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.000846s (num_starts 1; 0.0008s/start)
alias_val_t::constructor_with_map_arg.: 0.000862s (num_starts 995; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.000982s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.000984s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.000987s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001025s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001027s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001029s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001035s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.001039s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001048s (num_starts 1; 0.0010s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001067s (num_starts 10; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.001132s (num_starts 548; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001138s (num_starts 15; 0.0001s/start)
get_sprel_map_pair.: 0.001161s (num_starts 99; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.: 0.001298s (num_starts 1; 0.0013s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.001372s (num_starts 2; 0.0007s/start)
removeMostPromising.: 0.001395s (num_starts 37; 0.0000s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-trivial.: 0.001457s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001459s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001462s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001465s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001475s (num_starts 1; 0.0015s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001498s (num_starts 9; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001576s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-trivial.: 0.001576s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001581s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001585s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001596s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.001602s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-trivial.: 0.001607s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.001607s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.001608s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.001611s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.001617s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.001621s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess.: 0.001627s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001631s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed;-trivial.: 0.001636s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.001636s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001639s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001639s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.001647s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed;-trivial.: 0.001647s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001651s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed.: 0.001655s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.001659s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed.: 0.001666s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.001667s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.001678s (num_starts 1; 0.0017s/start)
tfg_suffixpath_get_expr_helper.: 0.001687s (num_starts 33; 0.0001s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001739s (num_starts 9; 0.0002s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.001778s (num_starts 7; 0.0003s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001779s (num_starts 9; 0.0002s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001802s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.001806s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-trivial.: 0.001813s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.001815s (num_starts 1; 0.0018s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.: 0.001817s (num_starts 1; 0.0018s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.00186s (num_starts 267; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.001878s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001921s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001927s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001927s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001943s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.001952s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001965s (num_starts 2; 0.0010s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002038s (num_starts 1; 0.0020s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002116s (num_starts 1; 0.0021s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.002215s (num_starts 1; 0.0022s/start)
proof_query_is_trivial_helper.: 0.002232s (num_starts 570; 0.0000s/start)
parse_yices_model.: 0.002338s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-trivial.: 0.002372s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.002373s (num_starts 1; 0.0024s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.: 0.002454s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002478s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear;-trivial.: 0.002484s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002487s (num_starts 3; 0.0008s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.002497s (num_starts 29; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002761s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002763s (num_starts 1; 0.0028s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.002767s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.002768s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.002774s (num_starts 1; 0.0028s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002919s (num_starts 7; 0.0004s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002926s (num_starts 12; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002935s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.002947s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.003159s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed;-trivial.: 0.003169s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.003174s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.003193s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003198s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed.: 0.003202s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.00321s (num_starts 2; 0.0016s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.00321s (num_starts 617; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.00322s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.003221s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-trivial.: 0.003236s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.003244s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.003262s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-trivial.: 0.003271s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.003275s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.003376s (num_starts 3; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-trivial.: 0.003381s (num_starts 3; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.003447s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-trivial.: 0.003456s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.003461s (num_starts 2; 0.0017s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.003793s (num_starts 19; 0.0002s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.003824s (num_starts 108; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.003834s (num_starts 9; 0.0004s/start)
pth_collect_preds_using_atom_func.: 0.003894s (num_starts 66; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.004055s (num_starts 226; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed;-trivial.: 0.004221s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.004226s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.004242s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed.: 0.004255s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004566s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed;-trivial.: 0.004576s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.00458s (num_starts 4; 0.0011s/start)
corr_graph_enumerate_correlations.: 0.004584s (num_starts 11; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.004585s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.00459s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004596s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.004602s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess.: 0.004606s (num_starts 2; 0.0023s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.004608s (num_starts 98; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed.: 0.00461s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed;-trivial.: 0.004631s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.004635s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed;-trivial.: 0.004636s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.004639s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004639s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.004647s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.004649s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed.: 0.004651s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed.: 0.004654s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned;-trivial.: 0.0047s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.004702s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.004713s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned.: 0.004719s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004842s (num_starts 2; 0.0024s/start)
tfg_edge_composition_get_assumes.: 0.005008s (num_starts 66; 0.0001s/start)
get_unrolled_loop_paths_from.: 0.005062s (num_starts 7; 0.0007s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.005164s (num_starts 438; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00529s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005291s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.005305s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.005315s (num_starts 2; 0.0027s/start)
collect_assumes_around_edge.: 0.005709s (num_starts 12; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-trivial.: 0.005968s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.005974s (num_starts 4; 0.0015s/start)
proof_query_is_trivial.: 0.006028s (num_starts 548; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.006133s (num_starts 589; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.006237s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.006544s (num_starts 4; 0.0016s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.007008s (num_starts 617; 0.0000s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.007078s (num_starts 472; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.007132s (num_starts 6; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.007258s (num_starts 6; 0.0012s/start)
identify_address_taken_local_variables.: 0.007313s (num_starts 3; 0.0024s/start)
get_intersected_lr_status.: 0.007477s (num_starts 930; 0.0000s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.00772s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.00828s (num_starts 5; 0.0017s/start)
expr_is_hidden_reg.: 0.008317s (num_starts 9956; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.008392s (num_starts 9; 0.0009s/start)
construct_linear_combination_exprs.: 0.00856s (num_starts 330; 0.0000s/start)
generate_aliasing_constraints_from_expr.: 0.008733s (num_starts 1390; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed;-trivial.: 0.009065s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.009071s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.009095s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed.: 0.009105s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.009139s (num_starts 6; 0.0015s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.009145s (num_starts 547; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed;-trivial.: 0.009274s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-trivial.: 0.009274s (num_starts 11; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.009279s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.009303s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed.: 0.009315s (num_starts 4; 0.0023s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.009321s (num_starts 202; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 0.009414s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear;-trivial.: 0.009437s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.009444s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.009467s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear.: 0.009477s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-trivial.: 0.009588s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.009596s (num_starts 4; 0.0024s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.009651s (num_starts 562; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.009857s (num_starts 4; 0.0025s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.009876s (num_starts 2; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.00989s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.009908s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.009965s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess.: 0.009994s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.010049s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.010523s (num_starts 1; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown;-trivial.: 0.010525s (num_starts 1; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.010527s (num_starts 1; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown.: 0.010535s (num_starts 1; 0.0105s/start)
ldr_decomposition.: 0.010603s (num_starts 176; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.010684s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-trivial.: 0.010685s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.010703s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-trivial.: 0.010731s (num_starts 6; 0.0018s/start)
expr_is_callee_save_const.: 0.010738s (num_starts 9984; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.010752s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01088s (num_starts 5; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.010907s (num_starts 5; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-trivial.: 0.011183s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.011199s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.011232s (num_starts 6; 0.0019s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.: 0.011257s (num_starts 2; 0.0056s/start)
graph_with_guessing_sync_preds.: 0.011531s (num_starts 548; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.011651s (num_starts 562; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-trivial.: 0.011659s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.011669s (num_starts 4; 0.0029s/start)
bv_const_ref_map2expr_map.: 0.01168s (num_starts 330; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.011926s (num_starts 931; 0.0000s/start)
set_result_and_counter_example.: 0.012185s (num_starts 439; 0.0000s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.012322s (num_starts 200; 0.0001s/start)
cg_src_dst_tfg_copy.: 0.012802s (num_starts 2; 0.0064s/start)
get_next_potential_correlations.: 0.01336s (num_starts 9; 0.0015s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.013383s (num_starts 3; 0.0045s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.013385s (num_starts 2; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.013536s (num_starts 7; 0.0019s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.013616s (num_starts 78; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01377s (num_starts 6; 0.0023s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.013775s (num_starts 78; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.013806s (num_starts 6; 0.0023s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.014383s (num_starts 8; 0.0018s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.014661s (num_starts 438; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.014763s (num_starts 438; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.015108s (num_starts 78; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.015459s (num_starts 8; 0.0019s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.015468s (num_starts 6; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.015784s (num_starts 8; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.015974s (num_starts 8; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.016016s (num_starts 8; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016155s (num_starts 7; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.016291s (num_starts 7; 0.0023s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.016382s (num_starts 6; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016504s (num_starts 7; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.016656s (num_starts 7; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.0168s (num_starts 8; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.02056s (num_starts 10; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.02074s (num_starts 10; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.021063s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.021071s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.021115s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess.: 0.02114s (num_starts 4; 0.0053s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.021836s (num_starts 3815; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-trivial.: 0.022048s (num_starts 8; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.022067s (num_starts 8; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-trivial.: 0.022493s (num_starts 12; 0.0019s/start)
tfg::get_aliasing_constraints_for_edge.: 0.022569s (num_starts 255; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.022668s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.022689s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.022732s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.022781s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.022845s (num_starts 12; 0.0019s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.024576s (num_starts 8817; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.024644s (num_starts 11; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-trivial.: 0.024667s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.024682s (num_starts 8; 0.0031s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.025165s (num_starts 6; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.025851s (num_starts 10; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.025913s (num_starts 10; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.026324s (num_starts 12; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.027178s (num_starts 14; 0.0019s/start)
determinize_value_expr_map.: 0.027219s (num_starts 26896; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.027325s (num_starts 14; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.027364s (num_starts 14; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.027434s (num_starts 14; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.027612s (num_starts 14; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.029596s (num_starts 3; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.02961s (num_starts 3; 0.0099s/start)
get_sprel_map_pair_at_pc.: 0.030729s (num_starts 267; 0.0001s/start)
predicate_canonicalized.: 0.03181s (num_starts 330; 0.0001s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.033188s (num_starts 7027; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-trivial.: 0.033888s (num_starts 20; 0.0017s/start)
tfg::populate_loc_definedness.post_dfa.: 0.03429s (num_starts 931; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.034853s (num_starts 14; 0.0025s/start)
graph_to_stream.: 0.034978s (num_starts 4; 0.0087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.035147s (num_starts 14; 0.0025s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.035638s (num_starts 17; 0.0021s/start)
gen_pred_from_coeff_row.simplify.: 0.035899s (num_starts 330; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.036238s (num_starts 24; 0.0015s/start)
graph_locs_add_exvregs_for_edge.: 0.036438s (num_starts 7404; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.03657s (num_starts 6; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.037308s (num_starts 18; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.037413s (num_starts 18; 0.0021s/start)
graph_locs_add_local_vars_for_edge.: 0.03867s (num_starts 7404; 0.0000s/start)
compute_sprel_relations.: 0.039229s (num_starts 930; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.039944s (num_starts 10; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.040042s (num_starts 10; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.04014s (num_starts 4; 0.0100s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.040148s (num_starts 4; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.040229s (num_starts 4; 0.0101s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.040257s (num_starts 4; 0.0101s/start)
expr_represents_llvm_undef.: 0.041048s (num_starts 9998; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.04187s (num_starts 16; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-trivial.: 0.042644s (num_starts 22; 0.0019s/start)
propagate_sprels.: 0.043078s (num_starts 930; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.043179s (num_starts 930; 0.0000s/start)
graph_locs_add_all_specvars.: 0.043367s (num_starts 930; 0.0000s/start)
ldr_decompose_and_linear_solve.: 0.043484s (num_starts 176; 0.0002s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.04389s (num_starts 6; 0.0073s/start)
graph_locs_add_all_local_vars.: 0.045342s (num_starts 930; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.045527s (num_starts 20; 0.0023s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.046515s (num_starts 26; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.046624s (num_starts 22; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.047046s (num_starts 22; 0.0021s/start)
lr_status_meet.: 0.047629s (num_starts 7886; 0.0000s/start)
bv_linear_solve.: 0.047817s (num_starts 176; 0.0003s/start)
query:bv_solve.: 0.04872s (num_starts 176; 0.0003s/start)
get_unrolled_paths_from.: 0.050559s (num_starts 55; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-trivial.: 0.051538s (num_starts 24; 0.0021s/start)
get_lr_status_for_loc_ids.: 0.052578s (num_starts 2087; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.052836s (num_starts 3815; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.05409s (num_starts 15; 0.0036s/start)
sp_version_relations_val_t::meet.: 0.055323s (num_starts 97873; 0.0000s/start)
simplify_bv_add_atomic.: 0.05643s (num_starts 2698; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.057032s (num_starts 24; 0.0024s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.057395s (num_starts 6; 0.0096s/start)
def_analysis::xfer_and_meet.: 0.058513s (num_starts 7413; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.060896s (num_starts 14; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.061406s (num_starts 14; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-trivial.: 0.062562s (num_starts 22; 0.0028s/start)
bv_solve_returning_intermediate_structures.: 0.063717s (num_starts 176; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.063802s (num_starts 24; 0.0027s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.065394s (num_starts 988; 0.0001s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.066788s (num_starts 7413; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.068727s (num_starts 36; 0.0019s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.069684s (num_starts 783; 0.0001s/start)
graph_locs_add_all_llvmvars.: 0.070468s (num_starts 930; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.073418s (num_starts 38; 0.0019s/start)
bvsolve_cache_query.miss1.: 0.073972s (num_starts 176; 0.0004s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.07576s (num_starts 49; 0.0015s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.07589s (num_starts 49; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076401s (num_starts 1; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076414s (num_starts 1; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076422s (num_starts 1; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.076431s (num_starts 1; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess.: 0.076435s (num_starts 1; 0.0764s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.076446s (num_starts 1; 0.0764s/start)
bvsolve_cache_query.: 0.077568s (num_starts 176; 0.0004s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.077675s (num_starts 24; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078309s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.078319s (num_starts 1; 0.0783s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.078402s (num_starts 1173; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.07857s (num_starts 23; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079551s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079564s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079571s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.079581s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess.: 0.079586s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.079594s (num_starts 1; 0.0796s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.080795s (num_starts 10; 0.0081s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.08083s (num_starts 52; 0.0016s/start)
pth_collect_simplified_preds_using_atom_func.: 0.080857s (num_starts 1107; 0.0001s/start)
create_closure_matrix.: 0.082194s (num_starts 11840; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082277s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08229s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082296s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.082305s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond.: 0.08231s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.08232s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084942s (num_starts 1; 0.0849s/start)
collect_aliasing_constraints_around_path_helper.: 0.085375s (num_starts 280; 0.0003s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.086182s (num_starts 10721; 0.0000s/start)
collect_aliasing_constraints_around_path.: 0.087287s (num_starts 182; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089232s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.089239s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.089814s (num_starts 3; 0.0299s/start)
counter_example_satisfies_preds.: 0.09406s (num_starts 1339; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-trivial.: 0.096133s (num_starts 35; 0.0027s/start)
gen_pred_from_coeff_row.: 0.09793s (num_starts 330; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.099619s (num_starts 34; 0.0029s/start)
compute_preds_for_bv_points.: 0.099853s (num_starts 85; 0.0012s/start)
populate_simplified_to_state.: 0.100045s (num_starts 931; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.100353s (num_starts 109; 0.0009s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallStart.inductive-invariants.: 0.102602s (num_starts 15; 0.0068s/start)
solve_for_bv_points.: 0.105159s (num_starts 176; 0.0006s/start)
check_node_stability_after_CE_addition.: 0.107613s (num_starts 262; 0.0004s/start)
collect_assumes_around_path_helper.: 0.114515s (num_starts 617; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-trivial.: 0.116933s (num_starts 39; 0.0030s/start)
graph_with_paths::collect_assumes_around_path.: 0.117017s (num_starts 617; 0.0002s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.125015s (num_starts 438; 0.0003s/start)
graph_locs_add_all_indvars.: 0.133974s (num_starts 930; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.135294s (num_starts 176; 0.0008s/start)
tfg::collect_assumes_around_edge.: 0.136661s (num_starts 14817; 0.0000s/start)
populate_locid2expr_map.: 0.141337s (num_starts 930; 0.0002s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.149262s (num_starts 30; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.151176s (num_starts 2; 0.0756s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.151177s (num_starts 2; 0.0756s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.151194s (num_starts 2; 0.0756s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess.: 0.151215s (num_starts 2; 0.0756s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156662s (num_starts 1; 0.1567s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156674s (num_starts 1; 0.1567s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15669s (num_starts 1; 0.1567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156705s (num_starts 1; 0.1567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.15672s (num_starts 1; 0.1567s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.156737s (num_starts 1; 0.1567s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.157202s (num_starts 64; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities..: 0.160137s (num_starts 4; 0.0400s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.160153s (num_starts 4; 0.0400s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.165506s (num_starts 55; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16575s (num_starts 2; 0.0829s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.165762s (num_starts 2; 0.0829s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.165782s (num_starts 2; 0.0829s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess.: 0.165792s (num_starts 2; 0.0829s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.170229s (num_starts 616; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176595s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176634s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176653s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.17669s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned.: 0.176701s (num_starts 2; 0.0884s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.176719s (num_starts 2; 0.0884s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.181036s (num_starts 52; 0.0035s/start)
create_sp_version_relations_lattice_at_pc.: 0.181589s (num_starts 11840; 0.0000s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.18448s (num_starts 8619; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.19146s (num_starts 3438; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.193052s (num_starts 930; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.203093s (num_starts 3815; 0.0001s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.203227s (num_starts 438; 0.0005s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.206054s (num_starts 1164; 0.0002s/start)
compute_expr_eqclasses_at_pc.: 0.206524s (num_starts 7; 0.0295s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.208805s (num_starts 10; 0.0209s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.210659s (num_starts 8684; 0.0000s/start)
cg_add_node.: 0.2107s (num_starts 10; 0.0211s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallStart.inductive-invariants.: 0.214433s (num_starts 20; 0.0107s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21549s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215497s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21551s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215512s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.215523s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown.: 0.215534s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.215548s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.215556s (num_starts 1; 0.2156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.219401s (num_starts 1; 0.2194s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21941s (num_starts 1; 0.2194s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.219424s (num_starts 1; 0.2194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond.: 0.219431s (num_starts 1; 0.2194s/start)
lhs_set_sort.: 0.225651s (num_starts 267; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229429s (num_starts 3; 0.0765s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.229574s (num_starts 3; 0.0765s/start)
create_new_corr_graph_edge.new_node.: 0.23263s (num_starts 9; 0.0258s/start)
create_new_corr_graph_edge.: 0.233302s (num_starts 12; 0.0194s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-trivial.: 0.23591s (num_starts 112; 0.0021s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.242824s (num_starts 3; 0.0809s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.251767s (num_starts 8752; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254941s (num_starts 3; 0.0850s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.255073s (num_starts 3; 0.0850s/start)
expr_linear_relation_holds::visit.var.: 0.268578s (num_starts 10062; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.276666s (num_starts 2298; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.287034s (num_starts 931; 0.0003s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-trivial.: 0.296156s (num_starts 102; 0.0029s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.301283s (num_starts 1; 0.3013s/start)
graph_visit_exprs_and_keys.: 0.302419s (num_starts 930; 0.0003s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.311759s (num_starts 1; 0.3118s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.327504s (num_starts 63; 0.0052s/start)
populate_simplified_assets.: 0.328263s (num_starts 1862; 0.0002s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.329686s (num_starts 259; 0.0013s/start)
compute_ssa_vars_renaming_map.: 0.331258s (num_starts 930; 0.0004s/start)
counter_example_falsifies_preds.: 0.331588s (num_starts 135; 0.0025s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.347114s (num_starts 616; 0.0006s/start)
populate_transitive_closure.: 0.355005s (num_starts 2824; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.364149s (num_starts 931; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.37308s (num_starts 1; 0.3731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.373083s (num_starts 1; 0.3731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.373092s (num_starts 1; 0.3731s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false.: 0.373096s (num_starts 1; 0.3731s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375495s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375497s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.3755s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375503s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.375514s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false.: 0.375517s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.375527s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon).: 0.375531s (num_starts 1; 0.3755s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.376387s (num_starts 1; 0.3764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.376388s (num_starts 1; 0.3764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.376398s (num_starts 1; 0.3764s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false.: 0.376403s (num_starts 1; 0.3764s/start)
graph_visit_exprs.: 0.385499s (num_starts 1859; 0.0002s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.389184s (num_starts 23; 0.0169s/start)
tfg::populate_loc_definedness.: 0.391606s (num_starts 931; 0.0004s/start)
propagate_nodece_across_edge.: 0.415043s (num_starts 72; 0.0058s/start)
evaluate_function_call.: 0.417065s (num_starts 86; 0.0048s/start)
counter_example_evaluate_preds.: 0.422143s (num_starts 1474; 0.0003s/start)
populate_locs_potentially_modified_on_edge.: 0.424265s (num_starts 931; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.448762s (num_starts 3; 0.1496s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.44879s (num_starts 3; 0.1496s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.450109s (num_starts 8817; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.453335s (num_starts 1; 0.4533s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.453337s (num_starts 1; 0.4533s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.453342s (num_starts 1; 0.4533s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.453343s (num_starts 1; 0.4533s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.453351s (num_starts 1; 0.4534s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false.: 0.453354s (num_starts 1; 0.4534s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.453358s (num_starts 1; 0.4534s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.453726s (num_starts 2; 0.2269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.455804s (num_starts 2; 0.2279s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.455828s (num_starts 2; 0.2279s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 0.455867s (num_starts 2; 0.2279s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned.: 0.455877s (num_starts 2; 0.2279s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.461987s (num_starts 2; 0.2310s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.462036s (num_starts 2; 0.2310s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.468641s (num_starts 6; 0.0781s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.477771s (num_starts 8817; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.478077s (num_starts 10; 0.0478s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.48419s (num_starts 1; 0.4842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.484196s (num_starts 1; 0.4842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.4842s (num_starts 1; 0.4842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.490206s (num_starts 5; 0.0980s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned.: 0.490227s (num_starts 5; 0.0980s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.493511s (num_starts 7; 0.0705s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.501625s (num_starts 6; 0.0836s/start)
query:convert_from_z3.: 0.506912s (num_starts 16094; 0.0000s/start)
compute_vars_reaching_definitions.: 0.510009s (num_starts 930; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.51171s (num_starts 1; 0.5117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511715s (num_starts 1; 0.5117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511716s (num_starts 1; 0.5117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.513548s (num_starts 2; 0.2568s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned.: 0.513561s (num_starts 2; 0.2568s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.513582s (num_starts 2; 0.2568s/start)
graph_ec_apply_trans_funs_helper.0.: 0.535648s (num_starts 1495; 0.0004s/start)
graph_ec_apply_trans_funs_helper.: 0.542688s (num_starts 1504; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.547122s (num_starts 1504; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.549233s (num_starts 1485; 0.0004s/start)
computeWP_for_pred_across_ec.: 0.554499s (num_starts 1485; 0.0004s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallEnd.inductive-invariants.: 0.554927s (num_starts 6; 0.0925s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.559863s (num_starts 1; 0.5599s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.559867s (num_starts 1; 0.5599s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.559879s (num_starts 1; 0.5599s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false.: 0.559884s (num_starts 1; 0.5599s/start)
tfg_relax_pointsto_vals_on_edge.: 0.564149s (num_starts 65; 0.0087s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.565686s (num_starts 1; 0.5657s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.565689s (num_starts 1; 0.5657s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.56569s (num_starts 1; 0.5657s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.565694s (num_starts 1; 0.5657s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.56571s (num_starts 1; 0.5657s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false.: 0.565714s (num_starts 1; 0.5657s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.565726s (num_starts 1; 0.5657s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon).: 0.567207s (num_starts 2; 0.2836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.580082s (num_starts 3; 0.1934s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.580124s (num_starts 3; 0.1934s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.607643s (num_starts 1; 0.6076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.607645s (num_starts 1; 0.6076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.607658s (num_starts 1; 0.6077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false.: 0.607663s (num_starts 1; 0.6077s/start)
query:convert_to_z3.: 0.614782s (num_starts 16094; 0.0000s/start)
avail_exprs_create_submap.: 0.636818s (num_starts 26451; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640032s (num_starts 1; 0.6400s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640039s (num_starts 1; 0.6400s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640042s (num_starts 1; 0.6400s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.641645s (num_starts 616; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.641681s (num_starts 3; 0.2139s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed.: 0.641694s (num_starts 3; 0.2139s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.641716s (num_starts 3; 0.2139s/start)
edge_composition_apply_trans_funs_on_pred.: 0.647655s (num_starts 548; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.648968s (num_starts 1; 0.6490s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.648973s (num_starts 1; 0.6490s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.648978s (num_starts 1; 0.6490s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.648992s (num_starts 1; 0.6490s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate.: 0.648996s (num_starts 1; 0.6490s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.649003s (num_starts 1; 0.6490s/start)
decide_hoare_triple_helper;-trivial.: 0.67786s (num_starts 281; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682587s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682592s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682595s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.682609s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate.: 0.682616s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.682625s (num_starts 1; 0.6826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.684381s (num_starts 1; 0.6844s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.684387s (num_starts 1; 0.6844s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.684393s (num_starts 1; 0.6844s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.68441s (num_starts 1; 0.6844s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate.: 0.684414s (num_starts 1; 0.6844s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.684421s (num_starts 1; 0.6844s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.688042s (num_starts 1; 0.6880s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.688053s (num_starts 1; 0.6881s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.688058s (num_starts 1; 0.6881s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.690573s (num_starts 4; 0.1726s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear.: 0.690584s (num_starts 4; 0.1726s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.690605s (num_starts 4; 0.1727s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.697617s (num_starts 8817; 0.0001s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.: 0.70795s (num_starts 1; 0.7079s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.723588s (num_starts 1; 0.7236s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.723596s (num_starts 1; 0.7236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.7236s (num_starts 1; 0.7236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.724466s (num_starts 2; 0.3622s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned.: 0.724472s (num_starts 2; 0.3622s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.724484s (num_starts 2; 0.3622s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.740621s (num_starts 1; 0.7406s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.746017s (num_starts 1; 0.7460s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.746028s (num_starts 1; 0.7460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.746033s (num_starts 1; 0.7460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.74934s (num_starts 3; 0.2498s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned.: 0.749354s (num_starts 3; 0.2498s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.749378s (num_starts 3; 0.2498s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.749457s (num_starts 2; 0.3747s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.749515s (num_starts 2; 0.3748s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.756104s (num_starts 931; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.767565s (num_starts 2; 0.3838s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.767575s (num_starts 2; 0.3838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.767576s (num_starts 2; 0.3838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.767596s (num_starts 2; 0.3838s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate.: 0.767607s (num_starts 2; 0.3838s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.767621s (num_starts 2; 0.3838s/start)
populate_branch_affecting_locs.: 0.796803s (num_starts 931; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.799413s (num_starts 4; 0.1999s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.799633s (num_starts 4; 0.1999s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.813034s (num_starts 1; 0.8130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.813041s (num_starts 1; 0.8130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.822677s (num_starts 5; 0.1645s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned.: 0.822692s (num_starts 5; 0.1645s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.83172s (num_starts 3; 0.2772s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 0.831847s (num_starts 3; 0.2773s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.83727s (num_starts 2; 0.4186s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.837278s (num_starts 2; 0.4186s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.837284s (num_starts 2; 0.4186s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.837303s (num_starts 2; 0.4187s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate.: 0.83731s (num_starts 2; 0.4187s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.837322s (num_starts 2; 0.4187s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.840994s (num_starts 267; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.841218s (num_starts 1; 0.8412s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.841225s (num_starts 1; 0.8412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.841231s (num_starts 1; 0.8412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.843623s (num_starts 2; 0.4218s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned.: 0.843632s (num_starts 2; 0.4218s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.854926s (num_starts 8; 0.1069s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.857283s (num_starts 4; 0.2143s/start)
put_smtlib_string_in_file.: 0.86265s (num_starts 878; 0.0010s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.871103s (num_starts 6; 0.1452s/start)
graph_identify_back_edges.: 0.871702s (num_starts 7904; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.897931s (num_starts 5; 0.1796s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.903451s (num_starts 1; 0.9035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.903457s (num_starts 1; 0.9035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.903461s (num_starts 1; 0.9035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.903479s (num_starts 1; 0.9035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate.: 0.903483s (num_starts 1; 0.9035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.90349s (num_starts 1; 0.9035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.91096s (num_starts 5; 0.1822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.911008s (num_starts 5; 0.1822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 0.911096s (num_starts 5; 0.1822s/start)
graph_identify_natural_loops.: 0.912949s (num_starts 7904; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned.: 0.922376s (num_starts 11; 0.0839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.926053s (num_starts 1; 0.9261s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-all-proof-path-optimizations.: 0.926054s (num_starts 1; 0.9261s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.926054s (num_starts 1; 0.9261s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 0.926058s (num_starts 1; 0.9261s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 0.952264s (num_starts 20; 0.0476s/start)
find_dominators.: 0.959724s (num_starts 9764; 0.0001s/start)
compute_z3_expr.: 0.962197s (num_starts 16533; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.963709s (num_starts 5; 0.1927s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.96382s (num_starts 5; 0.1928s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.963899s (num_starts 5; 0.1928s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.96399s (num_starts 5; 0.1928s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.970895s (num_starts 4; 0.2427s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.971035s (num_starts 4; 0.2428s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.971122s (num_starts 4; 0.2428s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.971233s (num_starts 4; 0.2428s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.991312s (num_starts 5; 0.1983s/start)
collect_inductive_preds_around_path.: 1.00079s (num_starts 548; 0.0018s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 1.01023s (num_starts 3; 0.3367s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 1.02062s (num_starts 8817; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 1.07933s (num_starts 1; 1.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 1.07933s (num_starts 1; 1.0793s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 1.07934s (num_starts 1; 1.0793s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 1.07934s (num_starts 1; 1.0793s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 1.0862s (num_starts 3; 0.3621s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 1.13866s (num_starts 1; 1.1387s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 1.13867s (num_starts 1; 1.1387s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 1.13867s (num_starts 1; 1.1387s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 1.13867s (num_starts 1; 1.1387s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.15402s (num_starts 267; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.16749s (num_starts 2; 0.5837s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.16756s (num_starts 2; 0.5838s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 1.26073s (num_starts 6; 0.2101s/start)
add_fresh_counterexample_at_pc_and_propagate.: 1.28136s (num_starts 148; 0.0087s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.28537s (num_starts 476; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.36664s (num_starts 7; 0.1952s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.36709s (num_starts 7; 0.1953s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.43293s (num_starts 6; 0.2388s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.433s (num_starts 6; 0.2388s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.43902s (num_starts 7; 0.2056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.43916s (num_starts 7; 0.2056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 1.4393s (num_starts 7; 0.2056s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 1.43951s (num_starts 7; 0.2056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed.: 1.45589s (num_starts 18; 0.0809s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 1.46219s (num_starts 8817; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 1.48026s (num_starts 32; 0.0463s/start)
tfg_preprocess.dst.ind.make_list.: 1.52022s (num_starts 928; 0.0016s/start)
tfg::tfg_preprocess.: 1.52275s (num_starts 928; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.52835s (num_starts 8; 0.1910s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.54384s (num_starts 8; 0.1930s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond.: 1.54409s (num_starts 8; 0.1930s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 1.57644s (num_starts 2; 0.7882s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess.: 1.5915s (num_starts 30; 0.0531s/start)
query:simplify-z3.: 1.63965s (num_starts 32344; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.7361s (num_starts 1; 1.7361s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.7361s (num_starts 1; 1.7361s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.73611s (num_starts 1; 1.7361s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.73612s (num_starts 1; 1.7361s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.73613s (num_starts 1; 1.7361s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false.: 1.73613s (num_starts 1; 1.7361s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.73614s (num_starts 1; 1.7361s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon).: 1.73615s (num_starts 1; 1.7361s/start)
do_ssa_transformation.: 1.75515s (num_starts 930; 0.0019s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.77044s (num_starts 11; 0.1609s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 1.77886s (num_starts 4147; 0.0004s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 1.78728s (num_starts 4147; 0.0004s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 1.79112s (num_starts 6; 0.2985s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 1.7997s (num_starts 1; 1.7997s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 1.81366s (num_starts 1; 1.8137s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 1.84168s (num_starts 17; 0.1083s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.84266s (num_starts 4; 0.4607s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.84269s (num_starts 4; 0.4607s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.84271s (num_starts 4; 0.4607s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.84546s (num_starts 10; 0.1845s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.8459s (num_starts 10; 0.1846s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 1.85931s (num_starts 21; 0.0885s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 1.87133s (num_starts 45; 0.0416s/start)
compute_lr_status_for_expr.: 1.9819s (num_starts 7218; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.02005s (num_starts 1; 2.0200s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.02006s (num_starts 1; 2.0201s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.02006s (num_starts 1; 2.0201s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 2.02008s (num_starts 1; 2.0201s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false.: 2.02008s (num_starts 1; 2.0201s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 2.02009s (num_starts 1; 2.0201s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 2.02256s (num_starts 6; 0.3371s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 2.02626s (num_starts 424; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.11709s (num_starts 7; 0.3024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.11724s (num_starts 7; 0.3025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 2.11738s (num_starts 7; 0.3025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 2.11757s (num_starts 7; 0.3025s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.12351s (num_starts 7; 0.3034s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 2.12398s (num_starts 7; 0.3034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.12992s (num_starts 4; 0.5325s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 2.14683s (num_starts 12; 0.1789s/start)
check_wfconds_on_edge.: 2.15112s (num_starts 28; 0.0768s/start)
corr_graph::add_edge().: 2.17426s (num_starts 12; 0.1812s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.1955s (num_starts 8; 0.2744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess.: 2.22054s (num_starts 19; 0.1169s/start)
compute_regions.: 2.22134s (num_starts 7904; 0.0003s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 2.22547s (num_starts 6; 0.3709s/start)
compute_new_lr_status_on_locs.: 2.33005s (num_starts 8817; 0.0003s/start)
counter_example_translate_on_edge_composition_helper.: 2.39693s (num_starts 1274; 0.0019s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 2.41171s (num_starts 12; 0.2010s/start)
corr_graph_add_correlation.: 2.41211s (num_starts 12; 0.2010s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.42615s (num_starts 11; 0.2206s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 2.46258s (num_starts 28; 0.0879s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 2.49314s (num_starts 12; 0.2078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.54011s (num_starts 7; 0.3629s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.54015s (num_starts 7; 0.3629s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.54018s (num_starts 7; 0.3629s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 2.5435s (num_starts 9; 0.2826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear.: 2.54353s (num_starts 9; 0.2826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 2.54359s (num_starts 9; 0.2826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.66307s (num_starts 2; 1.3315s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.66309s (num_starts 2; 1.3315s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 2.68587s (num_starts 14; 0.1918s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 2.69074s (num_starts 16; 0.1682s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.69949s (num_starts 3; 0.8998s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.69951s (num_starts 3; 0.8998s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.69951s (num_starts 3; 0.8998s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.76466s (num_starts 8; 0.3456s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.76469s (num_starts 8; 0.3456s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 2.76881s (num_starts 5; 0.5538s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown.: 2.76883s (num_starts 5; 0.5538s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 2.76887s (num_starts 5; 0.5538s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 2.77551s (num_starts 14; 0.1983s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear.: 2.77556s (num_starts 14; 0.1983s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 2.79124s (num_starts 6; 0.4652s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.8495s (num_starts 9; 0.3166s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 2.86555s (num_starts 17; 0.1686s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92024s (num_starts 14; 0.2086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92046s (num_starts 14; 0.2086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.92058s (num_starts 14; 0.2086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 2.92089s (num_starts 14; 0.2086s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 2.92126s (num_starts 14; 0.2087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.94286s (num_starts 5; 0.5886s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 2.96969s (num_starts 17; 0.1747s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed.: 2.97284s (num_starts 38; 0.0782s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.98371s (num_starts 6; 0.4973s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon).: 2.98573s (num_starts 7; 0.4265s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 3.0795s (num_starts 6; 0.5133s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.10812s (num_starts 11; 0.2826s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 3.12314s (num_starts 19; 0.1644s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.28923s (num_starts 6; 0.5482s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.28929s (num_starts 6; 0.5482s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.28932s (num_starts 6; 0.5482s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 3.30022s (num_starts 12; 0.2750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear.: 3.30027s (num_starts 12; 0.2750s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 3.30036s (num_starts 12; 0.2750s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.: 3.33392s (num_starts 2; 1.6670s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 3.38945s (num_starts 2762; 0.0012s/start)
guarded_predicate_set_and.: 3.54149s (num_starts 438; 0.0081s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.56037s (num_starts 15; 0.2374s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 3.63523s (num_starts 53; 0.0686s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 3.63994s (num_starts 6; 0.6067s/start)
apply_mask_and_overlay_array_constant.: 3.65701s (num_starts 2762; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.82946s (num_starts 12; 0.3191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.82951s (num_starts 12; 0.3191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 3.84172s (num_starts 6; 0.6403s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown.: 3.84175s (num_starts 6; 0.6403s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 3.8418s (num_starts 6; 0.6403s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.96672s (num_starts 4; 0.9917s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.96676s (num_starts 4; 0.9917s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.96677s (num_starts 4; 0.9917s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 3.97723s (num_starts 5; 0.7954s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 3.97725s (num_starts 5; 0.7954s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-all-proof-path-optimizations.: 3.97727s (num_starts 5; 0.7955s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 3.97729s (num_starts 5; 0.7955s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.04998s (num_starts 6; 0.6750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.05002s (num_starts 6; 0.6750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 4.07487s (num_starts 14; 0.2911s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear.: 4.07491s (num_starts 14; 0.2911s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.20163s (num_starts 21; 0.2001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.20211s (num_starts 21; 0.2001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 4.20254s (num_starts 21; 0.2001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 4.20303s (num_starts 21; 0.2001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.27806s (num_starts 15; 0.2852s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.: 4.51765s (num_starts 2; 2.2588s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.52424s (num_starts 8; 0.5655s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 4.52446s (num_starts 8; 0.5656s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 4.89481s (num_starts 6; 0.8158s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.9477s (num_starts 11; 0.4498s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 5.02755s (num_starts 34; 0.1479s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 5.04717s (num_starts 6; 0.8412s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown.: 5.04719s (num_starts 6; 0.8412s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 5.04722s (num_starts 6; 0.8412s/start)
check_equivalence_proof.: 5.0977s (num_starts 1; 5.0977s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.18475s (num_starts 27; 0.1920s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear.: 5.28238s (num_starts 62; 0.0852s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.2961s (num_starts 5; 1.0592s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.29615s (num_starts 5; 1.0592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.29617s (num_starts 5; 1.0592s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 5.42279s (num_starts 3; 1.8076s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.: 5.80249s (num_starts 1; 5.8025s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.81792s (num_starts 16; 0.3636s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.06091s (num_starts 7; 0.8658s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 6.6006s (num_starts 68; 0.0971s/start)
check_preds_on_edge_compositions.: 6.65603s (num_starts 33; 0.2017s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 6.75316s (num_starts 22; 0.3070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.86992s (num_starts 6; 1.1450s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.86997s (num_starts 6; 1.1450s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.87s (num_starts 6; 1.1450s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 6.88945s (num_starts 60816; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.06766s (num_starts 9; 0.7853s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 7.0679s (num_starts 9; 0.7853s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd).: 7.15011s (num_starts 19; 0.3763s/start)
decide_hoare_triple.: 7.25677s (num_starts 13; 0.5582s/start)
dst_edge_composition_proves_false.: 7.28046s (num_starts 9; 0.8089s/start)
get_next_dst_edge_composition_to_correlate.: 7.31504s (num_starts 10; 0.7315s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 7.80695s (num_starts 17; 0.4592s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown.: 7.80703s (num_starts 17; 0.4592s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.20025s (num_starts 14; 0.5857s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 8.25605s (num_starts 20; 0.4128s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.93321s (num_starts 33; 0.2707s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart).: 9.3744s (num_starts 35; 0.2678s/start)
liveness_analysis_conservative::xfer_and_meet.: 10.3048s (num_starts 7388; 0.0014s/start)
populate_loc_liveness.: 10.6837s (num_starts 931; 0.0115s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.0585s (num_starts 10; 1.1059s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 11.4183s (num_starts 3; 3.8061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.6217s (num_starts 21; 0.5534s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.6223s (num_starts 21; 0.5534s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.0708s (num_starts 24; 0.5030s/start)
tfg_postprocess_after_pointsto_analysis.: 12.8096s (num_starts 930; 0.0138s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 12.9492s (num_starts 62; 0.2089s/start)
ce_reconcile_sorts_and_values.: 13.2414s (num_starts 550; 0.0241s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 14.3659s (num_starts 8752; 0.0016s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.9185s (num_starts 31; 0.5135s/start)
parse_z3_model.: 16.4095s (num_starts 549; 0.0299s/start)
read_counter_examples_from_channel.: 16.55s (num_starts 288; 0.0575s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 16.8835s (num_starts 8752; 0.0019s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 18.5165s (num_starts 55; 0.3367s/start)
decide_hoare_triple_helper;per-query-type;linear.: 18.6772s (num_starts 119; 0.1570s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 18.7601s (num_starts 64631; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 18.8492s (num_starts 60816; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 19.9083s (num_starts 60816; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 21.1041s (num_starts 14; 1.5074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 21.1042s (num_starts 14; 1.5074s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 22.9037s (num_starts 15; 1.5269s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 22.9037s (num_starts 15; 1.5269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 24.598s (num_starts 17; 1.4469s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 24.5981s (num_starts 17; 1.4469s/start)
expr_do_simplify_using_lhs_set_and_precond.: 25.4689s (num_starts 12202; 0.0021s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 25.6333s (num_starts 1; 25.6333s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 25.6333s (num_starts 1; 25.6333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 25.6333s (num_starts 1; 25.6333s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 26.4115s (num_starts 18; 1.4673s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 26.4116s (num_starts 18; 1.4673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 26.4227s (num_starts 27; 0.9786s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown.: 26.4228s (num_starts 27; 0.9786s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 27.9492s (num_starts 19; 1.4710s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 27.9495s (num_starts 19; 1.4710s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 27.9499s (num_starts 19; 1.4710s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 27.9503s (num_starts 19; 1.4711s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 28.2648s (num_starts 44; 0.6424s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 28.577s (num_starts 6; 4.7628s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 29.2283s (num_starts 6; 4.8714s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-all-proof-path-optimizations.: 29.2467s (num_starts 3; 9.7489s/start)
ftmap_run_pointsto_analysis.: 31.157s (num_starts 930; 0.0335s/start)
tfg_run_pointsto_analysis.: 31.2388s (num_starts 930; 0.0336s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 31.4801s (num_starts 27; 1.1659s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown.: 31.4802s (num_starts 27; 1.1659s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 32.7424s (num_starts 25; 1.3097s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned.: 32.7861s (num_starts 47; 0.6976s/start)
tfg_populate_structs_after_ssa_construction.: 32.7971s (num_starts 930; 0.0353s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 33.3398s (num_starts 48; 0.6946s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 34.1559s (num_starts 6; 5.6926s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 35.2318s (num_starts 930; 0.0379s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 35.2971s (num_starts 29; 1.2171s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 35.3678s (num_starts 65; 0.5441s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 35.7614s (num_starts 6; 5.9602s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 36.7905s (num_starts 59; 0.6236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 37.2561s (num_starts 22; 1.6935s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 37.2567s (num_starts 22; 1.6935s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd).: 37.7098s (num_starts 140; 0.2694s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart).: 39.1241s (num_starts 148; 0.2644s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown.: 41.4359s (num_starts 66; 0.6278s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 51.2189s (num_starts 93; 0.5507s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry).: 76.8604s (num_starts 94; 0.8177s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-all-proof-path-optimizations.: 82.07s (num_starts 42; 1.9540s/start)
decide_hoare_triple_helper;-all-proof-path-optimizations.: 82.072s (num_starts 42; 1.9541s/start)
query:smt.: 114.151s (num_starts 439; 0.2600s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 116.51s (num_starts 225; 0.5178s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 119.03s (num_starts 156; 0.7630s/start)
spawn_smt_query.: 130.708s (num_starts 439; 0.2977s/start)
solver_provable.: 147.972s (num_starts 438; 0.3378s/start)
solver_satisfiable-cache-miss.: 148.017s (num_starts 439; 0.3372s/start)
solver_satisfiable.: 148.021s (num_starts 439; 0.3372s/start)
expr_is_provable.: 148.315s (num_starts 438; 0.3386s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 148.329s (num_starts 438; 0.3387s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 148.356s (num_starts 438; 0.3387s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 148.381s (num_starts 438; 0.3388s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 151.954s (num_starts 438; 0.3469s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 152.004s (num_starts 438; 0.3470s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 152.013s (num_starts 438; 0.3471s/start)
update_invariant_state_for_edges.: 189.38s (num_starts 12; 15.7817s/start)
cg_check_new_cg_ec.: 189.452s (num_starts 12; 15.7877s/start)
correl_entry_apply.: 189.453s (num_starts 12; 15.7877s/start)
is_expr_equal_using_lhs_set_and_precond.: 194.331s (num_starts 267; 0.7278s/start)
prove.: 194.335s (num_starts 267; 0.7278s/start)
prove_spawn_and_join_helper.: 194.337s (num_starts 267; 0.7279s/start)
prove_spawn_and_join.: 196.76s (num_starts 267; 0.7369s/start)
expandProductCFG.: 196.782s (num_starts 13; 15.1371s/start)
prove_wrapper.proof_query_not_trivial.: 196.818s (num_starts 267; 0.7371s/start)
prove_wrapper.: 197.362s (num_starts 548; 0.3602s/start)
decide_hoare_triple_check_ub.: 198.052s (num_starts 548; 0.3614s/start)
decide_hoare_triple_helper.: 199.29s (num_starts 548; 0.3637s/start)
bestFirstSearch.: 199.43s (num_starts 1; 199.4305s/start)
decide_hoare_triple_with_alias_cons.: 200.58s (num_starts 548; 0.3660s/start)
Time taken for equivalence check.: 204.548s (num_starts 1; 204.5475s/start)

counters:
# of Paths Prunned through CE propagation.: 2
# of assume sat failures for undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry.: 5
# of assume sat failures for undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d.: 27
# of assume sat failures for undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry.: 32
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 2
# of paths enumerated.: 24
# of paths expanded.: 12
# of queries to linear solver.: 176
# of smt-solver-queries.: 439
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_ecs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_to_pcs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_ecs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_to_pcs.: 1
num-backtrackings.: 8
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 14
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 18
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 10
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 18
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 24
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 19
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 31
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 25
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 27
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 21
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 19
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 8
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 8
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 549
total-correlation-possibilities.: 13
total-correlation-possibilities-mod-lsprels.: 13
total-correlations-explored.: 13

flags:
dst-aloc.: 0
dst-edges.: 9
dst-nodes.: 9
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 3
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 10
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 16
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 33
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 32
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 26
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 5
final-CG-num-invariants.: 41
final-CG-super-edges.: 0
src-edges.: 6
src-nodes.: 6
timeout-occured.: 1

info:
eq-state.: find_correlation
final-CG-time-secs.: 166.69
final-CG-time-to-total-time-ratio.: 0.84
query-time-to-total-time-ratio.: 0.57

Context stats:
exprs: count: 342679
sorts: count: 32109
num_proof_queries: 267
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	178570
	        hit ratio:	0.934659
m_simplify_solver:
	----------- total:	52415
	        hit ratio:	0.689955
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	25827
	        hit ratio:	0.832733
m_z3_solver_substitution:
	----------- total:	16250
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	16251
	        hit ratio:	0
m_is_expr_not_equal_syntactic:
	----------- total:	583
	        hit ratio:	0.998285
m_expr_size:
	----------- total:	109522
	        hit ratio:	0.845154
m_contains_only_constants_or_sp_versions:
	----------- total:	4717
	        hit ratio:	0.678609
m_expr_evaluates_to_constant_visitor:
	----------- total:	509093
	        hit ratio:	0.584801
m_sort_dfa_canonicalize:
	----------- total:	1570839
	        hit ratio:	0.989812
m_expr_convert_to_iexpr:
	----------- total:	16261
	        hit ratio:	0.706722

z3_solver expr_query_cache entry size: 439
	----------- total:	439
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in s):
[ 0.0226,  0.0445) (avg.  0.0362)        : 56
[ 0.0445,  0.0878) (avg.  0.0592)        : 111
[ 0.0878,  0.1731) (avg.  0.1290)        : 72
[ 0.1731,  0.3414) (avg.  0.2408)        : 164
[ 0.3414,  0.6732) (avg.  0.4315)        : 15
[ 0.6732,  1.3277) (avg.  0.9370)        : 17
[ 1.3277,  2.6183) (avg.  0.0000)        : 0
[ 2.6183,  5.1637) (avg.  2.8297)        : 2
[ 5.1637, 10.1834) (avg.  8.6322)        : 1
[10.1834, 20.0830) (avg. 20.0820)        : 1
histogram (number of quantifiers in query)
[ 0,  2) (avg.  0)                       : 1
[ 2,  4) (avg.  0)                       : 0
[ 4,  6) (avg.  0)                       : 0
[ 6,  8) (avg.  6)                       : 113
[ 8, 10) (avg.  9)                       : 293
[10, 12) (avg. 10)                       : 32
[12, 14) (avg.  0)                       : 0
[14, 16) (avg.  0)                       : 0
[16, 18) (avg.  0)                       : 0
[18, 20) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 46, 132) (avg.  46)                    : 1
[132, 218) (avg. 178)                    : 96
[218, 304) (avg. 256)                    : 54
[304, 390) (avg. 354)                    : 63
[390, 476) (avg. 445)                    : 112
[476, 562) (avg. 521)                    : 66
[562, 648) (avg. 608)                    : 14
[648, 734) (avg. 715)                    : 20
[734, 820) (avg. 743)                    : 12
[820, 906) (avg. 896)                    : 1
Top 10 highest time taking queries:
1. [20.082s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
2. [8.632s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.1
3. [3.040s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
4. [2.620s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
5. [1.040s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
6. [1.039s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
7. [1.039s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
8. [1.038s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.1
9. [1.038s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
10. [1.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2

<MSG>3:47 : Successfully computed equivalence for function: make_list.</MSG>

tfg_edge_expr_wp_fn: num_starts 142 time spent: 0:0:0 [0.003695s total; 0.000026 per start]
tfg_computeWP: num_starts 1538 time spent: 0:0:0 [0.494526s total; 0.000322 per start]
tfg_get_simplified_to_state_for_edge: num_starts 4550 time spent: 0:0:0 [0.009715s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 11521 time spent: 0:0:0 [0.017964s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 17057 time spent: 0:0:0 [0.023221s total; 0.000001 per start]
add_nodeces_at_pc_and_propagate: num_starts 159 time spent: 0:0:1 [1.078729s total; 0.006784 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 24 time spent: 0:0:2 [2.152547s total; 0.089689 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 933 time spent: 0:0:2 [2.328666s total; 0.002496 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 438 time spent: 0:0:0 [0.398267s total; 0.000909 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 770 time spent: 0:0:2 [2.206445s total; 0.002866 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 5075 time spent: 0:0:2 [2.563671s total; 0.000505 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 834 time spent: 0:0:0 [0.077323s total; 0.000093 per start]
tfg_graph_get_vars_written_on_edge: num_starts 770 time spent: 0:0:0 [0.029168s total; 0.000038 per start]
cg_with_rank_add_CE_at_pc: num_starts 262 time spent: 0:0:0 [0.661429s total; 0.002525 per start]
graph_with_ce_add_CE_at_pc: num_starts 161 time spent: 0:0:0 [0.009412s total; 0.000058 per start]
graph_with_guessing_add_CE_at_pc: num_starts 262 time spent: 0:0:0 [0.656585s total; 0.002506 per start]
point_set_add_point_using_CE: num_starts 988 time spent: 0:0:0 [0.202867s total; 0.000205 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 988 time spent: 0:0:0 [0.205510s total; 0.000208 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 188 time spent: 0:0:0 [0.537083s total; 0.002857 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 188 time spent: 0:0:0 [0.326777s total; 0.001738 per start]
expr_label_memlabels_using_memlabel_map: num_starts 82854 time spent: 0:0:2 [2.199325s total; 0.000027 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 2511 time spent: 0:0:0 [0.109374s total; 0.000044 per start]
expr_simplify_solver: num_starts 52762 time spent: 0:0:3 [3.351463s total; 0.000064 per start]
expr_simplify_syntactic: num_starts 53202 time spent: 0:0:20 [20.581449s total; 0.000387 per start]
expr_simplify_select_on_store: num_starts 7119 time spent: 0:0:19 [19.256703s total; 0.002705 per start]
expr_simplify_store_on_store: num_starts 822 time spent: 0:0:0 [0.033150s total; 0.000040 per start]
expr_simplify_using_lhs_set_helper: num_starts 12348 time spent: 0:0:25 [25.562586s total; 0.002070 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 117502 time spent: 0:0:25 [25.458288s total; 0.000217 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 51418 time spent: 0:0:0 [0.202285s total; 0.000004 per start]
expr_simplify_eq: num_starts 6557 time spent: 0:0:0 [0.070371s total; 0.000011 per start]
expr_simplify_or: num_starts 48 time spent: 0:0:0 [0.000064s total; 0.000001 per start]
expr_simplify_and: num_starts 2421 time spent: 0:0:0 [0.016075s total; 0.000007 per start]
expr_simplify_not: num_starts 29 time spent: 0:0:0 [0.000100s total; 0.000003 per start]
expr_simplify_implies: num_starts 921 time spent: 0:0:0 [0.008285s total; 0.000009 per start]
expr_simplify_ite: num_starts 4241 time spent: 0:0:0 [0.179562s total; 0.000042 per start]
canonicalize_expr_tree: num_starts 16349 time spent: 0:0:0 [0.595186s total; 0.000036 per start]
expr_simplify_memalloc_using_memlabel: num_starts 3408 time spent: 0:0:0 [0.013402s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 9127 time spent: 0:0:18 [18.920187s total; 0.002073 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 788 time spent: 0:0:1 [1.155551s total; 0.001466 per start]
memlabels_are_independent: num_starts 2080 time spent: 0:0:0 [0.016080s total; 0.000008 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 672 time spent: 0:0:0 [0.334650s total; 0.000498 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 672 time spent: 0:0:0 [0.327560s total; 0.000487 per start]
is_overlapping_atoms_pair_syntactic: num_starts 672 time spent: 0:0:0 [0.296259s total; 0.000441 per start]
is_overlapping_considering_type_constraints: num_starts 672 time spent: 0:0:0 [0.006959s total; 0.000010 per start]
find_offset_wrt_typed_variable_pointer: num_starts 672 time spent: 0:0:0 [0.006893s total; 0.000010 per start]
is_gep_inbounds_offset: num_starts 672 time spent: 0:0:0 [0.003604s total; 0.000005 per start]
get_arithmetic_addsub_atoms: num_starts 93311 time spent: 0:0:0 [0.066017s total; 0.000001 per start]
expr_is_variable_start: num_starts 972 time spent: 0:0:0 [0.000163s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 28683 time spent: 0:0:0 [0.400648s total; 0.000014 per start]
expr_is_consts_struct_constant: num_starts 26136 time spent: 0:0:0 [0.022752s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 179062 time spent: 0:0:24 [24.812511s total; 0.000139 per start]
expr_do_simplify_helper_cache: num_starts 179062 time spent: 0:0:0 [0.194531s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 12943 time spent: 0:0:0 [0.014856s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 12943 time spent: 0:0:0 [0.036949s total; 0.000003 per start]
evaluate_expr_and_check_bounds: num_starts 5224 time spent: 0:0:2 [2.672091s total; 0.000512 per start]
array_constant_equals: num_starts 203564 time spent: 0:0:0 [0.209127s total; 0.000001 per start]
sort_dfa_canonical: num_starts 1717514 time spent: 0:0:3 [3.678890s total; 0.000002 per start]
expr_convert_to_iexpr: num_starts 16317 time spent: 0:0:2 [2.949477s total; 0.000181 per start]
combo_dfa_xfer_and_meet: num_starts 8752 time spent: 0:0:16 [16.870498s total; 0.001928 per start]
alias_val_xfer_and_meet: num_starts 8752 time spent: 0:0:14 [14.348097s total; 0.001639 per start]
get_sprel_map_from_avail_exprs: num_starts 12705 time spent: 0:0:0 [0.305159s total; 0.000024 per start]
update_memlabels_for_memslot_locs: num_starts 3023 time spent: 0:0:0 [0.010596s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 17634 time spent: 0:0:0 [0.876709s total; 0.000050 per start]
compute_simplified_loc_exprs_for_edge: num_starts 41333 time spent: 0:0:9 [9.965128s total; 0.000241 per start]
compute_locs_definitely_written_on_edge: num_starts 17634 time spent: 0:0:0 [0.006892s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 5099 time spent: 0:0:1 [1.937347s total; 0.000380 per start]
edge_update_memlabel_map_for_mlvars: num_starts 8817 time spent: 0:0:1 [1.033604s total; 0.000117 per start]
add_new_locs_based_on_edge: num_starts 8752 time spent: 0:0:11 [11.165141s total; 0.001276 per start]
expand_locset_to_include_slots_for_memmask: num_starts 8646 time spent: 0:0:0 [0.073092s total; 0.000008 per start]
total: num_starts 1 time spent: 0:3:53 [233.480670s total; 233.480670 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 206.02s.
ftmap_run_pointsto_analysis.: 31.157s (num_starts 930; 0.0335s/start)s.
EQ Time after pointsto analysis: 174.866s.
EQ Time after pointsto analysis and smt_query: -22.4965s.
EQ Time after pointsto analysis and smt_query and bv-solve: -22.5741s.
Equivalence proof found. The programs are equivalent.
