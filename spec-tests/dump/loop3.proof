=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%5%d L3%6%bbentry L3%8%bbentry L3%10%bbentry L3%12%bbentry L3%13%d L3%14%bbentry L3%15%bbentry E0%0%d
=Edges:
L0%0%d => L3%12%bbentry
L3%12%bbentry => L3%13%d
L3%13%d => L3%15%bbentry
L3%13%d => L3%14%bbentry
L3%14%bbentry => L3%5%d
L3%5%d => L3%8%bbentry
L3%5%d => L3%6%bbentry
L3%6%bbentry => L3%10%bbentry
L3%8%bbentry => L3%10%bbentry
L3%10%bbentry => E0%0%d
L3%15%bbentry => L3%12%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%5%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%12%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%13%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%14%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%15%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-n-1 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%12%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L3%12%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%12%bbentry => L3%13%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%13%d
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
2 : input.spec-%var-n-0.L3%12%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_bvsgt)
tfg_edge_comment end

=Edge: L3%13%d => L3%15%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%13%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_false_split
tfg_edge_comment end

=Edge: L3%13%d => L3%14%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%13%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_true_split
tfg_edge_comment end

=Edge: L3%14%bbentry => L3%5%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.L3%5%d
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=spec-%tmpvar-12.L3%5%d
1 : SORT2EXPR.VAR : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%var-r-0.L3%12%bbentry : BV:32
4 : sum_init(1, 2, 3) : SUM[BV:32,BV:32]
=spec-%tmpvar-7.L3%5%d
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=spec-%tmpvar-8.L3%5%d
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*ite_true_merge)*func_ret)*(inline_exit*ctor_sum))
tfg_edge_comment end

=Edge: L3%5%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:9:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%5%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:7:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%10%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.L3%10%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-fst-1.L3%10%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L3%8%bbentry => L3%10%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.L3%10%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-snd-1.L3%10%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L3%10%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-13.L3%10%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*func_ret)
tfg_edge_comment end

=Edge: L3%15%bbentry => L3%12%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-n-0.L3%12%bbentry
1 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=spec-%var-r-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%12%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%12%bbentry
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%12%bbentry
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-4.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
=spec-%var-fst-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-snd-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((bb_entry*ctor_bv)*intrinsic_app_bvadd)*intrinsic_app_bvadd)*ctor_prod)*match_prod_0)*(match_prod_1*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-n-1
1 : input.spec-%var-n-1 : BV:32
=Loc 23 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 24 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%13%d
1 : input.spec-%tmpvar-0.L3%13%d : BOOL
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L3%5%d
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
=Loc 27 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L3%10%bbentry
1 : input.spec-%tmpvar-13.L3%10%bbentry : BV:32
=Loc 28 in src.spec.foo.
REGMEM
spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Loc 29 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%12%bbentry
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%var-n-0.L3%12%bbentry
1 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%5%d
1 : input.spec-%tmpvar-11.L3%5%d : BV:32
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%5%d
1 : input.spec-%tmpvar-7.L3%5%d : BV:32
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%5%d
1 : input.spec-%tmpvar-8.L3%5%d : BV:32
=Loc 34 in src.spec.foo.
REGMEM
spec-%var-r-0.L3%12%bbentry
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-fst-1.L3%10%bbentry
1 : input.spec-%var-fst-1.L3%10%bbentry : BV:32
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-snd-1.L3%10%bbentry
1 : input.spec-%var-snd-1.L3%10%bbentry : BV:32
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%12%bbentry
1 : input.spec-%tmpvar-10.L3%12%bbentry : BV:32
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%12%bbentry
1 : input.spec-%tmpvar-9.L3%12%bbentry : BV:32
=Loc 39 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%12%bbentry : BV:32
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%12%bbentry
1 : input.spec-%tmpvar-1.L3%12%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%12%bbentry
1 : input.spec-%tmpvar-2.L3%12%bbentry : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%12%bbentry
1 : input.spec-%tmpvar-3.L3%12%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L3%12%bbentry
1 : input.spec-%tmpvar-4.L3%12%bbentry : PROD[BV:32,BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%var-fst-0.L3%12%bbentry
1 : input.spec-%var-fst-0.L3%12%bbentry : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%var-snd-0.L3%12%bbentry
1 : input.spec-%var-snd-0.L3%12%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%5%d
1, 26, 
=live locs at L3%6%bbentry
1, 
=live locs at L3%8%bbentry
26, 
=live locs at L3%10%bbentry
27, 
=live locs at L3%12%bbentry
1, 29, 30, 34, 
=live locs at L3%13%d
1, 25, 29, 30, 34, 
=live locs at L3%14%bbentry
1, 34, 
=live locs at L3%15%bbentry
1, 29, 30, 34, 
=live locs at E0%0%d
28[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 23, 24
=loc definedness at L3%5%d
1, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L3%6%bbentry
1, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L3%8%bbentry
1, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L3%10%bbentry
1, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L3%12%bbentry
1, 23, 24, 29, 30, 34, 37, 38, 39
=loc definedness at L3%13%d
1, 23, 24, 25, 29, 30, 34, 37, 38, 39
=loc definedness at L3%14%bbentry
1, 23, 24, 25, 29, 30, 34, 37, 38, 39
=loc definedness at L3%15%bbentry
1, 23, 24, 25, 29, 30, 34, 37, 38, 39
=loc definedness at E0%0%d
1, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%5%d
26
=branch affecting variable locs at L3%6%bbentry

=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%10%bbentry

=branch affecting variable locs at L3%12%bbentry
29, 30, 34
=branch affecting variable locs at L3%13%d
25, 29, 30, 34
=branch affecting variable locs at L3%14%bbentry
34
=branch affecting variable locs at L3%15%bbentry
29, 30, 34
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry for loc_id 29 {input.spec-%var-i-0.L3%12%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry for loc_id 30 {input.spec-%var-n-0.L3%12%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry for loc_id 34 {input.spec-%var-r-0.L3%12%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry for loc_id 37 {input.spec-%tmpvar-10.L3%12%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry for loc_id 38 {input.spec-%tmpvar-9.L3%12%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry for loc_id 39 {input.src.spec-ghostvar.itervar.1.L3%12%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%12%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%10%bbentry for loc_id 27 {input.spec-%tmpvar-13.L3%10%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%10%bbentry for loc_id 35 {input.spec-%var-fst-1.L3%10%bbentry }
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%10%bbentry for loc_id 27 {input.spec-%tmpvar-13.L3%10%bbentry }
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%10%bbentry for loc_id 36 {input.spec-%var-snd-1.L3%10%bbentry }
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>E0%0%d for loc_id 28 {input.spec-%tmpvar-14.E0%0%d }
1 : input.spec-%tmpvar-13.L3%10%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%12%bbentry=>L3%13%d
=graph_with_edge_structures.loc_to_expr_map at L3%12%bbentry=>L3%13%d for loc_id 25 {input.spec-%tmpvar-0.L3%13%d }
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
2 : input.spec-%var-n-0.L3%12%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%12%bbentry=>L3%13%d done
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%14%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%14%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%15%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%15%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%5%d
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%5%d for loc_id 26 {input.spec-%tmpvar-12.L3%5%d }
1 : SORT2EXPR.VAR : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%var-r-0.L3%12%bbentry : BV:32
4 : sum_init(1, 2, 3) : SUM[BV:32,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%5%d for loc_id 31 {input.spec-%tmpvar-11.L3%5%d }
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%5%d for loc_id 32 {input.spec-%tmpvar-7.L3%5%d }
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%5%d for loc_id 33 {input.spec-%tmpvar-8.L3%5%d }
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%5%d done
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 29 {input.spec-%var-i-0.L3%12%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 34 {input.spec-%var-r-0.L3%12%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 39 {input.src.spec-ghostvar.itervar.1.L3%12%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%12%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 40 {input.spec-%tmpvar-1.L3%12%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 41 {input.spec-%tmpvar-2.L3%12%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 42 {input.spec-%tmpvar-3.L3%12%bbentry }
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
2 : input.spec-%var-r-0.L3%12%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 43 {input.spec-%tmpvar-4.L3%12%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 44 {input.spec-%var-fst-0.L3%12%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry for loc_id 45 {input.spec-%var-snd-0.L3%12%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%15%bbentry=>L3%12%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%5%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%10%bbentry:
vacuous mls at L3%12%bbentry:
vacuous mls at L3%13%d:
vacuous mls at L3%14%bbentry:
vacuous mls at L3%15%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%5%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%10%bbentry:
non-vacuous mls at L3%12%bbentry:
non-vacuous mls at L3%13%d:
non-vacuous mls at L3%14%bbentry:
non-vacuous mls at L3%15%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 30
=loc_expr
140335 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.end
=loc 37
=loc_expr
140404 : input.spec-%tmpvar-10.L3%12%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 38
=loc_expr
140405 : input.spec-%tmpvar-9.L3%12%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 40
=loc_expr
140406 : input.spec-%tmpvar-1.L3%12%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 37 expr
1 : input.spec-%tmpvar-10.L3%12%bbentry : BV:32
=loc 37 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 38 expr
1 : input.spec-%tmpvar-9.L3%12%bbentry : BV:32
=loc 38 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=loc 40 expr
1 : input.spec-%tmpvar-1.L3%12%bbentry : BV:32
=loc 40 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 37 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%12%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%d=>L3%6%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%d=>L3%8%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%10%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>L3%10%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%10%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%12%bbentry=>L3%13%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%13%d=>L3%14%bbentry
1 : input.spec-%tmpvar-0.L3%13%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%13%d=>L3%15%bbentry
1 : input.spec-%tmpvar-0.L3%13%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%14%bbentry=>L3%5%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%15%bbentry=>L3%12%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%12%bbentry
=spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L3%12%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%d=>L3%6%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%10%bbentry
=spec-%tmpvar-13.L3%10%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-fst-1.L3%10%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>L3%10%bbentry
=spec-%tmpvar-13.L3%10%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-snd-1.L3%10%bbentry
1 : input.spec-%tmpvar-12.L3%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%10%bbentry=>E0%0%d
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-13.L3%10%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%12%bbentry=>L3%13%d
=spec-%tmpvar-0.L3%13%d
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
2 : input.spec-%var-n-0.L3%12%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%13%d=>L3%14%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%13%d=>L3%15%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%14%bbentry=>L3%5%d
=spec-%tmpvar-11.L3%5%d
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=spec-%tmpvar-12.L3%5%d
1 : SORT2EXPR.VAR : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%var-r-0.L3%12%bbentry : BV:32
4 : sum_init(1, 2, 3) : SUM[BV:32,BV:32]
=spec-%tmpvar-7.L3%5%d
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=spec-%tmpvar-8.L3%5%d
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%15%bbentry=>L3%12%bbentry
=spec-%var-i-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-r-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%12%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%12%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%12%bbentry
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
2 : input.spec-%var-r-0.L3%12%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-4.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
=spec-%var-fst-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-snd-0.L3%12%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L3%12%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L3%12%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%12%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%12%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>L3%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>L3%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%12%bbentry=>L3%13%d
=graph_with_simplified_assets.simplified_assumes at L3%12%bbentry=>L3%13%d done
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%14%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%14%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%15%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%15%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%14%bbentry=>L3%5%d
=graph_with_simplified_assets.simplified_assumes at L3%14%bbentry=>L3%5%d done
=graph_with_simplified_assets.simplified_assumes at L3%15%bbentry=>L3%12%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%15%bbentry=>L3%12%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%5%d for src.spec.foo
=suffixpath_at_L3%5%d.graph_edge_composition
((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*(L3%14%bbentry=>L3%5%d))))
=suffixpath_at_L3%6%bbentry for src.spec.foo
=suffixpath_at_L3%6%bbentry.graph_edge_composition
((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*((L3%14%bbentry=>L3%5%d)*(L3%5%d=>L3%6%bbentry)))))
=suffixpath_at_L3%8%bbentry for src.spec.foo
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*((L3%14%bbentry=>L3%5%d)*(L3%5%d=>L3%8%bbentry)))))
=suffixpath_at_L3%10%bbentry for src.spec.foo
=suffixpath_at_L3%10%bbentry.graph_edge_composition
(((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*((L3%14%bbentry=>L3%5%d)*((L3%5%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%10%bbentry))))))+((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*((L3%14%bbentry=>L3%5%d)*((L3%5%d=>L3%8%bbentry)*(L3%8%bbentry=>L3%10%bbentry)))))))
=suffixpath_at_L3%12%bbentry for src.spec.foo
=suffixpath_at_L3%12%bbentry.graph_edge_composition
(L0%0%d=>L3%12%bbentry)
=suffixpath_at_L3%13%d for src.spec.foo
=suffixpath_at_L3%13%d.graph_edge_composition
((L0%0%d=>L3%12%bbentry)*(L3%12%bbentry=>L3%13%d))
=suffixpath_at_L3%14%bbentry for src.spec.foo
=suffixpath_at_L3%14%bbentry.graph_edge_composition
((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*(L3%13%d=>L3%14%bbentry)))
=suffixpath_at_L3%15%bbentry for src.spec.foo
=suffixpath_at_L3%15%bbentry.graph_edge_composition
((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*(L3%13%d=>L3%15%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*((L3%14%bbentry=>L3%5%d)*((L3%5%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%10%bbentry))))))+((L0%0%d=>L3%12%bbentry)*((L3%12%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*((L3%14%bbentry=>L3%5%d)*((L3%5%d=>L3%8%bbentry)*(L3%8%bbentry=>L3%10%bbentry)))))))*(L3%10%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%12%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%12%bbentry done
tfg.assumes_around_edge at L3%5%d=>L3%6%bbentry
tfg.assumes_around_edge at L3%5%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%5%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%5%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%10%bbentry
tfg.assumes_around_edge at L3%6%bbentry=>L3%10%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>L3%10%bbentry
tfg.assumes_around_edge at L3%8%bbentry=>L3%10%bbentry done
tfg.assumes_around_edge at L3%10%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%10%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%12%bbentry=>L3%13%d
tfg.assumes_around_edge at L3%12%bbentry=>L3%13%d done
tfg.assumes_around_edge at L3%13%d=>L3%14%bbentry
tfg.assumes_around_edge at L3%13%d=>L3%14%bbentry done
tfg.assumes_around_edge at L3%13%d=>L3%15%bbentry
tfg.assumes_around_edge at L3%13%d=>L3%15%bbentry done
tfg.assumes_around_edge at L3%14%bbentry=>L3%5%d
tfg.assumes_around_edge at L3%14%bbentry=>L3%5%d done
tfg.assumes_around_edge at L3%15%bbentry=>L3%12%bbentry
tfg.assumes_around_edge at L3%15%bbentry=>L3%12%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 17 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !19)*  %r.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !14)*(  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ], !dbg !18*  br label %for.cond, !dbg !19))*  br label %for.cond, !dbg !19)*(  br label %for.cond, !dbg !19*  br label %for.cond, !dbg !19))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp sle i32 %i.0, %n, !dbg !20)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !22*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !22*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %r.0, !dbg !30
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:(((((  %add = add nsw i32 %r.0, %i.0, !dbg !23*  br label %for.inc, !dbg !25)*  br label %for.inc, !dbg !25)*  br label %for.inc, !dbg !25)*(((((  %inc = add nsw i32 %i.0, 1, !dbg !26*  br label %for.cond, !dbg !27, !llvm.loop !28)*  %r.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !14)*(  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ], !dbg !18*  br label %for.cond, !dbg !27, !llvm.loop !28))*  br label %for.cond, !dbg !27, !llvm.loop !28)*(  br label %for.cond, !dbg !27, !llvm.loop !28*  br label %for.cond, !dbg !27, !llvm.loop !28)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100011 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100023 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100024 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100025 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100025, 
=live locs at Lfor.body%1%d
100006, 100025, 100027, 100031, 
=live locs at Lfor.cond%1%bbentry
100006, 100025, 100027[f], 100031, 
=live locs at Lfor.cond%2%d
100006, 100025, 100027[f], 100030, 100031, 
=live locs at Lfor.end%1%d
100025, 100027[f], 
=live locs at E0%0%d
100025, 100027[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100021, 100023, 100024, 100025
=loc definedness at Lfor.body%1%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.cond%1%bbentry
100006, 100021, 100023, 100024, 100025, 100027, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.cond%2%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.end%1%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at E0%0%d
100006, 100021, 100023, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100039, 100040

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%d
100006, 100031
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100031
=branch affecting variable locs at Lfor.cond%2%d
100006, 100030, 100031
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100027 {input.dst.llvm-%r.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100031 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100032 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100033 {input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100039 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100027 {input.dst.llvm-%r.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100031 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100035 {input.dst.llvm-%add.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100036 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100038 {input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100030 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100026 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100028 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100029 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140346 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140367 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140368 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140370 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140372 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140374 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140354 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140349 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140469 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100028
=loc_expr
140470 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140471 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100032
=loc_expr
140472 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140473 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140478 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100040
=loc_expr
140479 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100029 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100029 spreled-expr
140267 : retaddr_const : BV:32
=loc 100032 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100032 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=loc 100033 expr
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100033 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100039 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100039 spreled-expr
140354 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100040 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100040 spreled-expr
140353 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100011 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100029 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.end%1%d
=linename
line 6
=pc
Lfor.inc%1%d
=linename
line 3
=pc
Lfor.inc%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 7
=pc
Lfor.body%2%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 21
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 27
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
line 4
=pc
Lfor.body%2%d
=line_and_column
line 5
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 21)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 6
=pc
Lfor.inc%1%d
=line_and_column
(line 3 at column 27)
=pc
Lfor.inc%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%r.0 : Lfor.cond%1%bbentry : r'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 1
input.dst.llvm-%r.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%add : Lfor.body%2%bbentry : r'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%r.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%r.0.Lfor.cond%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 1
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: nuw nsw
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000001b
2 : scev_op_addrec(1, 1) : loop Lfor.cond%1%d : nuw nsw
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:1
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%i.0 val_scevb signed lower bound: 32:1
=dst.llvm-%i.0 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: nuw nsw
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000001b
2 : scev_op_addrec(1, 1) : loop Lfor.cond%1%d : nuw nsw
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:1
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:1
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: nuw
=dst.llvm-%i.0 atexit_scev scev_expr
1 : 00000000000000000000000000000001b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
6 : scev_op_add(1, 5) : loop L0%0%d : nuw
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%r.0
=dst.llvm-%r.0 loop pc: Lfor.cond%1%d
=dst.llvm-%r.0 val_scevb
=dst.llvm-%r.0 val_scevb scev
=dst.llvm-%r.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%r.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%r.0 val_scevb scev scev_expr
3 : 00000000000000000000000000000000b
1 : 00000000000000000000000000000001b
7 : scev_op_addrec(3, 1, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%r.0 val_scevb scev scev_expr done
=dst.llvm-%r.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%r.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%r.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%r.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb
=dst.llvm-%r.0 atuse_scevb scev
=dst.llvm-%r.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%r.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%r.0 atuse_scevb scev scev_expr
3 : 00000000000000000000000000000000b
1 : 00000000000000000000000000000001b
7 : scev_op_addrec(3, 1, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%r.0 atuse_scevb scev scev_expr done
=dst.llvm-%r.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%r.0 atexit_scev
=dst.llvm-%r.0 atexit_scev loop: L0%0%d
=dst.llvm-%r.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%r.0 atexit_scev scev_expr
8 : 11111111111111111111111111111111b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
9 : scev_op_add(8, 5) : loop L0%0%d : nsw
10 : scev_op_zeroext(9) : loop L0%0%d : 
11 : scev_op_zeroext(5) : loop L0%0%d : 
12 : scev_op_mul(10, 11) : loop L0%0%d : 
13 : 000000000000000000000000000000010b
14 : scev_op_udiv(12, 13) : loop L0%0%d : 
15 : scev_op_truncate(14) : loop L0%0%d : 
16 : scev_op_add(15, 5) : loop L0%0%d : 
=dst.llvm-%r.0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
1 : 00000000000000000000000000000001b
17 : 00000000000000000000000000000010b
18 : scev_op_addrec(1, 17, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
1 : 00000000000000000000000000000001b
17 : 00000000000000000000000000000010b
18 : scev_op_addrec(1, 17, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
1 : 00000000000000000000000000000001b
8 : 11111111111111111111111111111111b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
9 : scev_op_add(8, 5) : loop L0%0%d : nsw
10 : scev_op_zeroext(9) : loop L0%0%d : 
11 : scev_op_zeroext(5) : loop L0%0%d : 
12 : scev_op_mul(10, 11) : loop L0%0%d : 
13 : 000000000000000000000000000000010b
14 : scev_op_udiv(12, 13) : loop L0%0%d : 
15 : scev_op_truncate(14) : loop L0%0%d : 
17 : 00000000000000000000000000000010b
19 : scev_op_mul(17, 5) : loop L0%0%d : nuw
20 : scev_op_add(1, 15, 19) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: nuw
=dst.llvm-%inc val_scevb scev scev_expr
17 : 00000000000000000000000000000010b
1 : 00000000000000000000000000000001b
21 : scev_op_addrec(17, 1) : loop Lfor.cond%1%d : nuw
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:2
=dst.llvm-%inc val_scevb unsigned upper bound: 32:2147483650
=dst.llvm-%inc val_scevb signed lower bound: 32:2
=dst.llvm-%inc val_scevb signed upper bound: 32:2147483650
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: nuw
=dst.llvm-%inc atuse_scevb scev scev_expr
17 : 00000000000000000000000000000010b
1 : 00000000000000000000000000000001b
21 : scev_op_addrec(17, 1) : loop Lfor.cond%1%d : nuw
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:2
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:2147483650
=dst.llvm-%inc atuse_scevb signed lower bound: 32:2
=dst.llvm-%inc atuse_scevb signed upper bound: 32:2147483650
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: nuw
=dst.llvm-%inc atexit_scev scev_expr
17 : 00000000000000000000000000000010b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
22 : scev_op_add(17, 5) : loop L0%0%d : nuw
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%add.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%r.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename loop3.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%12%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%12%bbentry_Lfor.cond%1%bbentry
L3%12%bbentry_Lfor.cond%1%bbentry => L3%12%bbentry_Lfor.cond%1%bbentry
L3%12%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 17 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%12%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%12%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%12%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%12%bbentry_Lfor.cond%1%bbentry => L3%12%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%12%bbentry to L3%12%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%12%bbentry#{0,0}=>L3%13%d#{0,0})*((L3%13%d#{0,0}=>L3%15%bbentry#{0,0})*(L3%15%bbentry#{0,0}=>L3%12%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%12%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%12%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%12%bbentry#{0,0}=>L3%13%d#{0,0})*((L3%13%d#{0,0}=>L3%14%bbentry#{0,0})*((L3%14%bbentry#{0,0}=>L3%5%d#{0,0})*((((L3%5%d#{0,0}=>L3%6%bbentry#{0,0})*(L3%6%bbentry#{0,0}=>L3%10%bbentry#{0,0}))+((L3%5%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>L3%10%bbentry#{0,0})))*(L3%10%bbentry#{0,0}=>E0%0%d#{0,0})))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : input.dst.llvm-%n : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L3%12%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce3 e04a5b7786b0ec6c3dd2a64d3b270f9
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2109537953 { 0x7dbcfea1 +1.47652065e124 } : COUNT
=input.spec-%var-n-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2109537953 { 0x7dbcfea1 +1.47652065e124 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
1923208494
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 a9a62e3d1facf763f1f77ed73fa7bd4
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=counter_example.random_seed
1957747793
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce5.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce5 9496d67cc380a84d2dabc5928e57ee62
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
424238335
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 3
=global nodece 3 nodece cvc4.ce39.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin cvc4.ce39 3d1cb033d725f81c99124b2b7fd339
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 1, [ 2147483649; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1025143396 { 0x3d1a7264 +1.20661592e251 } : COUNT
=input.spec-%var-n-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1025143396 { 0x3d1a7264 +1.20661592e251 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
2321869953
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce40.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce40 7ffdac0f458869b607fff4b909fa216
=input.spec-%var-n-1
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 255, [ 1073741825; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 633645325 { 0x25c4a90d +1.53640902e204 } : COUNT
=input.spec-%var-n-0.L3%12%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 633645325 { 0x25c4a90d +1.53640902e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=counter_example.random_seed
3641508616
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece yices.ce41.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin yices.ce41 5f26f59db3fe34780e98a98edda744d
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483650 ] -> 0, [ 2147483651; 2147483651 ] -> 128, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 703853482 { 0x29f3f3aa +1.90587353e212 } : COUNT
=input.spec-%var-n-0.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 703853482 { 0x29f3f3aa +1.90587353e212 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
464163488
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece cvc4.ce75.num_edges_traversed0
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin cvc4.ce75 673bf3ef7d34f06a8e118b5ca12eb18
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
1548233367
=counter_example_end
=global nodece 6 num_edges_traversed 0
=global nodece 6 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce76.num_edges_traversed0
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce76 9c729a5a2db16a2c113faf65569
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512; 515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 515 { 0x203 +1.6139e129 } : BV:32
=counter_example.random_seed
610515434
=counter_example_end
=global nodece 7 num_edges_traversed 0
=global nodece 7 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece yices.ce77.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin yices.ce77 486892d5fb64fc9b56334624509522
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
1585990364
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece cvc4.ce131.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin cvc4.ce131 b29c401ebdb969010e86e261c7f9248
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 1, [ 2147483649; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1025143396 { 0x3d1a7264 +1.20661592e251 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
2321869953
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce121.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce121 57a0ff7e5124bb27727583a9dcc44da8
=input.spec-%var-n-1
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 255, [ 1073741825; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 633645325 { 0x25c4a90d +1.53640902e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=counter_example.random_seed
3641508616
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3v487.ce155.num_edges_traversed3
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce155 c5d444163796845632cf8dd431be1f
=input.spec-%var-n-1
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%n
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 255, [ 1073741825; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 633645325 { 0x25c4a90d +1.53640902e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=counter_example.random_seed
3641508616
=counter_example_end
=global nodece 11 num_edges_traversed 3
=global nodece 11 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce176.num_edges_traversed4
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce176 50f65b825bba3c36dfa98f9a4ac19c0
=input.spec-%var-n-1
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%n
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 255, [ 1073741825; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 633645325 { 0x25c4a90d +1.53640902e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=counter_example.random_seed
3641508616
=counter_example_end
=global nodece 12 num_edges_traversed 4
=global nodece 12 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece cvc4.ce107.num_edges_traversed1
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin cvc4.ce107 def4eff6444c3a95b9fb1b3bf688661a
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 1878340837 { 0x6ff534e5 +1.91567671e96 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2011334925 { 0x77e2890d +1.76980745e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
2317828223
=counter_example_end
=global nodece 13 num_edges_traversed 1
=global nodece 13 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece cvc4.ce200.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin cvc4.ce200 5b412fffc86b0c32338e35d3c21fb
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 1878340838 { 0x6ff534e6 +1.91567683e96 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2011334926 { 0x77e2890e +1.76980757e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
2317828223
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce226.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce226 79ceafc996b86a917fb55785d3b7fa80
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L3%13%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 907395522 { 0x3615c1c2 +1.16997551e237 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-4.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
3 : prod(1, 2) : PROD[BV:32,BV:32]
4 : sym_const(3) : PROD[BV:32,BV:32]
=input.spec-%tmpvar-3.L3%12%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-fst-0.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-snd-0.L3%12%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 896629329 { 0x35717a51 +1.88654530e235 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
200967382
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce258.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce258 778b9dc065b54b43dbcffdabff5f8d4c
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 907395523 { 0x3615c1c3 +1.16997563e237 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 896629330 { 0x35717a52 +1.88654541e235 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
200967382
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece cvc4.ce302.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin cvc4.ce302 4221923c288237f0cdec82940ceefe9
=input.spec-%var-n-1
1 : 645898238 { 0x267f9ffe +1.99707007e205 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%13%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%n
1 : 645898238 { 0x267f9ffe +1.99707007e205 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 536870916; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 645898238 { 0x267f9ffe +1.99707007e205 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 847395379 { 0x32823a33 +1.1740109e230 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%12%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%12%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : prod(1, 2) : PROD[BV:32,BV:32]
4 : sym_const(3) : PROD[BV:32,BV:32]
=input.spec-%tmpvar-3.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-fst-0.L3%12%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-snd-0.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 900439795 { 0x35ab9ef3 +1.34078824e236 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=counter_example.random_seed
4081800860
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece cvc4.ce334.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin cvc4.ce334 a1b3ee8ced46e97d1f5b59116d4
=input.spec-%var-n-1
1 : 645898238 { 0x267f9ffe +1.99707007e205 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 645898238 { 0x267f9ffe +1.99707007e205 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 536870916; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 645898238 { 0x267f9ffe +1.99707007e205 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 847395380 { 0x32823a34 +1.1740121e230 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 900439796 { 0x35ab9ef4 +1.34078836e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=counter_example.random_seed
4081800860
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce378.num_edges_traversed1
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce378 64b77e1021bb530becf954767b8adff
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L3%13%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 324191940 { 0x1352c6c4 +1.64669084e167 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : prod(1, 2) : PROD[BV:32,BV:32]
4 : sym_const(3) : PROD[BV:32,BV:32]
=input.spec-%tmpvar-3.L3%12%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-fst-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-snd-0.L3%12%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 259933295 { 0xf7e446f +1.98646342e159 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
3048539980
=counter_example_end
=global nodece 19 num_edges_traversed 1
=global nodece 19 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce410.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce410 66e5b77f12b192b13dca919afe9faaf2
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 324191941 { 0x1352c6c5 +1.64669096e167 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 259933296 { 0xf7e4470 +1.98646354e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
3048539980
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 21
=global nodece 21 nodece cvc4.ce454.num_edges_traversed0
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin cvc4.ce454 e3347dbb86657bddb1dc4abe5457be7
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
861543921
=counter_example_end
=global nodece 21 num_edges_traversed 0
=global nodece 21 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce455.num_edges_traversed0
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce455 20269c6f461a8a9eea866bd93bc6c
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=counter_example.random_seed
677870460
=counter_example_end
=global nodece 22 num_edges_traversed 0
=global nodece 22 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece yices.ce456.num_edges_traversed0
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin yices.ce456 4b62c222577899238fdc43e3a239
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
932026304
=counter_example_end
=global nodece 23 num_edges_traversed 0
=global nodece 23 nodece_visted_pcs: 
L3%12%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece cvc4.ce717.num_edges_traversed2
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin cvc4.ce717 9f6b3b1cdf9db4e0485cd2a0804cfb
=retaddr_const
1 : 1458985843 { 0x56f65b73 +1.92466580e46 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%5%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-11.L3%5%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%13%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%5%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%5%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : sum(1, 2, 2) : SUM[BV:32,BV:32]
4 : sym_const(3) : SUM[BV:32,BV:32]
=input.spec-%tmpvar-13.L3%10%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1458985843 { 0x56f65b73 +1.92466580e46 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1308911688 { 0x4e046848 +1.3443241e29 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2109537953 { 0x7dbcfea1 +1.47652065e124 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 24 num_edges_traversed 2
=global nodece 24 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 25
=global nodece 25 nodece yices.ce681.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin yices.ce681 b938399136849e3d5c781d1a9e1493fe
=retaddr_const
1 : 14228075 { 0xd91a6b +1.69611871e130 } : BV:32
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%5%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-11.L3%5%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%13%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483650 ] -> 0, [ 2147483651; 2147483651 ] -> 128, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%12%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%5%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%12%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%12%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%5%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : sum(1, 2, 2) : SUM[BV:32,BV:32]
4 : sym_const(3) : SUM[BV:32,BV:32]
=input.spec-%tmpvar-13.L3%10%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 14228075 { 0xd91a6b +1.69611871e130 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1369187926 { 0x519c2656 +1.21991991e36 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 703853482 { 0x29f3f3aa +1.90587353e212 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
3994172024
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-n-1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point yices.ce5
=inductive-invariants point_set point yices.ce5 expr point yices.ce5
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 3 for input.spec-%var-i-0.L3%12%bbentry
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 4 for input.spec-%var-n-0.L3%12%bbentry
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 5 for input.spec-%var-r-0.L3%12%bbentry
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 done
=inductive-invariants point_set point cvc4.ce3
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 3 for input.spec-%var-i-0.L3%12%bbentry
1
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 4 for input.spec-%var-n-0.L3%12%bbentry
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 5 for input.spec-%var-r-0.L3%12%bbentry
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce3 expr point cvc4.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-i-0.L3%12%bbentry
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.spec-%var-n-0.L3%12%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.spec-%var-r-0.L3%12%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point cvc4.ce39
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 3 for input.spec-%var-i-0.L3%12%bbentry
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 4 for input.spec-%var-n-0.L3%12%bbentry
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 5 for input.spec-%var-r-0.L3%12%bbentry
0
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 6 for input.dst.llvm-%n
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce39 expr point cvc4.ce39 done
=inductive-invariants point_set point z3v487.ce40
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 2 for input.spec-%var-n-1
255
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 3 for input.spec-%var-i-0.L3%12%bbentry
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 4 for input.spec-%var-n-0.L3%12%bbentry
255
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 5 for input.spec-%var-r-0.L3%12%bbentry
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 6 for input.dst.llvm-%n
255
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 done
=inductive-invariants point_set point yices.ce41
=inductive-invariants point_set point yices.ce41 expr point yices.ce41
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 3 for input.spec-%var-i-0.L3%12%bbentry
1
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 4 for input.spec-%var-n-0.L3%12%bbentry
2147483648
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 5 for input.spec-%var-r-0.L3%12%bbentry
0
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce41 expr point yices.ce41 done
=inductive-invariants point_set point yices.ce87
=inductive-invariants point_set point yices.ce87 expr point yices.ce87
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 3 for input.spec-%var-i-0.L3%12%bbentry
2
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 4 for input.spec-%var-n-0.L3%12%bbentry
1073741824
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 5 for input.spec-%var-r-0.L3%12%bbentry
1
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce87 expr point yices.ce87 done
=inductive-invariants point_set point z3v487.ce97
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 2 for input.spec-%var-n-1
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 3 for input.spec-%var-i-0.L3%12%bbentry
2
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 4 for input.spec-%var-n-0.L3%12%bbentry
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 5 for input.spec-%var-r-0.L3%12%bbentry
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 6 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce97 expr point z3v487.ce97 done
=inductive-invariants point_set point z3v487.ce155
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 2 for input.spec-%var-n-1
255
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 3 for input.spec-%var-i-0.L3%12%bbentry
3
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 4 for input.spec-%var-n-0.L3%12%bbentry
255
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 5 for input.spec-%var-r-0.L3%12%bbentry
3
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 6 for input.dst.llvm-%n
255
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce155 expr point z3v487.ce155 done
=inductive-invariants point_set point cvc4.ce107
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 3 for input.spec-%var-i-0.L3%12%bbentry
2
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 4 for input.spec-%var-n-0.L3%12%bbentry
1073741824
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 5 for input.spec-%var-r-0.L3%12%bbentry
1
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce107 expr point cvc4.ce107 done
=inductive-invariants point_set point yices.ce228
=inductive-invariants point_set point yices.ce228 expr point yices.ce228
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 3 for input.spec-%var-i-0.L3%12%bbentry
2147483648
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 4 for input.spec-%var-n-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 5 for input.spec-%var-r-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce228 expr point yices.ce228 done
=inductive-invariants point_set point z3.ce226
=inductive-invariants point_set point z3.ce226 expr point z3.ce226
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 3 for input.spec-%var-i-0.L3%12%bbentry
2147483648
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 4 for input.spec-%var-n-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 5 for input.spec-%var-r-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce226 expr point z3.ce226 done
=inductive-invariants point_set point cvc4.ce227
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 3 for input.spec-%var-i-0.L3%12%bbentry
2147483648
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 4 for input.spec-%var-n-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 5 for input.spec-%var-r-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce227 expr point cvc4.ce227 done
=inductive-invariants point_set point z3v487.ce303
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 2 for input.spec-%var-n-1
2147483644
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 3 for input.spec-%var-i-0.L3%12%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 4 for input.spec-%var-n-0.L3%12%bbentry
2147483644
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 5 for input.spec-%var-r-0.L3%12%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 6 for input.dst.llvm-%n
2147483644
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 done
=inductive-invariants point_set point cvc4.ce302
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 2 for input.spec-%var-n-1
645898238
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 3 for input.spec-%var-i-0.L3%12%bbentry
2147483649
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 4 for input.spec-%var-n-0.L3%12%bbentry
645898238
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 5 for input.spec-%var-r-0.L3%12%bbentry
2147483648
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 6 for input.dst.llvm-%n
645898238
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483649
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 done
=inductive-invariants point_set point yices.ce304
=inductive-invariants point_set point yices.ce304 expr point yices.ce304
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 3 for input.spec-%var-i-0.L3%12%bbentry
2147483649
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 4 for input.spec-%var-n-0.L3%12%bbentry
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 5 for input.spec-%var-r-0.L3%12%bbentry
2147483648
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483649
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 done
=inductive-invariants point_set point cvc4.ce379
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 3 for input.spec-%var-i-0.L3%12%bbentry
0
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 4 for input.spec-%var-n-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 5 for input.spec-%var-r-0.L3%12%bbentry
4294967295
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point cvc4.ce379 expr point cvc4.ce379 done
=inductive-invariants point_set point z3.ce378
=inductive-invariants point_set point z3.ce378 expr point z3.ce378
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 3 for input.spec-%var-i-0.L3%12%bbentry
0
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 4 for input.spec-%var-n-0.L3%12%bbentry
2147483647
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 5 for input.spec-%var-r-0.L3%12%bbentry
4294967295
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce378 expr point z3.ce378 done
=inductive-invariants point_set point yices.ce380
=inductive-invariants point_set point yices.ce380 expr point yices.ce380
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 3 for input.spec-%var-i-0.L3%12%bbentry
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 4 for input.spec-%var-n-0.L3%12%bbentry
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 5 for input.spec-%var-r-0.L3%12%bbentry
4294967295
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point yices.ce380 expr point yices.ce380 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%12%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%12%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=predicate done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: cvc4.ce39
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce155
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: cvc4.ce107
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=4; number of preds=4
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 7->0; 8->0; 
6
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->1; 7->0; 8->0; 
7
-2147483648->0; 2->0; 3->0; 4->0; 5->4294967295; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce155
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce226
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce378
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: cvc4.ce39
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce40
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: yices.ce41
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce155
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: cvc4.ce302
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: cvc4.ce39
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce40
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: yices.ce41
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3v487.ce155
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce226
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce378
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini name dst-ineq
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 16
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini predicate_set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini is assumed eqclass : 0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 0: cvc4.ce3
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 1: cvc4.ce39
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 2: z3v487.ce40
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ces set done
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=0
=pc L3%12%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
2 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%12%bbentry_Lfor.cond%1%bbentry.to_pcL3%12%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-0.L3%12%bbentry : BV:32
6 : input.spec-%var-n-0.L3%12%bbentry : BV:32
7 : bvsgt(5, 6) : BOOL
8 : not(7) : BOOL
9 : or(4, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%12%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
4 : input.spec-%var-i-0.L3%12%bbentry : BV:32
5 : input.spec-%var-n-0.L3%12%bbentry : BV:32
6 : bvsgt(4, 5) : BOOL
7 : or(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
2 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%12%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-n-1 : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-i-0.L3%12%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-n-0.L3%12%bbentry : BV:32
=SRC Ranking expr 3
1 : input.spec-%var-r-0.L3%12%bbentry : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140347 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140348 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140376 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140349 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140377 : 4 { 0x4 +1.0e1025 } : INT
140378 : 0 { 0x0 } : BOOL
140379 : select(140347, 140348, 140376, 140349, 140377, 140378) : BV:32
=RhsExpr
140346 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-n-1 : BV:32
140346 : input.dst.llvm-%n : BV:32
140508 : eq(140273, 140346) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140492 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140493 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140494 : bvule(140492, 140493) : BOOL
140480 : 4 { 0x4 +1.47e129 } : BV:32
140495 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140496 : bvadd(140480, 140495) : BV:32
140497 : bvadd(140492, 140496) : BV:32
140498 : eq(140493, 140497) : BOOL
140499 : and(140494, 140498) : BOOL
140349 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140500 : 3 { 0x3 +1.35e129 } : BV:32
140501 : bvand(140349, 140500) : BV:32
140277 : 0 { 0x0 +1.0e129 } : BV:32
140502 : eq(140501, 140277) : BOOL
140503 : and(140499, 140502) : BOOL
140504 : eq(140349, 140492) : BOOL
140505 : and(140503, 140504) : BOOL
140348 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140276 : 1 { 0x1 +1.11e129 } : BV:32
140350 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140506 : region_agrees_with_memlabel(140348, 140277, 140276, 140350) : BOOL
140507 : and(140505, 140506) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%12%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
