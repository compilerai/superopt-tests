==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x6 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x6 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (= true false)))
 (let (($x61 (= $x60 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x31 (concat ?x34 ?x8)))))
 (let (($x52 (= ?x51 input.dst.llvm-%n)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x35 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (= $x35 true)))
 (let (($x5 (= $x12 true)))
 (let (($x38 (= $x5 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x30)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x18 $x22)))
 (let (($x20 (and $x24 $x27)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x43 $x20)))
 (let (($x13 (= $x17 true)))
 (let (($x25 (= $x13 true)))
 (let (($x40 (= $x25 true)))
 (let (($x15 (and $x40 $x38)))
 (let (($x55 (and $x15 $x54)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x56 (and $x37 $x55)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x57 (and $x45 $x56)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x58 (and $x9 $x57)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x59 (and $x19 $x58)))
 (let (($x62 (=> $x59 $x61)))
 (not $x62)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (= true false)))
 (let (($x61 (= $x60 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x31 (concat ?x34 ?x8)))))
 (let (($x52 (= ?x51 input.dst.llvm-%n)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x35 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (= $x35 true)))
 (let (($x5 (= $x12 true)))
 (let (($x38 (= $x5 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x30)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x18 $x22)))
 (let (($x20 (and $x24 $x27)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x43 $x20)))
 (let (($x13 (= $x17 true)))
 (let (($x25 (= $x13 true)))
 (let (($x40 (= $x25 true)))
 (let (($x15 (and $x40 $x38)))
 (let (($x55 (and $x15 $x54)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x56 (and $x37 $x55)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x57 (and $x45 $x56)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x58 (and $x9 $x57)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x59 (and $x19 $x58)))
 (let (($x62 (=> $x59 $x61)))
 (not $x62)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x30)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x56 $x36)))
 (let (($x45 (and $x24 $x40)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x11 $x45)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x6 (concat ?x35 (concat ?x42 ?x25)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let (($x28 (and (and (and $x11 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x45) $x12)))
 (let (($x51 (= $x28 true)))
 (let (($x53 (= $x51 true)))
 (let (($x50 (= $x53 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x23 (and $x54 $x50)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x43 (and $x27 $x23)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x39 (and $x32 $x43)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x17 (and $x21 $x39)))
 (let (($x60 (=> $x17 $x59)))
 (not $x60))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x30)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x56 $x36)))
 (let (($x45 (and $x24 $x40)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x11 $x45)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x6 (concat ?x35 (concat ?x42 ?x25)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let (($x28 (and (and (and $x11 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x45) $x12)))
 (let (($x51 (= $x28 true)))
 (let (($x53 (= $x51 true)))
 (let (($x50 (= $x53 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x23 (and $x54 $x50)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x43 (and $x27 $x23)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x39 (and $x32 $x43)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x17 (and $x21 $x39)))
 (let (($x60 (=> $x17 $x59)))
 (not $x60))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x49 (concat ?x42 (concat ?x5 ?x22)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x24)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x52 $x16)))
 (let (($x40 (and $x36 $x30)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and (and (and $x11 $x55) $x40) $x12)))
 (let (($x50 (= $x53 true)))
 (let (($x23 (= $x50 true)))
 (let (($x43 (= $x23 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x39 (and $x54 $x43)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x17 (and $x27 $x39)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x57 (and $x32 $x17)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x58 (and $x21 $x57)))
 (let (($x61 (=> $x58 $x60)))
 (not $x61))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x49 (concat ?x42 (concat ?x5 ?x22)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x24)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x52 $x16)))
 (let (($x40 (and $x36 $x30)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and (and (and $x11 $x55) $x40) $x12)))
 (let (($x50 (= $x53 true)))
 (let (($x23 (= $x50 true)))
 (let (($x43 (= $x23 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x39 (and $x54 $x43)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x17 (and $x27 $x39)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x57 (and $x32 $x17)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x58 (and $x21 $x57)))
 (let (($x61 (=> $x58 $x60)))
 (not $x61))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-n-1 #b10000000000000000000000000000000)
(= input.spec-%var-n-0.L2%13%bbentry #b10000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv40960 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv40963 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000000 #xff))
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x29)))
 (let (($x47 (= ?x38 input.spec-%var-n-1)))
 (let (($x13 (= $x47 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x25 (concat ?x5 (concat ?x35 ?x48)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x36)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x46 $x18)))
 (let (($x30 (and $x16 $x24)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and (and (and $x11 $x55) $x30) $x12)))
 (let (($x43 (= $x23 true)))
 (let (($x39 (= $x43 true)))
 (let (($x17 (= $x39 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x57 (and $x54 $x17)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x58 (and $x27 $x57)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x59 (and $x21 $x58)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x60 (and $x37 $x59)))
 (let (($x62 (=> $x60 $x13)))
 (not $x62))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x29)))
 (let (($x47 (= ?x38 input.spec-%var-n-1)))
 (let (($x13 (= $x47 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x25 (concat ?x5 (concat ?x35 ?x48)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x36)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x46 $x18)))
 (let (($x30 (and $x16 $x24)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and (and (and $x11 $x55) $x30) $x12)))
 (let (($x43 (= $x23 true)))
 (let (($x39 (= $x43 true)))
 (let (($x17 (= $x39 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x57 (and $x54 $x17)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x58 (and $x27 $x57)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x59 (and $x21 $x58)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x60 (and $x37 $x59)))
 (let (($x62 (=> $x60 $x13)))
 (not $x62))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x62 (= ?x13 input.dst.llvm-%n)))
 (let (($x63 (= $x62 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x22 (concat ?x35 (concat ?x42 ?x8)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x16)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x28 $x56)))
 (let (($x24 (and $x18 $x36)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and (and (and $x11 $x55) $x24) $x12)))
 (let (($x17 (= $x39 true)))
 (let (($x57 (= $x17 true)))
 (let (($x58 (= $x57 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x59 (and $x54 $x58)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x60 (and $x27 $x59)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x61 (and $x21 $x60)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x29 (and $x37 $x61)))
 (let (($x51 (=> $x29 $x63)))
 (not $x51))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x62 (= ?x13 input.dst.llvm-%n)))
 (let (($x63 (= $x62 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x22 (concat ?x35 (concat ?x42 ?x8)))))
 (let (($x12 (= input.dst.llvm-%n ?x31)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x16)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x28 $x56)))
 (let (($x24 (and $x18 $x36)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and (and (and $x11 $x55) $x24) $x12)))
 (let (($x17 (= $x39 true)))
 (let (($x57 (= $x17 true)))
 (let (($x58 (= $x57 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x59 (and $x54 $x58)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x60 (and $x27 $x59)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x61 (and $x21 $x60)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x29 (and $x37 $x61)))
 (let (($x51 (=> $x29 $x63)))
 (not $x51))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x123 false)))
 (let (($x125 (= $x124 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x15)))
 (let (($x115 (= ?x11 input.dst.llvm-%n)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x110 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x105 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x95 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let (($x85 (= (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x77)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x72 $x75)))
 (let (($x79 (and $x76 $x78)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x70 $x79)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x45 (= (_ bv0 32) input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x50 (= $x45 true)))
 (let (($x40 (= $x50 true)))
 (let (($x47 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x13 (= $x47 true)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x59 (bvsle input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let (($x12 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x39 (= $x12 true)))
 (let (($x17 (= $x39 true)))
 (let (($x57 (= $x17 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x8 (= $x42 true)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x41 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let (($x16 (bvsle input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let (($x28 (bvule input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x46 (= $x28 true)))
 (let (($x52 (= $x46 true)))
 (let (($x56 (= $x52 true)))
 (let (($x34 (= ?x11 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x55 (= $x34 true)))
 (let (($x23 (= $x55 true)))
 (let (($x18 (and $x23 $x56)))
 (let (($x30 (and $x18 $x43)))
 (let (($x35 (and $x30 $x49)))
 (let (($x31 (and $x35 $x48)))
 (let (($x58 (and $x31 $x57)))
 (let (($x38 (and $x58 $x29)))
 (let (($x51 (and $x38 $x63)))
 (let (($x14 (and $x51 $x40)))
 (let (($x67 (and $x14 $x66)))
 (let (($x84 (and $x67 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x94 (and $x88 $x93)))
 (let (($x99 (and $x94 $x98)))
 (let (($x104 (and $x99 $x103)))
 (let (($x109 (and $x104 $x108)))
 (let (($x113 (and $x109 $x112)))
 (let (($x118 (and $x113 $x117)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x119 (and $x54 $x118)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x120 (and $x19 $x119)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x121 (and $x33 $x120)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x122 (and $x20 $x121)))
 (let (($x126 (=> $x122 $x125)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x123 false)))
 (let (($x125 (= $x124 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x15)))
 (let (($x115 (= ?x11 input.dst.llvm-%n)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x110 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x105 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x95 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let (($x85 (= (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x77)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x72 $x75)))
 (let (($x79 (and $x76 $x78)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x70 $x79)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x45 (= (_ bv0 32) input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x50 (= $x45 true)))
 (let (($x40 (= $x50 true)))
 (let (($x47 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x13 (= $x47 true)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x59 (bvsle input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let (($x12 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x39 (= $x12 true)))
 (let (($x17 (= $x39 true)))
 (let (($x57 (= $x17 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x8 (= $x42 true)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x41 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let (($x16 (bvsle input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let (($x28 (bvule input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x46 (= $x28 true)))
 (let (($x52 (= $x46 true)))
 (let (($x56 (= $x52 true)))
 (let (($x34 (= ?x11 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x55 (= $x34 true)))
 (let (($x23 (= $x55 true)))
 (let (($x18 (and $x23 $x56)))
 (let (($x30 (and $x18 $x43)))
 (let (($x35 (and $x30 $x49)))
 (let (($x31 (and $x35 $x48)))
 (let (($x58 (and $x31 $x57)))
 (let (($x38 (and $x58 $x29)))
 (let (($x51 (and $x38 $x63)))
 (let (($x14 (and $x51 $x40)))
 (let (($x67 (and $x14 $x66)))
 (let (($x84 (and $x67 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x94 (and $x88 $x93)))
 (let (($x99 (and $x94 $x98)))
 (let (($x104 (and $x99 $x103)))
 (let (($x109 (and $x104 $x108)))
 (let (($x113 (and $x109 $x112)))
 (let (($x118 (and $x113 $x117)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x119 (and $x54 $x118)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x120 (and $x19 $x119)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x121 (and $x33 $x120)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x122 (and $x20 $x121)))
 (let (($x126 (=> $x122 $x125)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b01000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-1 #b01000000000000000000000000000000)
(= input.spec-%var-i-0.L2%13%bbentry #b00000000000000000000000000000001)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-0.L2%13%bbentry #b01000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv40963 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (not $x91)))
 (let (($x89 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x90 (not $x89)))
 (let (($x93 (or $x90 $x92)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x79)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x68)))
 (let (($x75 (= ?x69 input.dst.llvm-%n)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x70 (= ?x69 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x64 (= $x10 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x51 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x45 (= $x51 true)))
 (let (($x50 (= $x45 true)))
 (let (($x40 (= $x50 true)))
 (let (($x29 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x29 true)))
 (let (($x47 (= $x38 true)))
 (let (($x13 (= $x47 true)))
 (let (($x57 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x25)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x41 $x49)))
 (let (($x8 (and $x35 $x42)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x43 $x8)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let (($x23 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x19)))
 (let (($x37 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x37 true)))
 (let (($x55 (= $x34 true)))
 (let (($x16 (and $x55 $x18)))
 (let (($x39 (and $x16 $x12)))
 (let (($x61 (and $x39 $x60)))
 (let (($x62 (and $x61 $x13)))
 (let (($x14 (and $x62 $x40)))
 (let (($x67 (and $x14 $x66)))
 (let (($x73 (and $x67 $x72)))
 (let (($x78 (and $x73 $x77)))
 (let (($x84 (and $x78 $x83)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x85 (and $x20 $x84)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x86 (and $x54 $x85)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x87 (and $x53 $x86)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x88 (and $x44 $x87)))
 (let (($x96 (=> $x88 $x95)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (not $x91)))
 (let (($x89 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x90 (not $x89)))
 (let (($x93 (or $x90 $x92)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x79)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x68)))
 (let (($x75 (= ?x69 input.dst.llvm-%n)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x70 (= ?x69 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x64 (= $x10 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x51 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x45 (= $x51 true)))
 (let (($x50 (= $x45 true)))
 (let (($x40 (= $x50 true)))
 (let (($x29 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x29 true)))
 (let (($x47 (= $x38 true)))
 (let (($x13 (= $x47 true)))
 (let (($x57 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x25)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x41 $x49)))
 (let (($x8 (and $x35 $x42)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x43 $x8)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let (($x23 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x19)))
 (let (($x37 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x37 true)))
 (let (($x55 (= $x34 true)))
 (let (($x16 (and $x55 $x18)))
 (let (($x39 (and $x16 $x12)))
 (let (($x61 (and $x39 $x60)))
 (let (($x62 (and $x61 $x13)))
 (let (($x14 (and $x62 $x40)))
 (let (($x67 (and $x14 $x66)))
 (let (($x73 (and $x67 $x72)))
 (let (($x78 (and $x73 $x77)))
 (let (($x84 (and $x78 $x83)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x85 (and $x20 $x84)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x86 (and $x54 $x85)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x87 (and $x53 $x86)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x88 (and $x44 $x87)))
 (let (($x96 (=> $x88 $x95)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x99 (bvmul ?x98 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x99)))
 (let (($x102 (= ?x100 ?x101)))
 (let (($x103 (= $x102 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x87 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x73 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x68 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x64 (= $x10 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x63 true)))
 (let (($x45 (= $x51 true)))
 (let (($x50 (= $x45 true)))
 (let (($x29 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x29 true)))
 (let (($x47 (= $x38 true)))
 (let (($x13 (= $x47 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x25)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x41 $x49)))
 (let (($x8 (and $x35 $x42)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x43 $x8)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x15)))
 (let (($x52 (= ?x32 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x34 (= ?x32 input.dst.llvm-%n)))
 (let (($x55 (= $x34 true)))
 (let (($x23 (= $x55 true)))
 (let (($x16 (and $x23 $x18)))
 (let (($x39 (and $x16 $x12)))
 (let (($x61 (and $x39 $x60)))
 (let (($x62 (and $x61 $x13)))
 (let (($x40 (and $x62 $x50)))
 (let (($x67 (and $x40 $x66)))
 (let (($x72 (and $x67 $x71)))
 (let (($x77 (and $x72 $x76)))
 (let (($x84 (and $x77 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x90)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x9 $x95)))
 (let (($x104 (=> $x96 $x103)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x99 (bvmul ?x98 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x99)))
 (let (($x102 (= ?x100 ?x101)))
 (let (($x103 (= $x102 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x87 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x73 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x68 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x64 (= $x10 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x63 true)))
 (let (($x45 (= $x51 true)))
 (let (($x50 (= $x45 true)))
 (let (($x29 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x38 (= $x29 true)))
 (let (($x47 (= $x38 true)))
 (let (($x13 (= $x47 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x25)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x41 $x49)))
 (let (($x8 (and $x35 $x42)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x43 $x8)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x15)))
 (let (($x52 (= ?x32 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x34 (= ?x32 input.dst.llvm-%n)))
 (let (($x55 (= $x34 true)))
 (let (($x23 (= $x55 true)))
 (let (($x16 (and $x23 $x18)))
 (let (($x39 (and $x16 $x12)))
 (let (($x61 (and $x39 $x60)))
 (let (($x62 (and $x61 $x13)))
 (let (($x40 (and $x62 $x50)))
 (let (($x67 (and $x40 $x66)))
 (let (($x72 (and $x67 $x71)))
 (let (($x77 (and $x72 $x76)))
 (let (($x84 (and $x77 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x90)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x9 $x95)))
 (let (($x104 (=> $x96 $x103)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x100 (bvmul ?x98 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x100)))
 (let (($x103 (= ?x101 ?x102)))
 (let (($x104 (= $x103 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (= $x87 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x77)))
 (let (($x80 (= ?x78 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let (($x67 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x14 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x10 (= $x14 true)))
 (let (($x64 (= $x10 true)))
 (let (($x65 (= $x64 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let (($x45 (= $x51 true)))
 (let (($x61 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x29 (= $x61 true)))
 (let (($x38 (= $x29 true)))
 (let (($x47 (= $x38 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x17 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x35)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x30 $x5)))
 (let (($x42 (and $x49 $x25)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x42)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x19)))
 (let (($x23 (= ?x15 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x37 (= ?x15 input.dst.llvm-%n)))
 (let (($x34 (= $x37 true)))
 (let (($x55 (= $x34 true)))
 (let (($x18 (and $x55 $x56)))
 (let (($x12 (and $x18 $x31)))
 (let (($x60 (and $x12 $x59)))
 (let (($x13 (and $x60 $x47)))
 (let (($x50 (and $x13 $x45)))
 (let (($x66 (and $x50 $x65)))
 (let (($x71 (and $x66 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x83 (and $x76 $x82)))
 (let (($x89 (and $x83 $x88)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x89)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x105 (=> $x96 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x100 (bvmul ?x98 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x100)))
 (let (($x103 (= ?x101 ?x102)))
 (let (($x104 (= $x103 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (= $x87 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x77)))
 (let (($x80 (= ?x78 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let (($x67 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x14 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x10 (= $x14 true)))
 (let (($x64 (= $x10 true)))
 (let (($x65 (= $x64 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let (($x45 (= $x51 true)))
 (let (($x61 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x29 (= $x61 true)))
 (let (($x38 (= $x29 true)))
 (let (($x47 (= $x38 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x17 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x35)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x30 $x5)))
 (let (($x42 (and $x49 $x25)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x42)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x19)))
 (let (($x23 (= ?x15 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x37 (= ?x15 input.dst.llvm-%n)))
 (let (($x34 (= $x37 true)))
 (let (($x55 (= $x34 true)))
 (let (($x18 (and $x55 $x56)))
 (let (($x12 (and $x18 $x31)))
 (let (($x60 (and $x12 $x59)))
 (let (($x13 (and $x60 $x47)))
 (let (($x50 (and $x13 $x45)))
 (let (($x66 (and $x50 $x65)))
 (let (($x71 (and $x66 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x83 (and $x76 $x82)))
 (let (($x89 (and $x83 $x88)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x89)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x105 (=> $x96 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x101 (bvuge ?x98 (_ bv1 32))))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x85 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x76)))
 (let (($x79 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x71 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x66 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x40 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x14 (= $x40 true)))
 (let (($x10 (= $x14 true)))
 (let (($x64 (= $x10 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x29)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x57 $x60)))
 (let (($x47 (and $x61 $x38)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x39 $x47)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let (($x25 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x42 (= $x25 true)))
 (let (($x8 (= $x42 true)))
 (let (($x6 (= $x8 true)))
 (let (($x41 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x55)))
 (let (($x36 (= ?x23 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let (($x52 (= ?x23 input.dst.llvm-%n)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x37 (= $x32 true)))
 (let (($x16 (and $x37 $x18)))
 (let (($x30 (and $x16 $x43)))
 (let (($x35 (and $x30 $x49)))
 (let (($x48 (and $x35 $x6)))
 (let (($x45 (and $x48 $x51)))
 (let (($x65 (and $x45 $x64)))
 (let (($x70 (and $x65 $x69)))
 (let (($x75 (and $x70 $x74)))
 (let (($x82 (and $x75 $x81)))
 (let (($x88 (and $x82 $x87)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x88)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x104 (=> $x96 $x103)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x101 (bvuge ?x98 (_ bv1 32))))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x85 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x76)))
 (let (($x79 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x71 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x66 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x40 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x14 (= $x40 true)))
 (let (($x10 (= $x14 true)))
 (let (($x64 (= $x10 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x29)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x57 $x60)))
 (let (($x47 (and $x61 $x38)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x39 $x47)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let (($x25 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x42 (= $x25 true)))
 (let (($x8 (= $x42 true)))
 (let (($x6 (= $x8 true)))
 (let (($x41 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x55)))
 (let (($x36 (= ?x23 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let (($x52 (= ?x23 input.dst.llvm-%n)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x37 (= $x32 true)))
 (let (($x16 (and $x37 $x18)))
 (let (($x30 (and $x16 $x43)))
 (let (($x35 (and $x30 $x49)))
 (let (($x48 (and $x35 $x6)))
 (let (($x45 (and $x48 $x51)))
 (let (($x65 (and $x45 $x64)))
 (let (($x70 (and $x65 $x69)))
 (let (($x75 (and $x70 $x74)))
 (let (($x82 (and $x75 $x81)))
 (let (($x88 (and $x82 $x87)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x88)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x104 (=> $x96 $x103)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x102 (bvsge ?x98 (_ bv1 32))))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x82)))
 (let (($x84 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let ((?x75 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x78 (= ?x76 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x65 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x50 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x40 (= $x50 true)))
 (let (($x14 (= $x40 true)))
 (let (($x10 (= $x14 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x17 $x59)))
 (let (($x38 (and $x60 $x29)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x12 $x38)))
 (let (($x13 (= $x47 true)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x25 (= $x35 true)))
 (let (($x42 (= $x25 true)))
 (let (($x8 (= $x42 true)))
 (let (($x30 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x34)))
 (let (($x16 (= ?x55 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x23 (= ?x55 input.dst.llvm-%n)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x18 (and $x32 $x56)))
 (let (($x43 (and $x18 $x24)))
 (let (($x49 (and $x43 $x5)))
 (let (($x6 (and $x49 $x8)))
 (let (($x51 (and $x6 $x63)))
 (let (($x64 (and $x51 $x10)))
 (let (($x69 (and $x64 $x68)))
 (let (($x74 (and $x69 $x73)))
 (let (($x81 (and $x74 $x80)))
 (let (($x87 (and $x81 $x86)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x87)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x105 (=> $x96 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x102 (bvsge ?x98 (_ bv1 32))))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x82)))
 (let (($x84 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let ((?x75 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x78 (= ?x76 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x65 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x50 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x40 (= $x50 true)))
 (let (($x14 (= $x40 true)))
 (let (($x10 (= $x14 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x17 $x59)))
 (let (($x38 (and $x60 $x29)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x12 $x38)))
 (let (($x13 (= $x47 true)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x25 (= $x35 true)))
 (let (($x42 (= $x25 true)))
 (let (($x8 (= $x42 true)))
 (let (($x30 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x34)))
 (let (($x16 (= ?x55 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x23 (= ?x55 input.dst.llvm-%n)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x18 (and $x32 $x56)))
 (let (($x43 (and $x18 $x24)))
 (let (($x49 (and $x43 $x5)))
 (let (($x6 (and $x49 $x8)))
 (let (($x51 (and $x6 $x63)))
 (let (($x64 (and $x51 $x10)))
 (let (($x69 (and $x64 $x68)))
 (let (($x74 (and $x69 $x73)))
 (let (($x81 (and $x74 $x80)))
 (let (($x87 (and $x81 $x86)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x92 (and (not $x26) $x87)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x93 (and $x20 $x92)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x94 (and $x54 $x93)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x95 (and $x53 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x105 (=> $x96 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-i-0.L2%13%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b01111111111111111111111111111111)
(= input.spec-%var-n-1 #b01111111111111111111111111111111)
(= input.dst.llvm-%n #b01111111111111111111111111111111)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x85 (bvsge ?x84 (_ bv0 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x71 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x71)))
 (let (($x73 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x64 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x64)))
 (let (($x67 (= ?x65 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x45 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x50 (= $x45 true)))
 (let (($x40 (= $x50 true)))
 (let (($x14 (= $x40 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x13 (= $x47 true)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x39)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x31)))
 (let (($x57 (and $x12 $x17)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x25 $x57)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x43 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x43 true)))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x37)))
 (let (($x18 (= ?x34 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x16 (= $x18 true)))
 (let (($x36 (= $x16 true)))
 (let (($x55 (= ?x34 input.dst.llvm-%n)))
 (let (($x23 (= $x55 true)))
 (let (($x52 (= $x23 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x90 true)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x56 (and $x15 $x52)))
 (let (($x24 (and $x56 $x36)))
 (let (($x5 (and $x24 $x22)))
 (let (($x29 (and $x5 $x61)))
 (let (($x51 (and $x29 $x63)))
 (let (($x10 (and $x51 $x14)))
 (let (($x70 (and $x10 $x69)))
 (let (($x76 (and $x70 $x75)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x78 (and (not $x26) $x76)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x79 (and $x20 $x78)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x80 (and $x54 $x79)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x81 (and $x53 $x80)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x82 (and $x44 $x81)))
 (let (($x92 (=> $x82 $x87)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x85 (bvsge ?x84 (_ bv0 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x71 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x71)))
 (let (($x73 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x64 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x64)))
 (let (($x67 (= ?x65 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x45 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x50 (= $x45 true)))
 (let (($x40 (= $x50 true)))
 (let (($x14 (= $x40 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x13 (= $x47 true)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x39)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x31)))
 (let (($x57 (and $x12 $x17)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x25 $x57)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x43 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x43 true)))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x37)))
 (let (($x18 (= ?x34 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x16 (= $x18 true)))
 (let (($x36 (= $x16 true)))
 (let (($x55 (= ?x34 input.dst.llvm-%n)))
 (let (($x23 (= $x55 true)))
 (let (($x52 (= $x23 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x90 true)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x56 (and $x15 $x52)))
 (let (($x24 (and $x56 $x36)))
 (let (($x5 (and $x24 $x22)))
 (let (($x29 (and $x5 $x61)))
 (let (($x51 (and $x29 $x63)))
 (let (($x10 (and $x51 $x14)))
 (let (($x70 (and $x10 $x69)))
 (let (($x76 (and $x70 $x75)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x78 (and (not $x26) $x76)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x79 (and $x20 $x78)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x80 (and $x54 $x79)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x81 (and $x53 $x80)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x82 (and $x44 $x81)))
 (let (($x92 (=> $x82 $x87)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L2%13%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x7ffefffe)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7ffefffe)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7ffefffe)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv496226350 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv496226350 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv496226350 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvuge ?x78 (_ bv1 32))))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x65 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x65)))
 (let (($x67 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x50 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x40 (= $x50 true)))
 (let (($x14 (= $x40 true)))
 (let (($x10 (= $x14 true)))
 (let (($x13 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x17)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x6 $x12)))
 (let (($x58 (and $x39 $x57)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x42 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let (($x30 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x37)))
 (let (($x16 (= ?x34 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x23 (= ?x34 input.dst.llvm-%n)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let ((?x89 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x19 (= ?x90 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x18 (and $x32 $x56)))
 (let (($x43 (and $x18 $x24)))
 (let (($x49 (and $x43 $x5)))
 (let (($x38 (and $x49 $x29)))
 (let (($x45 (and $x38 $x51)))
 (let (($x64 (and $x45 $x10)))
 (let (($x70 (and $x64 $x69)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x72 (and (not $x26) $x70)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x73 (and $x20 $x72)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x74 (and $x54 $x73)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x75 (and $x53 $x74)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x76 (and $x44 $x75)))
 (let (($x82 (=> $x76 $x81)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvuge ?x78 (_ bv1 32))))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x65 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x65)))
 (let (($x67 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x50 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x40 (= $x50 true)))
 (let (($x14 (= $x40 true)))
 (let (($x10 (= $x14 true)))
 (let (($x13 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x17)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x6 $x12)))
 (let (($x58 (and $x39 $x57)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x42 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let (($x30 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x37)))
 (let (($x16 (= ?x34 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x23 (= ?x34 input.dst.llvm-%n)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let ((?x89 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x19 (= ?x90 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x18 (and $x32 $x56)))
 (let (($x43 (and $x18 $x24)))
 (let (($x49 (and $x43 $x5)))
 (let (($x38 (and $x49 $x29)))
 (let (($x45 (and $x38 $x51)))
 (let (($x64 (and $x45 $x10)))
 (let (($x70 (and $x64 $x69)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x72 (and (not $x26) $x70)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x73 (and $x20 $x72)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x74 (and $x54 $x73)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x75 (and $x53 $x74)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x76 (and $x44 $x75)))
 (let (($x82 (=> $x76 $x81)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b11111111111111111111111111111111)
(= input.spec-%var-i-0.L2%13%bbentry #b11111111111111111111111111111111)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv33456031 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv33456031 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv33456031 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x67 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x68 (bvmul ?x67 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x68)))
 (let (($x72 (= ?x69 ?x70)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x62 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x57)))
 (let (($x60 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x30)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x18 $x24)))
 (let (($x22 (and $x43 $x41)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x52 $x22)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let (($x25 (= $x35 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x77)))
 (let (($x15 (= ?x88 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x32 (= $x15 true)))
 (let (($x37 (= $x32 true)))
 (let (($x90 (= ?x88 input.dst.llvm-%n)))
 (let (($x91 (= $x90 true)))
 (let (($x19 (= $x91 true)))
 (let (($x34 (and $x19 $x37)))
 (let (($x42 (and $x34 $x25)))
 (let (($x39 (and $x42 $x12)))
 (let (($x38 (and $x39 $x29)))
 (let (($x45 (and $x38 $x51)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x40 (and (not $x26) $x45)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x14 (and $x20 $x40)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x10 (and $x54 $x14)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x64 (and $x53 $x10)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x65 (and $x44 $x64)))
 (let (($x74 (=> $x65 $x73)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x67 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x68 (bvmul ?x67 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x68)))
 (let (($x72 (= ?x69 ?x70)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x62 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x62 true)))
 (let (($x51 (= $x63 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x57)))
 (let (($x60 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x30)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x18 $x24)))
 (let (($x22 (and $x43 $x41)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x52 $x22)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let (($x25 (= $x35 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x77)))
 (let (($x15 (= ?x88 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x32 (= $x15 true)))
 (let (($x37 (= $x32 true)))
 (let (($x90 (= ?x88 input.dst.llvm-%n)))
 (let (($x91 (= $x90 true)))
 (let (($x19 (= $x91 true)))
 (let (($x34 (and $x19 $x37)))
 (let (($x42 (and $x34 $x25)))
 (let (($x39 (and $x42 $x12)))
 (let (($x38 (and $x39 $x29)))
 (let (($x45 (and $x38 $x51)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x40 (and (not $x26) $x45)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x14 (and $x20 $x40)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x10 (and $x54 $x14)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x64 (and $x53 $x10)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x65 (and $x44 $x64)))
 (let (($x74 (=> $x65 $x73)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x67 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x69 (bvmul ?x67 (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x69)))
 (let (($x73 (= ?x70 ?x72)))
 (let (($x74 (= $x73 true)))
 (let ((?x38 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x38)))
 (let (($x13 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x17 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x17)))
 (let (($x59 (= ?x57 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x8 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x43)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x56 $x36)))
 (let (($x41 (and $x24 $x30)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x23 $x41)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x71)))
 (let (($x19 (= ?x77 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x89 (= ?x77 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x37 (and $x91 $x32)))
 (let (($x25 (and $x37 $x35)))
 (let (($x12 (and $x25 $x31)))
 (let (($x29 (and $x12 $x61)))
 (let (($x51 (and $x29 $x63)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x40 (and (not $x26) $x51)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x14 (and $x20 $x40)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x10 (and $x54 $x14)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x64 (and $x53 $x10)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x65 (and $x44 $x64)))
 (let (($x75 (=> $x65 $x74)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x67 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x69 (bvmul ?x67 (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x69)))
 (let (($x73 (= ?x70 ?x72)))
 (let (($x74 (= $x73 true)))
 (let ((?x38 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x38)))
 (let (($x13 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x13 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x17 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x17)))
 (let (($x59 (= ?x57 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x8 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x43)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x56 $x36)))
 (let (($x41 (and $x24 $x30)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x23 $x41)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x71)))
 (let (($x19 (= ?x77 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x89 (= ?x77 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x37 (and $x91 $x32)))
 (let (($x25 (and $x37 $x35)))
 (let (($x12 (and $x25 $x31)))
 (let (($x29 (and $x12 $x61)))
 (let (($x51 (and $x29 $x63)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x40 (and (not $x26) $x51)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x14 (and $x20 $x40)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x10 (and $x54 $x14)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x64 (and $x53 $x10)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x65 (and $x44 $x64)))
 (let (($x75 (=> $x65 $x74)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (not $x51)))
 (let (($x62 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x63 (not $x62)))
 (let (($x14 (or $x63 $x40)))
 (let (($x10 (= $x14 true)))
 (let (($x64 (= $x10 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x58 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x41)))
 (let (($x8 (= ?x22 input.dst.llvm-%n)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x5 (= ?x22 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x52)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x32 $x55)))
 (let (($x18 (and $x23 $x56)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x19 $x18)))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x45)))
 (let (($x77 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x77 true)))
 (let (($x89 (= $x88 true)))
 (let (($x30 (and $x89 $x43)))
 (let (($x25 (and $x30 $x35)))
 (let (($x31 (and $x25 $x48)))
 (let (($x61 (and $x31 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x29 (and $x20 $x61)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x38 (and $x54 $x29)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x53 $x38)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x44 $x47)))
 (let (($x65 (=> $x13 $x64)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (not $x51)))
 (let (($x62 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x63 (not $x62)))
 (let (($x14 (or $x63 $x40)))
 (let (($x10 (= $x14 true)))
 (let (($x64 (= $x10 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x58 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x41)))
 (let (($x8 (= ?x22 input.dst.llvm-%n)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x5 (= ?x22 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x52)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x32 $x55)))
 (let (($x18 (and $x23 $x56)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x19 $x18)))
 (let (($x36 (= $x16 true)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x45)))
 (let (($x77 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x77 true)))
 (let (($x89 (= $x88 true)))
 (let (($x30 (and $x89 $x43)))
 (let (($x25 (and $x30 $x35)))
 (let (($x31 (and $x25 $x48)))
 (let (($x61 (and $x31 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x29 (and $x20 $x61)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x38 (and $x54 $x29)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x53 $x38)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x44 $x47)))
 (let (($x65 (=> $x13 $x64)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x63 (not $x62)))
 (let (($x51 (= $x63 false)))
 (let (($x40 (= $x51 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x58 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x90)))
 (let (($x8 (= ?x91 input.dst.llvm-%n)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x43)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x56 $x36)))
 (let (($x41 (and $x24 $x30)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x23 $x41)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let (($x19 (= ?x91 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x45)))
 (let (($x77 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x77 true)))
 (let (($x89 (= $x88 true)))
 (let (($x37 (and $x89 $x32)))
 (let (($x25 (and $x37 $x35)))
 (let (($x31 (and $x25 $x48)))
 (let (($x61 (and $x31 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x29 (and $x20 $x61)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x38 (and $x54 $x29)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x53 $x38)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x44 $x47)))
 (let (($x14 (=> $x13 $x40)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x63 (not $x62)))
 (let (($x51 (= $x63 false)))
 (let (($x40 (= $x51 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x58 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x90)))
 (let (($x8 (= ?x91 input.dst.llvm-%n)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x43)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x56 $x36)))
 (let (($x41 (and $x24 $x30)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x23 $x41)))
 (let (($x5 (= $x22 true)))
 (let (($x49 (= $x5 true)))
 (let (($x35 (= $x49 true)))
 (let (($x19 (= ?x91 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x45)))
 (let (($x77 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x77 true)))
 (let (($x89 (= $x88 true)))
 (let (($x37 (and $x89 $x32)))
 (let (($x25 (and $x37 $x35)))
 (let (($x31 (and $x25 $x48)))
 (let (($x61 (and $x31 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x29 (and $x20 $x61)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x38 (and $x54 $x29)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x53 $x38)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x44 $x47)))
 (let (($x14 (=> $x13 $x40)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-i-0.L2%13%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv40963 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (= (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x14 (or $x51 $x40)))
 (let (($x63 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x10 (and $x63 $x14)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (or $x62 $x10)))
 (let (($x65 (= $x64 true)))
 (let (($x67 (= $x65 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x58 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x35)))
 (let (($x8 (= ?x25 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x52)))
 (let (($x30 (= ?x56 input.dst.llvm-%n)))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let (($x18 (= ?x56 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x16 (= $x18 true)))
 (let (($x36 (= $x16 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x91)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x71 $x89)))
 (let (($x15 (and $x90 $x19)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x45 $x15)))
 (let (($x37 (= $x32 true)))
 (let (($x34 (= $x37 true)))
 (let (($x55 (= $x34 true)))
 (let (($x24 (and $x55 $x36)))
 (let (($x5 (and $x24 $x22)))
 (let (($x31 (and $x5 $x48)))
 (let (($x61 (and $x31 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x29 (and $x20 $x61)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x38 (and $x11 $x29)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x9 $x38)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x21 $x47)))
 (let (($x69 (=> $x13 $x67)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (= (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x14 (or $x51 $x40)))
 (let (($x63 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x10 (and $x63 $x14)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (or $x62 $x10)))
 (let (($x65 (= $x64 true)))
 (let (($x67 (= $x65 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x58 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x35)))
 (let (($x8 (= ?x25 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x52)))
 (let (($x30 (= ?x56 input.dst.llvm-%n)))
 (let (($x41 (= $x30 true)))
 (let (($x22 (= $x41 true)))
 (let (($x18 (= ?x56 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x16 (= $x18 true)))
 (let (($x36 (= $x16 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x91)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x71 $x89)))
 (let (($x15 (and $x90 $x19)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x45 $x15)))
 (let (($x37 (= $x32 true)))
 (let (($x34 (= $x37 true)))
 (let (($x55 (= $x34 true)))
 (let (($x24 (and $x55 $x36)))
 (let (($x5 (and $x24 $x22)))
 (let (($x31 (and $x5 $x48)))
 (let (($x61 (and $x31 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x29 (and $x20 $x61)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x38 (and $x11 $x29)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x9 $x38)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x21 $x47)))
 (let (($x69 (=> $x13 $x67)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x72 (= $x70 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x63 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x63 true)))
 (let (($x40 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x17)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x6 $x12)))
 (let (($x58 (and $x39 $x57)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x42 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let ((?x18 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x18)))
 (let (($x41 (= ?x16 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let (($x36 (= ?x16 input.dst.llvm-%n)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let ((?x37 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x37)))
 (let (($x55 (= ?x34 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x55 true)))
 (let (($x52 (= $x23 true)))
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x89)))
 (let (($x91 (= $x90 true)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x56 (and $x15 $x52)))
 (let (($x30 (and $x56 $x43)))
 (let (($x49 (and $x30 $x5)))
 (let (($x38 (and $x49 $x29)))
 (let (($x14 (and $x38 $x40)))
 (let (($x50 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x71 (and $x26 $x50)))
 (let (($x10 (and $x71 $x14)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x64 (and $x20 $x10)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x65 (and $x11 $x64)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x67 (and $x9 $x65)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x69 (and $x27 $x67)))
 (let (($x74 (=> $x69 $x73)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x72 (= $x70 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x63 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x63 true)))
 (let (($x40 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x17)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x6 $x12)))
 (let (($x58 (and $x39 $x57)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x42 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let ((?x18 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x18)))
 (let (($x41 (= ?x16 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x22 (= $x41 true)))
 (let (($x5 (= $x22 true)))
 (let (($x36 (= ?x16 input.dst.llvm-%n)))
 (let (($x24 (= $x36 true)))
 (let (($x43 (= $x24 true)))
 (let ((?x37 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x37)))
 (let (($x55 (= ?x34 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x55 true)))
 (let (($x52 (= $x23 true)))
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x89)))
 (let (($x91 (= $x90 true)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x56 (and $x15 $x52)))
 (let (($x30 (and $x56 $x43)))
 (let (($x49 (and $x30 $x5)))
 (let (($x38 (and $x49 $x29)))
 (let (($x14 (and $x38 $x40)))
 (let (($x50 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x71 (and $x26 $x50)))
 (let (($x10 (and $x71 $x14)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x64 (and $x20 $x10)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x65 (and $x11 $x64)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x67 (and $x9 $x65)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x69 (and $x27 $x67)))
 (let (($x74 (=> $x69 $x73)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x70 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x63 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x63 true)))
 (let (($x40 (= $x51 true)))
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x61 (= ?x17 input.dst.llvm-%n)))
 (let (($x29 (= $x61 true)))
 (let (($x38 (= $x29 true)))
 (let (($x57 (= ?x17 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x35)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x30 $x5)))
 (let (($x42 (and $x49 $x25)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x42)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x34)))
 (let (($x23 (= ?x55 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x90)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x18 (and $x32 $x56)))
 (let (($x12 (and $x18 $x31)))
 (let (($x60 (and $x12 $x59)))
 (let (($x45 (and $x60 $x38)))
 (let (($x14 (and $x45 $x40)))
 (let (($x71 (= (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x77 (and $x26 $x71)))
 (let (($x10 (and $x77 $x14)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x64 (and $x20 $x10)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x65 (and $x11 $x64)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x67 (and $x9 $x65)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x69 (and $x54 $x67)))
 (let (($x74 (=> $x69 $x73)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x70 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x63 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x63 true)))
 (let (($x40 (= $x51 true)))
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x39)))
 (let (($x61 (= ?x17 input.dst.llvm-%n)))
 (let (($x29 (= $x61 true)))
 (let (($x38 (= $x29 true)))
 (let (($x57 (= ?x17 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x35)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x30 $x5)))
 (let (($x42 (and $x49 $x25)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x42)))
 (let (($x6 (= $x8 true)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x34)))
 (let (($x23 (= ?x55 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x23 true)))
 (let (($x56 (= $x52 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x90)))
 (let (($x19 (= $x91 true)))
 (let (($x15 (= $x19 true)))
 (let (($x32 (= $x15 true)))
 (let (($x18 (and $x32 $x56)))
 (let (($x12 (and $x18 $x31)))
 (let (($x60 (and $x12 $x59)))
 (let (($x45 (and $x60 $x38)))
 (let (($x14 (and $x45 $x40)))
 (let (($x71 (= (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x77 (and $x26 $x71)))
 (let (($x10 (and $x77 $x14)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x64 (and $x20 $x10)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x65 (and $x11 $x64)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x67 (and $x9 $x65)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x69 (and $x54 $x67)))
 (let (($x74 (=> $x69 $x73)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x63 (not $x62)))
 (let (($x51 (or $x62 $x63)))
 (let (($x40 (= $x51 true)))
 (let (($x14 (= $x40 true)))
 (let ((?x57 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x57)))
 (let (($x60 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x19)))
 (let (($x48 (= ?x15 input.dst.llvm-%n)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x41)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x16 $x43)))
 (let (($x5 (and $x30 $x22)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x56 $x5)))
 (let (($x35 (= $x49 true)))
 (let (($x25 (= $x35 true)))
 (let (($x42 (= $x25 true)))
 (let (($x32 (= ?x15 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x37 (= $x32 true)))
 (let (($x34 (= $x37 true)))
 (let ((?x71 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x71)))
 (let (($x89 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x55 (and $x91 $x34)))
 (let (($x8 (and $x55 $x42)))
 (let (($x39 (and $x8 $x12)))
 (let (($x38 (and $x39 $x29)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x45 (and $x20 $x38)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x50 (and $x11 $x45)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x9 $x50)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x54 $x47)))
 (let (($x10 (=> $x13 $x14)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x63 (not $x62)))
 (let (($x51 (or $x62 $x63)))
 (let (($x40 (= $x51 true)))
 (let (($x14 (= $x40 true)))
 (let ((?x57 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x57)))
 (let (($x60 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x60 true)))
 (let (($x29 (= $x61 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x19)))
 (let (($x48 (= ?x15 input.dst.llvm-%n)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x41)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x16 $x43)))
 (let (($x5 (and $x30 $x22)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x56 $x5)))
 (let (($x35 (= $x49 true)))
 (let (($x25 (= $x35 true)))
 (let (($x42 (= $x25 true)))
 (let (($x32 (= ?x15 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x37 (= $x32 true)))
 (let (($x34 (= $x37 true)))
 (let ((?x71 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x71)))
 (let (($x89 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x55 (and $x91 $x34)))
 (let (($x8 (and $x55 $x42)))
 (let (($x39 (and $x8 $x12)))
 (let (($x38 (and $x39 $x29)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x45 (and $x20 $x38)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x50 (and $x11 $x45)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x47 (and $x9 $x50)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x13 (and $x54 $x47)))
 (let (($x10 (=> $x13 $x14)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x37)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x90 $x15)))
 (let (($x55 (and $x32 $x34)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x71 $x55)))
 (let (($x45 (= $x38 true)))
 (let (($x50 (= $x45 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x49 (concat ?x41 (concat ?x36 ?x18)))))
 (let (($x39 (= ?x35 input.dst.llvm-%n)))
 (let (($x17 (= $x39 true)))
 (let (($x57 (= $x17 true)))
 (let (($x25 (= input.dst.llvm-%n ?x35)))
 (let (($x6 (and (and (and $x71 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x55) $x25)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let (($x58 (and $x12 $x57)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x59 (and $x20 $x58)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x60 (and $x11 $x59)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x61 (and $x9 $x60)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x29 (and $x54 $x61)))
 (let (($x47 (=> $x29 $x50)))
 (not $x47))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x37)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x90 $x15)))
 (let (($x55 (and $x32 $x34)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x71 $x55)))
 (let (($x45 (= $x38 true)))
 (let (($x50 (= $x45 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x49 (concat ?x41 (concat ?x36 ?x18)))))
 (let (($x39 (= ?x35 input.dst.llvm-%n)))
 (let (($x17 (= $x39 true)))
 (let (($x57 (= $x17 true)))
 (let (($x25 (= input.dst.llvm-%n ?x35)))
 (let (($x6 (and (and (and $x71 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x55) $x25)))
 (let (($x48 (= $x6 true)))
 (let (($x31 (= $x48 true)))
 (let (($x12 (= $x31 true)))
 (let (($x58 (and $x12 $x57)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x59 (and $x20 $x58)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x60 (and $x11 $x59)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x61 (and $x9 $x60)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x29 (and $x54 $x61)))
 (let (($x47 (=> $x29 $x50)))
 (not $x47))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x52 (= ?x13 input.dst.llvm-%n)))
 (let (($x56 (= $x52 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x22 (concat ?x36 (concat ?x43 ?x5)))))
 (let (($x57 (= ?x35 input.dst.llvm-%n)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x25 (= input.dst.llvm-%n ?x35)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x32)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x89 $x19)))
 (let (($x34 (and $x15 $x37)))
 (let (($x88 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and (and (and $x71 $x88) $x34) $x25)))
 (let (($x12 (= $x31 true)))
 (let (($x39 (= $x12 true)))
 (let (($x17 (= $x39 true)))
 (let (($x60 (and $x17 $x59)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x61 (and $x20 $x60)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x29 (and $x11 $x61)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x38 (and $x9 $x29)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x45 (and $x54 $x38)))
 (let (($x62 (=> $x45 $x56)))
 (not $x62))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x47)))
 (let (($x52 (= ?x13 input.dst.llvm-%n)))
 (let (($x56 (= $x52 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x22 (concat ?x36 (concat ?x43 ?x5)))))
 (let (($x57 (= ?x35 input.dst.llvm-%n)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x25 (= input.dst.llvm-%n ?x35)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x32)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x89 $x19)))
 (let (($x34 (and $x15 $x37)))
 (let (($x88 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and (and (and $x71 $x88) $x34) $x25)))
 (let (($x12 (= $x31 true)))
 (let (($x39 (= $x12 true)))
 (let (($x17 (= $x39 true)))
 (let (($x60 (and $x17 $x59)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x61 (and $x20 $x60)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x29 (and $x11 $x61)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x38 (and $x9 $x29)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x45 (and $x54 $x38)))
 (let (($x62 (=> $x45 $x56)))
 (not $x62))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x52)))
 (let (($x62 (= ?x56 input.spec-%var-n-1)))
 (let (($x63 (= $x62 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x34 (concat ?x19 (concat ?x42 ?x88)))))
 (let (($x39 (= input.dst.llvm-%n ?x48)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x25)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x5 $x18)))
 (let (($x12 (and $x35 $x31)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and (and (and $x36 $x49) $x12) $x39)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x24 (= ?x48 input.dst.llvm-%n)))
 (let (($x22 (= $x24 true)))
 (let (($x41 (= $x22 true)))
 (let (($x29 (and $x41 $x61)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x38 (and $x20 $x29)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x45 (and $x11 $x38)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x50 (and $x9 $x45)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x47 (and $x54 $x50)))
 (let (($x8 (=> $x47 $x63)))
 (not $x8))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x52)))
 (let (($x62 (= ?x56 input.spec-%var-n-1)))
 (let (($x63 (= $x62 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x34 (concat ?x19 (concat ?x42 ?x88)))))
 (let (($x39 (= input.dst.llvm-%n ?x48)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x25)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x5 $x18)))
 (let (($x12 (and $x35 $x31)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and (and (and $x36 $x49) $x12) $x39)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x24 (= ?x48 input.dst.llvm-%n)))
 (let (($x22 (= $x24 true)))
 (let (($x41 (= $x22 true)))
 (let (($x29 (and $x41 $x61)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x38 (and $x20 $x29)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x45 (and $x11 $x38)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x50 (and $x9 $x45)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x47 (and $x54 $x50)))
 (let (($x8 (=> $x47 $x63)))
 (not $x8))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310099/query
