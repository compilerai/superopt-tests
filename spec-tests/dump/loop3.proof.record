==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x61 (concat ?x58 (concat ?x54 ?x52)))))
 (let (($x63 (= ?x62 input.dst.llvm-%n)))
 (let (($x64 (= $x63 true)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (= $x43 true)))
 (let (($x31 (= $x45 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x36)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x28 $x8)))
 (let (($x37 (and $x6 $x14)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x25 $x37)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x30)))))))
 (let (($x33 (and $x12 $x7)))
 (let (($x32 (= $x33 true)))
 (let (($x11 (= $x32 true)))
 (let (($x49 (and $x11 $x31)))
 (let (($x65 (and $x49 $x64)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x66 (and $x44 $x65)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x67 (and $x18 $x66)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x68 (and $x9 $x67)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x69 (and $x13 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x61 (concat ?x58 (concat ?x54 ?x52)))))
 (let (($x63 (= ?x62 input.dst.llvm-%n)))
 (let (($x64 (= $x63 true)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (= $x43 true)))
 (let (($x31 (= $x45 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x36)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x28 $x8)))
 (let (($x37 (and $x6 $x14)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x25 $x37)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x30)))))))
 (let (($x33 (and $x12 $x7)))
 (let (($x32 (= $x33 true)))
 (let (($x11 (= $x32 true)))
 (let (($x49 (and $x11 $x31)))
 (let (($x65 (and $x49 $x64)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x66 (and $x44 $x65)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x67 (and $x18 $x66)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x68 (and $x9 $x67)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x69 (and $x13 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x49)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x48 $x60)))
 (let (($x36 (and $x45 $x61)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x27 $x36)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x11)))))))
 (let (($x69 (and $x15 $x8)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x31 (concat ?x14 (concat ?x29 ?x38)))))
 (let (($x52 (= input.dst.llvm-%n ?x54)))
 (let (($x62 (and (and (and $x15 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x8) $x52)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x65 (and $x17 $x64)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x66 (and $x9 $x65)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x67 (and $x23 $x66)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x68 (and $x21 $x67)))
 (let (($x72 (=> $x68 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x49)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x48 $x60)))
 (let (($x36 (and $x45 $x61)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x27 $x36)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x11)))))))
 (let (($x69 (and $x15 $x8)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x31 (concat ?x14 (concat ?x29 ?x38)))))
 (let (($x52 (= input.dst.llvm-%n ?x54)))
 (let (($x62 (and (and (and $x15 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x8) $x52)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x65 (and $x17 $x64)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x66 (and $x9 $x65)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x67 (and $x23 $x66)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x68 (and $x21 $x67)))
 (let (($x72 (=> $x68 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x54 (concat ?x38 (concat ?x6 ?x31)))))
 (let (($x62 (= input.dst.llvm-%n ?x52)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x61)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x37 $x45)))
 (let (($x8 (and $x49 $x36)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x48 $x8)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x34)))))))
 (let (($x65 (and (and (and $x47 $x56) $x59) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x68 (and $x17 $x67)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x69 (and $x9 $x68)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x70 (and $x23 $x69)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x71 (and $x21 $x70)))
 (let (($x46 (=> $x71 $x73)))
 (not $x46)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x54 (concat ?x38 (concat ?x6 ?x31)))))
 (let (($x62 (= input.dst.llvm-%n ?x52)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x61)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x37 $x45)))
 (let (($x8 (and $x49 $x36)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x48 $x8)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x34)))))))
 (let (($x65 (and (and (and $x47 $x56) $x59) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x68 (and $x17 $x67)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x69 (and $x9 $x68)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x70 (and $x23 $x69)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x71 (and $x21 $x70)))
 (let (($x46 (=> $x71 $x73)))
 (not $x46)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-1 #b10000000000000000000000000000000)
(= input.spec-%var-n-0.L2%13%bbentry #b10000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #xff))
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x19)))
 (let (($x44 (= ?x24 input.dst.llvm-%n)))
 (let (($x40 (= $x44 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x52 (concat ?x31 (concat ?x29 ?x54)))))
 (let (($x65 (= input.dst.llvm-%n ?x62)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x36)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x32 $x49)))
 (let (($x59 (and $x61 $x8)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x37 $x59)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x50)))))))
 (let (($x68 (and (and (and $x27 $x53) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x71 (and $x17 $x70)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x72 (and $x10 $x71)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x73 (and $x21 $x72)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x46 (and $x42 $x73)))
 (let (($x41 (=> $x46 $x40)))
 (not $x41)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x19)))
 (let (($x44 (= ?x24 input.dst.llvm-%n)))
 (let (($x40 (= $x44 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x52 (concat ?x31 (concat ?x29 ?x54)))))
 (let (($x65 (= input.dst.llvm-%n ?x62)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x36)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x32 $x49)))
 (let (($x59 (and $x61 $x8)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x37 $x59)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x50)))))))
 (let (($x68 (and (and (and $x27 $x53) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x71 (and $x17 $x70)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x72 (and $x10 $x71)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x73 (and $x21 $x72)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x46 (and $x42 $x73)))
 (let (($x41 (=> $x46 $x40)))
 (not $x41)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x40)))
 (let (($x51 (= ?x41 input.spec-%var-n-1)))
 (let (($x35 (= $x51 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x62 (concat ?x54 (concat ?x6 ?x52)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x8)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x60 $x61)))
 (let (($x64 (and $x36 $x59)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x32 $x64)))
 (let (($x11 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x16)))))))
 (let (($x71 (and (and (and $x48 $x11) $x67) $x68)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x46 (and $x17 $x73)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x30 (and $x10 $x46)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x19 (and $x21 $x30)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x24 (and $x42 $x19)))
 (let (($x5 (=> $x24 $x35)))
 (not $x5)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x40)))
 (let (($x51 (= ?x41 input.spec-%var-n-1)))
 (let (($x35 (= $x51 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x62 (concat ?x54 (concat ?x6 ?x52)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x8)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x60 $x61)))
 (let (($x64 (and $x36 $x59)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x32 $x64)))
 (let (($x11 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x16)))))))
 (let (($x71 (and (and (and $x48 $x11) $x67) $x68)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x46 (and $x17 $x73)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x30 (and $x10 $x46)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x19 (and $x21 $x30)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x24 (and $x42 $x19)))
 (let (($x5 (=> $x24 $x35)))
 (not $x5)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x119 false)))
 (let (($x121 (= $x120 true)))
 (let ((?x18 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x18)))
 (let (($x112 (= ?x15 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let (($x108 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x108 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x96 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x92 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x83)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x78 $x81)))
 (let (($x85 (and $x82 $x84)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x24 $x85)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x26)))))))
 (let (($x87 (and $x77 $x86)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x71 true)))
 (let (($x31 (= (_ bv0 32) input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x38 (= $x31 true)))
 (let (($x58 (= (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x6 (= $x58 true)))
 (let (($x62 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x7 (= $x62 true)))
 (let (($x29 (= $x7 true)))
 (let (($x67 (bvsle input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x70 (= $x67 true)))
 (let (($x33 (= $x70 true)))
 (let (($x36 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x8 (= $x36 true)))
 (let (($x59 (= $x8 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x45 (= $x60 true)))
 (let (($x49 (= $x45 true)))
 (let (($x63 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x11 (= $x63 true)))
 (let (($x69 (= $x11 true)))
 (let (($x27 (bvsle input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x55 (= $x27 true)))
 (let (($x53 (= $x55 true)))
 (let (($x47 (bvule input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x50 (= $x47 true)))
 (let (($x16 (= $x50 true)))
 (let (($x66 (= ?x15 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x34 (= $x66 true)))
 (let (($x56 (and $x34 $x16)))
 (let (($x48 (and $x56 $x53)))
 (let (($x37 (and $x48 $x69)))
 (let (($x61 (and $x37 $x49)))
 (let (($x64 (and $x61 $x59)))
 (let (($x14 (and $x64 $x33)))
 (let (($x54 (and $x14 $x29)))
 (let (($x52 (and $x54 $x6)))
 (let (($x65 (and $x52 $x38)))
 (let (($x73 (and $x65 $x72)))
 (let (($x90 (and $x73 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x99 (and $x95 $x98)))
 (let (($x103 (and $x99 $x102)))
 (let (($x107 (and $x103 $x106)))
 (let (($x110 (and $x107 $x109)))
 (let (($x114 (and $x110 $x113)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x115 (and $x12 $x114)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x116 (and $x21 $x115)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x117 (and $x23 $x116)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x118 (and $x20 $x117)))
 (let (($x122 (=> $x118 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x119 false)))
 (let (($x121 (= $x120 true)))
 (let ((?x18 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x18)))
 (let (($x112 (= ?x15 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let (($x108 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x108 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x96 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x92 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x83)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x78 $x81)))
 (let (($x85 (and $x82 $x84)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x24 $x85)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x26)))))))
 (let (($x87 (and $x77 $x86)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x71 true)))
 (let (($x31 (= (_ bv0 32) input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x38 (= $x31 true)))
 (let (($x58 (= (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x6 (= $x58 true)))
 (let (($x62 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x7 (= $x62 true)))
 (let (($x29 (= $x7 true)))
 (let (($x67 (bvsle input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x70 (= $x67 true)))
 (let (($x33 (= $x70 true)))
 (let (($x36 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x8 (= $x36 true)))
 (let (($x59 (= $x8 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x45 (= $x60 true)))
 (let (($x49 (= $x45 true)))
 (let (($x63 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x11 (= $x63 true)))
 (let (($x69 (= $x11 true)))
 (let (($x27 (bvsle input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x55 (= $x27 true)))
 (let (($x53 (= $x55 true)))
 (let (($x47 (bvule input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x50 (= $x47 true)))
 (let (($x16 (= $x50 true)))
 (let (($x66 (= ?x15 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x34 (= $x66 true)))
 (let (($x56 (and $x34 $x16)))
 (let (($x48 (and $x56 $x53)))
 (let (($x37 (and $x48 $x69)))
 (let (($x61 (and $x37 $x49)))
 (let (($x64 (and $x61 $x59)))
 (let (($x14 (and $x64 $x33)))
 (let (($x54 (and $x14 $x29)))
 (let (($x52 (and $x54 $x6)))
 (let (($x65 (and $x52 $x38)))
 (let (($x73 (and $x65 $x72)))
 (let (($x90 (and $x73 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x99 (and $x95 $x98)))
 (let (($x103 (and $x99 $x102)))
 (let (($x107 (and $x103 $x106)))
 (let (($x110 (and $x107 $x109)))
 (let (($x114 (and $x110 $x113)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x115 (and $x12 $x114)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x116 (and $x21 $x115)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x117 (and $x23 $x116)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x118 (and $x20 $x117)))
 (let (($x122 (=> $x118 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b01000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-1 #b01000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-0.L2%13%bbentry #b01000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (not $x96)))
 (let (($x94 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x95 (not $x94)))
 (let (($x98 (or $x95 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x87 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x87 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x19)))
 (let (($x82 (= ?x24 input.dst.llvm-%n)))
 (let (($x83 (= $x82 true)))
 (let (($x78 (= ?x24 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x79 (= $x78 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x74 (= $x43 true)))
 (let (($x75 (= $x74 true)))
 (let (($x5 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x40 (= $x44 true)))
 (let (($x76 (= $x40 true)))
 (let (($x68 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x68 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x7)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x67 $x14)))
 (let (($x54 (and $x62 $x29)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x48 $x54)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x45)))))))
 (let (($x6 (and $x64 $x58)))
 (let (($x52 (= $x6 true)))
 (let (($x31 (= $x52 true)))
 (let (($x66 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x34 (= $x66 true)))
 (let (($x16 (= $x34 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x22)))
 (let (($x42 (= ?x17 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x42 true)))
 (let (($x56 (and $x15 $x16)))
 (let (($x38 (and $x56 $x31)))
 (let (($x73 (and $x38 $x72)))
 (let (($x41 (and $x73 $x76)))
 (let (($x28 (and $x41 $x26)))
 (let (($x77 (and $x28 $x75)))
 (let (($x80 (and $x77 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x90 (and $x47 $x89)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x91 (and $x12 $x90)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x92 (and $x21 $x91)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x93 (and $x46 $x92)))
 (let (($x101 (=> $x93 $x100)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (not $x96)))
 (let (($x94 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x95 (not $x94)))
 (let (($x98 (or $x95 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x87 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x87 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x19)))
 (let (($x82 (= ?x24 input.dst.llvm-%n)))
 (let (($x83 (= $x82 true)))
 (let (($x78 (= ?x24 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x79 (= $x78 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x74 (= $x43 true)))
 (let (($x75 (= $x74 true)))
 (let (($x5 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x40 (= $x44 true)))
 (let (($x76 (= $x40 true)))
 (let (($x68 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x68 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x7)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x67 $x14)))
 (let (($x54 (and $x62 $x29)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x48 $x54)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x45)))))))
 (let (($x6 (and $x64 $x58)))
 (let (($x52 (= $x6 true)))
 (let (($x31 (= $x52 true)))
 (let (($x66 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x34 (= $x66 true)))
 (let (($x16 (= $x34 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x22)))
 (let (($x42 (= ?x17 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x42 true)))
 (let (($x56 (and $x15 $x16)))
 (let (($x38 (and $x56 $x31)))
 (let (($x73 (and $x38 $x72)))
 (let (($x41 (and $x73 $x76)))
 (let (($x28 (and $x41 $x26)))
 (let (($x77 (and $x28 $x75)))
 (let (($x80 (and $x77 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x90 (and $x47 $x89)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x91 (and $x12 $x90)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x92 (and $x21 $x91)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x93 (and $x46 $x92)))
 (let (($x101 (=> $x93 $x100)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x55 (bvmul ?x102 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x55)))
 (let (($x105 (= ?x103 ?x104)))
 (let (($x106 (= $x105 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x40 true)))
 (let (($x41 (= $x76 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x29)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x70 $x62)))
 (let (($x58 (and $x7 $x54)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x59 $x58)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x61)))))))
 (let (($x52 (and $x67 $x6)))
 (let (($x31 (= $x52 true)))
 (let (($x38 (= $x31 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x22)))
 (let (($x66 (= ?x17 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x34 (= $x66 true)))
 (let (($x42 (= ?x17 input.dst.llvm-%n)))
 (let (($x15 (= $x42 true)))
 (let (($x16 (and $x15 $x34)))
 (let (($x65 (and $x16 $x38)))
 (let (($x44 (and $x65 $x73)))
 (let (($x35 (and $x44 $x41)))
 (let (($x28 (and $x35 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x97 (and (not $x20) $x95)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x98 (and $x57 $x97)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x99 (and $x9 $x98)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x100 (and $x23 $x99)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x101 (and $x46 $x100)))
 (let (($x107 (=> $x101 $x106)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x55 (bvmul ?x102 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x55)))
 (let (($x105 (= ?x103 ?x104)))
 (let (($x106 (= $x105 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x40 true)))
 (let (($x41 (= $x76 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x29)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x70 $x62)))
 (let (($x58 (and $x7 $x54)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x59 $x58)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x61)))))))
 (let (($x52 (and $x67 $x6)))
 (let (($x31 (= $x52 true)))
 (let (($x38 (= $x31 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x22)))
 (let (($x66 (= ?x17 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x34 (= $x66 true)))
 (let (($x42 (= ?x17 input.dst.llvm-%n)))
 (let (($x15 (= $x42 true)))
 (let (($x16 (and $x15 $x34)))
 (let (($x65 (and $x16 $x38)))
 (let (($x44 (and $x65 $x73)))
 (let (($x35 (and $x44 $x41)))
 (let (($x28 (and $x35 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x97 (and (not $x20) $x95)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x98 (and $x57 $x97)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x99 (and $x9 $x98)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x100 (and $x23 $x99)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x101 (and $x46 $x100)))
 (let (($x107 (=> $x101 $x106)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x103 (bvmul ?x55 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x103)))
 (let (($x106 (= ?x104 ?x105)))
 (let (($x107 (= $x106 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x40 true)))
 (let (($x41 (= $x76 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x29)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x70 $x62)))
 (let (($x58 (and $x7 $x54)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x32 $x58)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x36)))))))
 (let (($x52 (and $x59 $x6)))
 (let (($x31 (= $x52 true)))
 (let (($x38 (= $x31 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x96)))
 (let (($x42 (= ?x10 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x15 (= $x42 true)))
 (let (($x17 (= ?x10 input.dst.llvm-%n)))
 (let (($x25 (= $x17 true)))
 (let (($x66 (and $x25 $x15)))
 (let (($x65 (and $x66 $x38)))
 (let (($x44 (and $x65 $x73)))
 (let (($x35 (and $x44 $x41)))
 (let (($x28 (and $x35 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x98 (and (not $x47) $x95)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x99 (and $x50 $x98)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x100 (and $x13 $x99)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x101 (and $x39 $x100)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x102 (and $x46 $x101)))
 (let (($x108 (=> $x102 $x107)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x103 (bvmul ?x55 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x103)))
 (let (($x106 (= ?x104 ?x105)))
 (let (($x107 (= $x106 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x40 true)))
 (let (($x41 (= $x76 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x29)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x70 $x62)))
 (let (($x58 (and $x7 $x54)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x32 $x58)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x36)))))))
 (let (($x52 (and $x59 $x6)))
 (let (($x31 (= $x52 true)))
 (let (($x38 (= $x31 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x96)))
 (let (($x42 (= ?x10 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x15 (= $x42 true)))
 (let (($x17 (= ?x10 input.dst.llvm-%n)))
 (let (($x25 (= $x17 true)))
 (let (($x66 (and $x25 $x15)))
 (let (($x65 (and $x66 $x38)))
 (let (($x44 (and $x65 $x73)))
 (let (($x35 (and $x44 $x41)))
 (let (($x28 (and $x35 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x98 (and (not $x47) $x95)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x99 (and $x50 $x98)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x100 (and $x13 $x99)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x101 (and $x39 $x100)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x102 (and $x46 $x101)))
 (let (($x108 (=> $x102 $x107)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x104 (bvuge ?x103 (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x40)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x68 $x73)))
 (let (($x41 (and $x44 $x76)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x32 $x41)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x54)))))))
 (let (($x5 (and $x65 $x35)))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x36 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x8 (= $x36 true)))
 (let (($x64 (= $x8 true)))
 (let (($x45 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x37 (= $x45 true)))
 (let (($x61 (= $x37 true)))
 (let ((?x17 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x17)))
 (let (($x48 (= ?x25 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x60 (= $x48 true)))
 (let (($x42 (= ?x25 input.dst.llvm-%n)))
 (let (($x15 (= $x42 true)))
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x20 true)))
 (let (($x10 (= $x96 true)))
 (let (($x66 (and $x10 $x15)))
 (let (($x11 (and $x66 $x60)))
 (let (($x49 (and $x11 $x61)))
 (let (($x53 (and $x49 $x64)))
 (let (($x28 (and $x53 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x99 (and (not $x57) $x95)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x100 (and $x12 $x99)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x101 (and $x21 $x100)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x102 (and $x18 $x101)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x55 (and $x56 $x102)))
 (let (($x107 (=> $x55 $x106)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x104 (bvuge ?x103 (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x40)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x68 $x73)))
 (let (($x41 (and $x44 $x76)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x32 $x41)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x54)))))))
 (let (($x5 (and $x65 $x35)))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x36 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x8 (= $x36 true)))
 (let (($x64 (= $x8 true)))
 (let (($x45 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x37 (= $x45 true)))
 (let (($x61 (= $x37 true)))
 (let ((?x17 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x17)))
 (let (($x48 (= ?x25 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x60 (= $x48 true)))
 (let (($x42 (= ?x25 input.dst.llvm-%n)))
 (let (($x15 (= $x42 true)))
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x20 true)))
 (let (($x10 (= $x96 true)))
 (let (($x66 (and $x10 $x15)))
 (let (($x11 (and $x66 $x60)))
 (let (($x49 (and $x11 $x61)))
 (let (($x53 (and $x49 $x64)))
 (let (($x28 (and $x53 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x99 (and (not $x57) $x95)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x100 (and $x12 $x99)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x101 (and $x21 $x100)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x102 (and $x18 $x101)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x55 (and $x56 $x102)))
 (let (($x107 (=> $x55 $x106)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x105 (bvsge ?x104 (_ bv1 32))))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x40)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x68 $x73)))
 (let (($x41 (and $x44 $x76)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x33 $x41)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x58)))))))
 (let (($x5 (and $x32 $x35)))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x49 (= $x61 true)))
 (let (($x36 (= $x49 true)))
 (let (($x60 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x11 (= $x60 true)))
 (let (($x45 (= $x11 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x10)))
 (let (($x15 (= ?x22 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x66 (= $x15 true)))
 (let (($x17 (= ?x22 input.dst.llvm-%n)))
 (let (($x25 (= $x17 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x47 true)))
 (let (($x20 (= $x97 true)))
 (let (($x42 (and $x20 $x25)))
 (let (($x48 (and $x42 $x66)))
 (let (($x37 (and $x48 $x45)))
 (let (($x8 (and $x37 $x36)))
 (let (($x28 (and $x8 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x50 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x100 (and (not $x50) $x95)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x101 (and $x9 $x100)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x102 (and $x23 $x101)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x55 (and $x46 $x102)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x103 (and $x34 $x55)))
 (let (($x108 (=> $x103 $x107)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let (($x105 (bvsge ?x104 (_ bv1 32))))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x88 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x78 (= $x24 true)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x40)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x68 $x73)))
 (let (($x41 (and $x44 $x76)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x33 $x41)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x58)))))))
 (let (($x5 (and $x32 $x35)))
 (let (($x51 (= $x5 true)))
 (let (($x26 (= $x51 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x49 (= $x61 true)))
 (let (($x36 (= $x49 true)))
 (let (($x60 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x11 (= $x60 true)))
 (let (($x45 (= $x11 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x10)))
 (let (($x15 (= ?x22 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x66 (= $x15 true)))
 (let (($x17 (= ?x22 input.dst.llvm-%n)))
 (let (($x25 (= $x17 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x47 true)))
 (let (($x20 (= $x97 true)))
 (let (($x42 (and $x20 $x25)))
 (let (($x48 (and $x42 $x66)))
 (let (($x37 (and $x48 $x45)))
 (let (($x8 (and $x37 $x36)))
 (let (($x28 (and $x8 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x80 (and $x19 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x95 (and $x90 $x94)))
 (let (($x50 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x100 (and (not $x50) $x95)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x101 (and $x9 $x100)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x102 (and $x23 $x101)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x55 (and $x46 $x102)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x103 (and $x34 $x55)))
 (let (($x108 (=> $x103 $x107)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-i-0.L2%13%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b01111111111111111111111111111111)
(= input.spec-%var-n-1 #b01111111111111111111111111111111)
(= input.dst.llvm-%n #b01111111111111111111111111111111)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x95 (bvsge ?x94 (_ bv0 32))))
 (let (($x100 (= $x95 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x85 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x85 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x24)))
 (let (($x80 (= ?x78 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x26 (= $x51 true)))
 (let (($x28 (= $x26 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x65 $x33)))
 (let (($x73 (and $x68 $x72)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x49 $x73)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x62)))))))
 (let (($x40 (and $x31 $x44)))
 (let (($x76 (= $x40 true)))
 (let (($x41 (= $x76 true)))
 (let (($x66 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x48 (= $x66 true)))
 (let (($x60 (= $x48 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x20)))
 (let (($x25 (= ?x96 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x42 (= $x25 true)))
 (let (($x10 (= ?x96 input.dst.llvm-%n)))
 (let (($x22 (= $x10 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (= $x57 true)))
 (let (($x47 (= $x98 true)))
 (let (($x17 (and $x47 $x22)))
 (let (($x15 (and $x17 $x42)))
 (let (($x11 (and $x15 $x60)))
 (let (($x35 (and $x11 $x41)))
 (let (($x43 (and $x35 $x28)))
 (let (($x19 (and $x43 $x77)))
 (let (($x82 (and $x19 $x81)))
 (let (($x87 (and $x82 $x86)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x89 (and (not $x12) $x87)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x90 (and $x13 $x89)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x91 (and $x39 $x90)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x92 (and $x56 $x91)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x93 (and $x67 $x92)))
 (let (($x102 (=> $x93 $x101)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x95 (bvsge ?x94 (_ bv0 32))))
 (let (($x100 (= $x95 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x85 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x85 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x24)))
 (let (($x80 (= ?x78 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L2%13%bbentry (_ bv0 32))))
 (let (($x26 (= $x51 true)))
 (let (($x28 (= $x26 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x65 $x33)))
 (let (($x73 (and $x68 $x72)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x49 $x73)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x62)))))))
 (let (($x40 (and $x31 $x44)))
 (let (($x76 (= $x40 true)))
 (let (($x41 (= $x76 true)))
 (let (($x66 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x48 (= $x66 true)))
 (let (($x60 (= $x48 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x20)))
 (let (($x25 (= ?x96 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x42 (= $x25 true)))
 (let (($x10 (= ?x96 input.dst.llvm-%n)))
 (let (($x22 (= $x10 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (= $x57 true)))
 (let (($x47 (= $x98 true)))
 (let (($x17 (and $x47 $x22)))
 (let (($x15 (and $x17 $x42)))
 (let (($x11 (and $x15 $x60)))
 (let (($x35 (and $x11 $x41)))
 (let (($x43 (and $x35 $x28)))
 (let (($x19 (and $x43 $x77)))
 (let (($x82 (and $x19 $x81)))
 (let (($x87 (and $x82 $x86)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x89 (and (not $x12) $x87)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x90 (and $x13 $x89)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x91 (and $x39 $x90)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x92 (and $x56 $x91)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x93 (and $x67 $x92)))
 (let (($x102 (=> $x93 $x101)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L2%13%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870915 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (bvuge ?x91 (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x79)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x19 (= $x77 true)))
 (let (($x24 (= $x19 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x28 true)))
 (let (($x74 (= $x43 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x73)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x70 $x71)))
 (let (($x40 (and $x72 $x44)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x38 $x40)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x58)))))))
 (let (($x41 (and $x32 $x76)))
 (let (($x35 (= $x41 true)))
 (let (($x5 (= $x35 true)))
 (let (($x66 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x48 (= $x66 true)))
 (let (($x60 (= $x48 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x97)))
 (let (($x25 (= ?x20 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x42 (= $x25 true)))
 (let (($x10 (= ?x20 input.dst.llvm-%n)))
 (let (($x22 (= $x10 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x50)))
 (let (($x98 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x17 (and $x47 $x22)))
 (let (($x15 (and $x17 $x42)))
 (let (($x11 (and $x15 $x60)))
 (let (($x51 (and $x11 $x5)))
 (let (($x75 (and $x51 $x74)))
 (let (($x78 (and $x75 $x24)))
 (let (($x83 (and $x78 $x82)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x85 (and (not $x9) $x83)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x86 (and $x21 $x85)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x87 (and $x18 $x86)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x89 (and $x34 $x87)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x90 (and $x64 $x89)))
 (let (($x95 (=> $x90 $x94)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (bvuge ?x91 (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x79)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x19 (= $x77 true)))
 (let (($x24 (= $x19 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x28 true)))
 (let (($x74 (= $x43 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x73)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x70 $x71)))
 (let (($x40 (and $x72 $x44)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x38 $x40)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x58)))))))
 (let (($x41 (and $x32 $x76)))
 (let (($x35 (= $x41 true)))
 (let (($x5 (= $x35 true)))
 (let (($x66 (bvuge input.spec-%var-i-0.L2%13%bbentry (_ bv1 32))))
 (let (($x48 (= $x66 true)))
 (let (($x60 (= $x48 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x97)))
 (let (($x25 (= ?x20 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x42 (= $x25 true)))
 (let (($x10 (= ?x20 input.dst.llvm-%n)))
 (let (($x22 (= $x10 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x50)))
 (let (($x98 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x17 (and $x47 $x22)))
 (let (($x15 (and $x17 $x42)))
 (let (($x11 (and $x15 $x60)))
 (let (($x51 (and $x11 $x5)))
 (let (($x75 (and $x51 $x74)))
 (let (($x78 (and $x75 $x24)))
 (let (($x83 (and $x78 $x82)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x85 (and (not $x9) $x83)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x86 (and $x21 $x85)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x87 (and $x18 $x86)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x89 (and $x34 $x87)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x90 (and $x64 $x89)))
 (let (($x95 (=> $x90 $x94)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b11111111111111111111111111111111)
(= input.spec-%var-i-0.L2%13%bbentry #b11111111111111111111111111111111)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x85 (bvmul ?x83 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x89 (= ?x86 ?x87)))
 (let (($x90 (= $x89 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x43)))
 (let (($x75 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x75 true)))
 (let ((?x41 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x41)))
 (let (($x51 (= ?x35 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x51 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let (($x44 (= $x73 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x29 $x6)))
 (let (($x32 (and $x31 $x49)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x22 $x32)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x60)))))))
 (let (($x38 (and $x54 $x52)))
 (let (($x70 (= $x38 true)))
 (let (($x33 (= $x70 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x12)))
 (let (($x98 (= ?x88 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x99 (= ?x88 input.dst.llvm-%n)))
 (let (($x57 (= $x99 true)))
 (let (($x97 (and $x57 $x47)))
 (let (($x68 (and $x97 $x33)))
 (let (($x40 (and $x68 $x44)))
 (let (($x28 (and $x40 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x78 (and (not $x9) $x19)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x79 (and $x21 $x78)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x80 (and $x18 $x79)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x81 (and $x34 $x80)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x82 (and $x64 $x81)))
 (let (($x91 (=> $x82 $x90)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%13%bbentry)))
 (let ((?x85 (bvmul ?x83 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x89 (= ?x86 ?x87)))
 (let (($x90 (= $x89 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x43)))
 (let (($x75 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x75 true)))
 (let ((?x41 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x41)))
 (let (($x51 (= ?x35 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x51 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let (($x44 (= $x73 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x29 $x6)))
 (let (($x32 (and $x31 $x49)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x22 $x32)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x60)))))))
 (let (($x38 (and $x54 $x52)))
 (let (($x70 (= $x38 true)))
 (let (($x33 (= $x70 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x12)))
 (let (($x98 (= ?x88 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x99 (= ?x88 input.dst.llvm-%n)))
 (let (($x57 (= $x99 true)))
 (let (($x97 (and $x57 $x47)))
 (let (($x68 (and $x97 $x33)))
 (let (($x40 (and $x68 $x44)))
 (let (($x28 (and $x40 $x26)))
 (let (($x19 (and $x28 $x77)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x78 (and (not $x9) $x19)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x79 (and $x21 $x78)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x80 (and $x18 $x79)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x81 (and $x34 $x80)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x82 (and $x64 $x81)))
 (let (($x91 (=> $x82 $x90)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x87 (bvmul ?x86 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x87)))
 (let (($x91 (= ?x89 ?x90)))
 (let (($x92 (= $x91 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x74)))
 (let (($x77 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x77 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x35)))
 (let (($x26 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x26 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x73 true)))
 (let (($x40 (= $x44 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x49)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x62 $x31)))
 (let (($x52 (and $x61 $x32)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x14 $x52)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x69)))))))
 (let (($x70 (and $x29 $x38)))
 (let (($x33 (= $x70 true)))
 (let (($x68 (= $x33 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x84)))
 (let (($x57 (= ?x12 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x98 (= $x57 true)))
 (let (($x50 (= ?x12 input.dst.llvm-%n)))
 (let (($x99 (= $x50 true)))
 (let (($x47 (and $x99 $x98)))
 (let (($x71 (and $x47 $x68)))
 (let (($x76 (and $x71 $x40)))
 (let (($x43 (and $x76 $x28)))
 (let (($x78 (and $x43 $x19)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x80 (and (not $x9) $x78)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x81 (and $x21 $x80)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x82 (and $x18 $x81)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x83 (and $x34 $x82)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x85 (and $x64 $x83)))
 (let (($x20 (=> $x85 $x92)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.spec-%var-i-0.L2%13%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let ((?x87 (bvmul ?x86 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x87)))
 (let (($x91 (= ?x89 ?x90)))
 (let (($x92 (= $x91 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x74)))
 (let (($x77 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x77 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x35)))
 (let (($x26 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x26 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x73 true)))
 (let (($x40 (= $x44 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x49)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x62 $x31)))
 (let (($x52 (and $x61 $x32)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x14 $x52)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x69)))))))
 (let (($x70 (and $x29 $x38)))
 (let (($x33 (= $x70 true)))
 (let (($x68 (= $x33 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x84)))
 (let (($x57 (= ?x12 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x98 (= $x57 true)))
 (let (($x50 (= ?x12 input.dst.llvm-%n)))
 (let (($x99 (= $x50 true)))
 (let (($x47 (and $x99 $x98)))
 (let (($x71 (and $x47 $x68)))
 (let (($x76 (and $x71 $x40)))
 (let (($x43 (and $x76 $x28)))
 (let (($x78 (and $x43 $x19)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x80 (and (not $x9) $x78)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x81 (and $x21 $x80)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x82 (and $x18 $x81)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x83 (and $x34 $x82)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x85 (and $x64 $x83)))
 (let (($x20 (=> $x85 $x92)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (not $x82)))
 (let (($x80 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x81 (not $x80)))
 (let (($x85 (or $x81 $x83)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x5)))
 (let (($x28 (= ?x51 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x28 true)))
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x33)))
 (let (($x40 (= ?x68 input.dst.llvm-%n)))
 (let (($x76 (= $x40 true)))
 (let (($x71 (= ?x68 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x72 (= $x71 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x6)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x29 $x62)))
 (let (($x61 (and $x58 $x31)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x98 $x61)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x11)))))))
 (let (($x32 (and $x10 $x49)))
 (let (($x52 (= $x32 true)))
 (let (($x38 (= $x52 true)))
 (let ((?x79 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x79)))
 (let (($x12 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x12 true)))
 (let (($x70 (and $x88 $x38)))
 (let (($x73 (and $x70 $x72)))
 (let (($x41 (and $x73 $x76)))
 (let (($x74 (and $x41 $x43)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x75 (and $x21 $x74)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x77 (and $x18 $x75)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x19 (and $x34 $x77)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x78 (and $x64 $x19)))
 (let (($x89 (=> $x78 $x87)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (not $x82)))
 (let (($x80 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x81 (not $x80)))
 (let (($x85 (or $x81 $x83)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x5)))
 (let (($x28 (= ?x51 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x28 true)))
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x33)))
 (let (($x40 (= ?x68 input.dst.llvm-%n)))
 (let (($x76 (= $x40 true)))
 (let (($x71 (= ?x68 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x72 (= $x71 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x6)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x29 $x62)))
 (let (($x61 (and $x58 $x31)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x98 $x61)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x11)))))))
 (let (($x32 (and $x10 $x49)))
 (let (($x52 (= $x32 true)))
 (let (($x38 (= $x52 true)))
 (let ((?x79 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x79)))
 (let (($x12 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x12 true)))
 (let (($x70 (and $x88 $x38)))
 (let (($x73 (and $x70 $x72)))
 (let (($x41 (and $x73 $x76)))
 (let (($x74 (and $x41 $x43)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x75 (and $x21 $x74)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x77 (and $x18 $x75)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x19 (and $x34 $x77)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x78 (and $x64 $x19)))
 (let (($x89 (=> $x78 $x87)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (not $x82)))
 (let (($x85 (= $x83 false)))
 (let (($x86 (= $x85 true)))
 (let ((?x26 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x26)))
 (let (($x74 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x74 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x47)))
 (let (($x41 (= ?x42 input.dst.llvm-%n)))
 (let (($x35 (= $x41 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x70)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x61 $x52)))
 (let (($x68 (and $x38 $x33)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x15 $x68)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x29)))))))
 (let (($x72 (and $x31 $x71)))
 (let (($x73 (= $x72 true)))
 (let (($x44 (= $x73 true)))
 (let (($x54 (= ?x42 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x66 (= $x54 true)))
 (let ((?x79 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x79)))
 (let (($x12 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x12 true)))
 (let (($x48 (and $x88 $x66)))
 (let (($x40 (and $x48 $x44)))
 (let (($x5 (and $x40 $x35)))
 (let (($x77 (and $x5 $x75)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x19 (and $x21 $x77)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x78 (and $x18 $x19)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x80 (and $x34 $x78)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x81 (and $x64 $x80)))
 (let (($x87 (=> $x81 $x86)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (not $x82)))
 (let (($x85 (= $x83 false)))
 (let (($x86 (= $x85 true)))
 (let ((?x26 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x26)))
 (let (($x74 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x74 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x47)))
 (let (($x41 (= ?x42 input.dst.llvm-%n)))
 (let (($x35 (= $x41 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x70)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x61 $x52)))
 (let (($x68 (and $x38 $x33)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x15 $x68)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x29)))))))
 (let (($x72 (and $x31 $x71)))
 (let (($x73 (= $x72 true)))
 (let (($x44 (= $x73 true)))
 (let (($x54 (= ?x42 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x66 (= $x54 true)))
 (let ((?x79 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x79)))
 (let (($x12 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x12 true)))
 (let (($x48 (and $x88 $x66)))
 (let (($x40 (and $x48 $x44)))
 (let (($x5 (and $x40 $x35)))
 (let (($x77 (and $x5 $x75)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x19 (and $x21 $x77)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x78 (and $x18 $x19)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x80 (and $x34 $x78)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x81 (and $x64 $x80)))
 (let (($x87 (=> $x81 $x86)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-i-0.L2%13%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L2%13%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L2%13%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L2%13%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x86 (or $x83 $x85)))
 (let (($x87 (= $x86 true)))
 (let (($x89 (= $x87 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x28)))
 (let (($x75 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x75 true)))
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x72)))
 (let (($x35 (= ?x73 input.dst.llvm-%n)))
 (let (($x5 (= $x35 true)))
 (let (($x44 (= ?x73 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x40 (= $x44 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x49)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x58 $x15)))
 (let (($x52 (and $x61 $x32)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x54 $x52)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x57)))))))
 (let (($x70 (and $x62 $x38)))
 (let (($x33 (= $x70 true)))
 (let (($x68 (= $x33 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x9)))
 (let (($x84 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x84 true)))
 (let (($x71 (and $x12 $x68)))
 (let (($x76 (and $x71 $x40)))
 (let (($x51 (and $x76 $x5)))
 (let (($x19 (and $x51 $x77)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x78 (and $x23 $x19)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x80 (and $x46 $x78)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x81 (and $x67 $x80)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x82 (and $x60 $x81)))
 (let (($x22 (=> $x82 $x89)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x86 (or $x83 $x85)))
 (let (($x87 (= $x86 true)))
 (let (($x89 (= $x87 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x28)))
 (let (($x75 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x75 true)))
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x72)))
 (let (($x35 (= ?x73 input.dst.llvm-%n)))
 (let (($x5 (= $x35 true)))
 (let (($x44 (= ?x73 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x40 (= $x44 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x49)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x58 $x15)))
 (let (($x52 (and $x61 $x32)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x54 $x52)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x57)))))))
 (let (($x70 (and $x62 $x38)))
 (let (($x33 (= $x70 true)))
 (let (($x68 (= $x33 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x9)))
 (let (($x84 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x84 true)))
 (let (($x71 (and $x12 $x68)))
 (let (($x76 (and $x71 $x40)))
 (let (($x51 (and $x76 $x5)))
 (let (($x19 (and $x51 $x77)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x78 (and $x23 $x19)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x80 (and $x46 $x78)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x81 (and $x67 $x80)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x82 (and $x60 $x81)))
 (let (($x22 (=> $x82 $x89)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x99 (= $x50 true)))
 (let (($x91 (= $x99 true)))
 (let ((?x80 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x80)))
 (let (($x83 (= ?x81 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x83 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x51)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x40 $x35)))
 (let (($x28 (and $x5 $x26)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x11 $x28)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x70)))))))
 (let (($x74 (and $x44 $x43)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x7)))
 (let (($x25 (= ?x57 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x62 (= $x25 true)))
 (let (($x98 (= ?x57 input.dst.llvm-%n)))
 (let (($x10 (= $x98 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x48)))
 (let (($x69 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x69 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (not $x79)))
 (let (($x84 (= $x24 true)))
 (let (($x12 (= $x84 true)))
 (let (($x65 (and $x12 $x6)))
 (let (($x29 (and $x65 $x10)))
 (let (($x42 (and $x29 $x62)))
 (let (($x19 (and $x42 $x77)))
 (let (($x86 (and $x19 $x85)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x87 (and $x21 $x86)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x89 (and $x39 $x87)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x22 (and $x56 $x89)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x90 (and $x27 $x22)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x47 (and $x45 $x90)))
 (let (($x92 (=> $x47 $x91)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L2%13%bbentry)))
 (let (($x99 (= $x50 true)))
 (let (($x91 (= $x99 true)))
 (let ((?x80 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x80)))
 (let (($x83 (= ?x81 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x83 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x51)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x40 $x35)))
 (let (($x28 (and $x5 $x26)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x11 $x28)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x70)))))))
 (let (($x74 (and $x44 $x43)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x7)))
 (let (($x25 (= ?x57 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x62 (= $x25 true)))
 (let (($x98 (= ?x57 input.dst.llvm-%n)))
 (let (($x10 (= $x98 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x48)))
 (let (($x69 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x69 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (not $x79)))
 (let (($x84 (= $x24 true)))
 (let (($x12 (= $x84 true)))
 (let (($x65 (and $x12 $x6)))
 (let (($x29 (and $x65 $x10)))
 (let (($x42 (and $x29 $x62)))
 (let (($x19 (and $x42 $x77)))
 (let (($x86 (and $x19 $x85)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L2%13%bbentry input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x87 (and $x21 $x86)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x89 (and $x39 $x87)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x22 (and $x56 $x89)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x90 (and $x27 $x22)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x47 (and $x45 $x90)))
 (let (($x92 (=> $x47 $x91)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (not $x87)))
 (let (($x22 (or $x87 $x89)))
 (let (($x90 (= $x22 true)))
 (let (($x47 (= $x90 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x75)))
 (let (($x78 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x78 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x12)))
 (let (($x26 (= ?x66 input.dst.llvm-%n)))
 (let (($x28 (= $x26 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x44)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x70 $x71)))
 (let (($x11 (and $x72 $x31)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x57 $x11)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x15)))))))
 (let (($x76 (and $x32 $x40)))
 (let (($x41 (= $x76 true)))
 (let (($x35 (= $x41 true)))
 (let (($x48 (= ?x66 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x14 (= $x48 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x13)))
 (let (($x24 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x24 true)))
 (let (($x69 (and $x84 $x14)))
 (let (($x5 (and $x69 $x35)))
 (let (($x43 (and $x5 $x28)))
 (let (($x81 (and $x43 $x80)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x82 (and $x39 $x81)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x83 (and $x34 $x82)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x85 (and $x64 $x83)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x86 (and $x88 $x85)))
 (let (($x50 (=> $x86 $x47)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (not $x87)))
 (let (($x22 (or $x87 $x89)))
 (let (($x90 (= $x22 true)))
 (let (($x47 (= $x90 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x75)))
 (let (($x78 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x78 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x12)))
 (let (($x26 (= ?x66 input.dst.llvm-%n)))
 (let (($x28 (= $x26 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x44)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x70 $x71)))
 (let (($x11 (and $x72 $x31)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x57 $x11)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x15)))))))
 (let (($x76 (and $x32 $x40)))
 (let (($x41 (= $x76 true)))
 (let (($x35 (= $x41 true)))
 (let (($x48 (= ?x66 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x14 (= $x48 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L2%13%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x13)))
 (let (($x24 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x24 true)))
 (let (($x69 (and $x84 $x14)))
 (let (($x5 (and $x69 $x35)))
 (let (($x43 (and $x5 $x28)))
 (let (($x81 (and $x43 $x80)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x82 (and $x39 $x81)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x83 (and $x34 $x82)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x85 (and $x64 $x83)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x86 (and $x88 $x85)))
 (let (($x50 (=> $x86 $x47)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x32)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x15 $x49)))
 (let (($x57 (and $x52 $x7)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x25 $x57)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x14)))))))
 (let (($x86 (and $x62 $x70)))
 (let (($x87 (= $x86 true)))
 (let (($x89 (= $x87 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x5 (concat ?x76 (concat ?x44 ?x71)))))
 (let (($x19 (= ?x51 input.dst.llvm-%n)))
 (let (($x78 (= $x19 true)))
 (let (($x26 (= input.dst.llvm-%n ?x51)))
 (let (($x74 (and (and (and $x62 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x70) $x26)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x80 (and $x77 $x78)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x81 (and $x39 $x80)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x82 (and $x34 $x81)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x83 (and $x64 $x82)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x85 (and $x88 $x83)))
 (let (($x22 (=> $x85 $x89)))
 (not $x22))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x32)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x15 $x49)))
 (let (($x57 (and $x52 $x7)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x25 $x57)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x14)))))))
 (let (($x86 (and $x62 $x70)))
 (let (($x87 (= $x86 true)))
 (let (($x89 (= $x87 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x5 (concat ?x76 (concat ?x44 ?x71)))))
 (let (($x19 (= ?x51 input.dst.llvm-%n)))
 (let (($x78 (= $x19 true)))
 (let (($x26 (= input.dst.llvm-%n ?x51)))
 (let (($x74 (and (and (and $x62 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x70) $x26)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (= $x75 true)))
 (let (($x80 (and $x77 $x78)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x81 (and $x39 $x80)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x82 (and $x34 $x81)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x83 (and $x64 $x82)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x85 (and $x88 $x83)))
 (let (($x22 (=> $x85 $x89)))
 (not $x22))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x90)))
 (let (($x21 (= ?x23 input.dst.llvm-%n)))
 (let (($x68 (= $x21 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x51 (concat ?x71 (concat ?x40 ?x5)))))
 (let (($x81 (= ?x26 input.dst.llvm-%n)))
 (let (($x82 (= $x81 true)))
 (let (($x74 (= input.dst.llvm-%n ?x26)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x7)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x61 $x52)))
 (let (($x70 (and $x32 $x57)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x15 $x70)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x10)))))))
 (let (($x19 (and (and (and $x42 $x84) $x43) $x74)))
 (let (($x78 (= $x19 true)))
 (let (($x80 (= $x78 true)))
 (let (($x83 (and $x80 $x82)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x85 (and $x39 $x83)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x86 (and $x34 $x85)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x87 (and $x64 $x86)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x89 (and $x88 $x87)))
 (let (($x47 (=> $x89 $x68)))
 (not $x47))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x90)))
 (let (($x21 (= ?x23 input.dst.llvm-%n)))
 (let (($x68 (= $x21 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x51 (concat ?x71 (concat ?x40 ?x5)))))
 (let (($x81 (= ?x26 input.dst.llvm-%n)))
 (let (($x82 (= $x81 true)))
 (let (($x74 (= input.dst.llvm-%n ?x26)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x7)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x61 $x52)))
 (let (($x70 (and $x32 $x57)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x15 $x70)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x10)))))))
 (let (($x19 (and (and (and $x42 $x84) $x43) $x74)))
 (let (($x78 (= $x19 true)))
 (let (($x80 (= $x78 true)))
 (let (($x83 (and $x80 $x82)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x85 (and $x39 $x83)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x86 (and $x34 $x85)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x87 (and $x64 $x86)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x89 (and $x88 $x87)))
 (let (($x47 (=> $x89 $x68)))
 (not $x47))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x68)))
 (let (($x50 (= ?x47 input.spec-%var-n-1)))
 (let (($x79 (= $x50 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x84 (concat ?x13 (concat ?x14 ?x69)))))
 (let (($x80 (= input.dst.llvm-%n ?x75)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x26)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x40 $x76)))
 (let (($x19 (and $x31 $x74)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x52 $x19)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x33)))))))
 (let (($x83 (and (and (and $x11 $x49) $x78) $x80)))
 (let (($x85 (= $x83 true)))
 (let (($x86 (= $x85 true)))
 (let (($x15 (= ?x75 input.dst.llvm-%n)))
 (let (($x61 (= $x15 true)))
 (let (($x87 (and $x61 $x86)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x89 (and $x39 $x87)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x22 (and $x34 $x89)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x90 (and $x64 $x22)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x23 (and $x88 $x90)))
 (let (($x24 (=> $x23 $x79)))
 (not $x24))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x68)))
 (let (($x50 (= ?x47 input.spec-%var-n-1)))
 (let (($x79 (= $x50 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x84 (concat ?x13 (concat ?x14 ?x69)))))
 (let (($x80 (= input.dst.llvm-%n ?x75)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x26)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x40 $x76)))
 (let (($x19 (and $x31 $x74)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x52 $x19)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x33)))))))
 (let (($x83 (and (and (and $x11 $x49) $x78) $x80)))
 (let (($x85 (= $x83 true)))
 (let (($x86 (= $x85 true)))
 (let (($x15 (= ?x75 input.dst.llvm-%n)))
 (let (($x61 (= $x15 true)))
 (let (($x87 (and $x61 $x86)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%13%bbentry)))
 (let (($x89 (and $x39 $x87)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L2%13%bbentry)))
 (let (($x22 (and $x34 $x89)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-9.L2%13%bbentry)))
 (let (($x90 (and $x64 $x22)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%13%bbentry)))
 (let (($x23 (and $x88 $x90)))
 (let (($x24 (=> $x23 $x79)))
 (not $x24))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460643/query
