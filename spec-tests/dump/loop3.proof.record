==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= true false)))
 (let (($x74 (= $x73 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x63 (concat ?x60 (concat ?x56 ?x54)))))
 (let (($x65 (= ?x64 input.dst.llvm-%n)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (= $x30 true)))
 (let (($x22 (= $x29 true)))
 (let (($x50 (= $x22 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x33)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x28 $x7)))
 (let (($x32 (and $x37 $x11)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x26 $x32)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x35)))))))
 (let (($x43 (and $x17 $x40)))
 (let (($x16 (= $x43 true)))
 (let (($x27 (= $x16 true)))
 (let (($x42 (= $x27 true)))
 (let (($x51 (and $x42 $x50)))
 (let (($x68 (and $x51 $x67)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x69 (and $x19 $x68)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x70 (and $x18 $x69)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x71 (and $x9 $x70)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x72 (and $x24 $x71)))
 (let (($x75 (=> $x72 $x74)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= true false)))
 (let (($x74 (= $x73 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x63 (concat ?x60 (concat ?x56 ?x54)))))
 (let (($x65 (= ?x64 input.dst.llvm-%n)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (= $x30 true)))
 (let (($x22 (= $x29 true)))
 (let (($x50 (= $x22 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x33)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x28 $x7)))
 (let (($x32 (and $x37 $x11)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x26 $x32)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x35)))))))
 (let (($x43 (and $x17 $x40)))
 (let (($x16 (= $x43 true)))
 (let (($x27 (= $x16 true)))
 (let (($x42 (= $x27 true)))
 (let (($x51 (and $x42 $x50)))
 (let (($x68 (and $x51 $x67)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x69 (and $x19 $x68)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x70 (and $x18 $x69)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x71 (and $x9 $x70)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x72 (and $x24 $x71)))
 (let (($x75 (=> $x72 $x74)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x22)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x34 $x51)))
 (let (($x43 (and $x33 $x7)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x28 $x43)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x50)))))))
 (let (($x70 (and $x27 $x5)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x25 (concat ?x16 (concat ?x11 ?x37)))))
 (let (($x55 (= input.dst.llvm-%n ?x49)))
 (let (($x57 (and (and (and $x27 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x5) $x55)))
 (let (($x61 (= $x57 true)))
 (let (($x64 (= $x61 true)))
 (let (($x65 (= $x64 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x66 (and $x6 $x65)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x67 (and $x9 $x66)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x68 (and $x23 $x67)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x69 (and $x21 $x68)))
 (let (($x73 (=> $x69 $x72)))
 (not $x73))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x22)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x34 $x51)))
 (let (($x43 (and $x33 $x7)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x28 $x43)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x50)))))))
 (let (($x70 (and $x27 $x5)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x25 (concat ?x16 (concat ?x11 ?x37)))))
 (let (($x55 (= input.dst.llvm-%n ?x49)))
 (let (($x57 (and (and (and $x27 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x5) $x55)))
 (let (($x61 (= $x57 true)))
 (let (($x64 (= $x61 true)))
 (let (($x65 (= $x64 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x66 (and $x6 $x65)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x67 (and $x9 $x66)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x68 (and $x23 $x67)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x69 (and $x21 $x68)))
 (let (($x73 (=> $x69 $x72)))
 (not $x73))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x74 (= $x73 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x49 (concat ?x37 (concat ?x41 ?x25)))))
 (let (($x57 (= input.dst.llvm-%n ?x55)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x7)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x33)))
 (let (($x5 (and $x22 $x43)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x34 $x5)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x46)))))))
 (let (($x65 (and (and (and $x26 $x44) $x54) $x57)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x69 (and $x6 $x68)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x70 (and $x9 $x69)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x71 (and $x23 $x70)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x72 (and $x21 $x71)))
 (let (($x18 (=> $x72 $x74)))
 (not $x18))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x74 (= $x73 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x49 (concat ?x37 (concat ?x41 ?x25)))))
 (let (($x57 (= input.dst.llvm-%n ?x55)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x7)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x33)))
 (let (($x5 (and $x22 $x43)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x34 $x5)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x46)))))))
 (let (($x65 (and (and (and $x26 $x44) $x54) $x57)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x69 (and $x6 $x68)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x70 (and $x9 $x69)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x71 (and $x23 $x70)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x72 (and $x21 $x71)))
 (let (($x18 (=> $x72 $x74)))
 (not $x18))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-1 #b10000000000000000000000000000000)
(= input.spec-%var-n-0.L3%12%bbentry #b10000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #xff))
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x29)))
 (let (($x13 (= ?x63 input.dst.llvm-%n)))
 (let (($x12 (= $x13 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x55 (concat ?x25 (concat ?x11 ?x49)))))
 (let (($x65 (= input.dst.llvm-%n ?x57)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x43)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x38 $x22)))
 (let (($x54 (and $x7 $x5)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x42 $x54)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x32)))))))
 (let (($x68 (and (and (and $x28 $x60) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x72 (and $x6 $x71)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x73 (and $x10 $x72)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x74 (and $x21 $x73)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x18 (and $x14 $x74)))
 (let (($x75 (=> $x18 $x12)))
 (not $x75))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x29)))
 (let (($x13 (= ?x63 input.dst.llvm-%n)))
 (let (($x12 (= $x13 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x55 (concat ?x25 (concat ?x11 ?x49)))))
 (let (($x65 (= input.dst.llvm-%n ?x57)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x43)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x38 $x22)))
 (let (($x54 (and $x7 $x5)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x42 $x54)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x32)))))))
 (let (($x68 (and (and (and $x28 $x60) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x72 (and $x6 $x71)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x73 (and $x10 $x72)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x74 (and $x21 $x73)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x18 (and $x14 $x74)))
 (let (($x75 (=> $x18 $x12)))
 (not $x75))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x12)))
 (let (($x76 (= ?x75 input.spec-%var-n-1)))
 (let (($x48 (= $x76 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x57 (concat ?x49 (concat ?x41 ?x55)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x5)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x51 $x7)))
 (let (($x64 (and $x43 $x54)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x38 $x64)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x59)))))))
 (let (($x71 (and (and (and $x34 $x50) $x67) $x68)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x18 (and $x6 $x74)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x8 (and $x10 $x18)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x29 (and $x21 $x8)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x63 (and $x14 $x29)))
 (let (($x35 (=> $x63 $x48)))
 (not $x35))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x12)))
 (let (($x76 (= ?x75 input.spec-%var-n-1)))
 (let (($x48 (= $x76 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x57 (concat ?x49 (concat ?x41 ?x55)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x5)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x51 $x7)))
 (let (($x64 (and $x43 $x54)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x38 $x64)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x59)))))))
 (let (($x71 (and (and (and $x34 $x50) $x67) $x68)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x18 (and $x6 $x74)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x8 (and $x10 $x18)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x29 (and $x21 $x8)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x63 (and $x14 $x29)))
 (let (($x35 (=> $x63 $x48)))
 (not $x35))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x137 false)))
 (let (($x139 (= $x138 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x62)))
 (let (($x129 (= ?x27 input.dst.llvm-%n)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x124 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x120 (= $x119 true)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x109 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x89 $x92)))
 (let (($x96 (and $x93 $x95)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x31 $x96)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x82)))))))
 (let (($x98 (and $x88 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x75 true)))
 (let (($x48 (= $x76 true)))
 (let (($x8 (= (_ bv0 32) input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let (($x72 (= (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x25 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x37 (= $x25 true)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x11 (bvsle input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x49 (= $x11 true)))
 (let (($x52 (= $x49 true)))
 (let (($x41 (= $x52 true)))
 (let (($x70 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x40 (= $x70 true)))
 (let (($x16 (= $x40 true)))
 (let (($x57 (= $x16 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x5 (= $x43 true)))
 (let (($x54 (= $x5 true)))
 (let (($x64 (= $x54 true)))
 (let (($x42 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x38 (= $x42 true)))
 (let (($x51 (= $x38 true)))
 (let (($x33 (= $x51 true)))
 (let (($x60 (bvsle input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x34 (= $x60 true)))
 (let (($x61 (= $x34 true)))
 (let (($x50 (= $x61 true)))
 (let (($x32 (bvule input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x59 (= $x32 true)))
 (let (($x44 (= $x59 true)))
 (let (($x28 (= $x44 true)))
 (let (($x66 (= ?x27 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x46 (= $x66 true)))
 (let (($x19 (= $x46 true)))
 (let (($x56 (and $x19 $x28)))
 (let (($x69 (and $x56 $x50)))
 (let (($x22 (and $x69 $x33)))
 (let (($x67 (and $x22 $x64)))
 (let (($x58 (and $x67 $x57)))
 (let (($x55 (and $x58 $x41)))
 (let (($x71 (and $x55 $x68)))
 (let (($x18 (and $x71 $x74)))
 (let (($x13 (and $x18 $x63)))
 (let (($x35 (and $x13 $x48)))
 (let (($x102 (and $x35 $x101)))
 (let (($x108 (and $x102 $x107)))
 (let (($x113 (and $x108 $x112)))
 (let (($x118 (and $x113 $x117)))
 (let (($x123 (and $x118 $x122)))
 (let (($x127 (and $x123 $x126)))
 (let (($x132 (and $x127 $x131)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x133 (and $x17 $x132)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x134 (and $x14 $x133)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x135 (and $x20 $x134)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x136 (and $x23 $x135)))
 (let (($x140 (=> $x136 $x139)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x137 false)))
 (let (($x139 (= $x138 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x62)))
 (let (($x129 (= ?x27 input.dst.llvm-%n)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x124 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x120 (= $x119 true)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x109 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x89 $x92)))
 (let (($x96 (and $x93 $x95)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x31 $x96)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x82)))))))
 (let (($x98 (and $x88 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x75 true)))
 (let (($x48 (= $x76 true)))
 (let (($x8 (= (_ bv0 32) input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let (($x72 (= (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x25 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x37 (= $x25 true)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x11 (bvsle input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x49 (= $x11 true)))
 (let (($x52 (= $x49 true)))
 (let (($x41 (= $x52 true)))
 (let (($x70 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x40 (= $x70 true)))
 (let (($x16 (= $x40 true)))
 (let (($x57 (= $x16 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x5 (= $x43 true)))
 (let (($x54 (= $x5 true)))
 (let (($x64 (= $x54 true)))
 (let (($x42 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x38 (= $x42 true)))
 (let (($x51 (= $x38 true)))
 (let (($x33 (= $x51 true)))
 (let (($x60 (bvsle input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x34 (= $x60 true)))
 (let (($x61 (= $x34 true)))
 (let (($x50 (= $x61 true)))
 (let (($x32 (bvule input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x59 (= $x32 true)))
 (let (($x44 (= $x59 true)))
 (let (($x28 (= $x44 true)))
 (let (($x66 (= ?x27 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x46 (= $x66 true)))
 (let (($x19 (= $x46 true)))
 (let (($x56 (and $x19 $x28)))
 (let (($x69 (and $x56 $x50)))
 (let (($x22 (and $x69 $x33)))
 (let (($x67 (and $x22 $x64)))
 (let (($x58 (and $x67 $x57)))
 (let (($x55 (and $x58 $x41)))
 (let (($x71 (and $x55 $x68)))
 (let (($x18 (and $x71 $x74)))
 (let (($x13 (and $x18 $x63)))
 (let (($x35 (and $x13 $x48)))
 (let (($x102 (and $x35 $x101)))
 (let (($x108 (and $x102 $x107)))
 (let (($x113 (and $x108 $x112)))
 (let (($x118 (and $x113 $x117)))
 (let (($x123 (and $x118 $x122)))
 (let (($x127 (and $x123 $x126)))
 (let (($x132 (and $x127 $x131)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x133 (and $x17 $x132)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x134 (and $x14 $x133)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x135 (and $x20 $x134)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x136 (and $x23 $x135)))
 (let (($x140 (=> $x136 $x139)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b01000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-1 #b01000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-0.L3%12%bbentry #b01000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (not $x106)))
 (let (($x104 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x105 (not $x104)))
 (let (($x108 (or $x105 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x94 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x96 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x90 (= ?x85 input.dst.llvm-%n)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x86 (= ?x85 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x35 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x13 (= $x63 true)))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x73 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x74 (= $x73 true)))
 (let (($x18 (= $x74 true)))
 (let (($x8 (= $x18 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x49)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x40 $x58)))
 (let (($x41 (and $x11 $x52)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x50 $x41)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x7)))))))
 (let (($x25 (and $x70 $x55)))
 (let (($x37 (= $x25 true)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x15 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x59 (= $x15 true)))
 (let (($x44 (= $x59 true)))
 (let (($x28 (= $x44 true)))
 (let ((?x21 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x21)))
 (let (($x46 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x46 true)))
 (let (($x10 (= $x39 true)))
 (let (($x56 (and $x10 $x28)))
 (let (($x71 (and $x56 $x68)))
 (let (($x29 (and $x71 $x8)))
 (let (($x76 (and $x29 $x75)))
 (let (($x78 (and $x76 $x87)))
 (let (($x83 (and $x78 $x82)))
 (let (($x31 (and $x83 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x99 (and $x93 $x98)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x100 (and $x26 $x99)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x101 (and $x6 $x100)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x102 (and $x62 $x101)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x103 (and $x30 $x102)))
 (let (($x111 (=> $x103 $x110)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (not $x106)))
 (let (($x104 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x105 (not $x104)))
 (let (($x108 (or $x105 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x94 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x96 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x90 (= ?x85 input.dst.llvm-%n)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x86 (= ?x85 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x35 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x13 (= $x63 true)))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x73 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x74 (= $x73 true)))
 (let (($x18 (= $x74 true)))
 (let (($x8 (= $x18 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x49)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x40 $x58)))
 (let (($x41 (and $x11 $x52)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x50 $x41)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x7)))))))
 (let (($x25 (and $x70 $x55)))
 (let (($x37 (= $x25 true)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x15 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x59 (= $x15 true)))
 (let (($x44 (= $x59 true)))
 (let (($x28 (= $x44 true)))
 (let ((?x21 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x21)))
 (let (($x46 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x46 true)))
 (let (($x10 (= $x39 true)))
 (let (($x56 (and $x10 $x28)))
 (let (($x71 (and $x56 $x68)))
 (let (($x29 (and $x71 $x8)))
 (let (($x76 (and $x29 $x75)))
 (let (($x78 (and $x76 $x87)))
 (let (($x83 (and $x78 $x82)))
 (let (($x31 (and $x83 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x99 (and $x93 $x98)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x100 (and $x26 $x99)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x101 (and $x6 $x100)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x102 (and $x62 $x101)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x103 (and $x30 $x102)))
 (let (($x111 (=> $x103 $x110)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x113 (bvmul ?x34 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x113)))
 (let (($x116 (= ?x114 ?x115)))
 (let (($x117 (= $x116 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x13 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x74 true)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x52)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x16 $x11)))
 (let (($x55 (and $x49 $x41)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x67 $x55)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x5)))))))
 (let (($x37 (and $x40 $x25)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x71 (= $x68 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x21)))
 (let (($x15 (= ?x24 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x59 (= $x15 true)))
 (let (($x44 (= $x59 true)))
 (let (($x46 (= ?x24 input.dst.llvm-%n)))
 (let (($x39 (= $x46 true)))
 (let (($x10 (= $x39 true)))
 (let (($x28 (and $x10 $x44)))
 (let (($x72 (and $x28 $x71)))
 (let (($x63 (and $x72 $x29)))
 (let (($x48 (and $x63 $x76)))
 (let (($x78 (and $x48 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x108 (and (not $x23) $x106)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x109 (and $x17 $x108)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x110 (and $x45 $x109)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x111 (and $x20 $x110)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x112 (and $x30 $x111)))
 (let (($x118 (=> $x112 $x117)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x113 (bvmul ?x34 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x113)))
 (let (($x116 (= ?x114 ?x115)))
 (let (($x117 (= $x116 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x13 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x74 true)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x52)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x16 $x11)))
 (let (($x55 (and $x49 $x41)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x67 $x55)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x5)))))))
 (let (($x37 (and $x40 $x25)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x71 (= $x68 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x21)))
 (let (($x15 (= ?x24 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x59 (= $x15 true)))
 (let (($x44 (= $x59 true)))
 (let (($x46 (= ?x24 input.dst.llvm-%n)))
 (let (($x39 (= $x46 true)))
 (let (($x10 (= $x39 true)))
 (let (($x28 (and $x10 $x44)))
 (let (($x72 (and $x28 $x71)))
 (let (($x63 (and $x72 $x29)))
 (let (($x48 (and $x63 $x76)))
 (let (($x78 (and $x48 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x108 (and (not $x23) $x106)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x109 (and $x17 $x108)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x110 (and $x45 $x109)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x111 (and $x20 $x110)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x112 (and $x30 $x111)))
 (let (($x118 (=> $x112 $x117)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x114 (bvmul ?x113 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x114)))
 (let (($x117 (= ?x115 ?x116)))
 (let (($x118 (= $x117 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x13 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x74 true)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x52)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x16 $x11)))
 (let (($x55 (and $x49 $x41)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x33 $x55)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x54)))))))
 (let (($x37 (and $x67 $x25)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x71 (= $x68 true)))
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x107)))
 (let (($x39 (= ?x19 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x24 (= ?x19 input.dst.llvm-%n)))
 (let (($x66 (= $x24 true)))
 (let (($x46 (= $x66 true)))
 (let (($x59 (and $x46 $x15)))
 (let (($x72 (and $x59 $x71)))
 (let (($x63 (and $x72 $x29)))
 (let (($x48 (and $x63 $x76)))
 (let (($x78 (and $x48 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x109 (and (not $x26) $x106)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x110 (and $x27 $x109)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x111 (and $x9 $x110)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x112 (and $x14 $x111)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x34 (and $x30 $x112)))
 (let (($x119 (=> $x34 $x118)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x114 (bvmul ?x113 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x114)))
 (let (($x117 (= ?x115 ?x116)))
 (let (($x118 (= $x117 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x13 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x74 true)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x52)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x16 $x11)))
 (let (($x55 (and $x49 $x41)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x33 $x55)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x54)))))))
 (let (($x37 (and $x67 $x25)))
 (let (($x65 (= $x37 true)))
 (let (($x68 (= $x65 true)))
 (let (($x71 (= $x68 true)))
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x107)))
 (let (($x39 (= ?x19 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x24 (= ?x19 input.dst.llvm-%n)))
 (let (($x66 (= $x24 true)))
 (let (($x46 (= $x66 true)))
 (let (($x59 (and $x46 $x15)))
 (let (($x72 (and $x59 $x71)))
 (let (($x63 (and $x72 $x29)))
 (let (($x48 (and $x63 $x76)))
 (let (($x78 (and $x48 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x109 (and (not $x26) $x106)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x110 (and $x27 $x109)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x111 (and $x9 $x110)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x112 (and $x14 $x111)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x34 (and $x30 $x112)))
 (let (($x119 (=> $x34 $x118)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x115 (bvuge ?x114 (_ bv1 32))))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x12)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x18 $x63)))
 (let (($x76 (and $x13 $x75)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x58 $x76)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x37)))))))
 (let (($x35 (and $x74 $x48)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x70 true)))
 (let (($x40 (= $x61 true)))
 (let (($x67 (= $x40 true)))
 (let (($x51 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x5 (= $x51 true)))
 (let (($x43 (= $x5 true)))
 (let (($x54 (= $x43 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x66)))
 (let (($x50 (= ?x46 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x22 (= $x50 true)))
 (let (($x42 (= $x22 true)))
 (let (($x39 (= ?x46 input.dst.llvm-%n)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x23 true)))
 (let (($x19 (= $x107 true)))
 (let (($x21 (= $x19 true)))
 (let (($x59 (and $x21 $x15)))
 (let (($x7 (and $x59 $x42)))
 (let (($x64 (and $x7 $x54)))
 (let (($x38 (and $x64 $x67)))
 (let (($x78 (and $x38 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x110 (and (not $x17) $x106)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x111 (and $x6 $x110)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x112 (and $x62 $x111)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x34 (and $x60 $x112)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x113 (and $x56 $x34)))
 (let (($x118 (=> $x113 $x117)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x115 (bvuge ?x114 (_ bv1 32))))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x12)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x18 $x63)))
 (let (($x76 (and $x13 $x75)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x58 $x76)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x37)))))))
 (let (($x35 (and $x74 $x48)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x61 (= $x70 true)))
 (let (($x40 (= $x61 true)))
 (let (($x67 (= $x40 true)))
 (let (($x51 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x5 (= $x51 true)))
 (let (($x43 (= $x5 true)))
 (let (($x54 (= $x43 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x66)))
 (let (($x50 (= ?x46 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x22 (= $x50 true)))
 (let (($x42 (= $x22 true)))
 (let (($x39 (= ?x46 input.dst.llvm-%n)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x23 true)))
 (let (($x19 (= $x107 true)))
 (let (($x21 (= $x19 true)))
 (let (($x59 (and $x21 $x15)))
 (let (($x7 (and $x59 $x42)))
 (let (($x64 (and $x7 $x54)))
 (let (($x38 (and $x64 $x67)))
 (let (($x78 (and $x38 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x110 (and (not $x17) $x106)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x111 (and $x6 $x110)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x112 (and $x62 $x111)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x34 (and $x60 $x112)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x113 (and $x56 $x34)))
 (let (($x118 (=> $x113 $x117)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x116 (bvsge ?x115 (_ bv1 32))))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x12)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x18 $x63)))
 (let (($x76 (and $x13 $x75)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x49 $x76)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x65)))))))
 (let (($x35 (and $x58 $x48)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x54 true)))
 (let (($x70 (= $x64 true)))
 (let (($x61 (= $x70 true)))
 (let (($x42 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x7 (= $x42 true)))
 (let (($x51 (= $x7 true)))
 (let (($x5 (= $x51 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x21)))
 (let (($x15 (= ?x24 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x59 (= $x15 true)))
 (let (($x50 (= $x59 true)))
 (let (($x66 (= ?x24 input.dst.llvm-%n)))
 (let (($x46 (= $x66 true)))
 (let (($x39 (= $x46 true)))
 (let (($x26 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x26 true)))
 (let (($x23 (= $x108 true)))
 (let (($x107 (= $x23 true)))
 (let (($x10 (and $x107 $x39)))
 (let (($x22 (and $x10 $x50)))
 (let (($x43 (and $x22 $x5)))
 (let (($x40 (and $x43 $x61)))
 (let (($x78 (and $x40 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x27 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x111 (and (not $x27) $x106)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x112 (and $x45 $x111)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x34 (and $x20 $x112)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x113 (and $x30 $x34)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x114 (and $x44 $x113)))
 (let (($x119 (=> $x114 $x118)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x116 (bvsge ?x115 (_ bv1 32))))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x101)))
 (let (($x103 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x94)))
 (let (($x97 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x88 (= $x86 true)))
 (let (($x47 (= $x88 true)))
 (let (($x81 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x12)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x18 $x63)))
 (let (($x76 (and $x13 $x75)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x49 $x76)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x65)))))))
 (let (($x35 (and $x58 $x48)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x54 true)))
 (let (($x70 (= $x64 true)))
 (let (($x61 (= $x70 true)))
 (let (($x42 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x7 (= $x42 true)))
 (let (($x51 (= $x7 true)))
 (let (($x5 (= $x51 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x21)))
 (let (($x15 (= ?x24 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x59 (= $x15 true)))
 (let (($x50 (= $x59 true)))
 (let (($x66 (= ?x24 input.dst.llvm-%n)))
 (let (($x46 (= $x66 true)))
 (let (($x39 (= $x46 true)))
 (let (($x26 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x26 true)))
 (let (($x23 (= $x108 true)))
 (let (($x107 (= $x23 true)))
 (let (($x10 (and $x107 $x39)))
 (let (($x22 (and $x10 $x50)))
 (let (($x43 (and $x22 $x5)))
 (let (($x40 (and $x43 $x61)))
 (let (($x78 (and $x40 $x87)))
 (let (($x84 (and $x78 $x83)))
 (let (($x31 (and $x84 $x47)))
 (let (($x93 (and $x31 $x92)))
 (let (($x100 (and $x93 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x27 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x111 (and (not $x27) $x106)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x112 (and $x45 $x111)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x34 (and $x20 $x112)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x113 (and $x30 $x34)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x114 (and $x44 $x113)))
 (let (($x119 (=> $x114 $x118)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-i-0.L3%12%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b01111111111111111111111111111111)
(= input.spec-%var-n-1 #b01111111111111111111111111111111)
(= input.dst.llvm-%n #b01111111111111111111111111111111)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x104 (bvsge ?x103 (_ bv0 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x47 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x47 true)))
 (let (($x89 (= $x31 true)))
 (let (($x81 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x53 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x78 (= $x87 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x18)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x72 $x11)))
 (let (($x29 (and $x49 $x8)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x64 $x29)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x55)))))))
 (let (($x13 (and $x71 $x63)))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let (($x50 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x22 (= $x50 true)))
 (let (($x42 (= $x22 true)))
 (let (($x7 (= $x42 true)))
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x107)))
 (let (($x39 (= ?x19 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x21 (= ?x19 input.dst.llvm-%n)))
 (let (($x24 (= $x21 true)))
 (let (($x66 (= $x24 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x17 true)))
 (let (($x26 (= $x109 true)))
 (let (($x108 (= $x26 true)))
 (let (($x46 (and $x108 $x66)))
 (let (($x59 (and $x46 $x15)))
 (let (($x51 (and $x59 $x7)))
 (let (($x48 (and $x51 $x76)))
 (let (($x80 (and $x48 $x78)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x96 (and $x90 $x95)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x98 (and (not $x6) $x96)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x99 (and $x9 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x100 (and $x14 $x99)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x101 (and $x56 $x100)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x102 (and $x33 $x101)))
 (let (($x111 (=> $x102 $x106)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x104 (bvsge ?x103 (_ bv0 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x91)))
 (let (($x93 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x47 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x47 true)))
 (let (($x89 (= $x31 true)))
 (let (($x81 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x53 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x78 (= $x87 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x18)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x72 $x11)))
 (let (($x29 (and $x49 $x8)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x64 $x29)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x55)))))))
 (let (($x13 (and $x71 $x63)))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let (($x50 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x22 (= $x50 true)))
 (let (($x42 (= $x22 true)))
 (let (($x7 (= $x42 true)))
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x107)))
 (let (($x39 (= ?x19 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x21 (= ?x19 input.dst.llvm-%n)))
 (let (($x24 (= $x21 true)))
 (let (($x66 (= $x24 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x17 true)))
 (let (($x26 (= $x109 true)))
 (let (($x108 (= $x26 true)))
 (let (($x46 (and $x108 $x66)))
 (let (($x59 (and $x46 $x15)))
 (let (($x51 (and $x59 $x7)))
 (let (($x48 (and $x51 $x76)))
 (let (($x80 (and $x48 $x78)))
 (let (($x84 (and $x80 $x83)))
 (let (($x90 (and $x84 $x89)))
 (let (($x96 (and $x90 $x95)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x98 (and (not $x6) $x96)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x99 (and $x9 $x98)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x100 (and $x14 $x99)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x101 (and $x56 $x100)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x102 (and $x33 $x101)))
 (let (($x111 (=> $x102 $x106)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L3%12%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870915 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (bvuge ?x99 (_ bv1 32))))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x88)))
 (let (($x31 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x31 true)))
 (let (($x90 (= $x89 true)))
 (let (($x82 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x87 true)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x29)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x58 $x18)))
 (let (($x13 (and $x8 $x63)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x40 $x13)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x25)))))))
 (let (($x75 (and $x74 $x12)))
 (let (($x76 (= $x75 true)))
 (let (($x48 (= $x76 true)))
 (let (($x35 (= $x48 true)))
 (let (($x50 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x22 (= $x50 true)))
 (let (($x42 (= $x22 true)))
 (let (($x7 (= $x42 true)))
 (let ((?x23 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x23)))
 (let (($x39 (= ?x107 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x21 (= ?x107 input.dst.llvm-%n)))
 (let (($x24 (= $x21 true)))
 (let (($x66 (= $x24 true)))
 (let ((?x27 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x27)))
 (let (($x109 (= ?x110 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x109 true)))
 (let (($x108 (= $x26 true)))
 (let (($x46 (and $x108 $x66)))
 (let (($x59 (and $x46 $x15)))
 (let (($x51 (and $x59 $x7)))
 (let (($x53 (and $x51 $x35)))
 (let (($x79 (and $x53 $x81)))
 (let (($x86 (and $x79 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and (not $x45) $x91)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x94 (and $x62 $x93)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x95 (and $x60 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x98 (and $x67 $x96)))
 (let (($x103 (=> $x98 $x102)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (bvuge ?x99 (_ bv1 32))))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x88)))
 (let (($x31 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x31 true)))
 (let (($x90 (= $x89 true)))
 (let (($x82 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x87 true)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x29)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x58 $x18)))
 (let (($x13 (and $x8 $x63)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x40 $x13)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x25)))))))
 (let (($x75 (and $x74 $x12)))
 (let (($x76 (= $x75 true)))
 (let (($x48 (= $x76 true)))
 (let (($x35 (= $x48 true)))
 (let (($x50 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x22 (= $x50 true)))
 (let (($x42 (= $x22 true)))
 (let (($x7 (= $x42 true)))
 (let ((?x23 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x23)))
 (let (($x39 (= ?x107 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x39 true)))
 (let (($x15 (= $x10 true)))
 (let (($x21 (= ?x107 input.dst.llvm-%n)))
 (let (($x24 (= $x21 true)))
 (let (($x66 (= $x24 true)))
 (let ((?x27 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x27)))
 (let (($x109 (= ?x110 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x109 true)))
 (let (($x108 (= $x26 true)))
 (let (($x46 (and $x108 $x66)))
 (let (($x59 (and $x46 $x15)))
 (let (($x51 (and $x59 $x7)))
 (let (($x53 (and $x51 $x35)))
 (let (($x79 (and $x53 $x81)))
 (let (($x86 (and $x79 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and (not $x45) $x91)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x94 (and $x62 $x93)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x95 (and $x60 $x94)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x98 (and $x67 $x96)))
 (let (($x103 (=> $x98 $x102)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b11111111111111111111111111111111)
(= input.spec-%var-i-0.L3%12%bbentry #b11111111111111111111111111111111)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x90 (bvmul ?x89 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x90)))
 (let (($x94 (= ?x91 ?x93)))
 (let (($x95 (= $x94 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x78)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let ((?x75 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x35 (= ?x76 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x18 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x65)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x73 $x55)))
 (let (($x54 (and $x25 $x71)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x66 $x54)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x22)))))))
 (let (($x74 (and $x72 $x64)))
 (let (($x68 (= $x74 true)))
 (let (($x40 (= $x68 true)))
 (let (($x58 (= $x40 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x6)))
 (let (($x26 (= ?x97 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x108 (= $x26 true)))
 (let (($x23 (= $x108 true)))
 (let (($x110 (= ?x97 input.dst.llvm-%n)))
 (let (($x17 (= $x110 true)))
 (let (($x109 (= $x17 true)))
 (let (($x107 (and $x109 $x23)))
 (let (($x11 (and $x107 $x58)))
 (let (($x13 (and $x11 $x63)))
 (let (($x87 (and $x13 $x77)))
 (let (($x83 (and $x87 $x82)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x85 (and (not $x45) $x83)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x86 (and $x62 $x85)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x88 (and $x60 $x86)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x47 (and $x44 $x88)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x31 (and $x67 $x47)))
 (let (($x96 (=> $x31 $x95)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x90 (bvmul ?x89 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x90)))
 (let (($x94 (= ?x91 ?x93)))
 (let (($x95 (= $x94 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x78)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x81 true)))
 (let (($x82 (= $x79 true)))
 (let ((?x75 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x35 (= ?x76 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x18 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x65)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x73 $x55)))
 (let (($x54 (and $x25 $x71)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x66 $x54)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x22)))))))
 (let (($x74 (and $x72 $x64)))
 (let (($x68 (= $x74 true)))
 (let (($x40 (= $x68 true)))
 (let (($x58 (= $x40 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x6)))
 (let (($x26 (= ?x97 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x108 (= $x26 true)))
 (let (($x23 (= $x108 true)))
 (let (($x110 (= ?x97 input.dst.llvm-%n)))
 (let (($x17 (= $x110 true)))
 (let (($x109 (= $x17 true)))
 (let (($x107 (and $x109 $x23)))
 (let (($x11 (and $x107 $x58)))
 (let (($x13 (and $x11 $x63)))
 (let (($x87 (and $x13 $x77)))
 (let (($x83 (and $x87 $x82)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x85 (and (not $x45) $x83)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x86 (and $x62 $x85)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x88 (and $x60 $x86)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x47 (and $x44 $x88)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x31 (and $x67 $x47)))
 (let (($x96 (=> $x31 $x95)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x93 (bvmul ?x91 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x93)))
 (let (($x96 (= ?x94 ?x95)))
 (let (($x98 (= $x96 true)))
 (let ((?x80 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x80)))
 (let (($x79 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x76)))
 (let (($x53 (= ?x48 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x8 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let (($x13 (= $x63 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x71)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x41 $x25)))
 (let (($x64 (and $x65 $x54)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x57 $x64)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x7)))))))
 (let (($x68 (and $x73 $x74)))
 (let (($x40 (= $x68 true)))
 (let (($x58 (= $x40 true)))
 (let (($x11 (= $x58 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x92)))
 (let (($x109 (= ?x6 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x26 (= $x109 true)))
 (let (($x108 (= $x26 true)))
 (let (($x27 (= ?x6 input.dst.llvm-%n)))
 (let (($x110 (= $x27 true)))
 (let (($x17 (= $x110 true)))
 (let (($x23 (and $x17 $x108)))
 (let (($x49 (and $x23 $x11)))
 (let (($x12 (and $x49 $x13)))
 (let (($x78 (and $x12 $x87)))
 (let (($x85 (and $x78 $x83)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (and (not $x45) $x85)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x47 (and $x62 $x88)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x31 (and $x60 $x47)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x89 (and $x44 $x31)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x90 (and $x67 $x89)))
 (let (($x19 (=> $x90 $x98)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x93 (bvmul ?x91 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x93)))
 (let (($x96 (= ?x94 ?x95)))
 (let (($x98 (= $x96 true)))
 (let ((?x80 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x80)))
 (let (($x79 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x76)))
 (let (($x53 (= ?x48 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x8 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let (($x13 (= $x63 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x71)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x41 $x25)))
 (let (($x64 (and $x65 $x54)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x57 $x64)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x7)))))))
 (let (($x68 (and $x73 $x74)))
 (let (($x40 (= $x68 true)))
 (let (($x58 (= $x40 true)))
 (let (($x11 (= $x58 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x92)))
 (let (($x109 (= ?x6 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x26 (= $x109 true)))
 (let (($x108 (= $x26 true)))
 (let (($x27 (= ?x6 input.dst.llvm-%n)))
 (let (($x110 (= $x27 true)))
 (let (($x17 (= $x110 true)))
 (let (($x23 (and $x17 $x108)))
 (let (($x49 (and $x23 $x11)))
 (let (($x12 (and $x49 $x13)))
 (let (($x78 (and $x12 $x87)))
 (let (($x85 (and $x78 $x83)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (and (not $x45) $x85)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x47 (and $x62 $x88)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x31 (and $x60 $x47)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x89 (and $x44 $x31)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x90 (and $x67 $x89)))
 (let (($x19 (=> $x90 $x98)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (not $x47)))
 (let (($x85 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (not $x85)))
 (let (($x89 (or $x88 $x31)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x48)))
 (let (($x77 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x77 true)))
 (let (($x78 (= $x87 true)))
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x40)))
 (let (($x63 (= ?x58 input.dst.llvm-%n)))
 (let (($x13 (= $x63 true)))
 (let (($x12 (= $x13 true)))
 (let (($x11 (= ?x58 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x49 (= $x11 true)))
 (let (($x18 (= $x49 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x37)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x24 $x57)))
 (let (($x25 (and $x41 $x55)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x26 $x25)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x22)))))))
 (let (($x71 (and $x72 $x65)))
 (let (($x54 (= $x71 true)))
 (let (($x64 (= $x54 true)))
 (let (($x74 (= $x64 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x86)))
 (let (($x6 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x6 true)))
 (let (($x27 (= $x97 true)))
 (let (($x68 (and $x27 $x74)))
 (let (($x8 (and $x68 $x18)))
 (let (($x75 (and $x8 $x12)))
 (let (($x80 (and $x75 $x78)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (and $x62 $x80)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x79 (and $x60 $x81)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x82 (and $x44 $x79)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x83 (and $x67 $x82)))
 (let (($x93 (=> $x83 $x91)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (not $x47)))
 (let (($x85 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (not $x85)))
 (let (($x89 (or $x88 $x31)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x48)))
 (let (($x77 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x77 true)))
 (let (($x78 (= $x87 true)))
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x40)))
 (let (($x63 (= ?x58 input.dst.llvm-%n)))
 (let (($x13 (= $x63 true)))
 (let (($x12 (= $x13 true)))
 (let (($x11 (= ?x58 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x49 (= $x11 true)))
 (let (($x18 (= $x49 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x37)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x24 $x57)))
 (let (($x25 (and $x41 $x55)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x26 $x25)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x22)))))))
 (let (($x71 (and $x72 $x65)))
 (let (($x54 (= $x71 true)))
 (let (($x64 (= $x54 true)))
 (let (($x74 (= $x64 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x86)))
 (let (($x6 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x6 true)))
 (let (($x27 (= $x97 true)))
 (let (($x68 (and $x27 $x74)))
 (let (($x8 (and $x68 $x18)))
 (let (($x75 (and $x8 $x12)))
 (let (($x80 (and $x75 $x78)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (and $x62 $x80)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x79 (and $x60 $x81)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x82 (and $x44 $x79)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x83 (and $x67 $x82)))
 (let (($x93 (=> $x83 $x91)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (not $x47)))
 (let (($x89 (= $x31 false)))
 (let (($x90 (= $x89 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x53)))
 (let (($x78 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x108 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x108)))
 (let (($x12 (= ?x23 input.dst.llvm-%n)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x68)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x65 $x64)))
 (let (($x58 (and $x74 $x40)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x15 $x58)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x73)))))))
 (let (($x49 (and $x25 $x11)))
 (let (($x18 (= $x49 true)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let (($x52 (= ?x23 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x52 true)))
 (let (($x66 (= $x10 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x86)))
 (let (($x6 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x6 true)))
 (let (($x27 (= $x97 true)))
 (let (($x50 (and $x27 $x66)))
 (let (($x63 (and $x50 $x29)))
 (let (($x48 (and $x63 $x76)))
 (let (($x79 (and $x48 $x81)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x62 $x79)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x83 (and $x60 $x82)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x44 $x83)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x67 $x85)))
 (let (($x91 (=> $x88 $x90)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (not $x47)))
 (let (($x89 (= $x31 false)))
 (let (($x90 (= $x89 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x53)))
 (let (($x78 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x108 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x108)))
 (let (($x12 (= ?x23 input.dst.llvm-%n)))
 (let (($x75 (= $x12 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x68)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x65 $x64)))
 (let (($x58 (and $x74 $x40)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x15 $x58)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x73)))))))
 (let (($x49 (and $x25 $x11)))
 (let (($x18 (= $x49 true)))
 (let (($x8 (= $x18 true)))
 (let (($x29 (= $x8 true)))
 (let (($x52 (= ?x23 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x52 true)))
 (let (($x66 (= $x10 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x86)))
 (let (($x6 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x6 true)))
 (let (($x27 (= $x97 true)))
 (let (($x50 (and $x27 $x66)))
 (let (($x63 (and $x50 $x29)))
 (let (($x48 (and $x63 $x76)))
 (let (($x79 (and $x48 $x81)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x62 $x79)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x83 (and $x60 $x82)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x44 $x83)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x67 $x85)))
 (let (($x91 (=> $x88 $x90)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-i-0.L3%12%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x90 (or $x31 $x89)))
 (let (($x91 (= $x90 true)))
 (let (($x93 (= $x91 true)))
 (let ((?x77 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x77)))
 (let (($x80 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x79 (= $x81 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x49)))
 (let (($x75 (= ?x18 input.dst.llvm-%n)))
 (let (($x76 (= $x75 true)))
 (let (($x48 (= $x76 true)))
 (let (($x8 (= ?x18 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x65)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x41 $x42)))
 (let (($x54 (and $x15 $x71)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x52 $x54)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x72)))))))
 (let (($x74 (and $x57 $x64)))
 (let (($x68 (= $x74 true)))
 (let (($x40 (= $x68 true)))
 (let (($x58 (= $x40 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x45)))
 (let (($x92 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x92 true)))
 (let (($x97 (= $x6 true)))
 (let (($x11 (and $x97 $x58)))
 (let (($x13 (and $x11 $x63)))
 (let (($x35 (and $x13 $x48)))
 (let (($x82 (and $x35 $x79)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x83 (and $x20 $x82)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x85 (and $x30 $x83)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x88 (and $x33 $x85)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x47 (and $x59 $x88)))
 (let (($x22 (=> $x47 $x93)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x90 (or $x31 $x89)))
 (let (($x91 (= $x90 true)))
 (let (($x93 (= $x91 true)))
 (let ((?x77 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x77)))
 (let (($x80 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x79 (= $x81 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x49)))
 (let (($x75 (= ?x18 input.dst.llvm-%n)))
 (let (($x76 (= $x75 true)))
 (let (($x48 (= $x76 true)))
 (let (($x8 (= ?x18 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x29 (= $x8 true)))
 (let (($x63 (= $x29 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x65)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x41 $x42)))
 (let (($x54 (and $x15 $x71)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x52 $x54)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x72)))))))
 (let (($x74 (and $x57 $x64)))
 (let (($x68 (= $x74 true)))
 (let (($x40 (= $x68 true)))
 (let (($x58 (= $x40 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x45)))
 (let (($x92 (= ?x86 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x92 true)))
 (let (($x97 (= $x6 true)))
 (let (($x11 (and $x97 $x58)))
 (let (($x13 (and $x11 $x63)))
 (let (($x35 (and $x13 $x48)))
 (let (($x82 (and $x35 $x79)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x83 (and $x20 $x82)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x85 (and $x30 $x83)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x88 (and $x33 $x85)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x47 (and $x59 $x88)))
 (let (($x22 (=> $x47 $x93)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x95 (= $x17 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x85)))
 (let (($x31 (= ?x88 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x31 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x35)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x13 $x76)))
 (let (($x77 (and $x48 $x53)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x65 $x77)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x58)))))))
 (let (($x78 (and $x63 $x87)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let (($x79 (= $x81 true)))
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x72)))
 (let (($x23 (= ?x26 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x52 (= $x23 true)))
 (let (($x41 (= $x52 true)))
 (let (($x24 (= ?x26 input.dst.llvm-%n)))
 (let (($x109 (= $x24 true)))
 (let (($x73 (= $x109 true)))
 (let ((?x66 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x66)))
 (let (($x50 (= ?x39 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x50 true)))
 (let (($x55 (= $x51 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x86)))
 (let (($x92 (= $x84 true)))
 (let (($x6 (= $x92 true)))
 (let (($x97 (= $x6 true)))
 (let (($x7 (and $x97 $x55)))
 (let (($x57 (and $x7 $x73)))
 (let (($x37 (and $x57 $x41)))
 (let (($x82 (and $x37 $x79)))
 (let (($x91 (and $x82 $x90)))
 (let (($x62 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and $x62 $x91)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x22 (and $x14 $x93)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x94 (and $x56 $x22)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x108 (and $x32 $x94)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x110 (and $x59 $x108)))
 (let (($x98 (=> $x110 $x96)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x95 (= $x17 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x85 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x85)))
 (let (($x31 (= ?x88 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x31 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x35)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x13 $x76)))
 (let (($x77 (and $x48 $x53)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x65 $x77)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x58)))))))
 (let (($x78 (and $x63 $x87)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let (($x79 (= $x81 true)))
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x72)))
 (let (($x23 (= ?x26 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x52 (= $x23 true)))
 (let (($x41 (= $x52 true)))
 (let (($x24 (= ?x26 input.dst.llvm-%n)))
 (let (($x109 (= $x24 true)))
 (let (($x73 (= $x109 true)))
 (let ((?x66 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x66)))
 (let (($x50 (= ?x39 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x50 true)))
 (let (($x55 (= $x51 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x86)))
 (let (($x92 (= $x84 true)))
 (let (($x6 (= $x92 true)))
 (let (($x97 (= $x6 true)))
 (let (($x7 (and $x97 $x55)))
 (let (($x57 (and $x7 $x73)))
 (let (($x37 (and $x57 $x41)))
 (let (($x82 (and $x37 $x79)))
 (let (($x91 (and $x82 $x90)))
 (let (($x62 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and $x62 $x91)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x22 (and $x14 $x93)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x94 (and $x56 $x22)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x108 (and $x32 $x94)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x110 (and $x59 $x108)))
 (let (($x98 (=> $x110 $x96)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (not $x91)))
 (let (($x22 (or $x91 $x93)))
 (let (($x94 (= $x22 true)))
 (let (($x108 (= $x94 true)))
 (let ((?x80 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x80)))
 (let (($x82 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x82 true)))
 (let (($x85 (= $x83 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x97)))
 (let (($x35 (= ?x10 input.dst.llvm-%n)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x18)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x40 $x11)))
 (let (($x63 (and $x49 $x8)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x26 $x63)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x41)))))))
 (let (($x65 (and $x68 $x15)))
 (let (($x13 (= $x65 true)))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x66 (= ?x10 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x39 (= $x66 true)))
 (let (($x50 (= $x39 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x9)))
 (let (($x84 (= ?x45 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x84 true)))
 (let (($x6 (= $x92 true)))
 (let (($x51 (and $x6 $x50)))
 (let (($x76 (and $x51 $x75)))
 (let (($x87 (and $x76 $x77)))
 (let (($x88 (and $x87 $x85)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x47 (and $x14 $x88)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x31 (and $x44 $x47)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x89 (and $x67 $x31)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x90 (and $x5 $x89)))
 (let (($x110 (=> $x90 $x108)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (not $x91)))
 (let (($x22 (or $x91 $x93)))
 (let (($x94 (= $x22 true)))
 (let (($x108 (= $x94 true)))
 (let ((?x80 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x80)))
 (let (($x82 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x82 true)))
 (let (($x85 (= $x83 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x97)))
 (let (($x35 (= ?x10 input.dst.llvm-%n)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x18)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x40 $x11)))
 (let (($x63 (and $x49 $x8)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x26 $x63)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x41)))))))
 (let (($x65 (and $x68 $x15)))
 (let (($x13 (= $x65 true)))
 (let (($x12 (= $x13 true)))
 (let (($x75 (= $x12 true)))
 (let (($x66 (= ?x10 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x39 (= $x66 true)))
 (let (($x50 (= $x39 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x9)))
 (let (($x84 (= ?x45 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x84 true)))
 (let (($x6 (= $x92 true)))
 (let (($x51 (and $x6 $x50)))
 (let (($x76 (and $x51 $x75)))
 (let (($x87 (and $x76 $x77)))
 (let (($x88 (and $x87 $x85)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x47 (and $x14 $x88)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x31 (and $x44 $x47)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x89 (and $x67 $x31)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x90 (and $x5 $x89)))
 (let (($x110 (=> $x90 $x108)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x54)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x52 $x37)))
 (let (($x68 (and $x71 $x29)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x23 $x68)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x66)))))))
 (let (($x47 (and $x64 $x72)))
 (let (($x31 (= $x47 true)))
 (let (($x89 (= $x31 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x13 (concat ?x63 (concat ?x11 ?x74)))))
 (let (($x78 (= ?x12 input.dst.llvm-%n)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let (($x75 (= input.dst.llvm-%n ?x12)))
 (let (($x35 (and (and (and $x64 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x72) $x75)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x79 (and $x87 $x81)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x14 $x79)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x83 (and $x44 $x82)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x67 $x83)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x5 $x85)))
 (let (($x90 (=> $x88 $x89)))
 (not $x90))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x54)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x52 $x37)))
 (let (($x68 (and $x71 $x29)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x23 $x68)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x66)))))))
 (let (($x47 (and $x64 $x72)))
 (let (($x31 (= $x47 true)))
 (let (($x89 (= $x31 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x13 (concat ?x63 (concat ?x11 ?x74)))))
 (let (($x78 (= ?x12 input.dst.llvm-%n)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let (($x75 (= input.dst.llvm-%n ?x12)))
 (let (($x35 (and (and (and $x64 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x72) $x75)))
 (let (($x53 (= $x35 true)))
 (let (($x77 (= $x53 true)))
 (let (($x87 (= $x77 true)))
 (let (($x79 (and $x87 $x81)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x14 $x79)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x83 (and $x44 $x82)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x67 $x83)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x5 $x85)))
 (let (($x90 (=> $x88 $x89)))
 (not $x90))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x91)))
 (let (($x62 (= ?x20 input.dst.llvm-%n)))
 (let (($x40 (= $x62 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x12 (concat ?x74 (concat ?x8 ?x13)))))
 (let (($x79 (= ?x75 input.dst.llvm-%n)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x35 (= input.dst.llvm-%n ?x75)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x29)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x57 $x71)))
 (let (($x72 (and $x54 $x68)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x52 $x72)))
 (let (($x92 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x51)))))))
 (let (($x87 (and (and (and $x73 $x92) $x48) $x35)))
 (let (($x78 (= $x87 true)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let (($x85 (and $x81 $x83)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (and $x14 $x85)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x47 (and $x44 $x88)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x31 (and $x67 $x47)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x89 (and $x5 $x31)))
 (let (($x93 (=> $x89 $x40)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x91)))
 (let (($x62 (= ?x20 input.dst.llvm-%n)))
 (let (($x40 (= $x62 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x12 (concat ?x74 (concat ?x8 ?x13)))))
 (let (($x79 (= ?x75 input.dst.llvm-%n)))
 (let (($x82 (= $x79 true)))
 (let (($x83 (= $x82 true)))
 (let (($x35 (= input.dst.llvm-%n ?x75)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x29)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x57 $x71)))
 (let (($x72 (and $x54 $x68)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x52 $x72)))
 (let (($x92 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x51)))))))
 (let (($x87 (and (and (and $x73 $x92) $x48) $x35)))
 (let (($x78 (= $x87 true)))
 (let (($x80 (= $x78 true)))
 (let (($x81 (= $x80 true)))
 (let (($x85 (and $x81 $x83)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (and $x14 $x85)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x47 (and $x44 $x88)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x31 (and $x67 $x47)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x89 (and $x5 $x31)))
 (let (($x93 (=> $x89 $x40)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x40)))
 (let (($x22 (= ?x93 input.spec-%var-n-1)))
 (let (($x86 (= $x22 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x92 (concat ?x9 (concat ?x66 ?x39)))))
 (let (($x81 (= input.dst.llvm-%n ?x53)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x35)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x13 $x49)))
 (let (($x78 (and $x75 $x87)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x54 $x78)))
 (let (($x71 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x15)))))))
 (let (($x83 (and (and (and $x8 $x71) $x80) $x81)))
 (let (($x85 (= $x83 true)))
 (let (($x88 (= $x85 true)))
 (let (($x47 (= $x88 true)))
 (let (($x52 (= ?x53 input.dst.llvm-%n)))
 (let (($x57 (= $x52 true)))
 (let (($x41 (= $x57 true)))
 (let (($x31 (and $x41 $x47)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x89 (and $x14 $x31)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x90 (and $x44 $x89)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x91 (and $x67 $x90)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x20 (and $x5 $x91)))
 (let (($x84 (=> $x20 $x86)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x40)))
 (let (($x22 (= ?x93 input.spec-%var-n-1)))
 (let (($x86 (= $x22 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x92 (concat ?x9 (concat ?x66 ?x39)))))
 (let (($x81 (= input.dst.llvm-%n ?x53)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x35)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x13 $x49)))
 (let (($x78 (and $x75 $x87)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x54 $x78)))
 (let (($x71 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x15)))))))
 (let (($x83 (and (and (and $x8 $x71) $x80) $x81)))
 (let (($x85 (= $x83 true)))
 (let (($x88 (= $x85 true)))
 (let (($x47 (= $x88 true)))
 (let (($x52 (= ?x53 input.dst.llvm-%n)))
 (let (($x57 (= $x52 true)))
 (let (($x41 (= $x57 true)))
 (let (($x31 (and $x41 $x47)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x89 (and $x14 $x31)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x90 (and $x44 $x89)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x91 (and $x67 $x90)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x20 (and $x5 $x91)))
 (let (($x84 (=> $x20 $x86)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171508/query
