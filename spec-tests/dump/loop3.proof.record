==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x68 (= false true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x59 (concat ?x56 (concat ?x52 ?x50)))))
 (let (($x61 (= ?x60 input.dst.llvm-%n)))
 (let (($x62 (= $x61 true)))
 (let (($x7 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x39 (= $x7 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x19)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x33 $x16)))
 (let (($x17 (and $x22 $x8)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x27 $x17)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x45)))))))
 (let (($x14 (and $x12 $x6)))
 (let (($x36 (= $x14 true)))
 (let (($x41 (and $x36 $x39)))
 (let (($x63 (and $x41 $x62)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (and $x5 $x63)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x65 (and $x13 $x64)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x66 (and $x20 $x65)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x67 (and $x10 $x66)))
 (let (($x69 (=> $x67 $x68)))
 (not $x69)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x68 (= false true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x59 (concat ?x56 (concat ?x52 ?x50)))))
 (let (($x61 (= ?x60 input.dst.llvm-%n)))
 (let (($x62 (= $x61 true)))
 (let (($x7 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x39 (= $x7 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x19)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x33 $x16)))
 (let (($x17 (and $x22 $x8)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x27 $x17)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x45)))))))
 (let (($x14 (and $x12 $x6)))
 (let (($x36 (= $x14 true)))
 (let (($x41 (and $x36 $x39)))
 (let (($x63 (and $x41 $x62)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (and $x5 $x63)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x65 (and $x13 $x64)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x66 (and $x20 $x65)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x67 (and $x10 $x66)))
 (let (($x69 (=> $x67 $x68)))
 (not $x69)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x39)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x59 $x8)))
 (let (($x58 (and $x41 $x54)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x48 $x58)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x24)))))))
 (let (($x68 (and $x35 $x55)))
 (let (($x69 (= $x68 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x50 (concat ?x31 (concat ?x14 ?x16)))))
 (let (($x57 (= input.dst.llvm-%n ?x53)))
 (let (($x62 (and (and (and $x35 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x55) $x57)))
 (let (($x63 (= $x62 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (and $x28 $x63)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x65 (and $x20 $x64)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x66 (and $x23 $x65)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x67 (and $x9 $x66)))
 (let (($x70 (=> $x67 $x69)))
 (not $x70)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x39)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x59 $x8)))
 (let (($x58 (and $x41 $x54)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x48 $x58)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x24)))))))
 (let (($x68 (and $x35 $x55)))
 (let (($x69 (= $x68 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x50 (concat ?x31 (concat ?x14 ?x16)))))
 (let (($x57 (= input.dst.llvm-%n ?x53)))
 (let (($x62 (and (and (and $x35 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x55) $x57)))
 (let (($x63 (= $x62 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (and $x28 $x63)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x65 (and $x20 $x64)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x66 (and $x23 $x65)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x67 (and $x9 $x66)))
 (let (($x70 (=> $x67 $x69)))
 (not $x70)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x30 (= $x46 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x53 (concat ?x16 (concat ?x6 ?x50)))))
 (let (($x62 (= input.dst.llvm-%n ?x57)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x54)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x22 $x41)))
 (let (($x55 (and $x39 $x58)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x59 $x55)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x26)))))))
 (let (($x65 (and (and (and $x5 $x13) $x61) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x67 (and $x28 $x66)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x68 (and $x20 $x67)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x69 (and $x23 $x68)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x70 (and $x9 $x69)))
 (let (($x29 (=> $x70 $x30)))
 (not $x29))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x30 (= $x46 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x53 (concat ?x16 (concat ?x6 ?x50)))))
 (let (($x62 (= input.dst.llvm-%n ?x57)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x54)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x22 $x41)))
 (let (($x55 (and $x39 $x58)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x59 $x55)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x26)))))))
 (let (($x65 (and (and (and $x5 $x13) $x61) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x67 (and $x28 $x66)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x68 (and $x20 $x67)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x69 (and $x23 $x68)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x70 (and $x9 $x69)))
 (let (($x29 (=> $x70 $x30)))
 (not $x29))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-1 #b10000000000000000000000000000000)
(= input.spec-%var-n-0.L3%12%bbentry #b10000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #xff))
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x33)))
 (let (($x11 (= ?x18 input.dst.llvm-%n)))
 (let (($x49 (= $x11 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x57 (concat ?x50 (concat ?x14 ?x53)))))
 (let (($x65 (= input.dst.llvm-%n ?x62)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x58)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x36 $x39)))
 (let (($x61 (and $x54 $x55)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x22 $x61)))
 (let (($x38 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x37)))))))
 (let (($x68 (and (and (and $x48 $x38) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x70 (and $x28 $x69)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x46 (and $x21 $x70)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x30 (and $x9 $x46)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x29 (and $x42 $x30)))
 (let (($x71 (=> $x29 $x49)))
 (not $x71))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x33)))
 (let (($x11 (= ?x18 input.dst.llvm-%n)))
 (let (($x49 (= $x11 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x57 (concat ?x50 (concat ?x14 ?x53)))))
 (let (($x65 (= input.dst.llvm-%n ?x62)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x58)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x36 $x39)))
 (let (($x61 (and $x54 $x55)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x22 $x61)))
 (let (($x38 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x37)))))))
 (let (($x68 (and (and (and $x48 $x38) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x70 (and $x28 $x69)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x46 (and $x21 $x70)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x30 (and $x9 $x46)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x29 (and $x42 $x30)))
 (let (($x71 (=> $x29 $x49)))
 (not $x71))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x49)))
 (let (($x72 (= ?x71 input.spec-%var-n-1)))
 (let (($x56 (= $x72 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x62 (concat ?x53 (concat ?x6 ?x57)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x55)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x8 $x54)))
 (let (($x64 (and $x58 $x61)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x36 $x64)))
 (let (($x24 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x52)))))))
 (let (($x46 (and (and (and $x59 $x24) $x67) $x68)))
 (let (($x30 (= $x46 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x29 (and $x28 $x30)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x17 (and $x21 $x29)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x33 (and $x9 $x17)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x18 (and $x42 $x33)))
 (let (($x51 (=> $x18 $x56)))
 (not $x51))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x49)))
 (let (($x72 (= ?x71 input.spec-%var-n-1)))
 (let (($x56 (= $x72 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x62 (concat ?x53 (concat ?x6 ?x57)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x55)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x8 $x54)))
 (let (($x64 (and $x58 $x61)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x36 $x64)))
 (let (($x24 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x52)))))))
 (let (($x46 (and (and (and $x59 $x24) $x67) $x68)))
 (let (($x30 (= $x46 true)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x29 (and $x28 $x30)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x17 (and $x21 $x29)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x33 (and $x9 $x17)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x18 (and $x42 $x33)))
 (let (($x51 (=> $x18 $x56)))
 (not $x51))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x107 false)))
 (let (($x109 (= $x108 true)))
 (let ((?x58 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x58)))
 (let (($x100 (= ?x55 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x96 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x93 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x94 (= $x93 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x91 (= $x90 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x88 (= $x87 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x77 (= $x76 true)))
 (let (($x73 (= (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x74 (= $x73 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x17 $x11)))
 (let (($x56 (and $x49 $x72)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x62 $x56)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x50)))))))
 (let (($x44 (and $x29 $x51)))
 (let (($x43 (= $x44 true)))
 (let (($x61 (= ?x55 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (= $x61 true)))
 (let (($x8 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x41 (= $x8 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x22 (= $x69 true)))
 (let (($x59 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x63 (= $x59 true)))
 (let (($x48 (bvule input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x60 (= $x48 true)))
 (let (($x5 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x37 (= $x5 true)))
 (let (($x66 (bvsle input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x26 (= $x66 true)))
 (let (($x45 (bvule input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x35 (= $x45 true)))
 (let (($x27 (and $x35 $x26)))
 (let (($x52 (and $x27 $x37)))
 (let (($x38 (and $x52 $x60)))
 (let (($x24 (and $x38 $x63)))
 (let (($x36 (and $x24 $x22)))
 (let (($x39 (and $x36 $x41)))
 (let (($x67 (and $x39 $x64)))
 (let (($x40 (and $x67 $x43)))
 (let (($x75 (and $x40 $x74)))
 (let (($x78 (and $x75 $x77)))
 (let (($x82 (and $x78 $x81)))
 (let (($x86 (and $x82 $x85)))
 (let (($x89 (and $x86 $x88)))
 (let (($x92 (and $x89 $x91)))
 (let (($x95 (and $x92 $x94)))
 (let (($x98 (and $x95 $x97)))
 (let (($x102 (and $x98 $x101)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x103 (and $x12 $x102)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x104 (and $x9 $x103)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x105 (and $x34 $x104)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x106 (and $x23 $x105)))
 (let (($x110 (=> $x106 $x109)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x107 false)))
 (let (($x109 (= $x108 true)))
 (let ((?x58 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x58)))
 (let (($x100 (= ?x55 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x96 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x93 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x94 (= $x93 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x91 (= $x90 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x88 (= $x87 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x77 (= $x76 true)))
 (let (($x73 (= (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x74 (= $x73 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x17 $x11)))
 (let (($x56 (and $x49 $x72)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x62 $x56)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x50)))))))
 (let (($x44 (and $x29 $x51)))
 (let (($x43 (= $x44 true)))
 (let (($x61 (= ?x55 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (= $x61 true)))
 (let (($x8 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x41 (= $x8 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x22 (= $x69 true)))
 (let (($x59 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x63 (= $x59 true)))
 (let (($x48 (bvule input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x60 (= $x48 true)))
 (let (($x5 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x37 (= $x5 true)))
 (let (($x66 (bvsle input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x26 (= $x66 true)))
 (let (($x45 (bvule input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x35 (= $x45 true)))
 (let (($x27 (and $x35 $x26)))
 (let (($x52 (and $x27 $x37)))
 (let (($x38 (and $x52 $x60)))
 (let (($x24 (and $x38 $x63)))
 (let (($x36 (and $x24 $x22)))
 (let (($x39 (and $x36 $x41)))
 (let (($x67 (and $x39 $x64)))
 (let (($x40 (and $x67 $x43)))
 (let (($x75 (and $x40 $x74)))
 (let (($x78 (and $x75 $x77)))
 (let (($x82 (and $x78 $x81)))
 (let (($x86 (and $x82 $x85)))
 (let (($x89 (and $x86 $x88)))
 (let (($x92 (and $x89 $x91)))
 (let (($x95 (and $x92 $x94)))
 (let (($x98 (and $x95 $x97)))
 (let (($x102 (and $x98 $x101)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x103 (and $x12 $x102)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x104 (and $x9 $x103)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x105 (and $x34 $x104)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x106 (and $x23 $x105)))
 (let (($x110 (=> $x106 $x109)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b01000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-1 #b01000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L3%12%bbentry #b00000000000000000000000000000001)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b01000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x90)))
 (let (($x88 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x89 (not $x88)))
 (let (($x92 (or $x89 $x91)))
 (let (($x93 (= $x92 true)))
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x44)))
 (let (($x81 (= ?x43 input.dst.llvm-%n)))
 (let (($x82 (= $x81 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x77 (= ?x76 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x77 true)))
 (let (($x40 (= ?x43 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x73 (= $x40 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x56 (= $x72 true)))
 (let (($x11 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x49 (= $x11 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x17 (= $x62 true)))
 (let (($x46 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x29 (= $x46 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x53)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x64 $x14)))
 (let (($x57 (and $x30 $x6)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x38 $x57)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x8)))))))
 (let (($x50 (and $x61 $x7)))
 (let (($x16 (= $x50 true)))
 (let ((?x66 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x66)))
 (let (($x32 (= ?x26 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x32 true)))
 (let (($x27 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x20 (= $x27 true)))
 (let (($x52 (and $x20 $x42)))
 (let (($x65 (and $x52 $x16)))
 (let (($x31 (and $x65 $x29)))
 (let (($x33 (and $x31 $x17)))
 (let (($x71 (and $x33 $x49)))
 (let (($x51 (and $x71 $x56)))
 (let (($x74 (and $x51 $x73)))
 (let (($x79 (and $x74 $x78)))
 (let (($x83 (and $x79 $x82)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x84 (and $x5 $x83)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x85 (and $x12 $x84)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x86 (and $x9 $x85)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x87 (and $x70 $x86)))
 (let (($x94 (=> $x87 $x93)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x90)))
 (let (($x88 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x89 (not $x88)))
 (let (($x92 (or $x89 $x91)))
 (let (($x93 (= $x92 true)))
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x44)))
 (let (($x81 (= ?x43 input.dst.llvm-%n)))
 (let (($x82 (= $x81 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x77 (= ?x76 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x77 true)))
 (let (($x40 (= ?x43 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x73 (= $x40 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x56 (= $x72 true)))
 (let (($x11 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x49 (= $x11 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x17 (= $x62 true)))
 (let (($x46 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x29 (= $x46 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x53)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x64 $x14)))
 (let (($x57 (and $x30 $x6)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x38 $x57)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x8)))))))
 (let (($x50 (and $x61 $x7)))
 (let (($x16 (= $x50 true)))
 (let ((?x66 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x66)))
 (let (($x32 (= ?x26 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x32 true)))
 (let (($x27 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x20 (= $x27 true)))
 (let (($x52 (and $x20 $x42)))
 (let (($x65 (and $x52 $x16)))
 (let (($x31 (and $x65 $x29)))
 (let (($x33 (and $x31 $x17)))
 (let (($x71 (and $x33 $x49)))
 (let (($x51 (and $x71 $x56)))
 (let (($x74 (and $x51 $x73)))
 (let (($x79 (and $x74 $x78)))
 (let (($x83 (and $x79 $x82)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x84 (and $x5 $x83)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x85 (and $x12 $x84)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x86 (and $x9 $x85)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x87 (and $x70 $x86)))
 (let (($x94 (=> $x87 $x93)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x95 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x48 (bvmul ?x95 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x48)))
 (let (($x98 (= ?x96 ?x97)))
 (let (($x99 (= $x98 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x49 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x33 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x31 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x57)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x19 $x53)))
 (let (($x50 (and $x6 $x7)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x24 $x50)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x54)))))))
 (let (($x65 (and $x67 $x16)))
 (let (($x68 (= $x65 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x20)))
 (let (($x32 (= ?x21 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x42 (= $x32 true)))
 (let (($x26 (= ?x21 input.dst.llvm-%n)))
 (let (($x10 (= $x26 true)))
 (let (($x52 (and $x10 $x42)))
 (let (($x46 (and $x52 $x68)))
 (let (($x17 (and $x46 $x62)))
 (let (($x11 (and $x17 $x18)))
 (let (($x72 (and $x11 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x90 (and (not $x23) $x88)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x91 (and $x25 $x90)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x92 (and $x35 $x91)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x93 (and $x34 $x92)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x94 (and $x70 $x93)))
 (let (($x100 (=> $x94 $x99)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x95 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x48 (bvmul ?x95 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x48)))
 (let (($x98 (= ?x96 ?x97)))
 (let (($x99 (= $x98 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x49 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x33 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x31 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x57)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x19 $x53)))
 (let (($x50 (and $x6 $x7)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x24 $x50)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x54)))))))
 (let (($x65 (and $x67 $x16)))
 (let (($x68 (= $x65 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x20)))
 (let (($x32 (= ?x21 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x42 (= $x32 true)))
 (let (($x26 (= ?x21 input.dst.llvm-%n)))
 (let (($x10 (= $x26 true)))
 (let (($x52 (and $x10 $x42)))
 (let (($x46 (and $x52 $x68)))
 (let (($x17 (and $x46 $x62)))
 (let (($x11 (and $x17 $x18)))
 (let (($x72 (and $x11 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x90 (and (not $x23) $x88)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x91 (and $x25 $x90)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x92 (and $x35 $x91)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x93 (and $x34 $x92)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x94 (and $x70 $x93)))
 (let (($x100 (=> $x94 $x99)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x96 (bvmul ?x48 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x96)))
 (let (($x99 (= ?x97 ?x98)))
 (let (($x100 (= $x99 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x49 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x33 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x31 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x57)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x19 $x53)))
 (let (($x50 (and $x6 $x7)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x36 $x50)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x58)))))))
 (let (($x65 (and $x24 $x16)))
 (let (($x68 (= $x65 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x89)))
 (let (($x26 (= ?x27 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x26 true)))
 (let (($x21 (= ?x27 input.dst.llvm-%n)))
 (let (($x66 (= $x21 true)))
 (let (($x32 (and $x66 $x10)))
 (let (($x46 (and $x32 $x68)))
 (let (($x17 (and $x46 $x62)))
 (let (($x11 (and $x17 $x18)))
 (let (($x72 (and $x11 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x5 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x91 (and (not $x5) $x88)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x92 (and $x37 $x91)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x93 (and $x28 $x92)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x94 (and $x15 $x93)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x95 (and $x70 $x94)))
 (let (($x101 (=> $x95 $x100)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x96 (bvmul ?x48 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x96)))
 (let (($x99 (= ?x97 ?x98)))
 (let (($x100 (= $x99 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x49 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x33 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x31 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x57)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x19 $x53)))
 (let (($x50 (and $x6 $x7)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x36 $x50)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x58)))))))
 (let (($x65 (and $x24 $x16)))
 (let (($x68 (= $x65 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x89)))
 (let (($x26 (= ?x27 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x10 (= $x26 true)))
 (let (($x21 (= ?x27 input.dst.llvm-%n)))
 (let (($x66 (= $x21 true)))
 (let (($x32 (and $x66 $x10)))
 (let (($x46 (and $x32 $x68)))
 (let (($x17 (and $x46 $x62)))
 (let (($x11 (and $x17 $x18)))
 (let (($x72 (and $x11 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x5 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x91 (and (not $x5) $x88)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x92 (and $x37 $x91)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x93 (and $x28 $x92)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x94 (and $x15 $x93)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x95 (and $x70 $x94)))
 (let (($x101 (=> $x95 $x100)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x97 (bvuge ?x96 (_ bv1 32))))
 (let (($x98 (= $x97 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x17)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x68 $x31)))
 (let (($x18 (and $x62 $x33)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x67 $x18)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x53)))))))
 (let (($x49 (and $x65 $x11)))
 (let (($x71 (= $x49 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x20)))
 (let (($x54 (= ?x21 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x39 (= $x54 true)))
 (let (($x55 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x41 (= $x55 true)))
 (let (($x32 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x32 true)))
 (let (($x66 (= ?x21 input.dst.llvm-%n)))
 (let (($x26 (= $x66 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (= $x23 true)))
 (let (($x10 (and $x89 $x26)))
 (let (($x69 (and $x10 $x64)))
 (let (($x8 (and $x69 $x41)))
 (let (($x58 (and $x8 $x39)))
 (let (($x72 (and $x58 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x92 (and (not $x25) $x88)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and $x12 $x92)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x94 (and $x9 $x93)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x95 (and $x13 $x94)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x48 (and $x59 $x95)))
 (let (($x99 (=> $x48 $x98)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x97 (bvuge ?x96 (_ bv1 32))))
 (let (($x98 (= $x97 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x17)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x68 $x31)))
 (let (($x18 (and $x62 $x33)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x67 $x18)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x53)))))))
 (let (($x49 (and $x65 $x11)))
 (let (($x71 (= $x49 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x20)))
 (let (($x54 (= ?x21 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x39 (= $x54 true)))
 (let (($x55 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x41 (= $x55 true)))
 (let (($x32 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x32 true)))
 (let (($x66 (= ?x21 input.dst.llvm-%n)))
 (let (($x26 (= $x66 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (= $x23 true)))
 (let (($x10 (and $x89 $x26)))
 (let (($x69 (and $x10 $x64)))
 (let (($x8 (and $x69 $x41)))
 (let (($x58 (and $x8 $x39)))
 (let (($x72 (and $x58 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x92 (and (not $x25) $x88)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and $x12 $x92)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x94 (and $x9 $x93)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x95 (and $x13 $x94)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x48 (and $x59 $x95)))
 (let (($x99 (=> $x48 $x98)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x98 (bvsge ?x97 (_ bv1 32))))
 (let (($x99 (= $x98 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x17)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x68 $x31)))
 (let (($x18 (and $x62 $x33)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x22 $x18)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x6)))))))
 (let (($x49 (and $x67 $x11)))
 (let (($x71 (= $x49 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x89)))
 (let (($x41 (= ?x27 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x8 (= $x41 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x69 (= $x64 true)))
 (let (($x26 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x26 true)))
 (let (($x20 (= ?x27 input.dst.llvm-%n)))
 (let (($x21 (= $x20 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (= $x5 true)))
 (let (($x66 (and $x90 $x21)))
 (let (($x32 (and $x66 $x10)))
 (let (($x55 (and $x32 $x69)))
 (let (($x54 (and $x55 $x8)))
 (let (($x72 (and $x54 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x37 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and (not $x37) $x88)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x94 (and $x35 $x93)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x95 (and $x34 $x94)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x48 (and $x70 $x95)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x96 (and $x42 $x48)))
 (let (($x100 (=> $x96 $x99)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let (($x98 (bvsge ?x97 (_ bv1 32))))
 (let (($x99 (= $x98 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x86 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x81 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x44 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x17)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x68 $x31)))
 (let (($x18 (and $x62 $x33)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x22 $x18)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x6)))))))
 (let (($x49 (and $x67 $x11)))
 (let (($x71 (= $x49 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x89)))
 (let (($x41 (= ?x27 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x8 (= $x41 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x69 (= $x64 true)))
 (let (($x26 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x26 true)))
 (let (($x20 (= ?x27 input.dst.llvm-%n)))
 (let (($x21 (= $x20 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (= $x5 true)))
 (let (($x66 (and $x90 $x21)))
 (let (($x32 (and $x66 $x10)))
 (let (($x55 (and $x32 $x69)))
 (let (($x54 (and $x55 $x8)))
 (let (($x72 (and $x54 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x83 (and $x77 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x37 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x93 (and (not $x37) $x88)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x94 (and $x35 $x93)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x95 (and $x34 $x94)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x48 (and $x70 $x95)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x96 (and $x42 $x48)))
 (let (($x100 (=> $x96 $x99)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-i-0.L3%12%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b01111111111111111111111111111111)
(= input.spec-%var-n-1 #b01111111111111111111111111111111)
(= input.dst.llvm-%n #b01111111111111111111111111111111)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x94 (bvsge ?x93 (_ bv0 32))))
 (let (($x95 (= $x94 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x80 (= ?x79 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x40)))
 (let (($x75 (= ?x73 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x75 true)))
 (let (($x51 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x44 (= $x51 true)))
 (let (($x71 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x72 (= $x71 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x29)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x67 $x68)))
 (let (($x62 (and $x46 $x31)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x8 $x62)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x53)))))))
 (let (($x33 (and $x65 $x17)))
 (let (($x18 (= $x33 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x90)))
 (let (($x10 (= ?x23 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x32 (= $x10 true)))
 (let (($x21 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x66 (= $x21 true)))
 (let (($x89 (= ?x23 input.dst.llvm-%n)))
 (let (($x27 (= $x89 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x25 true)))
 (let (($x20 (and $x91 $x27)))
 (let (($x26 (and $x20 $x66)))
 (let (($x64 (and $x26 $x32)))
 (let (($x11 (and $x64 $x18)))
 (let (($x56 (and $x11 $x72)))
 (let (($x43 (and $x56 $x44)))
 (let (($x77 (and $x43 $x76)))
 (let (($x82 (and $x77 $x81)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x84 (and (not $x12) $x82)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x85 (and $x28 $x84)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x86 (and $x15 $x85)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x87 (and $x59 $x86)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x61 $x87)))
 (let (($x48 (=> $x88 $x95)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x94 (bvsge ?x93 (_ bv0 32))))
 (let (($x95 (= $x94 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x80 (= ?x79 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x80 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x40)))
 (let (($x75 (= ?x73 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x75 true)))
 (let (($x51 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x44 (= $x51 true)))
 (let (($x71 (bvsge input.spec-%var-r-0.L3%12%bbentry (_ bv0 32))))
 (let (($x72 (= $x71 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x29)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x67 $x68)))
 (let (($x62 (and $x46 $x31)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x8 $x62)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x53)))))))
 (let (($x33 (and $x65 $x17)))
 (let (($x18 (= $x33 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x90)))
 (let (($x10 (= ?x23 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x32 (= $x10 true)))
 (let (($x21 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x66 (= $x21 true)))
 (let (($x89 (= ?x23 input.dst.llvm-%n)))
 (let (($x27 (= $x89 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x25 true)))
 (let (($x20 (and $x91 $x27)))
 (let (($x26 (and $x20 $x66)))
 (let (($x64 (and $x26 $x32)))
 (let (($x11 (and $x64 $x18)))
 (let (($x56 (and $x11 $x72)))
 (let (($x43 (and $x56 $x44)))
 (let (($x77 (and $x43 $x76)))
 (let (($x82 (and $x77 $x81)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x84 (and (not $x12) $x82)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x85 (and $x28 $x84)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x86 (and $x15 $x85)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x87 (and $x59 $x86)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x61 $x87)))
 (let (($x48 (=> $x88 $x95)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L3%12%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870915 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv645898238 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (bvuge ?x87 (_ bv1 32))))
 (let (($x93 (= $x88 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x77 (= ?x76 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x77 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x17)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x68 $x31)))
 (let (($x18 (and $x62 $x33)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x14 $x18)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x7)))))))
 (let (($x49 (and $x22 $x11)))
 (let (($x71 (= $x49 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x83)))
 (let (($x32 (= ?x37 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (= $x32 true)))
 (let (($x66 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x26 (= $x66 true)))
 (let ((?x90 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x90)))
 (let (($x27 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x27 true)))
 (let (($x25 (= ?x37 input.dst.llvm-%n)))
 (let (($x91 (= $x25 true)))
 (let (($x21 (and $x91 $x20)))
 (let (($x10 (and $x21 $x26)))
 (let (($x54 (and $x10 $x64)))
 (let (($x72 (and $x54 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x79 (and $x74 $x78)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (and (not $x35) $x79)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x9 $x81)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x84 (and $x13 $x82)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x42 $x84)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x86 (and $x39 $x85)))
 (let (($x94 (=> $x86 $x93)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (bvuge ?x87 (_ bv1 32))))
 (let (($x93 (= $x88 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x77 (= ?x76 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x77 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x73 (= $x40 true)))
 (let (($x51 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x17)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x68 $x31)))
 (let (($x18 (and $x62 $x33)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x14 $x18)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x7)))))))
 (let (($x49 (and $x22 $x11)))
 (let (($x71 (= $x49 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x83)))
 (let (($x32 (= ?x37 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x64 (= $x32 true)))
 (let (($x66 (bvuge input.spec-%var-i-0.L3%12%bbentry (_ bv1 32))))
 (let (($x26 (= $x66 true)))
 (let ((?x90 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x90)))
 (let (($x27 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x27 true)))
 (let (($x25 (= ?x37 input.dst.llvm-%n)))
 (let (($x91 (= $x25 true)))
 (let (($x21 (and $x91 $x20)))
 (let (($x10 (and $x21 $x26)))
 (let (($x54 (and $x10 $x64)))
 (let (($x72 (and $x54 $x71)))
 (let (($x43 (and $x72 $x44)))
 (let (($x74 (and $x43 $x73)))
 (let (($x79 (and $x74 $x78)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (and (not $x35) $x79)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x9 $x81)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x84 (and $x13 $x82)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x42 $x84)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x86 (and $x39 $x85)))
 (let (($x94 (=> $x86 $x93)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b11111111111111111111111111111111)
(= input.spec-%var-i-0.L3%12%bbentry #b11111111111111111111111111111111)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x84 (bvmul ?x82 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x87 (= ?x85 ?x86)))
 (let (($x88 (= $x87 true)))
 (let ((?x44 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x44)))
 (let (($x40 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x40 true)))
 (let ((?x11 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x11)))
 (let (($x72 (= ?x49 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x72 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (= $x62 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x67)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x30 $x41)))
 (let (($x36 (and $x8 $x22)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x20 $x36)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x54)))))))
 (let (($x68 (and $x57 $x14)))
 (let (($x46 (= $x68 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x12)))
 (let (($x91 (= ?x83 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x5 (= $x91 true)))
 (let (($x92 (= ?x83 input.dst.llvm-%n)))
 (let (($x25 (= $x92 true)))
 (let (($x90 (and $x25 $x5)))
 (let (($x29 (and $x90 $x46)))
 (let (($x33 (and $x29 $x17)))
 (let (($x51 (and $x33 $x56)))
 (let (($x74 (and $x51 $x73)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x76 (and (not $x35) $x74)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x77 (and $x9 $x76)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x78 (and $x13 $x77)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x79 (and $x42 $x78)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x81 (and $x39 $x79)))
 (let (($x93 (=> $x81 $x88)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%12%bbentry)))
 (let ((?x84 (bvmul ?x82 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x84)))
 (let (($x87 (= ?x85 ?x86)))
 (let (($x88 (= $x87 true)))
 (let ((?x44 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x44)))
 (let (($x40 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x40 true)))
 (let ((?x11 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x11)))
 (let (($x72 (= ?x49 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x72 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (= $x62 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x67)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x30 $x41)))
 (let (($x36 (and $x8 $x22)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x20 $x36)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x54)))))))
 (let (($x68 (and $x57 $x14)))
 (let (($x46 (= $x68 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x12)))
 (let (($x91 (= ?x83 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x5 (= $x91 true)))
 (let (($x92 (= ?x83 input.dst.llvm-%n)))
 (let (($x25 (= $x92 true)))
 (let (($x90 (and $x25 $x5)))
 (let (($x29 (and $x90 $x46)))
 (let (($x33 (and $x29 $x17)))
 (let (($x51 (and $x33 $x56)))
 (let (($x74 (and $x51 $x73)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x76 (and (not $x35) $x74)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x77 (and $x9 $x76)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x78 (and $x13 $x77)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x79 (and $x42 $x78)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x81 (and $x39 $x79)))
 (let (($x93 (=> $x81 $x88)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x86 (bvmul ?x85 (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x86)))
 (let (($x93 (= ?x87 ?x88)))
 (let (($x94 (= $x93 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x43)))
 (let (($x73 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x73 true)))
 (let ((?x49 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x49)))
 (let (($x56 (= ?x71 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x56 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (= $x17 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x22)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x7 $x8)))
 (let (($x14 (and $x67 $x36)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x6 $x14)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x38)))))))
 (let (($x46 (and $x30 $x68)))
 (let (($x29 (= $x46 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x80)))
 (let (($x25 (= ?x12 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x91 (= $x25 true)))
 (let (($x37 (= ?x12 input.dst.llvm-%n)))
 (let (($x92 (= $x37 true)))
 (let (($x5 (and $x92 $x91)))
 (let (($x31 (and $x5 $x29)))
 (let (($x18 (and $x31 $x33)))
 (let (($x44 (and $x18 $x51)))
 (let (($x76 (and $x44 $x74)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x78 (and (not $x35) $x76)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x79 (and $x9 $x78)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x81 (and $x13 $x79)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x82 (and $x42 $x81)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x84 (and $x39 $x82)))
 (let (($x23 (=> $x84 $x94)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd input.spec-%var-i-0.L3%12%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let ((?x86 (bvmul ?x85 (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x86)))
 (let (($x93 (= ?x87 ?x88)))
 (let (($x94 (= $x93 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x43)))
 (let (($x73 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x73 true)))
 (let ((?x49 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x49)))
 (let (($x56 (= ?x71 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x56 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (= $x17 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x22)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x7 $x8)))
 (let (($x14 (and $x67 $x36)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x6 $x14)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x38)))))))
 (let (($x46 (and $x30 $x68)))
 (let (($x29 (= $x46 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x80)))
 (let (($x25 (= ?x12 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x91 (= $x25 true)))
 (let (($x37 (= ?x12 input.dst.llvm-%n)))
 (let (($x92 (= $x37 true)))
 (let (($x5 (and $x92 $x91)))
 (let (($x31 (and $x5 $x29)))
 (let (($x18 (and $x31 $x33)))
 (let (($x44 (and $x18 $x51)))
 (let (($x76 (and $x44 $x74)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x78 (and (not $x35) $x76)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x79 (and $x9 $x78)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x81 (and $x13 $x79)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x82 (and $x42 $x81)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x84 (and $x39 $x82)))
 (let (($x23 (=> $x84 $x94)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x82)))
 (let (($x79 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (not $x79)))
 (let (($x85 (or $x81 $x84)))
 (let (($x86 (= $x85 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x46)))
 (let (($x44 (= ?x29 input.dst.llvm-%n)))
 (let (($x43 (= $x44 true)))
 (let ((?x18 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x18)))
 (let (($x71 (= ?x11 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x71 true)))
 (let (($x31 (= ?x29 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x62 (= $x31 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x41)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x30 $x7)))
 (let (($x67 (and $x65 $x8)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x91 $x67)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x19)))))))
 (let (($x36 (and $x27 $x22)))
 (let (($x14 (= $x36 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x77)))
 (let (($x12 (= ?x75 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x12 true)))
 (let (($x68 (and $x83 $x14)))
 (let (($x17 (and $x68 $x62)))
 (let (($x56 (and $x17 $x72)))
 (let (($x40 (and $x56 $x43)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x73 (and $x9 $x40)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x74 (and $x13 $x73)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x76 (and $x42 $x74)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x78 (and $x39 $x76)))
 (let (($x87 (=> $x78 $x86)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x82)))
 (let (($x79 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (not $x79)))
 (let (($x85 (or $x81 $x84)))
 (let (($x86 (= $x85 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x46)))
 (let (($x44 (= ?x29 input.dst.llvm-%n)))
 (let (($x43 (= $x44 true)))
 (let ((?x18 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x18)))
 (let (($x71 (= ?x11 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x71 true)))
 (let (($x31 (= ?x29 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x62 (= $x31 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x41)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x30 $x7)))
 (let (($x67 (and $x65 $x8)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x91 $x67)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x19)))))))
 (let (($x36 (and $x27 $x22)))
 (let (($x14 (= $x36 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x77)))
 (let (($x12 (= ?x75 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x12 true)))
 (let (($x68 (and $x83 $x14)))
 (let (($x17 (and $x68 $x62)))
 (let (($x56 (and $x17 $x72)))
 (let (($x40 (and $x56 $x43)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x73 (and $x9 $x40)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x74 (and $x13 $x73)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x76 (and $x42 $x74)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x78 (and $x39 $x76)))
 (let (($x87 (=> $x78 $x86)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x82)))
 (let (($x85 (= $x84 false)))
 (let (($x86 (= $x85 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x5)))
 (let (($x40 (= ?x26 input.dst.llvm-%n)))
 (let (($x73 (= $x40 true)))
 (let ((?x49 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x49)))
 (let (($x56 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x56 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x46)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x67 $x14)))
 (let (($x31 (and $x68 $x29)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x10 $x31)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x30)))))))
 (let (($x17 (and $x8 $x62)))
 (let (($x33 (= $x17 true)))
 (let (($x57 (= ?x26 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x32 (= $x57 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x77)))
 (let (($x12 (= ?x75 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x12 true)))
 (let (($x64 (and $x83 $x32)))
 (let (($x18 (and $x64 $x33)))
 (let (($x44 (and $x18 $x51)))
 (let (($x74 (and $x44 $x73)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x76 (and $x9 $x74)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x78 (and $x13 $x76)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x79 (and $x42 $x78)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x81 (and $x39 $x79)))
 (let (($x87 (=> $x81 $x86)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x82)))
 (let (($x85 (= $x84 false)))
 (let (($x86 (= $x85 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x5)))
 (let (($x40 (= ?x26 input.dst.llvm-%n)))
 (let (($x73 (= $x40 true)))
 (let ((?x49 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x49)))
 (let (($x56 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x56 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x46)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x67 $x14)))
 (let (($x31 (and $x68 $x29)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x10 $x31)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x30)))))))
 (let (($x17 (and $x8 $x62)))
 (let (($x33 (= $x17 true)))
 (let (($x57 (= ?x26 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x32 (= $x57 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x77)))
 (let (($x12 (= ?x75 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x12 true)))
 (let (($x64 (and $x83 $x32)))
 (let (($x18 (and $x64 $x33)))
 (let (($x44 (and $x18 $x51)))
 (let (($x74 (and $x44 $x73)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x76 (and $x9 $x74)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x78 (and $x13 $x76)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x79 (and $x42 $x78)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x81 (and $x39 $x79)))
 (let (($x87 (=> $x81 $x86)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L3%12%bbentry #b01000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-10.L3%12%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-9.L3%12%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-1.L3%12%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x86 (or $x84 $x85)))
 (let (($x87 (= $x86 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x62)))
 (let (($x73 (= ?x17 input.dst.llvm-%n)))
 (let (($x74 (= $x73 true)))
 (let ((?x71 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x71)))
 (let (($x51 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x51 true)))
 (let (($x33 (= ?x17 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x18 (= $x33 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x22)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x65 $x10)))
 (let (($x14 (and $x67 $x36)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x57 $x14)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x25)))))))
 (let (($x46 (and $x7 $x68)))
 (let (($x29 (= $x46 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x80 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x80 true)))
 (let (($x31 (and $x12 $x29)))
 (let (($x11 (and $x31 $x18)))
 (let (($x43 (and $x11 $x44)))
 (let (($x76 (and $x43 $x74)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x78 (and $x34 $x76)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x79 (and $x70 $x78)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x81 (and $x61 $x79)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x82 (and $x54 $x81)))
 (let (($x88 (=> $x82 $x87)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x86 (or $x84 $x85)))
 (let (($x87 (= $x86 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x62)))
 (let (($x73 (= ?x17 input.dst.llvm-%n)))
 (let (($x74 (= $x73 true)))
 (let ((?x71 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x71)))
 (let (($x51 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x51 true)))
 (let (($x33 (= ?x17 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x18 (= $x33 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x22)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x65 $x10)))
 (let (($x14 (and $x67 $x36)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x57 $x14)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x25)))))))
 (let (($x46 (and $x7 $x68)))
 (let (($x29 (= $x46 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x80 (= ?x77 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x80 true)))
 (let (($x31 (and $x12 $x29)))
 (let (($x11 (and $x31 $x18)))
 (let (($x43 (and $x11 $x44)))
 (let (($x76 (and $x43 $x74)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x78 (and $x34 $x76)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x79 (and $x70 $x78)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x81 (and $x61 $x79)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x82 (and $x54 $x81)))
 (let (($x88 (=> $x82 $x87)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x92 (= $x37 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x82 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x82 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x56)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x18 $x71)))
 (let (($x44 (and $x72 $x51)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x8 $x44)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x68)))))))
 (let (($x40 (and $x33 $x43)))
 (let (($x73 (= $x40 true)))
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x32)))
 (let (($x30 (= ?x64 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x66 (= $x30 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x53)))
 (let (($x25 (= ?x24 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x25 true)))
 (let (($x6 (= ?x64 input.dst.llvm-%n)))
 (let (($x38 (= $x6 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (not $x77)))
 (let (($x80 (= $x75 true)))
 (let (($x41 (and $x80 $x38)))
 (let (($x27 (and $x41 $x91)))
 (let (($x7 (and $x27 $x66)))
 (let (($x74 (and $x7 $x73)))
 (let (($x85 (and $x74 $x84)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x86 (and $x9 $x85)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x87 (and $x15 $x86)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x88 (and $x59 $x87)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x20 (and $x45 $x88)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x5 (and $x83 $x20)))
 (let (($x93 (=> $x5 $x92)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.spec-%var-r-0.L3%12%bbentry)))
 (let (($x92 (= $x37 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x78)))
 (let (($x82 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x82 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x56)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x18 $x71)))
 (let (($x44 (and $x72 $x51)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x8 $x44)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x68)))))))
 (let (($x40 (and $x33 $x43)))
 (let (($x73 (= $x40 true)))
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x32)))
 (let (($x30 (= ?x64 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x66 (= $x30 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x53)))
 (let (($x25 (= ?x24 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x25 true)))
 (let (($x6 (= ?x64 input.dst.llvm-%n)))
 (let (($x38 (= $x6 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (not $x77)))
 (let (($x80 (= $x75 true)))
 (let (($x41 (and $x80 $x38)))
 (let (($x27 (and $x41 $x91)))
 (let (($x7 (and $x27 $x66)))
 (let (($x74 (and $x7 $x73)))
 (let (($x85 (and $x74 $x84)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L3%12%bbentry input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x86 (and $x9 $x85)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x87 (and $x15 $x86)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x88 (and $x59 $x87)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x20 (and $x45 $x88)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x5 (and $x83 $x20)))
 (let (($x93 (=> $x5 $x92)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (not $x87)))
 (let (($x20 (or $x87 $x88)))
 (let (($x5 (= $x20 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x12)))
 (let (($x78 (= ?x32 input.dst.llvm-%n)))
 (let (($x79 (= $x78 true)))
 (let ((?x51 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x51)))
 (let (($x40 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x40 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x65)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x46 $x62)))
 (let (($x18 (and $x33 $x8)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x25 $x18)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x10)))))))
 (let (($x49 (and $x68 $x11)))
 (let (($x71 (= $x49 true)))
 (let (($x64 (= ?x32 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x6 (= $x64 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x28)))
 (let (($x75 (= ?x35 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x75 true)))
 (let (($x38 (and $x80 $x6)))
 (let (($x72 (and $x38 $x71)))
 (let (($x74 (and $x72 $x73)))
 (let (($x81 (and $x74 $x79)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x15 $x81)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x84 (and $x42 $x82)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x39 $x84)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x86 (and $x54 $x85)))
 (let (($x37 (=> $x86 $x5)))
 (not $x37)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (not $x87)))
 (let (($x20 (or $x87 $x88)))
 (let (($x5 (= $x20 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x12)))
 (let (($x78 (= ?x32 input.dst.llvm-%n)))
 (let (($x79 (= $x78 true)))
 (let ((?x51 (bvmul input.spec-%var-i-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x51)))
 (let (($x40 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x40 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x65)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x46 $x62)))
 (let (($x18 (and $x33 $x8)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x25 $x18)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x10)))))))
 (let (($x49 (and $x68 $x11)))
 (let (($x71 (= $x49 true)))
 (let (($x64 (= ?x32 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x6 (= $x64 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%12%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x28)))
 (let (($x75 (= ?x35 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x75 true)))
 (let (($x38 (and $x80 $x6)))
 (let (($x72 (and $x38 $x71)))
 (let (($x74 (and $x72 $x73)))
 (let (($x81 (and $x74 $x79)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x82 (and $x15 $x81)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x84 (and $x42 $x82)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x85 (and $x39 $x84)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x86 (and $x54 $x85)))
 (let (($x37 (=> $x86 $x5)))
 (not $x37)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x68)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x36)))
 (let (($x25 (and $x14 $x24)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x66 $x25)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x86 (and $x7 $x46)))
 (let (($x87 (= $x86 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x56 (concat ?x49 (concat ?x65 ?x62)))))
 (let (($x76 (= ?x51 input.dst.llvm-%n)))
 (let (($x78 (= $x76 true)))
 (let (($x44 (= input.dst.llvm-%n ?x51)))
 (let (($x73 (and (and (and $x7 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x46) $x44)))
 (let (($x74 (= $x73 true)))
 (let (($x79 (and $x74 $x78)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (and $x15 $x79)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x82 (and $x42 $x81)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x84 (and $x39 $x82)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x85 (and $x54 $x84)))
 (let (($x88 (=> $x85 $x87)))
 (not $x88))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x68)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x36)))
 (let (($x25 (and $x14 $x24)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x66 $x25)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x86 (and $x7 $x46)))
 (let (($x87 (= $x86 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x56 (concat ?x49 (concat ?x65 ?x62)))))
 (let (($x76 (= ?x51 input.dst.llvm-%n)))
 (let (($x78 (= $x76 true)))
 (let (($x44 (= input.dst.llvm-%n ?x51)))
 (let (($x73 (and (and (and $x7 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x46) $x44)))
 (let (($x74 (= $x73 true)))
 (let (($x79 (and $x74 $x78)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x81 (and $x15 $x79)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x82 (and $x42 $x81)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x84 (and $x39 $x82)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x85 (and $x54 $x84)))
 (let (($x88 (=> $x85 $x87)))
 (not $x88))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x34)))
 (let (($x31 (= ?x9 input.dst.llvm-%n)))
 (let (($x5 (= $x31 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x51 (concat ?x62 (concat ?x11 ?x56)))))
 (let (($x81 (= ?x44 input.dst.llvm-%n)))
 (let (($x82 (= $x81 true)))
 (let (($x73 (= input.dst.llvm-%n ?x44)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x24)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x17 $x14)))
 (let (($x46 (and $x68 $x25)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x10 $x46)))
 (let (($x80 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x27)))))))
 (let (($x78 (and (and (and $x19 $x80) $x40) $x73)))
 (let (($x79 (= $x78 true)))
 (let (($x84 (and $x79 $x82)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x85 (and $x15 $x84)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x86 (and $x42 $x85)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x87 (and $x39 $x86)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x54 $x87)))
 (let (($x37 (=> $x88 $x5)))
 (not $x37)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x34)))
 (let (($x31 (= ?x9 input.dst.llvm-%n)))
 (let (($x5 (= $x31 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x51 (concat ?x62 (concat ?x11 ?x56)))))
 (let (($x81 (= ?x44 input.dst.llvm-%n)))
 (let (($x82 (= $x81 true)))
 (let (($x73 (= input.dst.llvm-%n ?x44)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x24)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x17 $x14)))
 (let (($x46 (and $x68 $x25)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x10 $x46)))
 (let (($x80 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x27)))))))
 (let (($x78 (and (and (and $x19 $x80) $x40) $x73)))
 (let (($x79 (= $x78 true)))
 (let (($x84 (and $x79 $x82)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x85 (and $x15 $x84)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x86 (and $x42 $x85)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x87 (and $x39 $x86)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x88 (and $x54 $x87)))
 (let (($x37 (=> $x88 $x5)))
 (not $x37)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x5)))
 (let (($x92 (= ?x37 input.spec-%var-n-1)))
 (let (($x77 (= $x92 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x80 (concat ?x28 (concat ?x6 ?x38)))))
 (let (($x81 (= input.dst.llvm-%n ?x74)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x44)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x11 $x49)))
 (let (($x78 (and $x8 $x73)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x14 $x78)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x29)))))))
 (let (($x85 (and (and (and $x18 $x36) $x79) $x81)))
 (let (($x86 (= $x85 true)))
 (let (($x10 (= ?x74 input.dst.llvm-%n)))
 (let (($x17 (= $x10 true)))
 (let (($x87 (and $x17 $x86)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (and $x15 $x87)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x20 (and $x42 $x88)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x34 (and $x39 $x20)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x9 (and $x54 $x34)))
 (let (($x75 (=> $x9 $x77)))
 (not $x75)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%12%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%12%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x5)))
 (let (($x92 (= ?x37 input.spec-%var-n-1)))
 (let (($x77 (= $x92 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x80 (concat ?x28 (concat ?x6 ?x38)))))
 (let (($x81 (= input.dst.llvm-%n ?x74)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x44)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x11 $x49)))
 (let (($x78 (and $x8 $x73)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x14 $x78)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x29)))))))
 (let (($x85 (and (and (and $x18 $x36) $x79) $x81)))
 (let (($x86 (= $x85 true)))
 (let (($x10 (= ?x74 input.dst.llvm-%n)))
 (let (($x17 (= $x10 true)))
 (let (($x87 (and $x17 $x86)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%12%bbentry)))
 (let (($x88 (and $x15 $x87)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-10.L3%12%bbentry)))
 (let (($x20 (and $x42 $x88)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-9.L3%12%bbentry)))
 (let (($x34 (and $x39 $x20)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%12%bbentry)))
 (let (($x9 (and $x54 $x34)))
 (let (($x75 (=> $x9 $x77)))
 (not $x75)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791733/query
