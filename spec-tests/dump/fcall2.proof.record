==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x30 (not $x23)))
 (let (($x109 (= $x30 false)))
 (let (($x110 (= $x109 true)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x93)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x96)))
 (let (($x99 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x87 $x99)))
 (let ((?x83 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x83 (_ bv1 32))))
 (let (($x89 (= $x87 $x88)))
 (let (($x45 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x86 (=> $x82 $x45)))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (let (($x85 (= $x82 $x84)))
 (let (($x103 (and (and (and $x85 $x86) $x89) $x100)))
 (let (($x104 (= $x103 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%opt)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x59 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x59 (or false (or false (and true (or $x53 $x54)))))))
 (let (($x29 (=> (and $x30 $x59) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x11 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x11)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x19 $x6)))
 (let (($x37 (and $x16 $x5)))
 (let (($x14 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x14 $x37)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x48)))))))
 (let (($x44 (and $x28 $x33)))
 (let (($x32 (= $x44 true)))
 (let (($x42 (= $x32 true)))
 (let (($x43 (= $x42 true)))
 (let (($x63 (and $x43 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x105 (and $x80 $x104)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x106 (and $x18 $x105)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x107 (and $x7 $x106)))
 (let (($x108 (and $x45 $x107)))
 (let (($x111 (=> $x108 $x110)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x30 (not $x23)))
 (let (($x109 (= $x30 false)))
 (let (($x110 (= $x109 true)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x93)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x96)))
 (let (($x99 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x87 $x99)))
 (let ((?x83 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x83 (_ bv1 32))))
 (let (($x89 (= $x87 $x88)))
 (let (($x45 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x86 (=> $x82 $x45)))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (let (($x85 (= $x82 $x84)))
 (let (($x103 (and (and (and $x85 $x86) $x89) $x100)))
 (let (($x104 (= $x103 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%opt)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x59 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x59 (or false (or false (and true (or $x53 $x54)))))))
 (let (($x29 (=> (and $x30 $x59) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x11 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x11)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x19 $x6)))
 (let (($x37 (and $x16 $x5)))
 (let (($x14 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x14 $x37)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x48)))))))
 (let (($x44 (and $x28 $x33)))
 (let (($x32 (= $x44 true)))
 (let (($x42 (= $x32 true)))
 (let (($x43 (= $x42 true)))
 (let (($x63 (and $x43 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x105 (and $x80 $x104)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x106 (and $x18 $x105)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x107 (and $x7 $x106)))
 (let (($x108 (and $x45 $x107)))
 (let (($x111 (=> $x108 $x110)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfd)
                     #x42f70005
                     #xff)
              #x42f70007
              #x32)
       #x42f70006
       #xde))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x32defffd)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42f70007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2158588 32) (_ bv253 8)) (_ bv2158589 32) (_ bv255 8)) (_ bv2158590 32) (_ bv255 8)) (_ bv2158591 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2158591 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (or $x98 $x18)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x111)))
 (let (($x24 (=> $x98 $x112)))
 (let ((?x92 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x92 (_ bv1 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x39 (= false false)))
 (let (($x91 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x96 (=> $x91 $x39)))
 (let (($x90 (= ?x92 (_ bv0 32))))
 (let (($x93 (= $x91 $x90)))
 (let (($x113 (and (and (and $x93 $x96) $x100) $x24)))
 (let (($x114 (= $x113 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x45 (concat ?x82 ?x80)))))
 (let (($x89 (= ?x88 input.dst.llvm-%opt)))
 (let (($x102 (= $x89 true)))
 (let (($x97 (= $x102 true)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= $x75 true)))
 (let (($x71 (= $x70 true)))
 (let (($x67 (= true $x74)))
 (let (($x34 (not $x18)))
 (let (($x68 (=> $x34 $x67)))
 (let (($x66 (= $x68 true)))
 (let (($x69 (= $x66 true)))
 (let (($x73 (= $x69 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x58 (and $x55 $x57)))
 (let (($x33 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x58)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x27)))))))
 (let (($x29 (and $x59 $x60)))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (and $x62 $x71)))
 (let (($x76 (and $x72 $x73)))
 (let (($x77 (and $x76 $x71)))
 (let (($x94 (and $x77 $x97)))
 (let (($x115 (and $x94 $x114)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x11 $x115)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x117 (and $x6 $x116)))
 (let (($x118 (and $x39 $x117)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x14 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x19 (=> $x14 (or false (or false (and true (or $x22 $x25)))))))
 (let (($x13 (=> (and $x34 $x14) (or false (or false (and true (or $x22 $x25)))))))
 (let (($x119 (and $x13 $x118)))
 (let (($x123 (=> $x119 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (or $x98 $x18)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x111)))
 (let (($x24 (=> $x98 $x112)))
 (let ((?x92 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x92 (_ bv1 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x39 (= false false)))
 (let (($x91 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x96 (=> $x91 $x39)))
 (let (($x90 (= ?x92 (_ bv0 32))))
 (let (($x93 (= $x91 $x90)))
 (let (($x113 (and (and (and $x93 $x96) $x100) $x24)))
 (let (($x114 (= $x113 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x45 (concat ?x82 ?x80)))))
 (let (($x89 (= ?x88 input.dst.llvm-%opt)))
 (let (($x102 (= $x89 true)))
 (let (($x97 (= $x102 true)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= $x75 true)))
 (let (($x71 (= $x70 true)))
 (let (($x67 (= true $x74)))
 (let (($x34 (not $x18)))
 (let (($x68 (=> $x34 $x67)))
 (let (($x66 (= $x68 true)))
 (let (($x69 (= $x66 true)))
 (let (($x73 (= $x69 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x58 (and $x55 $x57)))
 (let (($x33 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x58)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x27)))))))
 (let (($x29 (and $x59 $x60)))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (and $x62 $x71)))
 (let (($x76 (and $x72 $x73)))
 (let (($x77 (and $x76 $x71)))
 (let (($x94 (and $x77 $x97)))
 (let (($x115 (and $x94 $x114)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x11 $x115)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x117 (and $x6 $x116)))
 (let (($x118 (and $x39 $x117)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x14 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x19 (=> $x14 (or false (or false (and true (or $x22 $x25)))))))
 (let (($x13 (=> (and $x34 $x14) (or false (or false (and true (or $x22 $x25)))))))
 (let (($x119 (and $x13 $x118)))
 (let (($x123 (=> $x119 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x71 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x54 $x75)))
 (let (($x67 (and $x70 $x72)))
 (let (($x50 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x50 $x67)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x48)))))))
 (let (($x120 (and $x35 $x68)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x110)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x104)))
 (let (($x106 (= input.spec-%var-opt-0.2 ?x103)))
 (let (($x28 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x109 (=> $x28 $x106)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x90 (_ bv1 32))))
 (let (($x98 (= $x28 $x31)))
 (let (($x7 (= false false)))
 (let (($x92 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x96 (=> $x92 $x7)))
 (let (($x93 (= ?x90 (_ bv0 32))))
 (let (($x39 (= $x92 $x93)))
 (let (($x24 (and (and (and $x39 $x96) $x98) $x109)))
 (let (($x113 (= $x24 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x81 (concat ?x84 (concat ?x77 ?x73)))))
 (let (($x80 (= input.dst.llvm-%opt ?x82)))
 (let (($x38 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x83 (and $x38 $x80)))
 (let (($x89 (and (and (and $x35 true) $x68) $x83)))
 (let (($x44 (= true $x38)))
 (let (($x21 (not $x34)))
 (let (($x11 (=> $x21 $x44)))
 (let (($x102 (and $x11 $x89)))
 (let (($x97 (= $x102 true)))
 (let (($x94 (= $x97 true)))
 (let (($x95 (= $x94 true)))
 (let (($x12 (= $x21 true)))
 (let (($x17 (= $x12 true)))
 (let (($x58 (= $x17 true)))
 (let (($x91 (and $x58 $x95)))
 (let (($x114 (and $x91 $x113)))
 (let (($x115 (and $x28 $x114)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x13 $x115)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x117 (and $x40 $x116)))
 (let (($x118 (and $x7 $x117)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x23 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x23 (or false (or false (and true (or $x51 $x49)))))))
 (let (($x46 (=> (and $x21 $x23) (or false (or false (and true (or $x51 $x49)))))))
 (let (($x119 (and $x46 $x118)))
 (let (($x123 (=> $x119 $x122)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x71 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x54 $x75)))
 (let (($x67 (and $x70 $x72)))
 (let (($x50 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x50 $x67)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x48)))))))
 (let (($x120 (and $x35 $x68)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x110)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x104)))
 (let (($x106 (= input.spec-%var-opt-0.2 ?x103)))
 (let (($x28 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x109 (=> $x28 $x106)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x90 (_ bv1 32))))
 (let (($x98 (= $x28 $x31)))
 (let (($x7 (= false false)))
 (let (($x92 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x96 (=> $x92 $x7)))
 (let (($x93 (= ?x90 (_ bv0 32))))
 (let (($x39 (= $x92 $x93)))
 (let (($x24 (and (and (and $x39 $x96) $x98) $x109)))
 (let (($x113 (= $x24 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x81 (concat ?x84 (concat ?x77 ?x73)))))
 (let (($x80 (= input.dst.llvm-%opt ?x82)))
 (let (($x38 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x83 (and $x38 $x80)))
 (let (($x89 (and (and (and $x35 true) $x68) $x83)))
 (let (($x44 (= true $x38)))
 (let (($x21 (not $x34)))
 (let (($x11 (=> $x21 $x44)))
 (let (($x102 (and $x11 $x89)))
 (let (($x97 (= $x102 true)))
 (let (($x94 (= $x97 true)))
 (let (($x95 (= $x94 true)))
 (let (($x12 (= $x21 true)))
 (let (($x17 (= $x12 true)))
 (let (($x58 (= $x17 true)))
 (let (($x91 (and $x58 $x95)))
 (let (($x114 (and $x91 $x113)))
 (let (($x115 (and $x28 $x114)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x13 $x115)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x117 (and $x40 $x116)))
 (let (($x118 (and $x7 $x117)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x23 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x23 (or false (or false (and true (or $x51 $x49)))))))
 (let (($x46 (=> (and $x21 $x23) (or false (or false (and true (or $x51 $x49)))))))
 (let (($x119 (and $x46 $x118)))
 (let (($x123 (=> $x119 $x122)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x103)))
 (let (($x124 (= (_ bv0 32) ?x109)))
 (let (($x8 (= $x124 true)))
 (let (($x24 (= input.spec-%var-opt-0.2 ?x109)))
 (let (($x15 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x113 (=> $x15 $x24)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x28 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x28 (_ bv1 32))))
 (let (($x107 (= $x15 $x105)))
 (let (($x23 (= false false)))
 (let (($x111 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x111 $x23)))
 (let (($x31 (= ?x28 (_ bv0 32))))
 (let (($x98 (= $x111 $x31)))
 (let (($x116 (and (and (and $x98 $x112) $x107) $x113)))
 (let (($x117 (= $x116 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x102 (concat ?x80 (concat ?x73 ?x76)))))
 (let (($x94 (= input.dst.llvm-%opt ?x97)))
 (let (($x25 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x95 (and $x25 $x94)))
 (let ((?x66 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x66)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x72 $x68)))
 (let (($x81 (and $x88 $x45)))
 (let (($x29 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x29 $x81)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x10)))))))
 (let (($x92 (and (and (and $x71 true) $x101) $x95)))
 (let (($x14 (= true $x25)))
 (let (($x21 (not $x34)))
 (let (($x52 (=> $x21 $x14)))
 (let (($x90 (and $x52 $x92)))
 (let (($x93 (= $x90 true)))
 (let (($x39 (= $x93 true)))
 (let (($x7 (= $x39 true)))
 (let (($x38 (= $x21 true)))
 (let (($x44 (= $x38 true)))
 (let (($x11 (= $x44 true)))
 (let (($x96 (and $x11 $x7)))
 (let (($x118 (and $x96 $x117)))
 (let (($x119 (and $x15 $x118)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x120 (and $x58 $x119)))
 (let (($x12 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x121 (and $x12 $x120)))
 (let (($x122 (and $x23 $x121)))
 (let (($x47 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x40 (=> $x62 (or false (or false (and true (or $x41 $x47)))))))
 (let (($x27 (=> (and $x21 $x62) (or false (or false (and true (or $x41 $x47)))))))
 (let (($x123 (and $x27 $x122)))
 (let (($x9 (=> $x123 $x8)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x103)))
 (let (($x124 (= (_ bv0 32) ?x109)))
 (let (($x8 (= $x124 true)))
 (let (($x24 (= input.spec-%var-opt-0.2 ?x109)))
 (let (($x15 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x113 (=> $x15 $x24)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x28 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x28 (_ bv1 32))))
 (let (($x107 (= $x15 $x105)))
 (let (($x23 (= false false)))
 (let (($x111 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x111 $x23)))
 (let (($x31 (= ?x28 (_ bv0 32))))
 (let (($x98 (= $x111 $x31)))
 (let (($x116 (and (and (and $x98 $x112) $x107) $x113)))
 (let (($x117 (= $x116 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x102 (concat ?x80 (concat ?x73 ?x76)))))
 (let (($x94 (= input.dst.llvm-%opt ?x97)))
 (let (($x25 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x95 (and $x25 $x94)))
 (let ((?x66 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x66)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x72 $x68)))
 (let (($x81 (and $x88 $x45)))
 (let (($x29 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x29 $x81)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x10)))))))
 (let (($x92 (and (and (and $x71 true) $x101) $x95)))
 (let (($x14 (= true $x25)))
 (let (($x21 (not $x34)))
 (let (($x52 (=> $x21 $x14)))
 (let (($x90 (and $x52 $x92)))
 (let (($x93 (= $x90 true)))
 (let (($x39 (= $x93 true)))
 (let (($x7 (= $x39 true)))
 (let (($x38 (= $x21 true)))
 (let (($x44 (= $x38 true)))
 (let (($x11 (= $x44 true)))
 (let (($x96 (and $x11 $x7)))
 (let (($x118 (and $x96 $x117)))
 (let (($x119 (and $x15 $x118)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x120 (and $x58 $x119)))
 (let (($x12 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x121 (and $x12 $x120)))
 (let (($x122 (and $x23 $x121)))
 (let (($x47 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x40 (=> $x62 (or false (or false (and true (or $x41 $x47)))))))
 (let (($x27 (=> (and $x21 $x62) (or false (or false (and true (or $x41 $x47)))))))
 (let (($x123 (and $x27 $x122)))
 (let (($x9 (=> $x123 $x8)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x007f37fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x007f37fe
                     #x39)
              #x007f37fd
              #x04)
       #x00390402
       #x01))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00390400)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x007f37ff)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x007f37fc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1610575760 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147549164 32) (_ bv144 8)) (_ bv2147549165 32) (_ bv111 8)) (_ bv2147549166 32) (_ bv255 8)) (_ bv2147549167 32) (_ bv95 8)) (_ bv1610575760 32) (_ bv1 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147549164 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147549164 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147549167 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let ((?x18 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x18)))
 (let (($x84 (= ?x48 ?x113)))
 (let (($x69 (= $x84 true)))
 (let (($x116 (= input.spec-%var-opt-0.2 ?x113)))
 (let (($x57 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x117 (=> $x57 $x116)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x15 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x15 (_ bv1 32))))
 (let (($x110 (= $x57 $x106)))
 (let (($x21 (= false false)))
 (let (($x114 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x115 (=> $x114 $x21)))
 (let (($x105 (= ?x15 (_ bv0 32))))
 (let (($x107 (= $x114 $x105)))
 (let (($x120 (and (and (and $x107 $x115) $x110) $x117)))
 (let (($x121 (= $x120 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x90 (concat ?x94 (concat ?x76 ?x77)))))
 (let (($x39 (= input.dst.llvm-%opt ?x93)))
 (let (($x70 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x7 (and $x70 $x39)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x87)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x45 $x101)))
 (let (($x102 (and $x61 $x89)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x54 $x102)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x16)))))))
 (let (($x111 (and (and (and $x66 true) $x85) $x7)))
 (let (($x35 (= true $x70)))
 (let (($x51 (not $x22)))
 (let (($x86 (=> $x51 $x35)))
 (let (($x28 (and $x86 $x111)))
 (let (($x31 (= $x28 true)))
 (let (($x98 (= $x31 true)))
 (let (($x23 (= $x98 true)))
 (let (($x25 (= $x51 true)))
 (let (($x14 (= $x25 true)))
 (let (($x52 (= $x14 true)))
 (let (($x112 (and $x52 $x23)))
 (let (($x122 (and $x112 $x121)))
 (let (($x123 (and $x57 $x122)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x124 (and $x11 $x123)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x8 (and $x38 $x124)))
 (let (($x9 (and $x21 $x8)))
 (let (($x37 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x32 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x13 (=> $x32 (or false (or false (and true (or $x55 $x37)))))))
 (let (($x33 (=> (and $x51 $x32) (or false (or false (and true (or $x55 $x37)))))))
 (let (($x53 (and $x33 $x9)))
 (let (($x26 (=> $x53 $x69)))
 (not $x26))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let ((?x18 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x18)))
 (let (($x84 (= ?x48 ?x113)))
 (let (($x69 (= $x84 true)))
 (let (($x116 (= input.spec-%var-opt-0.2 ?x113)))
 (let (($x57 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x117 (=> $x57 $x116)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x15 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x15 (_ bv1 32))))
 (let (($x110 (= $x57 $x106)))
 (let (($x21 (= false false)))
 (let (($x114 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x115 (=> $x114 $x21)))
 (let (($x105 (= ?x15 (_ bv0 32))))
 (let (($x107 (= $x114 $x105)))
 (let (($x120 (and (and (and $x107 $x115) $x110) $x117)))
 (let (($x121 (= $x120 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x90 (concat ?x94 (concat ?x76 ?x77)))))
 (let (($x39 (= input.dst.llvm-%opt ?x93)))
 (let (($x70 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x7 (and $x70 $x39)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x87)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x45 $x101)))
 (let (($x102 (and $x61 $x89)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x54 $x102)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x16)))))))
 (let (($x111 (and (and (and $x66 true) $x85) $x7)))
 (let (($x35 (= true $x70)))
 (let (($x51 (not $x22)))
 (let (($x86 (=> $x51 $x35)))
 (let (($x28 (and $x86 $x111)))
 (let (($x31 (= $x28 true)))
 (let (($x98 (= $x31 true)))
 (let (($x23 (= $x98 true)))
 (let (($x25 (= $x51 true)))
 (let (($x14 (= $x25 true)))
 (let (($x52 (= $x14 true)))
 (let (($x112 (and $x52 $x23)))
 (let (($x122 (and $x112 $x121)))
 (let (($x123 (and $x57 $x122)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x124 (and $x11 $x123)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x8 (and $x38 $x124)))
 (let (($x9 (and $x21 $x8)))
 (let (($x37 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x32 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x13 (=> $x32 (or false (or false (and true (or $x55 $x37)))))))
 (let (($x33 (=> (and $x51 $x32) (or false (or false (and true (or $x55 $x37)))))))
 (let (($x53 (and $x33 $x9)))
 (let (($x26 (=> $x53 $x69)))
 (not $x26))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x60 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x69 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x26 (bvmul (_ bv112 10) ?x69)))
 (let ((?x5 (bvneg ?x26)))
 (let (($x10 (= ?x5 ?x60)))
 (let (($x80 (= $x10 true)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let (($x117 (= input.spec-%var-opt-0.2 ?x116)))
 (let (($x42 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x42 $x117)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x118 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x118 (_ bv1 32))))
 (let (($x24 (= $x42 $x119)))
 (let (($x36 (= false false)))
 (let (($x115 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x110 (=> $x115 $x36)))
 (let (($x57 (= ?x118 (_ bv0 32))))
 (let (($x106 (= $x115 $x57)))
 (let (($x123 (and (and (and $x106 $x110) $x24) $x120)))
 (let (($x124 (= $x123 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x111 (concat ?x93 (concat ?x76 ?x94)))))
 (let (($x31 (= input.dst.llvm-%opt ?x28)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x98 (and $x75 $x31)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x43)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x87 $x102)))
 (let (($x92 (and $x85 $x82)))
 (let (($x29 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x29 $x92)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x96)))))))
 (let (($x56 (and (and (and $x61 true) $x90) $x98)))
 (let (($x88 (= true $x75)))
 (let (($x17 (not $x49)))
 (let (($x71 (=> $x17 $x88)))
 (let (($x114 (and $x71 $x56)))
 (let (($x15 (= $x114 true)))
 (let (($x105 (= $x15 true)))
 (let (($x107 (= $x105 true)))
 (let (($x30 (= $x17 true)))
 (let (($x70 (= $x30 true)))
 (let (($x35 (= $x70 true)))
 (let (($x21 (and $x35 $x107)))
 (let (($x8 (and $x21 $x124)))
 (let (($x9 (and $x42 $x8)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x53 (and $x14 $x9)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x6 (and $x11 $x53)))
 (let (($x18 (and $x36 $x6)))
 (let (($x20 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x12 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x12 (or false (or false (and true (or $x46 $x20)))))))
 (let (($x62 (=> (and $x17 $x12) (or false (or false (and true (or $x46 $x20)))))))
 (let (($x48 (and $x62 $x18)))
 (let (($x79 (=> $x48 $x80)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x60 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x69 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x26 (bvmul (_ bv112 10) ?x69)))
 (let ((?x5 (bvneg ?x26)))
 (let (($x10 (= ?x5 ?x60)))
 (let (($x80 (= $x10 true)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let (($x117 (= input.spec-%var-opt-0.2 ?x116)))
 (let (($x42 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x42 $x117)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x118 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x118 (_ bv1 32))))
 (let (($x24 (= $x42 $x119)))
 (let (($x36 (= false false)))
 (let (($x115 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x110 (=> $x115 $x36)))
 (let (($x57 (= ?x118 (_ bv0 32))))
 (let (($x106 (= $x115 $x57)))
 (let (($x123 (and (and (and $x106 $x110) $x24) $x120)))
 (let (($x124 (= $x123 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x111 (concat ?x93 (concat ?x76 ?x94)))))
 (let (($x31 (= input.dst.llvm-%opt ?x28)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x98 (and $x75 $x31)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x43)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x87 $x102)))
 (let (($x92 (and $x85 $x82)))
 (let (($x29 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x29 $x92)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x96)))))))
 (let (($x56 (and (and (and $x61 true) $x90) $x98)))
 (let (($x88 (= true $x75)))
 (let (($x17 (not $x49)))
 (let (($x71 (=> $x17 $x88)))
 (let (($x114 (and $x71 $x56)))
 (let (($x15 (= $x114 true)))
 (let (($x105 (= $x15 true)))
 (let (($x107 (= $x105 true)))
 (let (($x30 (= $x17 true)))
 (let (($x70 (= $x30 true)))
 (let (($x35 (= $x70 true)))
 (let (($x21 (and $x35 $x107)))
 (let (($x8 (and $x21 $x124)))
 (let (($x9 (and $x42 $x8)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x53 (and $x14 $x9)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x6 (and $x11 $x53)))
 (let (($x18 (and $x36 $x6)))
 (let (($x20 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x12 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x12 (or false (or false (and true (or $x46 $x20)))))))
 (let (($x62 (=> (and $x17 $x12) (or false (or false (and true (or $x46 $x20)))))))
 (let (($x48 (and $x62 $x18)))
 (let (($x79 (=> $x48 $x80)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000100000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000100000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000100000)
(= input.dst.llvm-mem @fun_20)
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_20 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_20 #b10000000000000000000000000000000) #b00100000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0c5e537c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x68)
                                #x0c5e537d
                                #x00)
                         #x0c4a0069
                         #x00)
                  #x0c5e537f
                  #x0c)))
  (store a!1 #x0c5e537e #x4a)))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x68680068)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x68680068)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x68680068)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x0c4a0068)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0c5e537f)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0c5e537c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv2147221500 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv27 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2160857092 32) (_ bv252 8)) (_ bv2160857093 32) (_ bv255 8)) (_ bv2160857094 32) (_ bv251 8)) (_ bv2160857095 32) (_ bv127 8)) (_ bv2147221500 32) (_ bv27 8)))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2160857092 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2160857092 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2160857095 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv27 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv27 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x10 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x80 (= (_ bv0 2) ?x10)))
 (let (($x79 (= $x80 true)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x116)))
 (let (($x123 (= input.spec-%var-opt-0.2 ?x120)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x124 (=> $x74 $x123)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x42 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x113 (bvuge ?x42 (_ bv1 32))))
 (let (($x104 (= $x74 $x113)))
 (let (($x12 (= false false)))
 (let (($x121 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x122 (=> $x121 $x12)))
 (let (($x119 (= ?x42 (_ bv0 32))))
 (let (($x24 (= $x121 $x119)))
 (let (($x53 (and (and (and $x24 $x122) $x104) $x124)))
 (let (($x6 (= $x53 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x114 (concat ?x31 (concat ?x94 ?x73)))))
 (let (($x105 (= input.dst.llvm-%opt ?x15)))
 (let (($x101 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x107 (and $x101 $x105)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x83)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x82 $x90)))
 (let (($x111 (and $x112 $x7)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x54 $x111)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x16)))))))
 (let (($x115 (and (and (and $x43 true) $x78) $x107)))
 (let (($x68 (= true $x101)))
 (let (($x17 (not $x19)))
 (let (($x66 (=> $x17 $x68)))
 (let (($x118 (and $x66 $x115)))
 (let (($x57 (= $x118 true)))
 (let (($x106 (= $x57 true)))
 (let (($x36 (= $x106 true)))
 (let (($x75 (= $x17 true)))
 (let (($x88 (= $x75 true)))
 (let (($x71 (= $x88 true)))
 (let (($x110 (and $x71 $x36)))
 (let (($x18 (and $x110 $x6)))
 (let (($x48 (and $x74 $x18)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x84 (and $x35 $x48)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x69 (and $x30 $x84)))
 (let (($x26 (and $x12 $x69)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x44 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x44 (or false (or false (and true (or $x27 $x13)))))))
 (let (($x59 (=> (and $x17 $x44) (or false (or false (and true (or $x27 $x13)))))))
 (let (($x5 (and $x59 $x26)))
 (let (($x125 (=> $x5 $x79)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x10 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x80 (= (_ bv0 2) ?x10)))
 (let (($x79 (= $x80 true)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x116)))
 (let (($x123 (= input.spec-%var-opt-0.2 ?x120)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x124 (=> $x74 $x123)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x42 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x113 (bvuge ?x42 (_ bv1 32))))
 (let (($x104 (= $x74 $x113)))
 (let (($x12 (= false false)))
 (let (($x121 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x122 (=> $x121 $x12)))
 (let (($x119 (= ?x42 (_ bv0 32))))
 (let (($x24 (= $x121 $x119)))
 (let (($x53 (and (and (and $x24 $x122) $x104) $x124)))
 (let (($x6 (= $x53 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x114 (concat ?x31 (concat ?x94 ?x73)))))
 (let (($x105 (= input.dst.llvm-%opt ?x15)))
 (let (($x101 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x107 (and $x101 $x105)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x83)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x82 $x90)))
 (let (($x111 (and $x112 $x7)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x54 $x111)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x16)))))))
 (let (($x115 (and (and (and $x43 true) $x78) $x107)))
 (let (($x68 (= true $x101)))
 (let (($x17 (not $x19)))
 (let (($x66 (=> $x17 $x68)))
 (let (($x118 (and $x66 $x115)))
 (let (($x57 (= $x118 true)))
 (let (($x106 (= $x57 true)))
 (let (($x36 (= $x106 true)))
 (let (($x75 (= $x17 true)))
 (let (($x88 (= $x75 true)))
 (let (($x71 (= $x88 true)))
 (let (($x110 (and $x71 $x36)))
 (let (($x18 (and $x110 $x6)))
 (let (($x48 (and $x74 $x18)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x84 (and $x35 $x48)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x69 (and $x30 $x84)))
 (let (($x26 (and $x12 $x69)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x44 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x44 (or false (or false (and true (or $x27 $x13)))))))
 (let (($x59 (=> (and $x17 $x44) (or false (or false (and true (or $x27 $x13)))))))
 (let (($x5 (and $x59 $x26)))
 (let (($x125 (=> $x5 $x79)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x19 (not $x64)))
 (let ((?x22 (ite $x19 (_ bv1 1) (_ bv0 1))))
 (let ((?x51 ((_ zero_extend 31) ?x22)))
 (let (($x96 (= (_ bv1 32) ?x51)))
 (let (($x93 (= $x96 true)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x100)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x116)))
 (let (($x124 (= input.spec-%var-opt-0.2 ?x123)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x53 (=> $x72 $x124)))
 (let ((?x8 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x8 (_ bv1 32))))
 (let (($x117 (= $x72 $x9)))
 (let (($x37 (= false false)))
 (let (($x122 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x104 (=> $x122 $x37)))
 (let (($x74 (= ?x8 (_ bv0 32))))
 (let (($x113 (= $x122 $x74)))
 (let (($x48 (and (and (and $x113 $x104) $x117) $x53)))
 (let (($x84 (= $x48 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x115 (concat ?x15 (concat ?x94 ?x31)))))
 (let (($x57 (= input.dst.llvm-%opt ?x118)))
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (and $x81 $x57)))
 (let ((?x52 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x52)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x83 $x111)))
 (let (($x56 (and $x78 $x95)))
 (let (($x29 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x29 $x56)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x21)))))))
 (let (($x86 (and (and (and $x112 true) $x114) $x106)))
 (let (($x85 (= true $x81)))
 (let (($x61 (=> $x19 $x85)))
 (let (($x121 (and $x61 $x86)))
 (let (($x42 (= $x121 true)))
 (let (($x119 (= $x42 true)))
 (let (($x24 (= $x119 true)))
 (let (($x67 (= $x19 true)))
 (let (($x101 (= $x67 true)))
 (let (($x68 (= $x101 true)))
 (let (($x12 (and $x68 $x24)))
 (let (($x69 (and $x12 $x84)))
 (let (($x26 (and $x72 $x69)))
 (let (($x88 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x5 (and $x88 $x26)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x60 (and $x35 $x5)))
 (let (($x10 (and $x37 $x60)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x14 (=> $x25 (or false (or false (and true (or $x33 $x58)))))))
 (let (($x41 (=> (and $x19 $x25) (or false (or false (and true (or $x33 $x58)))))))
 (let (($x80 (and $x41 $x10)))
 (let (($x34 (=> $x80 $x93)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x19 (not $x64)))
 (let ((?x22 (ite $x19 (_ bv1 1) (_ bv0 1))))
 (let ((?x51 ((_ zero_extend 31) ?x22)))
 (let (($x96 (= (_ bv1 32) ?x51)))
 (let (($x93 (= $x96 true)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x100)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x116)))
 (let (($x124 (= input.spec-%var-opt-0.2 ?x123)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x53 (=> $x72 $x124)))
 (let ((?x8 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x8 (_ bv1 32))))
 (let (($x117 (= $x72 $x9)))
 (let (($x37 (= false false)))
 (let (($x122 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x104 (=> $x122 $x37)))
 (let (($x74 (= ?x8 (_ bv0 32))))
 (let (($x113 (= $x122 $x74)))
 (let (($x48 (and (and (and $x113 $x104) $x117) $x53)))
 (let (($x84 (= $x48 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x115 (concat ?x15 (concat ?x94 ?x31)))))
 (let (($x57 (= input.dst.llvm-%opt ?x118)))
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (and $x81 $x57)))
 (let ((?x52 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x52)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x83 $x111)))
 (let (($x56 (and $x78 $x95)))
 (let (($x29 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x29 $x56)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x21)))))))
 (let (($x86 (and (and (and $x112 true) $x114) $x106)))
 (let (($x85 (= true $x81)))
 (let (($x61 (=> $x19 $x85)))
 (let (($x121 (and $x61 $x86)))
 (let (($x42 (= $x121 true)))
 (let (($x119 (= $x42 true)))
 (let (($x24 (= $x119 true)))
 (let (($x67 (= $x19 true)))
 (let (($x101 (= $x67 true)))
 (let (($x68 (= $x101 true)))
 (let (($x12 (and $x68 $x24)))
 (let (($x69 (and $x12 $x84)))
 (let (($x26 (and $x72 $x69)))
 (let (($x88 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x5 (and $x88 $x26)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x60 (and $x35 $x5)))
 (let (($x10 (and $x37 $x60)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x14 (=> $x25 (or false (or false (and true (or $x33 $x58)))))))
 (let (($x41 (=> (and $x19 $x25) (or false (or false (and true (or $x33 $x58)))))))
 (let (($x80 (and $x41 $x10)))
 (let (($x34 (=> $x80 $x93)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x35 (=> $x70 (or false (or false (and true (or $x38 $x11)))))))
 (let (($x96 (= $x35 true)))
 (let (($x93 (= $x96 true)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x62) ?x123)))
 (let (($x48 (= input.spec-%var-opt-0.2 ?x53)))
 (let (($x45 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x84 (=> $x45 $x48)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x72 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x72 (_ bv1 32))))
 (let (($x108 (= $x45 $x120)))
 (let (($x25 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x18 (=> $x6 $x25)))
 (let (($x9 (= ?x72 (_ bv0 32))))
 (let (($x117 (= $x6 $x9)))
 (let (($x5 (and (and (and $x117 $x18) $x108) $x84)))
 (let (($x60 (= $x5 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x121 (concat ?x57 (concat ?x31 ?x76)))))
 (let (($x119 (= input.dst.llvm-%opt ?x42)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x24 (and $x90 $x119)))
 (let ((?x39 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x39)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x95 $x114)))
 (let (($x115 (and $x110 $x107)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x54 $x115)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x16)))))))
 (let (($x122 (and (and (and $x52 true) $x77) $x24)))
 (let (($x102 (= true $x90)))
 (let (($x19 (not $x64)))
 (let (($x43 (=> $x19 $x102)))
 (let (($x8 (and $x43 $x122)))
 (let (($x74 (= $x8 true)))
 (let (($x113 (= $x74 true)))
 (let (($x37 (= $x113 true)))
 (let (($x81 (= $x19 true)))
 (let (($x85 (= $x81 true)))
 (let (($x61 (= $x85 true)))
 (let (($x104 (and $x61 $x37)))
 (let (($x10 (and $x104 $x60)))
 (let (($x80 (and $x45 $x10)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x79 (and $x68 $x80)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x125 (and $x67 $x79)))
 (let (($x22 (and $x25 $x125)))
 (let (($x20 (=> (and $x19 $x70) (or false (or false (and true (or $x38 $x11)))))))
 (let (($x51 (and $x20 $x22)))
 (let (($x34 (=> $x51 $x93)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x35 (=> $x70 (or false (or false (and true (or $x38 $x11)))))))
 (let (($x96 (= $x35 true)))
 (let (($x93 (= $x96 true)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x62) ?x123)))
 (let (($x48 (= input.spec-%var-opt-0.2 ?x53)))
 (let (($x45 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x84 (=> $x45 $x48)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x72 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x72 (_ bv1 32))))
 (let (($x108 (= $x45 $x120)))
 (let (($x25 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x18 (=> $x6 $x25)))
 (let (($x9 (= ?x72 (_ bv0 32))))
 (let (($x117 (= $x6 $x9)))
 (let (($x5 (and (and (and $x117 $x18) $x108) $x84)))
 (let (($x60 (= $x5 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x121 (concat ?x57 (concat ?x31 ?x76)))))
 (let (($x119 (= input.dst.llvm-%opt ?x42)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x24 (and $x90 $x119)))
 (let ((?x39 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x39)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x95 $x114)))
 (let (($x115 (and $x110 $x107)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x54 $x115)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x16)))))))
 (let (($x122 (and (and (and $x52 true) $x77) $x24)))
 (let (($x102 (= true $x90)))
 (let (($x19 (not $x64)))
 (let (($x43 (=> $x19 $x102)))
 (let (($x8 (and $x43 $x122)))
 (let (($x74 (= $x8 true)))
 (let (($x113 (= $x74 true)))
 (let (($x37 (= $x113 true)))
 (let (($x81 (= $x19 true)))
 (let (($x85 (= $x81 true)))
 (let (($x61 (= $x85 true)))
 (let (($x104 (and $x61 $x37)))
 (let (($x10 (and $x104 $x60)))
 (let (($x80 (and $x45 $x10)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x79 (and $x68 $x80)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x125 (and $x67 $x79)))
 (let (($x22 (and $x25 $x125)))
 (let (($x20 (=> (and $x19 $x70) (or false (or false (and true (or $x38 $x11)))))))
 (let (($x51 (and $x20 $x22)))
 (let (($x34 (=> $x51 $x93)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x53)))
 (let (($x97 (= input.spec-%tmpvar-6.E0%0%d.2 ?x84)))
 (let (($x17 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x126 (=> $x17 $x97)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x45 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x45 (_ bv1 32))))
 (let (($x23 (= $x17 $x124)))
 (let (($x70 (= false false)))
 (let (($x21 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x47 (=> $x21 $x70)))
 (let (($x120 (= ?x45 (_ bv0 32))))
 (let (($x15 (= $x21 $x120)))
 (let (($x129 (and (and (and $x15 $x47) $x23) $x126)))
 (let (($x46 (= true true)))
 (let (($x130 (and $x46 $x129)))
 (let (($x131 (= $x130 true)))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x89 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x89 $x5)))
 (let (($x100 (= $x89 $x124)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x26 (=> $x69 $x70)))
 (let (($x108 (= $x69 $x120)))
 (let (($x79 (and (and (and $x108 $x26) $x100) $x60)))
 (let (($x125 (= $x79 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x8 (concat ?x119 (concat ?x76 ?x94)))))
 (let (($x113 (= input.dst.llvm-%opt ?x74)))
 (let (($x78 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x37 (and $x78 $x113)))
 (let ((?x98 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x98)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x107 $x77)))
 (let (($x121 (and $x71 $x86)))
 (let (($x83 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x83 $x121)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x50)))))))
 (let (($x6 (and (and (and $x39 true) $x105) $x37)))
 (let (($x112 (= true $x78)))
 (let (($x19 (not $x64)))
 (let (($x36 (=> $x19 $x112)))
 (let (($x72 (and $x36 $x6)))
 (let (($x9 (= $x72 true)))
 (let (($x117 (= $x9 true)))
 (let (($x25 (= $x117 true)))
 (let (($x90 (= $x19 true)))
 (let (($x102 (= $x90 true)))
 (let (($x43 (= $x102 true)))
 (let (($x18 (and $x43 $x25)))
 (let (($x22 (and $x18 $x125)))
 (let (($x51 (and $x89 $x22)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x96 (and $x61 $x51)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x93 (and $x81 $x96)))
 (let (($x34 (and $x70 $x93)))
 (let (($x41 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x88 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x67 (=> $x88 (or false (or false (and true (or $x14 $x41)))))))
 (let (($x13 (=> (and $x19 $x88) (or false (or false (and true (or $x14 $x41)))))))
 (let (($x91 (and $x13 $x34)))
 (let (($x132 (=> $x91 $x131)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x53)))
 (let (($x97 (= input.spec-%tmpvar-6.E0%0%d.2 ?x84)))
 (let (($x17 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x126 (=> $x17 $x97)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x45 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x45 (_ bv1 32))))
 (let (($x23 (= $x17 $x124)))
 (let (($x70 (= false false)))
 (let (($x21 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x47 (=> $x21 $x70)))
 (let (($x120 (= ?x45 (_ bv0 32))))
 (let (($x15 (= $x21 $x120)))
 (let (($x129 (and (and (and $x15 $x47) $x23) $x126)))
 (let (($x46 (= true true)))
 (let (($x130 (and $x46 $x129)))
 (let (($x131 (= $x130 true)))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x89 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x89 $x5)))
 (let (($x100 (= $x89 $x124)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x26 (=> $x69 $x70)))
 (let (($x108 (= $x69 $x120)))
 (let (($x79 (and (and (and $x108 $x26) $x100) $x60)))
 (let (($x125 (= $x79 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x8 (concat ?x119 (concat ?x76 ?x94)))))
 (let (($x113 (= input.dst.llvm-%opt ?x74)))
 (let (($x78 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x37 (and $x78 $x113)))
 (let ((?x98 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x98)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x107 $x77)))
 (let (($x121 (and $x71 $x86)))
 (let (($x83 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x83 $x121)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x50)))))))
 (let (($x6 (and (and (and $x39 true) $x105) $x37)))
 (let (($x112 (= true $x78)))
 (let (($x19 (not $x64)))
 (let (($x36 (=> $x19 $x112)))
 (let (($x72 (and $x36 $x6)))
 (let (($x9 (= $x72 true)))
 (let (($x117 (= $x9 true)))
 (let (($x25 (= $x117 true)))
 (let (($x90 (= $x19 true)))
 (let (($x102 (= $x90 true)))
 (let (($x43 (= $x102 true)))
 (let (($x18 (and $x43 $x25)))
 (let (($x22 (and $x18 $x125)))
 (let (($x51 (and $x89 $x22)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x96 (and $x61 $x51)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x93 (and $x81 $x96)))
 (let (($x34 (and $x70 $x93)))
 (let (($x41 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x88 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x67 (=> $x88 (or false (or false (and true (or $x14 $x41)))))))
 (let (($x13 (=> (and $x19 $x88) (or false (or false (and true (or $x14 $x41)))))))
 (let (($x91 (and $x13 $x34)))
 (let (($x132 (=> $x91 $x131)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb7)
                     #xb6800218
                     #x1c)
              #xb680021a
              #xc1)
       #xb6800219
       #xfe))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb680021b)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb6800218)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1610612732 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2214592516 32) (_ bv252 8)) (_ bv2214592517 32) (_ bv255 8)) (_ bv2214592518 32) (_ bv255 8)) (_ bv2214592519 32) (_ bv95 8)) (_ bv1610612732 32) (_ bv255 8)) (_ bv1610612733 32) (_ bv255 8)) (_ bv1610612734 32) (_ bv255 8)) (_ bv1610612735 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2214592516 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2214592516 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2214592519 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x84)))
 (let (($x79 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x92 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x125 (=> $x92 $x79)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x89 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge ?x89 (_ bv1 32))))
 (let (($x65 (= $x92 $x48)))
 (let (($x88 (= false false)))
 (let (($x10 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x80 (=> $x10 $x88)))
 (let (($x124 (= ?x89 (_ bv0 32))))
 (let (($x100 (= $x10 $x124)))
 (let (($x96 (and (and (and $x100 $x80) $x65) $x125)))
 (let (($x47 (= true true)))
 (let (($x127 (and $x47 $x96)))
 (let (($x17 (= $x127 true)))
 (let (($x93 (= $x96 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x72 (concat ?x113 (concat ?x94 ?x31)))))
 (let (($x117 (= input.dst.llvm-%opt ?x9)))
 (let (($x110 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (and $x110 $x117)))
 (let ((?x118 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x118)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x86 $x105)))
 (let (($x8 (and $x66 $x122)))
 (let (($x95 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x95 $x8)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x29)))))))
 (let (($x69 (and (and (and $x98 true) $x106) $x25)))
 (let (($x52 (= true $x110)))
 (let (($x19 (not $x64)))
 (let (($x12 (=> $x19 $x52)))
 (let (($x45 (and $x12 $x69)))
 (let (($x120 (= $x45 true)))
 (let (($x108 (= $x120 true)))
 (let (($x70 (= $x108 true)))
 (let (($x78 (= $x19 true)))
 (let (($x112 (= $x78 true)))
 (let (($x36 (= $x112 true)))
 (let (($x26 (and $x36 $x70)))
 (let (($x34 (and $x26 $x93)))
 (let (($x91 (and $x92 $x34)))
 (let (($x43 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x46 (and $x43 $x91)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x32 (and $x90 $x46)))
 (let (($x21 (and $x88 $x32)))
 (let (($x20 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x68 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x81 (=> $x68 (or false (or false (and true (or $x35 $x20)))))))
 (let (($x62 (=> (and $x19 $x68) (or false (or false (and true (or $x35 $x20)))))))
 (let (($x15 (and $x62 $x21)))
 (let (($x23 (=> $x15 $x17)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x84)))
 (let (($x79 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x92 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x125 (=> $x92 $x79)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x89 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge ?x89 (_ bv1 32))))
 (let (($x65 (= $x92 $x48)))
 (let (($x88 (= false false)))
 (let (($x10 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x80 (=> $x10 $x88)))
 (let (($x124 (= ?x89 (_ bv0 32))))
 (let (($x100 (= $x10 $x124)))
 (let (($x96 (and (and (and $x100 $x80) $x65) $x125)))
 (let (($x47 (= true true)))
 (let (($x127 (and $x47 $x96)))
 (let (($x17 (= $x127 true)))
 (let (($x93 (= $x96 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x72 (concat ?x113 (concat ?x94 ?x31)))))
 (let (($x117 (= input.dst.llvm-%opt ?x9)))
 (let (($x110 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (and $x110 $x117)))
 (let ((?x118 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x118)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x86 $x105)))
 (let (($x8 (and $x66 $x122)))
 (let (($x95 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x95 $x8)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x29)))))))
 (let (($x69 (and (and (and $x98 true) $x106) $x25)))
 (let (($x52 (= true $x110)))
 (let (($x19 (not $x64)))
 (let (($x12 (=> $x19 $x52)))
 (let (($x45 (and $x12 $x69)))
 (let (($x120 (= $x45 true)))
 (let (($x108 (= $x120 true)))
 (let (($x70 (= $x108 true)))
 (let (($x78 (= $x19 true)))
 (let (($x112 (= $x78 true)))
 (let (($x36 (= $x112 true)))
 (let (($x26 (and $x36 $x70)))
 (let (($x34 (and $x26 $x93)))
 (let (($x91 (and $x92 $x34)))
 (let (($x43 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x46 (and $x43 $x91)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x32 (and $x90 $x46)))
 (let (($x21 (and $x88 $x32)))
 (let (($x20 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x68 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x81 (=> $x68 (or false (or false (and true (or $x35 $x20)))))))
 (let (($x62 (=> (and $x19 $x68) (or false (or false (and true (or $x35 $x20)))))))
 (let (($x15 (and $x62 $x21)))
 (let (($x23 (=> $x15 $x17)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x128 (= false true)))
 (let (($x58 (= $x128 true)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x123)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x60)))
 (let (($x96 (= input.spec-%var-opt-0.2 ?x125)))
 (let (($x111 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x93 (=> $x111 $x96)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x92 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x92 (_ bv1 32))))
 (let (($x99 (= $x111 $x5)))
 (let (($x68 (= false false)))
 (let (($x22 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x51 (=> $x22 $x68)))
 (let (($x48 (= ?x92 (_ bv0 32))))
 (let (($x65 (= $x22 $x48)))
 (let (($x46 (and (and (and $x65 $x51) $x99) $x93)))
 (let (($x32 (= $x46 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x45 (concat ?x117 (concat ?x31 ?x76)))))
 (let (($x108 (= input.dst.llvm-%opt ?x120)))
 (let (($x71 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x70 (and $x71 $x108)))
 (let ((?x42 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x42)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x122 $x106)))
 (let (($x72 (and $x87 $x6)))
 (let (($x107 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x107 $x72)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x54)))))))
 (let (($x10 (and (and (and $x118 true) $x24) $x70)))
 (let (($x39 (= true $x71)))
 (let (($x19 (not $x64)))
 (let (($x104 (=> $x19 $x39)))
 (let (($x89 (and $x104 $x10)))
 (let (($x124 (= $x89 true)))
 (let (($x100 (= $x124 true)))
 (let (($x88 (= $x100 true)))
 (let (($x110 (= $x19 true)))
 (let (($x52 (= $x110 true)))
 (let (($x12 (= $x52 true)))
 (let (($x80 (and $x12 $x88)))
 (let (($x21 (and $x80 $x32)))
 (let (($x15 (and $x111 $x21)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x47 (and $x36 $x15)))
 (let (($x78 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x127 (and $x78 $x47)))
 (let (($x17 (and $x68 $x127)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x61 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x61 (or false (or false (and true (or $x67 $x13)))))))
 (let (($x59 (=> (and $x19 $x61) (or false (or false (and true (or $x67 $x13)))))))
 (let (($x23 (and $x59 $x17)))
 (let (($x40 (=> $x23 $x58)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x128 (= false true)))
 (let (($x58 (= $x128 true)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x123)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x60)))
 (let (($x96 (= input.spec-%var-opt-0.2 ?x125)))
 (let (($x111 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x93 (=> $x111 $x96)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x92 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x92 (_ bv1 32))))
 (let (($x99 (= $x111 $x5)))
 (let (($x68 (= false false)))
 (let (($x22 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x51 (=> $x22 $x68)))
 (let (($x48 (= ?x92 (_ bv0 32))))
 (let (($x65 (= $x22 $x48)))
 (let (($x46 (and (and (and $x65 $x51) $x99) $x93)))
 (let (($x32 (= $x46 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x45 (concat ?x117 (concat ?x31 ?x76)))))
 (let (($x108 (= input.dst.llvm-%opt ?x120)))
 (let (($x71 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x70 (and $x71 $x108)))
 (let ((?x42 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x42)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x122 $x106)))
 (let (($x72 (and $x87 $x6)))
 (let (($x107 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x107 $x72)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x54)))))))
 (let (($x10 (and (and (and $x118 true) $x24) $x70)))
 (let (($x39 (= true $x71)))
 (let (($x19 (not $x64)))
 (let (($x104 (=> $x19 $x39)))
 (let (($x89 (and $x104 $x10)))
 (let (($x124 (= $x89 true)))
 (let (($x100 (= $x124 true)))
 (let (($x88 (= $x100 true)))
 (let (($x110 (= $x19 true)))
 (let (($x52 (= $x110 true)))
 (let (($x12 (= $x52 true)))
 (let (($x80 (and $x12 $x88)))
 (let (($x21 (and $x80 $x32)))
 (let (($x15 (and $x111 $x21)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x47 (and $x36 $x15)))
 (let (($x78 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x127 (and $x78 $x47)))
 (let (($x17 (and $x68 $x127)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x61 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x61 (or false (or false (and true (or $x67 $x13)))))))
 (let (($x59 (=> (and $x19 $x61) (or false (or false (and true (or $x67 $x13)))))))
 (let (($x23 (and $x59 $x17)))
 (let (($x40 (=> $x23 $x58)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x203b68e5
                     #x20)
              #x203b68e7
              #x20)
       #x203b68e6
       #x3b))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294705148 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294709252 32) (_ bv252 8)) (_ bv4294709253 32) (_ bv255 8)) (_ bv4294709254 32) (_ bv251 8)) (_ bv4294709255 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294709252 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294709252 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294709255 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x119 (= $x113 true)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x107)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x87)))
 (let (($x15 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x81 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x47 (=> $x81 $x15)))
 (let (($x60 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x125 (ite $x60 (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge ?x125 (_ bv1 32))))
 (let (($x21 (= $x81 $x32)))
 (let (($x14 (= false false)))
 (let (($x123 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x46 (=> $x123 $x14)))
 (let (($x96 (= ?x125 (_ bv0 32))))
 (let (($x93 (= $x123 $x96)))
 (let (($x23 (and (and (and $x93 $x46) $x21) $x47)))
 (let (($x128 (= $x23 true)))
 (let ((?x5 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x5)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x68 $x34)))
 (let (($x91 (and $x111 $x99)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x70 $x91)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x88)))))))
 (let (($x116 (and $x65 $x79)))
 (let (($x84 (= $x116 true)))
 (let (($x109 (= $x84 true)))
 (let (($x103 (= $x109 true)))
 (let ((?x9 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x117 ((_ zero_extend 31) ?x9)))
 (let (($x94 (= (_ bv1 32) ?x117)))
 (let (($x31 (= $x94 true)))
 (let (($x76 (= $x31 true)))
 (let ((?x20 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x20)))
 (let (($x72 (= ?x75 ?x6)))
 (let (($x24 (= $x72 true)))
 (let (($x82 (= $x24 true)))
 (let (($x115 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x54 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x95 (=> $x54 (or false (or false (and true (or $x104 $x115)))))))
 (let (($x36 (= $x95 true)))
 (let (($x110 (= $x36 true)))
 (let (($x86 (= $x110 true)))
 (let (($x85 (= ?x75 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x90 (= $x85 true)))
 (let (($x59 (= $x90 true)))
 (let ((?x63 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x49 (= (_ bv0 2) ?x63)))
 (let (($x41 (= $x49 true)))
 (let (($x64 (= $x41 true)))
 (let (($x102 (and $x64 $x59)))
 (let (($x121 (and $x102 $x86)))
 (let (($x74 (and $x121 $x82)))
 (let (($x73 (and $x74 $x76)))
 (let (($x53 (and $x73 $x103)))
 (let (($x58 (and $x53 $x128)))
 (let (($x40 (and $x81 $x58)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x50 (and $x27 $x40)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x33 (and $x13 $x50)))
 (let (($x29 (and $x14 $x33)))
 (let (($x28 (=> $x29 $x119)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x119 (= $x113 true)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x107)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x87)))
 (let (($x15 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x81 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x47 (=> $x81 $x15)))
 (let (($x60 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x125 (ite $x60 (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge ?x125 (_ bv1 32))))
 (let (($x21 (= $x81 $x32)))
 (let (($x14 (= false false)))
 (let (($x123 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x46 (=> $x123 $x14)))
 (let (($x96 (= ?x125 (_ bv0 32))))
 (let (($x93 (= $x123 $x96)))
 (let (($x23 (and (and (and $x93 $x46) $x21) $x47)))
 (let (($x128 (= $x23 true)))
 (let ((?x5 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x5)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x68 $x34)))
 (let (($x91 (and $x111 $x99)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x70 $x91)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x88)))))))
 (let (($x116 (and $x65 $x79)))
 (let (($x84 (= $x116 true)))
 (let (($x109 (= $x84 true)))
 (let (($x103 (= $x109 true)))
 (let ((?x9 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x117 ((_ zero_extend 31) ?x9)))
 (let (($x94 (= (_ bv1 32) ?x117)))
 (let (($x31 (= $x94 true)))
 (let (($x76 (= $x31 true)))
 (let ((?x20 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x20)))
 (let (($x72 (= ?x75 ?x6)))
 (let (($x24 (= $x72 true)))
 (let (($x82 (= $x24 true)))
 (let (($x115 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x54 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x95 (=> $x54 (or false (or false (and true (or $x104 $x115)))))))
 (let (($x36 (= $x95 true)))
 (let (($x110 (= $x36 true)))
 (let (($x86 (= $x110 true)))
 (let (($x85 (= ?x75 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x90 (= $x85 true)))
 (let (($x59 (= $x90 true)))
 (let ((?x63 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x49 (= (_ bv0 2) ?x63)))
 (let (($x41 (= $x49 true)))
 (let (($x64 (= $x41 true)))
 (let (($x102 (and $x64 $x59)))
 (let (($x121 (and $x102 $x86)))
 (let (($x74 (and $x121 $x82)))
 (let (($x73 (and $x74 $x76)))
 (let (($x53 (and $x73 $x103)))
 (let (($x58 (and $x53 $x128)))
 (let (($x40 (and $x81 $x58)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x50 (and $x27 $x40)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x33 (and $x13 $x50)))
 (let (($x29 (and $x14 $x33)))
 (let (($x28 (=> $x29 $x119)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10100000000000000000000000000100)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01010000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x202cc000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203cd107)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x131 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x60)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x14)))
 (let (($x29 (= input.spec-%var-opt-0.2 ?x127)))
 (let (($x75 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x113 (=> $x75 $x29)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x23 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x23 (_ bv1 32))))
 (let (($x33 (= $x75 $x50)))
 (let (($x63 (= false false)))
 (let (($x15 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x40 (=> $x15 $x63)))
 (let (($x128 (= ?x23 (_ bv0 32))))
 (let (($x58 (= $x15 $x128)))
 (let (($x97 (and (and (and $x58 $x40) $x33) $x113)))
 (let (($x112 (= $x97 true)))
 (let ((?x5 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x5)))
 (let (($x81 (= ?x99 ?x127)))
 (let (($x32 (= $x81 true)))
 (let (($x21 (= $x32 true)))
 (let (($x79 (= ?x99 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x116 (= $x79 true)))
 (let (($x84 (= $x116 true)))
 (let ((?x7 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x7)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x124 $x88)))
 (let (($x92 (and $x80 $x22)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x45 $x92)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x31)))))))
 (let (($x108 (and $x48 $x65)))
 (let (($x70 (= $x108 true)))
 (let (($x68 (= $x70 true)))
 (let (($x51 (= $x68 true)))
 (let ((?x118 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x107 ((_ zero_extend 31) ?x118)))
 (let (($x87 (= (_ bv1 32) ?x107)))
 (let (($x6 (= $x87 true)))
 (let (($x72 (= $x6 true)))
 (let (($x121 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= $x121 true)))
 (let (($x42 (= $x105 true)))
 (let (($x122 (= $x42 true)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x98 (or false (or false (and true (or $x11 $x13)))))))
 (let (($x52 (= $x18 true)))
 (let (($x61 (= $x52 true)))
 (let (($x95 (= $x61 true)))
 (let ((?x104 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x67 (= (_ bv0 2) ?x104)))
 (let (($x62 (= $x67 true)))
 (let (($x66 (= $x62 true)))
 (let (($x36 (and $x66 $x95)))
 (let (($x8 (and $x36 $x122)))
 (let (($x24 (and $x8 $x72)))
 (let (($x34 (and $x24 $x51)))
 (let (($x109 (and $x34 $x84)))
 (let (($x17 (and $x109 $x21)))
 (let (($x43 (and $x17 $x112)))
 (let (($x120 (and $x75 $x43)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x126 (and $x27 $x120)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x129 (and $x77 $x126)))
 (let (($x130 (and $x63 $x129)))
 (let (($x55 (=> $x130 $x133)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x131 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x60)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x14)))
 (let (($x29 (= input.spec-%var-opt-0.2 ?x127)))
 (let (($x75 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x113 (=> $x75 $x29)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x23 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x23 (_ bv1 32))))
 (let (($x33 (= $x75 $x50)))
 (let (($x63 (= false false)))
 (let (($x15 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x40 (=> $x15 $x63)))
 (let (($x128 (= ?x23 (_ bv0 32))))
 (let (($x58 (= $x15 $x128)))
 (let (($x97 (and (and (and $x58 $x40) $x33) $x113)))
 (let (($x112 (= $x97 true)))
 (let ((?x5 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x5)))
 (let (($x81 (= ?x99 ?x127)))
 (let (($x32 (= $x81 true)))
 (let (($x21 (= $x32 true)))
 (let (($x79 (= ?x99 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x116 (= $x79 true)))
 (let (($x84 (= $x116 true)))
 (let ((?x7 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x7)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x124 $x88)))
 (let (($x92 (and $x80 $x22)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x45 $x92)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x31)))))))
 (let (($x108 (and $x48 $x65)))
 (let (($x70 (= $x108 true)))
 (let (($x68 (= $x70 true)))
 (let (($x51 (= $x68 true)))
 (let ((?x118 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x107 ((_ zero_extend 31) ?x118)))
 (let (($x87 (= (_ bv1 32) ?x107)))
 (let (($x6 (= $x87 true)))
 (let (($x72 (= $x6 true)))
 (let (($x121 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= $x121 true)))
 (let (($x42 (= $x105 true)))
 (let (($x122 (= $x42 true)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x98 (or false (or false (and true (or $x11 $x13)))))))
 (let (($x52 (= $x18 true)))
 (let (($x61 (= $x52 true)))
 (let (($x95 (= $x61 true)))
 (let ((?x104 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x67 (= (_ bv0 2) ?x104)))
 (let (($x62 (= $x67 true)))
 (let (($x66 (= $x62 true)))
 (let (($x36 (and $x66 $x95)))
 (let (($x8 (and $x36 $x122)))
 (let (($x24 (and $x8 $x72)))
 (let (($x34 (and $x24 $x51)))
 (let (($x109 (and $x34 $x84)))
 (let (($x17 (and $x109 $x21)))
 (let (($x43 (and $x17 $x112)))
 (let (($x120 (and $x75 $x43)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x126 (and $x27 $x120)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x129 (and $x77 $x126)))
 (let (($x130 (and $x63 $x129)))
 (let (($x55 (=> $x130 $x133)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x84 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x84)))
 (let (($x55 (= ?x109 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x44 (= $x55 true)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x14)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x21)))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x104 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x97 (=> $x104 $x113)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x119 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x119 (_ bv1 32))))
 (let (($x29 (= $x104 $x28)))
 (let (($x63 (= false false)))
 (let (($x58 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x58 $x63)))
 (let (($x75 (= ?x119 (_ bv0 32))))
 (let (($x50 (= $x58 $x75)))
 (let (($x120 (and (and (and $x50 $x33) $x29) $x97)))
 (let (($x126 (= $x120 true)))
 (let (($x15 (= ?x109 ?x90)))
 (let (($x47 (= $x15 true)))
 (let (($x23 (= $x47 true)))
 (let (($x46 (= ?x109 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x125 (= $x46 true)))
 (let (($x96 (= $x125 true)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x70)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x22 $x65)))
 (let (($x51 (and $x108 $x68)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x76 $x51)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x69)))))))
 (let (($x111 (and $x7 $x34)))
 (let (($x5 (= $x111 true)))
 (let (($x99 (= $x5 true)))
 (let (($x91 (= $x99 true)))
 (let ((?x72 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x24 ((_ zero_extend 31) ?x72)))
 (let (($x82 (= (_ bv1 32) ?x24)))
 (let (($x37 (= $x82 true)))
 (let (($x9 (= $x37 true)))
 (let (($x8 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x8 true)))
 (let (($x26 (= $x106 true)))
 (let (($x83 (= $x26 true)))
 (let (($x18 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x110 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x86 (=> $x110 (or false (or false (and true (or $x39 $x18)))))))
 (let (($x59 (= $x86 true)))
 (let (($x101 (= $x59 true)))
 (let (($x121 (= $x101 true)))
 (let ((?x66 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x49 (= (_ bv0 2) ?x66)))
 (let (($x38 (= $x49 true)))
 (let (($x20 (= $x38 true)))
 (let (($x105 (and $x20 $x121)))
 (let (($x118 (and $x105 $x83)))
 (let (($x89 (and $x118 $x9)))
 (let (($x79 (and $x89 $x91)))
 (let (($x93 (and $x79 $x96)))
 (let (($x128 (and $x93 $x23)))
 (let (($x129 (and $x128 $x126)))
 (let (($x130 (and $x104 $x129)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x131 (and $x27 $x130)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x132 (and $x77 $x131)))
 (let (($x133 (and $x63 $x132)))
 (let (($x114 (=> $x133 $x44)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x84 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x84)))
 (let (($x55 (= ?x109 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x44 (= $x55 true)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x14)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x21)))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x104 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x97 (=> $x104 $x113)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x119 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x119 (_ bv1 32))))
 (let (($x29 (= $x104 $x28)))
 (let (($x63 (= false false)))
 (let (($x58 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x58 $x63)))
 (let (($x75 (= ?x119 (_ bv0 32))))
 (let (($x50 (= $x58 $x75)))
 (let (($x120 (and (and (and $x50 $x33) $x29) $x97)))
 (let (($x126 (= $x120 true)))
 (let (($x15 (= ?x109 ?x90)))
 (let (($x47 (= $x15 true)))
 (let (($x23 (= $x47 true)))
 (let (($x46 (= ?x109 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x125 (= $x46 true)))
 (let (($x96 (= $x125 true)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x70)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x22 $x65)))
 (let (($x51 (and $x108 $x68)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x76 $x51)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x69)))))))
 (let (($x111 (and $x7 $x34)))
 (let (($x5 (= $x111 true)))
 (let (($x99 (= $x5 true)))
 (let (($x91 (= $x99 true)))
 (let ((?x72 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x24 ((_ zero_extend 31) ?x72)))
 (let (($x82 (= (_ bv1 32) ?x24)))
 (let (($x37 (= $x82 true)))
 (let (($x9 (= $x37 true)))
 (let (($x8 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x8 true)))
 (let (($x26 (= $x106 true)))
 (let (($x83 (= $x26 true)))
 (let (($x18 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x110 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x86 (=> $x110 (or false (or false (and true (or $x39 $x18)))))))
 (let (($x59 (= $x86 true)))
 (let (($x101 (= $x59 true)))
 (let (($x121 (= $x101 true)))
 (let ((?x66 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x49 (= (_ bv0 2) ?x66)))
 (let (($x38 (= $x49 true)))
 (let (($x20 (= $x38 true)))
 (let (($x105 (and $x20 $x121)))
 (let (($x118 (and $x105 $x83)))
 (let (($x89 (and $x118 $x9)))
 (let (($x79 (and $x89 $x91)))
 (let (($x93 (and $x79 $x96)))
 (let (($x128 (and $x93 $x23)))
 (let (($x129 (and $x128 $x126)))
 (let (($x130 (and $x104 $x129)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x131 (and $x27 $x130)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x132 (and $x77 $x131)))
 (let (($x133 (and $x63 $x132)))
 (let (($x114 (=> $x133 $x44)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x23)))
 (let (($x135 (= input.spec-%tmpvar-6.E0%0%d.2 ?x78)))
 (let (($x16 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x136 (=> $x16 $x135)))
 (let (($x33 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x112 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x112 (_ bv1 32))))
 (let (($x57 (= $x16 $x43)))
 (let (($x63 (= false false)))
 (let (($x35 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x74 (=> $x35 $x63)))
 (let (($x104 (= ?x112 (_ bv0 32))))
 (let (($x94 (= $x35 $x104)))
 (let (($x139 (and (and (and $x94 $x74) $x57) $x136)))
 (let (($x85 (= true true)))
 (let (($x140 (and $x85 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x97 (= input.spec-%var-opt-0.2 ?x78)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x66 $x97)))
 (let (($x113 (= $x66 $x43)))
 (let (($x50 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x29 (=> $x50 $x63)))
 (let (($x28 (= $x50 $x104)))
 (let (($x130 (and (and (and $x28 $x29) $x113) $x120)))
 (let (($x131 (= $x130 true)))
 (let ((?x38 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x38)))
 (let (($x58 (= ?x20 ?x78)))
 (let (($x40 (= $x58 true)))
 (let (($x119 (= $x40 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x17 (= (_ bv0 2) ?x30)))
 (let (($x127 (= $x17 true)))
 (let (($x81 (= $x127 true)))
 (let (($x91 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x103 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x46 (=> $x103 (or false (or false (and true (or $x99 $x91)))))))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let (($x125 (= $x51 true)))
 (let (($x31 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x76 (= $x31 true)))
 (let (($x22 (= $x76 true)))
 (let (($x92 (= $x22 true)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x117)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x24 $x9)))
 (let (($x25 (and $x89 $x73)))
 (let (($x101 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x101 $x25)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x26)))))))
 (let (($x10 (and $x72 $x80)))
 (let (($x48 (= $x10 true)))
 (let (($x69 (= $x48 true)))
 (let (($x45 (= $x69 true)))
 (let ((?x71 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x39 ((_ zero_extend 31) ?x71)))
 (let (($x54 (= (_ bv1 32) ?x39)))
 (let (($x18 (= $x54 true)))
 (let (($x52 (= $x18 true)))
 (let (($x11 (= ?x20 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x102 (= $x11 true)))
 (let (($x19 (= $x102 true)))
 (let (($x61 (and $x19 $x52)))
 (let (($x124 (and $x61 $x45)))
 (let (($x65 (and $x124 $x92)))
 (let (($x96 (and $x65 $x125)))
 (let (($x32 (and $x96 $x81)))
 (let (($x75 (and $x32 $x119)))
 (let (($x132 (and $x75 $x131)))
 (let (($x133 (and $x66 $x132)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x55 (and $x27 $x133)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x44 (and $x77 $x55)))
 (let (($x114 (and $x63 $x44)))
 (let (($x142 (=> $x114 $x141)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x23)))
 (let (($x135 (= input.spec-%tmpvar-6.E0%0%d.2 ?x78)))
 (let (($x16 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x136 (=> $x16 $x135)))
 (let (($x33 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x112 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x112 (_ bv1 32))))
 (let (($x57 (= $x16 $x43)))
 (let (($x63 (= false false)))
 (let (($x35 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x74 (=> $x35 $x63)))
 (let (($x104 (= ?x112 (_ bv0 32))))
 (let (($x94 (= $x35 $x104)))
 (let (($x139 (and (and (and $x94 $x74) $x57) $x136)))
 (let (($x85 (= true true)))
 (let (($x140 (and $x85 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x97 (= input.spec-%var-opt-0.2 ?x78)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x66 $x97)))
 (let (($x113 (= $x66 $x43)))
 (let (($x50 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x29 (=> $x50 $x63)))
 (let (($x28 (= $x50 $x104)))
 (let (($x130 (and (and (and $x28 $x29) $x113) $x120)))
 (let (($x131 (= $x130 true)))
 (let ((?x38 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x38)))
 (let (($x58 (= ?x20 ?x78)))
 (let (($x40 (= $x58 true)))
 (let (($x119 (= $x40 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x17 (= (_ bv0 2) ?x30)))
 (let (($x127 (= $x17 true)))
 (let (($x81 (= $x127 true)))
 (let (($x91 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x103 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x46 (=> $x103 (or false (or false (and true (or $x99 $x91)))))))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let (($x125 (= $x51 true)))
 (let (($x31 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x76 (= $x31 true)))
 (let (($x22 (= $x76 true)))
 (let (($x92 (= $x22 true)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x117)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x24 $x9)))
 (let (($x25 (and $x89 $x73)))
 (let (($x101 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x101 $x25)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x26)))))))
 (let (($x10 (and $x72 $x80)))
 (let (($x48 (= $x10 true)))
 (let (($x69 (= $x48 true)))
 (let (($x45 (= $x69 true)))
 (let ((?x71 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x39 ((_ zero_extend 31) ?x71)))
 (let (($x54 (= (_ bv1 32) ?x39)))
 (let (($x18 (= $x54 true)))
 (let (($x52 (= $x18 true)))
 (let (($x11 (= ?x20 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x102 (= $x11 true)))
 (let (($x19 (= $x102 true)))
 (let (($x61 (and $x19 $x52)))
 (let (($x124 (and $x61 $x45)))
 (let (($x65 (and $x124 $x92)))
 (let (($x96 (and $x65 $x125)))
 (let (($x32 (and $x96 $x81)))
 (let (($x75 (and $x32 $x119)))
 (let (($x132 (and $x75 $x131)))
 (let (($x133 (and $x66 $x132)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x55 (and $x27 $x133)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x44 (and $x77 $x55)))
 (let (($x114 (and $x63 $x44)))
 (let (($x142 (=> $x114 $x141)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c1fe1f)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c1fe1c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv255 8)) (_ bv1073741825 32) (_ bv255 8)) (_ bv1073741826 32) (_ bv255 8)) (_ bv1073741827 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x94 (= false true)))
 (let (($x74 (= $x94 true)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x36)))
 (let (($x120 (= input.spec-%var-opt-0.2 ?x42)))
 (let (($x20 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x130 (=> $x20 $x120)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x126 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x126 (_ bv1 32))))
 (let (($x97 (= $x20 $x129)))
 (let (($x63 (= false false)))
 (let (($x28 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x113 (=> $x28 $x63)))
 (let (($x66 (= ?x126 (_ bv0 32))))
 (let (($x43 (= $x28 $x66)))
 (let (($x133 (and (and (and $x43 $x113) $x97) $x130)))
 (let (($x55 (= $x133 true)))
 (let ((?x58 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x58)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x21)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x60 $x23)))
 (let (($x119 (and $x78 $x40)))
 (let (($x30 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x30 $x119)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x53)))))))
 (let (($x67 (and $x14 $x75)))
 (let (($x50 (= $x67 true)))
 (let (($x33 (= $x50 true)))
 (let (($x112 (= $x33 true)))
 (let ((?x116 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x84 ((_ zero_extend 31) ?x116)))
 (let (($x109 (= (_ bv1 32) ?x84)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x108 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x34 (= $x108 true)))
 (let (($x111 (= $x34 true)))
 (let (($x103 (= $x111 true)))
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x7 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x31 (=> $x7 (or false (or false (and true (or $x48 $x69)))))))
 (let (($x89 (= $x31 true)))
 (let (($x117 (= $x89 true)))
 (let (($x76 (= $x117 true)))
 (let ((?x11 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x11)))
 (let (($x101 (= ?x102 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x24 (= $x101 true)))
 (let (($x82 (= $x24 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x118 (= (_ bv0 2) ?x83)))
 (let (($x107 (= $x118 true)))
 (let (($x87 (= $x107 true)))
 (let (($x8 (= ?x102 ?x42)))
 (let (($x106 (= $x8 true)))
 (let (($x122 (= $x106 true)))
 (let (($x72 (and $x122 $x87)))
 (let (($x37 (and $x72 $x82)))
 (let (($x22 (and $x37 $x76)))
 (let (($x5 (and $x22 $x103)))
 (let (($x51 (and $x5 $x68)))
 (let (($x104 (and $x51 $x112)))
 (let (($x44 (and $x104 $x55)))
 (let (($x114 (and $x20 $x44)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x85 (and $x27 $x114)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x64 (and $x77 $x85)))
 (let (($x35 (and $x63 $x64)))
 (let (($x137 (=> $x35 $x74)))
 (not $x137))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x94 (= false true)))
 (let (($x74 (= $x94 true)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x36)))
 (let (($x120 (= input.spec-%var-opt-0.2 ?x42)))
 (let (($x20 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x130 (=> $x20 $x120)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x126 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x126 (_ bv1 32))))
 (let (($x97 (= $x20 $x129)))
 (let (($x63 (= false false)))
 (let (($x28 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x113 (=> $x28 $x63)))
 (let (($x66 (= ?x126 (_ bv0 32))))
 (let (($x43 (= $x28 $x66)))
 (let (($x133 (and (and (and $x43 $x113) $x97) $x130)))
 (let (($x55 (= $x133 true)))
 (let ((?x58 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x58)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x21)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x60 $x23)))
 (let (($x119 (and $x78 $x40)))
 (let (($x30 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x30 $x119)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x53)))))))
 (let (($x67 (and $x14 $x75)))
 (let (($x50 (= $x67 true)))
 (let (($x33 (= $x50 true)))
 (let (($x112 (= $x33 true)))
 (let ((?x116 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x84 ((_ zero_extend 31) ?x116)))
 (let (($x109 (= (_ bv1 32) ?x84)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x108 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x34 (= $x108 true)))
 (let (($x111 (= $x34 true)))
 (let (($x103 (= $x111 true)))
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x7 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x31 (=> $x7 (or false (or false (and true (or $x48 $x69)))))))
 (let (($x89 (= $x31 true)))
 (let (($x117 (= $x89 true)))
 (let (($x76 (= $x117 true)))
 (let ((?x11 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x11)))
 (let (($x101 (= ?x102 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x24 (= $x101 true)))
 (let (($x82 (= $x24 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x118 (= (_ bv0 2) ?x83)))
 (let (($x107 (= $x118 true)))
 (let (($x87 (= $x107 true)))
 (let (($x8 (= ?x102 ?x42)))
 (let (($x106 (= $x8 true)))
 (let (($x122 (= $x106 true)))
 (let (($x72 (and $x122 $x87)))
 (let (($x37 (and $x72 $x82)))
 (let (($x22 (and $x37 $x76)))
 (let (($x5 (and $x22 $x103)))
 (let (($x51 (and $x5 $x68)))
 (let (($x104 (and $x51 $x112)))
 (let (($x44 (and $x104 $x55)))
 (let (($x114 (and $x20 $x44)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x85 (and $x27 $x114)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x64 (and $x77 $x85)))
 (let (($x35 (and $x63 $x64)))
 (let (($x137 (=> $x35 $x74)))
 (not $x137))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x202cc000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203cd107)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x66 (= true false)))
 (let (($x43 (= $x66 true)))
 (let ((?x93 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x30 (concat ?x93 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x23 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x54) (concat ?x23 ?x30))))
 (let (($x119 (= input.spec-%var-opt-0.2 ?x40)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x61 $x119)))
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x123 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x123 (_ bv1 32))))
 (let (($x90 (= $x61 $x128)))
 (let (($x12 (= false false)))
 (let (($x17 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x53 (=> $x17 $x12)))
 (let (($x81 (= ?x123 (_ bv0 32))))
 (let (($x32 (= $x17 $x81)))
 (let (($x33 (and (and (and $x32 $x53) $x90) $x75)))
 (let (($x112 (= $x33 true)))
 (let ((?x91 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x91)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x111 $x5)))
 (let (($x116 (and $x99 $x79)))
 (let (($x124 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x124 $x116)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x117)))))))
 (let (($x109 (and $x34 $x84)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let ((?x9 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x9)))
 (let (($x25 (= ?x73 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x7 (= $x25 true)))
 (let (($x80 (= $x7 true)))
 (let ((?x72 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x59 (= (_ bv0 2) ?x72)))
 (let (($x101 (= $x59 true)))
 (let (($x24 (= $x101 true)))
 (let (($x42 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x118 (=> $x83 (or false (or false (and true (or $x36 $x42)))))))
 (let (($x98 (= $x118 true)))
 (let (($x11 (= $x98 true)))
 (let (($x107 (= $x11 true)))
 (let (($x82 (and $x107 $x24)))
 (let (($x48 (and $x82 $x80)))
 (let (($x125 (and $x48 $x51)))
 (let (($x104 (and $x125 $x112)))
 (let (($x49 (and $x61 $x104)))
 (let (($x41 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x28 (and $x41 $x49)))
 (let (($x115 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x29 (and $x115 $x28)))
 (let (($x126 (and $x12 $x29)))
 (let (($x63 (=> $x126 $x43)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x66 (= true false)))
 (let (($x43 (= $x66 true)))
 (let ((?x93 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x30 (concat ?x93 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x23 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x54) (concat ?x23 ?x30))))
 (let (($x119 (= input.spec-%var-opt-0.2 ?x40)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x61 $x119)))
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x123 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x123 (_ bv1 32))))
 (let (($x90 (= $x61 $x128)))
 (let (($x12 (= false false)))
 (let (($x17 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x53 (=> $x17 $x12)))
 (let (($x81 (= ?x123 (_ bv0 32))))
 (let (($x32 (= $x17 $x81)))
 (let (($x33 (and (and (and $x32 $x53) $x90) $x75)))
 (let (($x112 (= $x33 true)))
 (let ((?x91 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x91)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x111 $x5)))
 (let (($x116 (and $x99 $x79)))
 (let (($x124 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x124 $x116)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x117)))))))
 (let (($x109 (and $x34 $x84)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let ((?x9 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x9)))
 (let (($x25 (= ?x73 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x7 (= $x25 true)))
 (let (($x80 (= $x7 true)))
 (let ((?x72 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x59 (= (_ bv0 2) ?x72)))
 (let (($x101 (= $x59 true)))
 (let (($x24 (= $x101 true)))
 (let (($x42 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x118 (=> $x83 (or false (or false (and true (or $x36 $x42)))))))
 (let (($x98 (= $x118 true)))
 (let (($x11 (= $x98 true)))
 (let (($x107 (= $x11 true)))
 (let (($x82 (and $x107 $x24)))
 (let (($x48 (and $x82 $x80)))
 (let (($x125 (and $x48 $x51)))
 (let (($x104 (and $x125 $x112)))
 (let (($x49 (and $x61 $x104)))
 (let (($x41 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x28 (and $x41 $x49)))
 (let (($x115 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x29 (and $x115 $x28)))
 (let (($x126 (and $x12 $x29)))
 (let (($x63 (=> $x126 $x43)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10100000000000000000000000000100)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01010000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-mem.Lif.then%2%fcallEnd @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x202cc000)
  (define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203cd107)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x90 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x44 (=> $x90 true)))
 (let (($x114 (= $x44 true)))
 (let (($x85 (= $x114 true)))
 (let ((?x104 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x49 (concat ?x104 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x126 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x18 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x18) (concat ?x126 ?x49))))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x63)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x38 (=> $x87 $x113)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x93 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x93 (_ bv1 32))))
 (let (($x119 (= $x87 $x40)))
 (let (($x77 (= false false)))
 (let (($x23 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x78 (=> $x23 $x77)))
 (let (($x47 (= ?x93 (_ bv0 32))))
 (let (($x30 (= $x23 $x47)))
 (let (($x20 (and (and (and $x30 $x78) $x119) $x38)))
 (let (($x129 (= $x20 true)))
 (let (($x50 (= $x90 true)))
 (let (($x15 (= $x50 true)))
 (let (($x58 (= $x15 true)))
 (let (($x88 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= $x88 true)))
 (let (($x31 (= $x108 true)))
 (let (($x89 (= $x31 true)))
 (let ((?x125 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x125)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x109 $x68)))
 (let (($x17 (and $x51 $x52)))
 (let (($x65 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x65 $x17)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x103)))))))
 (let (($x123 (and $x84 $x127)))
 (let (($x81 (= $x123 true)))
 (let (($x32 (= $x81 true)))
 (let (($x12 (= $x32 true)))
 (let ((?x9 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x9)))
 (let (($x25 (= ?x73 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x7 (= $x25 true)))
 (let (($x80 (= $x7 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x101 (= (_ bv0 2) ?x59)))
 (let (($x24 (= $x101 true)))
 (let (($x82 (= $x24 true)))
 (let (($x48 (and $x82 $x80)))
 (let (($x117 (and $x48 $x89)))
 (let (($x53 (and $x117 $x12)))
 (let (($x67 (and $x53 $x89)))
 (let (($x60 (and $x67 $x58)))
 (let (($x21 (and $x60 $x58)))
 (let (($x97 (and $x21 $x129)))
 (let (($x132 (and $x87 $x97)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x120 (and $x11 $x132)))
 (let (($x118 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x130 (and $x118 $x120)))
 (let (($x133 (and $x77 $x130)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x106 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x122 (=> $x106 (or false (or false (and true (or $x56 $x54)))))))
 (let (($x55 (and $x122 $x133)))
 (let (($x64 (=> $x55 $x85)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x90 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x44 (=> $x90 true)))
 (let (($x114 (= $x44 true)))
 (let (($x85 (= $x114 true)))
 (let ((?x104 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x49 (concat ?x104 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x126 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x18 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x18) (concat ?x126 ?x49))))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x63)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x38 (=> $x87 $x113)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x93 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x93 (_ bv1 32))))
 (let (($x119 (= $x87 $x40)))
 (let (($x77 (= false false)))
 (let (($x23 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x78 (=> $x23 $x77)))
 (let (($x47 (= ?x93 (_ bv0 32))))
 (let (($x30 (= $x23 $x47)))
 (let (($x20 (and (and (and $x30 $x78) $x119) $x38)))
 (let (($x129 (= $x20 true)))
 (let (($x50 (= $x90 true)))
 (let (($x15 (= $x50 true)))
 (let (($x58 (= $x15 true)))
 (let (($x88 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= $x88 true)))
 (let (($x31 (= $x108 true)))
 (let (($x89 (= $x31 true)))
 (let ((?x125 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x125)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x109 $x68)))
 (let (($x17 (and $x51 $x52)))
 (let (($x65 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x65 $x17)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x103)))))))
 (let (($x123 (and $x84 $x127)))
 (let (($x81 (= $x123 true)))
 (let (($x32 (= $x81 true)))
 (let (($x12 (= $x32 true)))
 (let ((?x9 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x9)))
 (let (($x25 (= ?x73 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x7 (= $x25 true)))
 (let (($x80 (= $x7 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x101 (= (_ bv0 2) ?x59)))
 (let (($x24 (= $x101 true)))
 (let (($x82 (= $x24 true)))
 (let (($x48 (and $x82 $x80)))
 (let (($x117 (and $x48 $x89)))
 (let (($x53 (and $x117 $x12)))
 (let (($x67 (and $x53 $x89)))
 (let (($x60 (and $x67 $x58)))
 (let (($x21 (and $x60 $x58)))
 (let (($x97 (and $x21 $x129)))
 (let (($x132 (and $x87 $x97)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x120 (and $x11 $x132)))
 (let (($x118 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x130 (and $x118 $x120)))
 (let (($x133 (and $x77 $x130)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x106 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x122 (=> $x106 (or false (or false (and true (or $x56 $x54)))))))
 (let (($x55 (and $x122 $x133)))
 (let (($x64 (=> $x55 $x85)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x128 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x110 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x96 (=> $x110 $x128)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x131 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x131 (_ bv1 32))))
 (let (($x62 (= $x110 $x29)))
 (let (($x121 (= false false)))
 (let (($x74 (= (_ bv1 32) (_ bv0 32))))
 (let (($x16 (=> $x74 $x121)))
 (let (($x75 (= ?x131 (_ bv0 32))))
 (let (($x137 (= $x74 $x75)))
 (let (($x134 (and (and (and $x137 $x16) $x62) $x96)))
 (let (($x94 (= true true)))
 (let (($x135 (and $x94 $x134)))
 (let (($x136 (= $x135 true)))
 (let ((?x49 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x66 (concat ?x49 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x38 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x54) (concat ?x38 ?x66))))
 (let (($x132 (= input.spec-%var-opt-0.2 ?x97)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x24 $x132)))
 (let (($x126 (= $x24 $x29)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x28 (=> $x40 $x121)))
 (let (($x43 (= $x40 $x75)))
 (let (($x55 (and (and (and $x43 $x28) $x126) $x120)))
 (let (($x44 (= $x55 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x77 (= (_ bv0 2) ?x30)))
 (let (($x78 (= $x77 true)))
 (let (($x69 (= $x78 true)))
 (let (($x127 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x21 (and $x127 $x128)))
 (let (($x107 (= $x21 true)))
 (let (($x23 (= $x107 true)))
 (let (($x14 (= $x23 true)))
 (let (($x90 (= $x128 true)))
 (let (($x50 (= $x90 true)))
 (let (($x15 (= $x50 true)))
 (let (($x123 (= $x127 true)))
 (let (($x81 (= $x123 true)))
 (let (($x32 (= $x81 true)))
 (let ((?x79 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x79)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x103 $x99)))
 (let (($x92 (and $x91 $x84)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x100 $x92)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x117)))))))
 (let (($x109 (and $x111 $x65)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let ((?x37 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x37)))
 (let (($x73 (= ?x9 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x25 (= $x73 true)))
 (let (($x7 (= $x25 true)))
 (let (($x125 (and $x7 $x51)))
 (let (($x12 (and $x125 $x32)))
 (let (($x53 (and $x12 $x32)))
 (let (($x58 (and $x53 $x15)))
 (let (($x60 (and $x58 $x15)))
 (let (($x93 (and $x60 $x14)))
 (let (($x87 (and $x93 $x69)))
 (let (($x114 (and $x87 $x44)))
 (let (($x85 (and $x24 $x114)))
 (let (($x59 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x64 (and $x59 $x85)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x35 (and $x11 $x64)))
 (let (($x19 (and $x121 $x35)))
 (let (($x39 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x26 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x118 (=> $x26 (or false (or false (and true (or $x36 $x39)))))))
 (let (($x22 (and $x118 $x19)))
 (let (($x139 (=> $x22 $x136)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x128 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x110 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x96 (=> $x110 $x128)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x131 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x131 (_ bv1 32))))
 (let (($x62 (= $x110 $x29)))
 (let (($x121 (= false false)))
 (let (($x74 (= (_ bv1 32) (_ bv0 32))))
 (let (($x16 (=> $x74 $x121)))
 (let (($x75 (= ?x131 (_ bv0 32))))
 (let (($x137 (= $x74 $x75)))
 (let (($x134 (and (and (and $x137 $x16) $x62) $x96)))
 (let (($x94 (= true true)))
 (let (($x135 (and $x94 $x134)))
 (let (($x136 (= $x135 true)))
 (let ((?x49 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x66 (concat ?x49 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x38 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x54) (concat ?x38 ?x66))))
 (let (($x132 (= input.spec-%var-opt-0.2 ?x97)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x24 $x132)))
 (let (($x126 (= $x24 $x29)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x28 (=> $x40 $x121)))
 (let (($x43 (= $x40 $x75)))
 (let (($x55 (and (and (and $x43 $x28) $x126) $x120)))
 (let (($x44 (= $x55 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x77 (= (_ bv0 2) ?x30)))
 (let (($x78 (= $x77 true)))
 (let (($x69 (= $x78 true)))
 (let (($x127 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x21 (and $x127 $x128)))
 (let (($x107 (= $x21 true)))
 (let (($x23 (= $x107 true)))
 (let (($x14 (= $x23 true)))
 (let (($x90 (= $x128 true)))
 (let (($x50 (= $x90 true)))
 (let (($x15 (= $x50 true)))
 (let (($x123 (= $x127 true)))
 (let (($x81 (= $x123 true)))
 (let (($x32 (= $x81 true)))
 (let ((?x79 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x79)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x103 $x99)))
 (let (($x92 (and $x91 $x84)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x100 $x92)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x117)))))))
 (let (($x109 (and $x111 $x65)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let ((?x37 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x37)))
 (let (($x73 (= ?x9 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x25 (= $x73 true)))
 (let (($x7 (= $x25 true)))
 (let (($x125 (and $x7 $x51)))
 (let (($x12 (and $x125 $x32)))
 (let (($x53 (and $x12 $x32)))
 (let (($x58 (and $x53 $x15)))
 (let (($x60 (and $x58 $x15)))
 (let (($x93 (and $x60 $x14)))
 (let (($x87 (and $x93 $x69)))
 (let (($x114 (and $x87 $x44)))
 (let (($x85 (and $x24 $x114)))
 (let (($x59 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x64 (and $x59 $x85)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x35 (and $x11 $x64)))
 (let (($x19 (and $x121 $x35)))
 (let (($x39 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x26 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x118 (=> $x26 (or false (or false (and true (or $x36 $x39)))))))
 (let (($x22 (and $x118 $x19)))
 (let (($x139 (=> $x22 $x136)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x49 (= $x71 false)))
 (let (($x104 (= $x49 true)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x119)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x43)))
 (let (($x130 (= input.spec-%var-opt-0.2 ?x28)))
 (let (($x77 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x24 (=> $x77 $x130)))
 (let ((?x14 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x14 (_ bv1 32))))
 (let (($x69 (= $x77 $x78)))
 (let (($x6 (= false false)))
 (let (($x23 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x23 $x6)))
 (let (($x93 (= ?x14 (_ bv0 32))))
 (let (($x47 (= $x23 $x93)))
 (let (($x133 (and (and (and $x47 $x30) $x69) $x24)))
 (let (($x112 (= $x133 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x90 (concat ?x67 (concat ?x81 ?x127)))))
 (let (($x15 (= ?x50 input.dst.llvm-%opt)))
 (let (($x58 (= $x15 true)))
 (let (($x60 (= $x58 true)))
 (let ((?x84 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x84)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x5 $x91)))
 (let (($x65 (and $x79 $x92)))
 (let (($x124 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x124 $x65)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x34)))))))
 (let (($x46 (and $x103 $x109)))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let (($x125 (= $x51 true)))
 (let (($x21 (and $x125 $x60)))
 (let (($x129 (and $x21 $x112)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x63 (and $x7 $x129)))
 (let (($x73 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x113 (and $x73 $x63)))
 (let (($x38 (and $x6 $x113)))
 (let (($x118 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x59 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x82 (=> $x59 (or false (or false (and true (or $x41 $x118)))))))
 (let (($x106 (not $x71)))
 (let (($x18 (=> (and $x106 $x59) (or false (or false (and true (or $x41 $x118)))))))
 (let (($x33 (and $x18 $x38)))
 (let (($x66 (=> $x33 $x104)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x49 (= $x71 false)))
 (let (($x104 (= $x49 true)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x119)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x43)))
 (let (($x130 (= input.spec-%var-opt-0.2 ?x28)))
 (let (($x77 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x24 (=> $x77 $x130)))
 (let ((?x14 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x14 (_ bv1 32))))
 (let (($x69 (= $x77 $x78)))
 (let (($x6 (= false false)))
 (let (($x23 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x23 $x6)))
 (let (($x93 (= ?x14 (_ bv0 32))))
 (let (($x47 (= $x23 $x93)))
 (let (($x133 (and (and (and $x47 $x30) $x69) $x24)))
 (let (($x112 (= $x133 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x90 (concat ?x67 (concat ?x81 ?x127)))))
 (let (($x15 (= ?x50 input.dst.llvm-%opt)))
 (let (($x58 (= $x15 true)))
 (let (($x60 (= $x58 true)))
 (let ((?x84 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x84)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x5 $x91)))
 (let (($x65 (and $x79 $x92)))
 (let (($x124 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x124 $x65)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x34)))))))
 (let (($x46 (and $x103 $x109)))
 (let (($x68 (= $x46 true)))
 (let (($x51 (= $x68 true)))
 (let (($x125 (= $x51 true)))
 (let (($x21 (and $x125 $x60)))
 (let (($x129 (and $x21 $x112)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x63 (and $x7 $x129)))
 (let (($x73 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x113 (and $x73 $x63)))
 (let (($x38 (and $x6 $x113)))
 (let (($x118 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x59 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x82 (=> $x59 (or false (or false (and true (or $x41 $x118)))))))
 (let (($x106 (not $x71)))
 (let (($x18 (=> (and $x106 $x59) (or false (or false (and true (or $x41 $x118)))))))
 (let (($x33 (and $x18 $x38)))
 (let (($x66 (=> $x33 $x104)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x54 (not $x115)))
 (let (($x131 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x44 (or $x131 $x54)))
 (let (($x114 (= $x44 true)))
 (let (($x85 (= $x114 true)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x112)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x113)))
 (let (($x49 (= input.spec-%var-opt-0.2 ?x33)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x104 (=> $x119 $x49)))
 (let ((?x75 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x75 (_ bv1 32))))
 (let (($x28 (= $x119 $x43)))
 (let (($x20 (and (and (= $x131 (= ?x75 (_ bv0 32))) (=> $x131 (= false false))) $x28)))
 (let (($x27 (and $x20 $x104)))
 (let (($x88 (= $x27 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x30 (concat ?x93 (concat ?x21 ?x58)))))
 (let (($x77 (= ?x29 input.dst.llvm-%opt)))
 (let (($x78 (= $x77 true)))
 (let (($x69 (= $x78 true)))
 (let (($x67 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x123 (= $x67 true)))
 (let (($x81 (= $x123 true)))
 (let (($x127 (= $x81 true)))
 (let ((?x109 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x109)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x79 $x92)))
 (let (($x68 (and $x65 $x46)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x76 $x68)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x10)))))))
 (let (($x125 (and $x91 $x51)))
 (let (($x52 (= $x125 true)))
 (let (($x128 (= $x52 true)))
 (let (($x90 (= $x128 true)))
 (let (($x32 (and $x90 $x127)))
 (let (($x61 (and $x32 $x127)))
 (let (($x126 (and $x61 $x69)))
 (let (($x17 (and $x126 $x88)))
 (let (($x89 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x97 (and $x89 $x17)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x132 (and $x7 $x97)))
 (let (($x83 (= false false)))
 (let (($x120 (and $x83 $x132)))
 (let (($x98 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x37 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x9 (=> $x37 (or false (or false (and true (or $x105 $x98)))))))
 (let (($x106 (=> (and $x54 $x37) (or false (or false (and true (or $x105 $x98)))))))
 (let (($x55 (and $x106 $x120)))
 (let (($x64 (=> $x55 $x85)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x54 (not $x115)))
 (let (($x131 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x44 (or $x131 $x54)))
 (let (($x114 (= $x44 true)))
 (let (($x85 (= $x114 true)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x112)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x113)))
 (let (($x49 (= input.spec-%var-opt-0.2 ?x33)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x104 (=> $x119 $x49)))
 (let ((?x75 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x75 (_ bv1 32))))
 (let (($x28 (= $x119 $x43)))
 (let (($x20 (and (and (= $x131 (= ?x75 (_ bv0 32))) (=> $x131 (= false false))) $x28)))
 (let (($x27 (and $x20 $x104)))
 (let (($x88 (= $x27 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x30 (concat ?x93 (concat ?x21 ?x58)))))
 (let (($x77 (= ?x29 input.dst.llvm-%opt)))
 (let (($x78 (= $x77 true)))
 (let (($x69 (= $x78 true)))
 (let (($x67 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x123 (= $x67 true)))
 (let (($x81 (= $x123 true)))
 (let (($x127 (= $x81 true)))
 (let ((?x109 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x109)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x79 $x92)))
 (let (($x68 (and $x65 $x46)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x76 $x68)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x10)))))))
 (let (($x125 (and $x91 $x51)))
 (let (($x52 (= $x125 true)))
 (let (($x128 (= $x52 true)))
 (let (($x90 (= $x128 true)))
 (let (($x32 (and $x90 $x127)))
 (let (($x61 (and $x32 $x127)))
 (let (($x126 (and $x61 $x69)))
 (let (($x17 (and $x126 $x88)))
 (let (($x89 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x97 (and $x89 $x17)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x132 (and $x7 $x97)))
 (let (($x83 (= false false)))
 (let (($x120 (and $x83 $x132)))
 (let (($x98 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x37 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x9 (=> $x37 (or false (or false (and true (or $x105 $x98)))))))
 (let (($x106 (=> (and $x54 $x37) (or false (or false (and true (or $x105 $x98)))))))
 (let (($x55 (and $x106 $x120)))
 (let (($x64 (=> $x55 $x85)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x54 (not $x115)))
 (let (($x97 (or $x115 $x54)))
 (let (($x132 (= $x97 true)))
 (let (($x120 (= $x132 true)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x43)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x38)))
 (let (($x24 (= input.spec-%var-opt-0.2 ?x63)))
 (let (($x101 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x133 (=> $x101 $x24)))
 (let ((?x126 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x126 (_ bv1 32))))
 (let (($x83 (= $x101 $x40)))
 (let (($x37 (= false false)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x69 $x37)))
 (let (($x121 (= ?x126 (_ bv0 32))))
 (let (($x131 (= $x69 $x121)))
 (let (($x113 (and (and (and $x131 $x75) $x83) $x133)))
 (let (($x33 (= $x113 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x21 (concat ?x14 (concat ?x50 ?x32)))))
 (let (($x107 (= ?x58 input.dst.llvm-%opt)))
 (let (($x47 (= $x107 true)))
 (let (($x29 (= $x47 true)))
 (let ((?x125 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x125)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x109 $x68)))
 (let (($x128 (and $x51 $x52)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x10 $x128)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x91)))))))
 (let (($x12 (and $x65 $x90)))
 (let (($x53 (= $x12 true)))
 (let (($x67 (= $x53 true)))
 (let (($x123 (= $x67 true)))
 (let (($x77 (and $x123 $x29)))
 (let (($x49 (and $x77 $x33)))
 (let (($x99 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x104 (and $x99 $x49)))
 (let (($x34 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x27 (and $x34 $x104)))
 (let (($x88 (and $x37 $x27)))
 (let (($x82 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x7 (=> $x25 (or false (or false (and true (or $x72 $x82)))))))
 (let (($x8 (=> (and $x54 $x25) (or false (or false (and true (or $x72 $x82)))))))
 (let (($x17 (and $x8 $x88)))
 (let (($x55 (=> $x17 $x120)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x54 (not $x115)))
 (let (($x97 (or $x115 $x54)))
 (let (($x132 (= $x97 true)))
 (let (($x120 (= $x132 true)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x43)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x38)))
 (let (($x24 (= input.spec-%var-opt-0.2 ?x63)))
 (let (($x101 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x133 (=> $x101 $x24)))
 (let ((?x126 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x126 (_ bv1 32))))
 (let (($x83 (= $x101 $x40)))
 (let (($x37 (= false false)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x69 $x37)))
 (let (($x121 (= ?x126 (_ bv0 32))))
 (let (($x131 (= $x69 $x121)))
 (let (($x113 (and (and (and $x131 $x75) $x83) $x133)))
 (let (($x33 (= $x113 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x21 (concat ?x14 (concat ?x50 ?x32)))))
 (let (($x107 (= ?x58 input.dst.llvm-%opt)))
 (let (($x47 (= $x107 true)))
 (let (($x29 (= $x47 true)))
 (let ((?x125 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x125)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x109 $x68)))
 (let (($x128 (and $x51 $x52)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x10 $x128)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x91)))))))
 (let (($x12 (and $x65 $x90)))
 (let (($x53 (= $x12 true)))
 (let (($x67 (= $x53 true)))
 (let (($x123 (= $x67 true)))
 (let (($x77 (and $x123 $x29)))
 (let (($x49 (and $x77 $x33)))
 (let (($x99 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x104 (and $x99 $x49)))
 (let (($x34 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x27 (and $x34 $x104)))
 (let (($x88 (and $x37 $x27)))
 (let (($x82 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x7 (=> $x25 (or false (or false (and true (or $x72 $x82)))))))
 (let (($x8 (=> (and $x54 $x25) (or false (or false (and true (or $x72 $x82)))))))
 (let (($x17 (and $x8 $x88)))
 (let (($x55 (=> $x17 $x120)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x93 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x93)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x61 $x32)))
 (let (($x107 (and $x6 $x58)))
 (let (($x128 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x128 $x107)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x123)))))))
 (let (($x57 (and $x14 $x47)))
 (let (($x110 (= $x57 true)))
 (let (($x62 (= $x110 true)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x39)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x127)))
 (let (($x64 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x5 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x35 (=> $x5 $x64)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x104 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x104 (_ bv1 32))))
 (let (($x132 (= $x5 $x97)))
 (let (($x25 (= false false)))
 (let (($x49 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x49 $x25)))
 (let (($x27 (= ?x104 (_ bv0 32))))
 (let (($x88 (= $x49 $x27)))
 (let (($x100 (and (and (and $x88 $x17) $x132) $x35)))
 (let (($x15 (= $x100 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x40 (concat ?x75 (concat ?x126 ?x78)))))
 (let (($x24 (= ?x83 input.dst.llvm-%opt)))
 (let (($x133 (= $x24 true)))
 (let (($x113 (= $x133 true)))
 (let (($x112 (= input.dst.llvm-%opt ?x83)))
 (let (($x65 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x129 (and $x65 $x112)))
 (let (($x66 (and (and (and $x14 true) $x47) $x129)))
 (let (($x68 (= true $x65)))
 (let (($x54 (not $x115)))
 (let (($x51 (=> $x54 $x68)))
 (let (($x119 (and $x51 $x66)))
 (let (($x87 (= $x119 true)))
 (let (($x43 (= $x87 true)))
 (let (($x38 (= $x43 true)))
 (let (($x111 (= $x65 true)))
 (let (($x10 (= $x111 true)))
 (let (($x109 (= $x10 true)))
 (let (($x91 (= $x54 true)))
 (let (($x117 (= $x91 true)))
 (let (($x76 (= $x117 true)))
 (let (($x46 (and $x76 $x109)))
 (let (($x63 (and $x46 $x38)))
 (let (($x33 (and $x63 $x113)))
 (let (($x19 (and $x33 $x15)))
 (let (($x22 (and $x5 $x19)))
 (let (($x92 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x94 (and $x92 $x22)))
 (let (($x103 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x74 (and $x103 $x94)))
 (let (($x137 (and $x25 $x74)))
 (let (($x106 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x89 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x34 (=> $x89 (or false (or false (and true (or $x9 $x106)))))))
 (let (($x118 (=> (and $x54 $x89) (or false (or false (and true (or $x9 $x106)))))))
 (let (($x16 (and $x118 $x137)))
 (let (($x138 (=> $x16 $x62)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x93 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x93)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x61 $x32)))
 (let (($x107 (and $x6 $x58)))
 (let (($x128 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x128 $x107)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x123)))))))
 (let (($x57 (and $x14 $x47)))
 (let (($x110 (= $x57 true)))
 (let (($x62 (= $x110 true)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x39)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x127)))
 (let (($x64 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x5 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x35 (=> $x5 $x64)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x104 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x104 (_ bv1 32))))
 (let (($x132 (= $x5 $x97)))
 (let (($x25 (= false false)))
 (let (($x49 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x49 $x25)))
 (let (($x27 (= ?x104 (_ bv0 32))))
 (let (($x88 (= $x49 $x27)))
 (let (($x100 (and (and (and $x88 $x17) $x132) $x35)))
 (let (($x15 (= $x100 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x40 (concat ?x75 (concat ?x126 ?x78)))))
 (let (($x24 (= ?x83 input.dst.llvm-%opt)))
 (let (($x133 (= $x24 true)))
 (let (($x113 (= $x133 true)))
 (let (($x112 (= input.dst.llvm-%opt ?x83)))
 (let (($x65 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x129 (and $x65 $x112)))
 (let (($x66 (and (and (and $x14 true) $x47) $x129)))
 (let (($x68 (= true $x65)))
 (let (($x54 (not $x115)))
 (let (($x51 (=> $x54 $x68)))
 (let (($x119 (and $x51 $x66)))
 (let (($x87 (= $x119 true)))
 (let (($x43 (= $x87 true)))
 (let (($x38 (= $x43 true)))
 (let (($x111 (= $x65 true)))
 (let (($x10 (= $x111 true)))
 (let (($x109 (= $x10 true)))
 (let (($x91 (= $x54 true)))
 (let (($x117 (= $x91 true)))
 (let (($x76 (= $x117 true)))
 (let (($x46 (and $x76 $x109)))
 (let (($x63 (and $x46 $x38)))
 (let (($x33 (and $x63 $x113)))
 (let (($x19 (and $x33 $x15)))
 (let (($x22 (and $x5 $x19)))
 (let (($x92 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x94 (and $x92 $x22)))
 (let (($x103 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x74 (and $x103 $x94)))
 (let (($x137 (and $x25 $x74)))
 (let (($x106 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x89 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x34 (=> $x89 (or false (or false (and true (or $x9 $x106)))))))
 (let (($x118 (=> (and $x54 $x89) (or false (or false (and true (or $x9 $x106)))))))
 (let (($x16 (and $x118 $x137)))
 (let (($x138 (=> $x16 $x62)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x120)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x85)))
 (let ((?x42 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x42)))
 (let (($x125 (= ?x59 ?x35)))
 (let (($x77 (= $x125 true)))
 (let (($x100 (= input.spec-%var-opt-0.2 ?x35)))
 (let (($x84 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x15 (=> $x84 $x100)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x5 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x5 (_ bv1 32))))
 (let (($x56 (= $x84 $x114)))
 (let (($x89 (= false false)))
 (let (($x71 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x36 (=> $x71 $x89)))
 (let (($x97 (= ?x5 (_ bv0 32))))
 (let (($x132 (= $x71 $x97)))
 (let (($x94 (and (and (and $x132 $x36) $x56) $x15)))
 (let (($x74 (= $x94 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x119 (concat ?x112 (concat ?x78 ?x69)))))
 (let (($x27 (= ?x87 input.dst.llvm-%opt)))
 (let (($x88 (= $x27 true)))
 (let (($x25 (= $x88 true)))
 (let (($x43 (= input.dst.llvm-%opt ?x87)))
 (let (($x10 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x38 (and $x10 $x43)))
 (let ((?x29 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x29)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x58 $x47)))
 (let (($x40 (and $x20 $x101)))
 (let (($x60 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x60 $x40)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x52)))))))
 (let (($x133 (and (and (and $x93 true) $x131) $x38)))
 (let (($x53 (= true $x10)))
 (let (($x54 (not $x115)))
 (let (($x67 (=> $x54 $x53)))
 (let (($x113 (and $x67 $x133)))
 (let (($x33 (= $x113 true)))
 (let (($x124 (= $x33 true)))
 (let (($x49 (= $x124 true)))
 (let (($x51 (= $x54 true)))
 (let (($x90 (= $x51 true)))
 (let (($x12 (= $x90 true)))
 (let (($x109 (= $x10 true)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x23 (and $x68 $x12)))
 (let (($x104 (and $x23 $x49)))
 (let (($x17 (and $x104 $x25)))
 (let (($x137 (and $x17 $x74)))
 (let (($x16 (and $x84 $x137)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x57 (and $x76 $x16)))
 (let (($x91 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x110 (and $x91 $x57)))
 (let (($x62 (and $x89 $x110)))
 (let (($x8 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x99 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x103 (=> $x99 (or false (or false (and true (or $x7 $x8)))))))
 (let (($x11 (=> (and $x54 $x99) (or false (or false (and true (or $x7 $x8)))))))
 (let (($x138 (and $x11 $x62)))
 (let (($x134 (=> $x138 $x77)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x120)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x85)))
 (let ((?x42 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x42)))
 (let (($x125 (= ?x59 ?x35)))
 (let (($x77 (= $x125 true)))
 (let (($x100 (= input.spec-%var-opt-0.2 ?x35)))
 (let (($x84 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x15 (=> $x84 $x100)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x5 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x5 (_ bv1 32))))
 (let (($x56 (= $x84 $x114)))
 (let (($x89 (= false false)))
 (let (($x71 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x36 (=> $x71 $x89)))
 (let (($x97 (= ?x5 (_ bv0 32))))
 (let (($x132 (= $x71 $x97)))
 (let (($x94 (and (and (and $x132 $x36) $x56) $x15)))
 (let (($x74 (= $x94 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x119 (concat ?x112 (concat ?x78 ?x69)))))
 (let (($x27 (= ?x87 input.dst.llvm-%opt)))
 (let (($x88 (= $x27 true)))
 (let (($x25 (= $x88 true)))
 (let (($x43 (= input.dst.llvm-%opt ?x87)))
 (let (($x10 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x38 (and $x10 $x43)))
 (let ((?x29 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x29)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x58 $x47)))
 (let (($x40 (and $x20 $x101)))
 (let (($x60 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x60 $x40)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x52)))))))
 (let (($x133 (and (and (and $x93 true) $x131) $x38)))
 (let (($x53 (= true $x10)))
 (let (($x54 (not $x115)))
 (let (($x67 (=> $x54 $x53)))
 (let (($x113 (and $x67 $x133)))
 (let (($x33 (= $x113 true)))
 (let (($x124 (= $x33 true)))
 (let (($x49 (= $x124 true)))
 (let (($x51 (= $x54 true)))
 (let (($x90 (= $x51 true)))
 (let (($x12 (= $x90 true)))
 (let (($x109 (= $x10 true)))
 (let (($x46 (= $x109 true)))
 (let (($x68 (= $x46 true)))
 (let (($x23 (and $x68 $x12)))
 (let (($x104 (and $x23 $x49)))
 (let (($x17 (and $x104 $x25)))
 (let (($x137 (and $x17 $x74)))
 (let (($x16 (and $x84 $x137)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x57 (and $x76 $x16)))
 (let (($x91 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x110 (and $x91 $x57)))
 (let (($x62 (and $x89 $x110)))
 (let (($x8 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x99 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x103 (=> $x99 (or false (or false (and true (or $x7 $x8)))))))
 (let (($x11 (=> (and $x54 $x99) (or false (or false (and true (or $x7 $x8)))))))
 (let (($x138 (and $x11 $x62)))
 (let (($x134 (=> $x138 $x77)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x54 (not $x115)))
 (let ((?x135 (ite $x54 (_ bv1 1) (_ bv0 1))))
 (let ((?x98 ((_ zero_extend 31) ?x135)))
 (let (($x122 (= (_ bv1 32) ?x98)))
 (let (($x123 (= $x122 true)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x35)))
 (let (($x94 (= input.spec-%var-opt-0.2 ?x15)))
 (let (($x46 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x74 (=> $x46 $x94)))
 (let ((?x84 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x84 (_ bv1 32))))
 (let (($x39 (= $x46 $x64)))
 (let (($x99 (= false false)))
 (let (($x19 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x22 (=> $x19 $x99)))
 (let (($x114 (= ?x84 (_ bv0 32))))
 (let (($x56 (= $x19 $x114)))
 (let (($x57 (and (and (and $x56 $x22) $x39) $x74)))
 (let (($x110 (= $x57 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x113 (concat ?x43 (concat ?x69 ?x126)))))
 (let (($x97 (= ?x33 input.dst.llvm-%opt)))
 (let (($x132 (= $x97 true)))
 (let (($x89 (= $x132 true)))
 (let (($x124 (= input.dst.llvm-%opt ?x33)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x49 (and $x90 $x124)))
 (let ((?x37 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x37)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x101 $x131)))
 (let (($x119 (and $x24 $x66)))
 (let (($x61 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x61 $x119)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x81)))))))
 (let (($x88 (and (and (and $x29 true) $x130) $x49)))
 (let (($x14 (= true $x90)))
 (let (($x28 (=> $x54 $x14)))
 (let (($x25 (and $x28 $x88)))
 (let (($x17 (= $x25 true)))
 (let (($x79 (= $x17 true)))
 (let (($x71 (= $x79 true)))
 (let (($x67 (= $x54 true)))
 (let (($x21 (= $x67 true)))
 (let (($x30 (= $x21 true)))
 (let (($x12 (= $x90 true)))
 (let (($x23 (= $x12 true)))
 (let (($x53 (= $x23 true)))
 (let (($x6 (and $x53 $x30)))
 (let (($x5 (and $x6 $x71)))
 (let (($x36 (and $x5 $x89)))
 (let (($x62 (and $x36 $x110)))
 (let (($x138 (and $x46 $x62)))
 (let (($x10 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x96 (and $x10 $x138)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x42 (and $x65 $x96)))
 (let (($x59 (and $x99 $x42)))
 (let (($x118 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x92 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x91 (=> $x92 (or false (or false (and true (or $x34 $x118)))))))
 (let (($x18 (=> (and $x54 $x92) (or false (or false (and true (or $x34 $x118)))))))
 (let (($x125 (and $x18 $x59)))
 (let (($x75 (=> $x125 $x123)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x54 (not $x115)))
 (let ((?x135 (ite $x54 (_ bv1 1) (_ bv0 1))))
 (let ((?x98 ((_ zero_extend 31) ?x135)))
 (let (($x122 (= (_ bv1 32) ?x98)))
 (let (($x123 (= $x122 true)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x35)))
 (let (($x94 (= input.spec-%var-opt-0.2 ?x15)))
 (let (($x46 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x74 (=> $x46 $x94)))
 (let ((?x84 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x84 (_ bv1 32))))
 (let (($x39 (= $x46 $x64)))
 (let (($x99 (= false false)))
 (let (($x19 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x22 (=> $x19 $x99)))
 (let (($x114 (= ?x84 (_ bv0 32))))
 (let (($x56 (= $x19 $x114)))
 (let (($x57 (and (and (and $x56 $x22) $x39) $x74)))
 (let (($x110 (= $x57 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x113 (concat ?x43 (concat ?x69 ?x126)))))
 (let (($x97 (= ?x33 input.dst.llvm-%opt)))
 (let (($x132 (= $x97 true)))
 (let (($x89 (= $x132 true)))
 (let (($x124 (= input.dst.llvm-%opt ?x33)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x49 (and $x90 $x124)))
 (let ((?x37 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x37)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x101 $x131)))
 (let (($x119 (and $x24 $x66)))
 (let (($x61 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x61 $x119)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x81)))))))
 (let (($x88 (and (and (and $x29 true) $x130) $x49)))
 (let (($x14 (= true $x90)))
 (let (($x28 (=> $x54 $x14)))
 (let (($x25 (and $x28 $x88)))
 (let (($x17 (= $x25 true)))
 (let (($x79 (= $x17 true)))
 (let (($x71 (= $x79 true)))
 (let (($x67 (= $x54 true)))
 (let (($x21 (= $x67 true)))
 (let (($x30 (= $x21 true)))
 (let (($x12 (= $x90 true)))
 (let (($x23 (= $x12 true)))
 (let (($x53 (= $x23 true)))
 (let (($x6 (and $x53 $x30)))
 (let (($x5 (and $x6 $x71)))
 (let (($x36 (and $x5 $x89)))
 (let (($x62 (and $x36 $x110)))
 (let (($x138 (and $x46 $x62)))
 (let (($x10 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x96 (and $x10 $x138)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x42 (and $x65 $x96)))
 (let (($x59 (and $x99 $x42)))
 (let (($x118 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x92 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x91 (=> $x92 (or false (or false (and true (or $x34 $x118)))))))
 (let (($x18 (=> (and $x54 $x92) (or false (or false (and true (or $x34 $x118)))))))
 (let (($x125 (and $x18 $x59)))
 (let (($x75 (=> $x125 $x123)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x75 (= (_ bv0 2) ?x123)))
 (let (($x136 (= $x75 true)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x127)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x15)))
 (let (($x57 (= input.spec-%var-opt-0.2 ?x74)))
 (let (($x23 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x110 (=> $x23 $x57)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x46 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x46 (_ bv1 32))))
 (let (($x120 (= $x23 $x100)))
 (let (($x92 (= false false)))
 (let (($x137 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x16 (=> $x137 $x92)))
 (let (($x64 (= ?x46 (_ bv0 32))))
 (let (($x39 (= $x137 $x64)))
 (let (($x96 (and (and (and $x39 $x16) $x120) $x110)))
 (let (($x42 (= $x96 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x25 (concat ?x124 (concat ?x126 ?x78)))))
 (let (($x114 (= ?x17 input.dst.llvm-%opt)))
 (let (($x56 (= $x114 true)))
 (let (($x99 (= $x56 true)))
 (let (($x79 (= input.dst.llvm-%opt ?x17)))
 (let (($x21 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x71 (and $x21 $x79)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x83)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x66 $x130)))
 (let (($x113 (and $x27 $x133)))
 (let (($x58 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x58 $x113)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x128)))))))
 (let (($x132 (and (and (and $x37 true) $x129) $x71)))
 (let (($x93 (= true $x21)))
 (let (($x54 (not $x115)))
 (let (($x63 (=> $x54 $x93)))
 (let (($x89 (and $x63 $x132)))
 (let (($x36 (= $x89 true)))
 (let (($x109 (= $x36 true)))
 (let (($x19 (= $x109 true)))
 (let (($x28 (= $x54 true)))
 (let (($x50 (= $x28 true)))
 (let (($x32 (= $x50 true)))
 (let (($x30 (= $x21 true)))
 (let (($x6 (= $x30 true)))
 (let (($x14 (= $x6 true)))
 (let (($x20 (and $x14 $x32)))
 (let (($x84 (and $x20 $x19)))
 (let (($x22 (and $x84 $x99)))
 (let (($x59 (and $x22 $x42)))
 (let (($x125 (and $x23 $x59)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x77 (and $x90 $x125)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x134 (and $x68 $x77)))
 (let (($x135 (and $x92 $x134)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x76 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x65 (=> $x76 (or false (or false (and true (or $x103 $x11)))))))
 (let (($x73 (=> (and $x54 $x76) (or false (or false (and true (or $x103 $x11)))))))
 (let (($x98 (and $x73 $x135)))
 (let (($x82 (=> $x98 $x136)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x75 (= (_ bv0 2) ?x123)))
 (let (($x136 (= $x75 true)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x127)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x15)))
 (let (($x57 (= input.spec-%var-opt-0.2 ?x74)))
 (let (($x23 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x110 (=> $x23 $x57)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x46 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x46 (_ bv1 32))))
 (let (($x120 (= $x23 $x100)))
 (let (($x92 (= false false)))
 (let (($x137 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x16 (=> $x137 $x92)))
 (let (($x64 (= ?x46 (_ bv0 32))))
 (let (($x39 (= $x137 $x64)))
 (let (($x96 (and (and (and $x39 $x16) $x120) $x110)))
 (let (($x42 (= $x96 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x25 (concat ?x124 (concat ?x126 ?x78)))))
 (let (($x114 (= ?x17 input.dst.llvm-%opt)))
 (let (($x56 (= $x114 true)))
 (let (($x99 (= $x56 true)))
 (let (($x79 (= input.dst.llvm-%opt ?x17)))
 (let (($x21 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x71 (and $x21 $x79)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x83)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x66 $x130)))
 (let (($x113 (and $x27 $x133)))
 (let (($x58 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x58 $x113)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x128)))))))
 (let (($x132 (and (and (and $x37 true) $x129) $x71)))
 (let (($x93 (= true $x21)))
 (let (($x54 (not $x115)))
 (let (($x63 (=> $x54 $x93)))
 (let (($x89 (and $x63 $x132)))
 (let (($x36 (= $x89 true)))
 (let (($x109 (= $x36 true)))
 (let (($x19 (= $x109 true)))
 (let (($x28 (= $x54 true)))
 (let (($x50 (= $x28 true)))
 (let (($x32 (= $x50 true)))
 (let (($x30 (= $x21 true)))
 (let (($x6 (= $x30 true)))
 (let (($x14 (= $x6 true)))
 (let (($x20 (and $x14 $x32)))
 (let (($x84 (and $x20 $x19)))
 (let (($x22 (and $x84 $x99)))
 (let (($x59 (and $x22 $x42)))
 (let (($x125 (and $x23 $x59)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x77 (and $x90 $x125)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x134 (and $x68 $x77)))
 (let (($x135 (and $x92 $x134)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x76 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x65 (=> $x76 (or false (or false (and true (or $x103 $x11)))))))
 (let (($x73 (=> (and $x54 $x76) (or false (or false (and true (or $x103 $x11)))))))
 (let (($x98 (and $x73 $x135)))
 (let (($x82 (=> $x98 $x136)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x18 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x10 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x10 (or false (or false (and true (or $x91 $x18)))))))
 (let (($x82 (= $x68 true)))
 (let (($x105 (= $x82 true)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x85)))
 (let ((?x110 (concat (select input.dst.llvm-mem ?x108) ?x74)))
 (let (($x96 (= input.spec-%var-opt-0.2 ?x110)))
 (let (($x6 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x42 (=> $x6 $x96)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x23 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x94 (bvuge ?x23 (_ bv1 32))))
 (let (($x116 (= $x6 $x94)))
 (let (($x76 (= false false)))
 (let (($x62 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x138 (=> $x62 $x76)))
 (let (($x100 (= ?x23 (_ bv0 32))))
 (let (($x120 (= $x62 $x100)))
 (let (($x77 (and (and (and $x120 $x138) $x116) $x42)))
 (let (($x134 (= $x77 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x89 (concat ?x79 (concat ?x78 ?x69)))))
 (let (($x64 (= ?x36 input.dst.llvm-%opt)))
 (let (($x39 (= $x64 true)))
 (let (($x92 (= $x39 true)))
 (let (($x109 (= input.dst.llvm-%opt ?x36)))
 (let (($x50 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x19 (and $x50 $x109)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x133 $x129)))
 (let (($x25 (and $x97 $x88)))
 (let (($x101 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x101 $x25)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x60)))))))
 (let (($x56 (and (and (and $x83 true) $x38) $x19)))
 (let (($x29 (= true $x50)))
 (let (($x54 (not $x115)))
 (let (($x104 (=> $x54 $x29)))
 (let (($x99 (and $x104 $x56)))
 (let (($x22 (= $x99 true)))
 (let (($x12 (= $x22 true)))
 (let (($x137 (= $x12 true)))
 (let (($x63 (= $x54 true)))
 (let (($x107 (= $x63 true)))
 (let (($x47 (= $x107 true)))
 (let (($x32 (= $x50 true)))
 (let (($x20 (= $x32 true)))
 (let (($x93 (= $x20 true)))
 (let (($x24 (and $x93 $x47)))
 (let (($x46 (and $x24 $x137)))
 (let (($x16 (and $x46 $x92)))
 (let (($x135 (and $x16 $x134)))
 (let (($x98 (and $x6 $x135)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x122 (and $x21 $x98)))
 (let (($x53 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x123 (and $x53 $x122)))
 (let (($x75 (and $x76 $x123)))
 (let (($x31 (=> (and $x54 $x10) (or false (or false (and true (or $x91 $x18)))))))
 (let (($x136 (and $x31 $x75)))
 (let (($x106 (=> $x136 $x105)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x18 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x10 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x10 (or false (or false (and true (or $x91 $x18)))))))
 (let (($x82 (= $x68 true)))
 (let (($x105 (= $x82 true)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x85)))
 (let ((?x110 (concat (select input.dst.llvm-mem ?x108) ?x74)))
 (let (($x96 (= input.spec-%var-opt-0.2 ?x110)))
 (let (($x6 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x42 (=> $x6 $x96)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x23 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x94 (bvuge ?x23 (_ bv1 32))))
 (let (($x116 (= $x6 $x94)))
 (let (($x76 (= false false)))
 (let (($x62 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x138 (=> $x62 $x76)))
 (let (($x100 (= ?x23 (_ bv0 32))))
 (let (($x120 (= $x62 $x100)))
 (let (($x77 (and (and (and $x120 $x138) $x116) $x42)))
 (let (($x134 (= $x77 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x89 (concat ?x79 (concat ?x78 ?x69)))))
 (let (($x64 (= ?x36 input.dst.llvm-%opt)))
 (let (($x39 (= $x64 true)))
 (let (($x92 (= $x39 true)))
 (let (($x109 (= input.dst.llvm-%opt ?x36)))
 (let (($x50 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x19 (and $x50 $x109)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x133 $x129)))
 (let (($x25 (and $x97 $x88)))
 (let (($x101 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x101 $x25)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x60)))))))
 (let (($x56 (and (and (and $x83 true) $x38) $x19)))
 (let (($x29 (= true $x50)))
 (let (($x54 (not $x115)))
 (let (($x104 (=> $x54 $x29)))
 (let (($x99 (and $x104 $x56)))
 (let (($x22 (= $x99 true)))
 (let (($x12 (= $x22 true)))
 (let (($x137 (= $x12 true)))
 (let (($x63 (= $x54 true)))
 (let (($x107 (= $x63 true)))
 (let (($x47 (= $x107 true)))
 (let (($x32 (= $x50 true)))
 (let (($x20 (= $x32 true)))
 (let (($x93 (= $x20 true)))
 (let (($x24 (and $x93 $x47)))
 (let (($x46 (and $x24 $x137)))
 (let (($x16 (and $x46 $x92)))
 (let (($x135 (and $x16 $x134)))
 (let (($x98 (and $x6 $x135)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x122 (and $x21 $x98)))
 (let (($x53 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x123 (and $x53 $x122)))
 (let (($x75 (and $x76 $x123)))
 (let (($x31 (=> (and $x54 $x10) (or false (or false (and true (or $x91 $x18)))))))
 (let (($x136 (and $x31 $x75)))
 (let (($x106 (=> $x136 $x105)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x35)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x110)))
 (let (($x77 (= input.spec-%var-opt-0.2 ?x42)))
 (let (($x20 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x134 (=> $x20 $x77)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x6 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x6 (_ bv1 32))))
 (let (($x127 (= $x20 $x57)))
 (let (($x10 (= false false)))
 (let (($x59 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x125 (=> $x59 $x10)))
 (let (($x94 (= ?x6 (_ bv0 32))))
 (let (($x116 (= $x59 $x94)))
 (let (($x122 (and (and (and $x116 $x125) $x127) $x134)))
 (let (($x8 (= true true)))
 (let (($x9 (and $x8 $x122)))
 (let (($x128 (= $x9 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x99 (concat ?x109 (concat ?x69 ?x126)))))
 (let (($x100 (= ?x22 input.dst.llvm-%opt)))
 (let (($x120 (= $x100 true)))
 (let (($x76 (= $x120 true)))
 (let (($x12 (= input.dst.llvm-%opt ?x22)))
 (let (($x107 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x137 (and $x107 $x12)))
 (let ((?x33 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x33)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x88 $x38)))
 (let (($x89 (and $x114 $x132)))
 (let (($x66 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x66 $x89)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x61)))))))
 (let (($x39 (and (and (and $x87 true) $x49) $x137)))
 (let (($x37 (= true $x107)))
 (let (($x54 (not $x115)))
 (let (($x5 (=> $x54 $x37)))
 (let (($x92 (and $x5 $x39)))
 (let (($x16 (= $x92 true)))
 (let (($x30 (= $x16 true)))
 (let (($x62 (= $x30 true)))
 (let (($x104 (= $x54 true)))
 (let (($x40 (= $x104 true)))
 (let (($x131 (= $x40 true)))
 (let (($x47 (= $x107 true)))
 (let (($x24 (= $x47 true)))
 (let (($x29 (= $x24 true)))
 (let (($x27 (and $x29 $x131)))
 (let (($x23 (and $x27 $x62)))
 (let (($x138 (and $x23 $x76)))
 (let (($x75 (and $x138 $x123)))
 (let (($x136 (and $x20 $x75)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x82 (and $x50 $x136)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x105 (and $x14 $x82)))
 (let (($x106 (and $x10 $x105)))
 (let (($x73 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x90 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x53 (=> $x90 (or false (or false (and true (or $x65 $x73)))))))
 (let (($x45 (=> (and $x54 $x90) (or false (or false (and true (or $x65 $x73)))))))
 (let (($x72 (and $x45 $x106)))
 (let (($x124 (=> $x72 $x128)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x35)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x110)))
 (let (($x77 (= input.spec-%var-opt-0.2 ?x42)))
 (let (($x20 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x134 (=> $x20 $x77)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x6 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x6 (_ bv1 32))))
 (let (($x127 (= $x20 $x57)))
 (let (($x10 (= false false)))
 (let (($x59 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x125 (=> $x59 $x10)))
 (let (($x94 (= ?x6 (_ bv0 32))))
 (let (($x116 (= $x59 $x94)))
 (let (($x122 (and (and (and $x116 $x125) $x127) $x134)))
 (let (($x8 (= true true)))
 (let (($x9 (and $x8 $x122)))
 (let (($x128 (= $x9 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x99 (concat ?x109 (concat ?x69 ?x126)))))
 (let (($x100 (= ?x22 input.dst.llvm-%opt)))
 (let (($x120 (= $x100 true)))
 (let (($x76 (= $x120 true)))
 (let (($x12 (= input.dst.llvm-%opt ?x22)))
 (let (($x107 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x137 (and $x107 $x12)))
 (let ((?x33 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x33)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x88 $x38)))
 (let (($x89 (and $x114 $x132)))
 (let (($x66 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x66 $x89)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x61)))))))
 (let (($x39 (and (and (and $x87 true) $x49) $x137)))
 (let (($x37 (= true $x107)))
 (let (($x54 (not $x115)))
 (let (($x5 (=> $x54 $x37)))
 (let (($x92 (and $x5 $x39)))
 (let (($x16 (= $x92 true)))
 (let (($x30 (= $x16 true)))
 (let (($x62 (= $x30 true)))
 (let (($x104 (= $x54 true)))
 (let (($x40 (= $x104 true)))
 (let (($x131 (= $x40 true)))
 (let (($x47 (= $x107 true)))
 (let (($x24 (= $x47 true)))
 (let (($x29 (= $x24 true)))
 (let (($x27 (and $x29 $x131)))
 (let (($x23 (and $x27 $x62)))
 (let (($x138 (and $x23 $x76)))
 (let (($x75 (and $x138 $x123)))
 (let (($x136 (and $x20 $x75)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x82 (and $x50 $x136)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x105 (and $x14 $x82)))
 (let (($x106 (and $x10 $x105)))
 (let (($x73 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x90 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x53 (=> $x90 (or false (or false (and true (or $x65 $x73)))))))
 (let (($x45 (=> (and $x54 $x90) (or false (or false (and true (or $x65 $x73)))))))
 (let (($x72 (and $x45 $x106)))
 (let (($x124 (=> $x72 $x128)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x19 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x60 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x43 (=> $x60 $x19)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x10 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x10 (_ bv1 32))))
 (let (($x79 (= $x60 $x57)))
 (let (($x34 (= false false)))
 (let (($x81 (= (_ bv1 32) (_ bv0 32))))
 (let (($x7 (=> $x81 $x34)))
 (let (($x125 (= ?x10 (_ bv0 32))))
 (let (($x118 (= $x81 $x125)))
 (let (($x139 (and (and (and $x118 $x7) $x79) $x43)))
 (let (($x124 (= true true)))
 (let (($x140 (and $x124 $x139)))
 (let (($x102 (= $x140 true)))
 (let ((?x74 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x55 (concat ?x74 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x35 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x65) (concat ?x35 ?x55))))
 (let (($x134 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x93 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x122 (=> $x93 $x134)))
 (let (($x127 (= $x93 $x57)))
 (let (($x94 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x20 (=> $x94 $x34)))
 (let (($x135 (= $x94 $x125)))
 (let (($x136 (and (and (and $x135 $x20) $x127) $x122)))
 (let (($x82 (= $x136 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x138 (= (_ bv0 2) ?x76)))
 (let (($x32 (= $x138 true)))
 (let (($x59 (= $x32 true)))
 (let (($x16 (= $x19 true)))
 (let (($x30 (= $x16 true)))
 (let (($x62 (= $x30 true)))
 (let (($x99 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x22 (and $x99 $x19)))
 (let (($x12 (= $x22 true)))
 (let (($x137 (= $x12 true)))
 (let (($x39 (= $x137 true)))
 (let (($x71 (= $x99 true)))
 (let (($x36 (= $x71 true)))
 (let (($x109 (= $x36 true)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x88)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x87 $x58)))
 (let (($x38 (and $x66 $x25)))
 (let (($x37 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x37 $x38)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x83)))))))
 (let (($x33 (and $x129 $x114)))
 (let (($x132 (= $x33 true)))
 (let (($x89 (= $x132 true)))
 (let (($x49 (= $x89 true)))
 (let ((?x107 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x107)))
 (let (($x24 (= ?x47 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x29 (= $x24 true)))
 (let (($x104 (= $x29 true)))
 (let (($x64 (and $x104 $x49)))
 (let (($x78 (and $x64 $x109)))
 (let (($x69 (and $x78 $x109)))
 (let (($x92 (and $x69 $x39)))
 (let (($x23 (and $x92 $x62)))
 (let (($x100 (and $x23 $x62)))
 (let (($x6 (and $x100 $x59)))
 (let (($x105 (and $x6 $x82)))
 (let (($x106 (and $x93 $x105)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x72 (and $x28 $x106)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x8 (and $x21 $x72)))
 (let (($x9 (and $x34 $x8)))
 (let (($x73 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x53 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x45 (=> $x53 (or false (or false (and true (or $x41 $x73)))))))
 (let (($x128 (and $x45 $x9)))
 (let (($x13 (=> $x128 $x102)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x19 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x60 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x43 (=> $x60 $x19)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x10 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x10 (_ bv1 32))))
 (let (($x79 (= $x60 $x57)))
 (let (($x34 (= false false)))
 (let (($x81 (= (_ bv1 32) (_ bv0 32))))
 (let (($x7 (=> $x81 $x34)))
 (let (($x125 (= ?x10 (_ bv0 32))))
 (let (($x118 (= $x81 $x125)))
 (let (($x139 (and (and (and $x118 $x7) $x79) $x43)))
 (let (($x124 (= true true)))
 (let (($x140 (and $x124 $x139)))
 (let (($x102 (= $x140 true)))
 (let ((?x74 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x55 (concat ?x74 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x35 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x65) (concat ?x35 ?x55))))
 (let (($x134 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x93 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x122 (=> $x93 $x134)))
 (let (($x127 (= $x93 $x57)))
 (let (($x94 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x20 (=> $x94 $x34)))
 (let (($x135 (= $x94 $x125)))
 (let (($x136 (and (and (and $x135 $x20) $x127) $x122)))
 (let (($x82 (= $x136 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x138 (= (_ bv0 2) ?x76)))
 (let (($x32 (= $x138 true)))
 (let (($x59 (= $x32 true)))
 (let (($x16 (= $x19 true)))
 (let (($x30 (= $x16 true)))
 (let (($x62 (= $x30 true)))
 (let (($x99 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x22 (and $x99 $x19)))
 (let (($x12 (= $x22 true)))
 (let (($x137 (= $x12 true)))
 (let (($x39 (= $x137 true)))
 (let (($x71 (= $x99 true)))
 (let (($x36 (= $x71 true)))
 (let (($x109 (= $x36 true)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x88)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x87 $x58)))
 (let (($x38 (and $x66 $x25)))
 (let (($x37 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x37 $x38)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x83)))))))
 (let (($x33 (and $x129 $x114)))
 (let (($x132 (= $x33 true)))
 (let (($x89 (= $x132 true)))
 (let (($x49 (= $x89 true)))
 (let ((?x107 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x107)))
 (let (($x24 (= ?x47 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x29 (= $x24 true)))
 (let (($x104 (= $x29 true)))
 (let (($x64 (and $x104 $x49)))
 (let (($x78 (and $x64 $x109)))
 (let (($x69 (and $x78 $x109)))
 (let (($x92 (and $x69 $x39)))
 (let (($x23 (and $x92 $x62)))
 (let (($x100 (and $x23 $x62)))
 (let (($x6 (and $x100 $x59)))
 (let (($x105 (and $x6 $x82)))
 (let (($x106 (and $x93 $x105)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x72 (and $x28 $x106)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x8 (and $x21 $x72)))
 (let (($x9 (and $x34 $x8)))
 (let (($x73 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x53 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x45 (=> $x53 (or false (or false (and true (or $x41 $x73)))))))
 (let (($x128 (and $x45 $x9)))
 (let (($x13 (=> $x128 $x102)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x97 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x40) (or $x130 $x97)))))))
 (let (($x31 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x18 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= ?x18 (_ bv0 32))))
 (let ((?x115 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x65 $x91)))
 (let (($x68 (and $x90 $x111)))
 (let (($x51 (and $x68 $x31)))
 (and $x51 $x129)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x97 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x40) (or $x130 $x97)))))))
 (let (($x31 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x18 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= ?x18 (_ bv0 32))))
 (let ((?x115 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x65 $x91)))
 (let (($x68 (and $x90 $x111)))
 (let (($x51 (and $x68 $x31)))
 (and $x51 $x129)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x12 (= true false)))
 (let (($x137 (= $x12 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x71 (concat ?x17 (concat ?x132 ?x114)))))
 (let (($x109 (= ?x36 input.dst.llvm-%val)))
 (let (($x78 (= $x109 true)))
 (let (($x69 (= $x78 true)))
 (let (($x73 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x53 (= $x73 true)))
 (let (($x58 (= $x53 true)))
 (let (($x66 (= $x58 true)))
 (let ((?x26 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x26)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x129 $x108)))
 (let (($x41 (and $x84 $x24)))
 (let (($x63 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x63 $x41)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x91)))))))
 (let (($x133 (and $x107 $x18)))
 (let (($x119 (= $x133 true)))
 (let (($x117 (= $x119 true)))
 (let (($x130 (= $x117 true)))
 (let (($x88 (and $x130 $x66)))
 (let (($x126 (and $x88 $x69)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x121 (and $x37 $x126)))
 (let ((?x67 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x40 (= ?x67 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x19 (and $x40 $x121)))
 (let (($x103 (= ?x67 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x22 (and $x103 $x19)))
 (let (($x39 (=> $x22 $x137)))
 (not $x39))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x12 (= true false)))
 (let (($x137 (= $x12 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x71 (concat ?x17 (concat ?x132 ?x114)))))
 (let (($x109 (= ?x36 input.dst.llvm-%val)))
 (let (($x78 (= $x109 true)))
 (let (($x69 (= $x78 true)))
 (let (($x73 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x53 (= $x73 true)))
 (let (($x58 (= $x53 true)))
 (let (($x66 (= $x58 true)))
 (let ((?x26 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x26)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x129 $x108)))
 (let (($x41 (and $x84 $x24)))
 (let (($x63 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x63 $x41)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x91)))))))
 (let (($x133 (and $x107 $x18)))
 (let (($x119 (= $x133 true)))
 (let (($x117 (= $x119 true)))
 (let (($x130 (= $x117 true)))
 (let (($x88 (and $x130 $x66)))
 (let (($x126 (and $x88 $x69)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x121 (and $x37 $x126)))
 (let ((?x67 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x40 (= ?x67 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x19 (and $x40 $x121)))
 (let (($x103 (= ?x67 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x22 (and $x103 $x19)))
 (let (($x39 (=> $x22 $x137)))
 (not $x39))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000001010)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111110110)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111110110)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv10 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x111 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x120 (= ?x111 ?x100)))
 (let (($x76 (= $x120 true)))
 (let (($x138 (= $x76 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x89 (concat ?x33 (concat ?x63 ?x51)))))
 (let (($x68 (= ?x56 input.dst.llvm-%val)))
 (let (($x46 (= $x68 true)))
 (let (($x38 (= $x46 true)))
 (let (($x66 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x12 (= $x66 true)))
 (let (($x137 (= $x12 true)))
 (let (($x39 (= $x137 true)))
 (let (($x36 (= input.dst.llvm-%val ?x56)))
 (let ((?x49 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x49)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x108 $x84)))
 (let (($x61 (and $x101 $x119)))
 (let (($x71 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x71 $x61)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x73)))))))
 (let (($x69 (and (and (and $x41 $x66) $x115) $x36)))
 (let (($x126 (= $x69 true)))
 (let (($x121 (= $x126 true)))
 (let (($x19 (= $x121 true)))
 (let (($x117 (and $x41 $x115)))
 (let (($x14 (= $x117 true)))
 (let (($x129 (= $x14 true)))
 (let (($x45 (= $x129 true)))
 (let (($x22 (and $x45 $x19)))
 (let (($x92 (and $x22 $x39)))
 (let (($x16 (and $x92 $x38)))
 (let (($x104 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x30 (and $x104 $x16)))
 (let (($x103 (= ?x111 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x62 (and $x103 $x30)))
 (let (($x54 (= ?x111 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x23 (and $x54 $x62)))
 (let (($x32 (=> $x23 $x138)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x111 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x120 (= ?x111 ?x100)))
 (let (($x76 (= $x120 true)))
 (let (($x138 (= $x76 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x89 (concat ?x33 (concat ?x63 ?x51)))))
 (let (($x68 (= ?x56 input.dst.llvm-%val)))
 (let (($x46 (= $x68 true)))
 (let (($x38 (= $x46 true)))
 (let (($x66 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x12 (= $x66 true)))
 (let (($x137 (= $x12 true)))
 (let (($x39 (= $x137 true)))
 (let (($x36 (= input.dst.llvm-%val ?x56)))
 (let ((?x49 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x49)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x108 $x84)))
 (let (($x61 (and $x101 $x119)))
 (let (($x71 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x71 $x61)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x73)))))))
 (let (($x69 (and (and (and $x41 $x66) $x115) $x36)))
 (let (($x126 (= $x69 true)))
 (let (($x121 (= $x126 true)))
 (let (($x19 (= $x121 true)))
 (let (($x117 (and $x41 $x115)))
 (let (($x14 (= $x117 true)))
 (let (($x129 (= $x14 true)))
 (let (($x45 (= $x129 true)))
 (let (($x22 (and $x45 $x19)))
 (let (($x92 (and $x22 $x39)))
 (let (($x16 (and $x92 $x38)))
 (let (($x104 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x30 (and $x104 $x16)))
 (let (($x103 (= ?x111 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x62 (and $x103 $x30)))
 (let (($x54 (= ?x111 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x23 (and $x54 $x62)))
 (let (($x32 (=> $x23 $x138)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173565/query
