==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x25 (not $x20)))
 (let (($x98 (= $x25 false)))
 (let (($x99 (= $x98 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x83 ?x81)))))
 (let (($x91 (= ?x90 input.dst.llvm-%opt)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x58)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x62)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x64)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x74 (=> $x69 $x73)))
 (let ((?x53 (ite $x20 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x53 (_ bv1 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x33 (= false false)))
 (let (($x52 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x52 $x33)))
 (let (($x65 (= ?x53 (_ bv0 32))))
 (let (($x66 (= $x52 $x65)))
 (let (($x68 (and $x66 $x67)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x48 (=> $x36 (or false (or false (and true (or $x10 $x11)))))))
 (let (($x6 (=> (and $x25 $x36) (or false (or false (and true (or $x10 $x11)))))))
 (let (($x38 (= $x6 true)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let ((?x46 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x46)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x47 $x37)))
 (let (($x23 (and $x15 $x22)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x45 $x23)))
 (let (($x27 (= $x18 true)))
 (let (($x40 (= $x27 true)))
 (let (($x30 (= $x40 true)))
 (let (($x51 (and $x30 $x50)))
 (let (($x79 (and $x51 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x7 $x94)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x96 (and $x14 $x95)))
 (let (($x97 (and $x33 $x96)))
 (let (($x100 (=> $x97 $x99)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x25 (not $x20)))
 (let (($x98 (= $x25 false)))
 (let (($x99 (= $x98 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x83 ?x81)))))
 (let (($x91 (= ?x90 input.dst.llvm-%opt)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x58)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x62)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x64)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x74 (=> $x69 $x73)))
 (let ((?x53 (ite $x20 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x53 (_ bv1 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x33 (= false false)))
 (let (($x52 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x52 $x33)))
 (let (($x65 (= ?x53 (_ bv0 32))))
 (let (($x66 (= $x52 $x65)))
 (let (($x68 (and $x66 $x67)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x48 (=> $x36 (or false (or false (and true (or $x10 $x11)))))))
 (let (($x6 (=> (and $x25 $x36) (or false (or false (and true (or $x10 $x11)))))))
 (let (($x38 (= $x6 true)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let ((?x46 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x46)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x47 $x37)))
 (let (($x23 (and $x15 $x22)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x45 $x23)))
 (let (($x27 (= $x18 true)))
 (let (($x40 (= $x27 true)))
 (let (($x30 (= $x40 true)))
 (let (($x51 (and $x30 $x50)))
 (let (($x79 (and $x51 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x7 $x94)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x96 (and $x14 $x95)))
 (let (($x97 (and $x33 $x96)))
 (let (($x100 (=> $x97 $x99)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6000fffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfe)
                     #x6000fffd
                     #xff)
              #x6000ffff
              #x5f)
       #x6000fffe
       #xff))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x5ffffffe)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6000fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6000ffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3205076480 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3205076480 32) (_ bv253 8)) (_ bv3205076481 32) (_ bv255 8)) (_ bv3205076482 32) (_ bv255 8)) (_ bv3205076483 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3205076483 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3205076480 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x102 (or $x74 $x32)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x92 (concat ?x87 ?x81)))))
 (let (($x97 (= ?x96 input.dst.llvm-%opt)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x55)))
 (let (($x79 (=> $x74 $x78)))
 (let ((?x69 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x69 (_ bv1 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x35 (= false false)))
 (let (($x68 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x64 (=> $x68 $x35)))
 (let (($x58 (= ?x69 (_ bv0 32))))
 (let (($x62 (= $x68 $x58)))
 (let (($x73 (and $x62 $x64)))
 (let (($x77 (and $x73 $x76)))
 (let (($x88 (and $x77 $x79)))
 (let (($x89 (= $x88 true)))
 (let (($x85 (= $x89 true)))
 (let (($x86 (= $x85 true)))
 (let (($x53 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x65 (= $x53 true)))
 (let (($x66 (= $x65 true)))
 (let (($x33 (= $x66 true)))
 (let ((?x41 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x41)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x11 $x13)))
 (let (($x6 (and $x29 $x48)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x10 $x6)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x67 (and $x51 $x33)))
 (let (($x82 (and $x67 $x86)))
 (let (($x100 (and $x82 $x99)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x101 (and $x36 $x100)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x26 (and $x8 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x23 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x20 (=> $x24 (or false (or false (and true (or $x22 $x23)))))))
 (let (($x31 (not $x32)))
 (let (($x45 (=> (and $x31 $x24) (or false (or false (and true (or $x22 $x23)))))))
 (let (($x17 (and $x45 $x80)))
 (let (($x105 (=> $x17 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x102 (or $x74 $x32)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x92 (concat ?x87 ?x81)))))
 (let (($x97 (= ?x96 input.dst.llvm-%opt)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x55)))
 (let (($x79 (=> $x74 $x78)))
 (let ((?x69 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x69 (_ bv1 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x35 (= false false)))
 (let (($x68 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x64 (=> $x68 $x35)))
 (let (($x58 (= ?x69 (_ bv0 32))))
 (let (($x62 (= $x68 $x58)))
 (let (($x73 (and $x62 $x64)))
 (let (($x77 (and $x73 $x76)))
 (let (($x88 (and $x77 $x79)))
 (let (($x89 (= $x88 true)))
 (let (($x85 (= $x89 true)))
 (let (($x86 (= $x85 true)))
 (let (($x53 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x65 (= $x53 true)))
 (let (($x66 (= $x65 true)))
 (let (($x33 (= $x66 true)))
 (let ((?x41 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x41)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x11 $x13)))
 (let (($x6 (and $x29 $x48)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x10 $x6)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x67 (and $x51 $x33)))
 (let (($x82 (and $x67 $x86)))
 (let (($x100 (and $x82 $x99)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x101 (and $x36 $x100)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x26 (and $x8 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x23 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x20 (=> $x24 (or false (or false (and true (or $x22 $x23)))))))
 (let (($x31 (not $x32)))
 (let (($x45 (=> (and $x31 $x24) (or false (or false (and true (or $x22 $x23)))))))
 (let (($x17 (and $x45 $x80)))
 (let (($x105 (=> $x17 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x63 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x63)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x75 $x54)))
 (let (($x55 (and $x71 $x56)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x70 $x55)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x30 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x96 (= true $x30)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x97 (=> $x14 $x96)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x82 (concat ?x89 ?x79)))))
 (let (($x84 (= input.dst.llvm-%opt ?x92)))
 (let (($x90 (and (and (and $x30 $x70) $x55) $x84)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x64 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x49 (=> $x35 $x64)))
 (let ((?x38 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x38 (_ bv1 32))))
 (let (($x28 (= $x35 $x52)))
 (let (($x61 (= false false)))
 (let (($x8 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x8 $x61)))
 (let (($x18 (= ?x38 (_ bv0 32))))
 (let (($x74 (= $x8 $x18)))
 (let (($x62 (and $x74 $x33)))
 (let (($x36 (and $x62 $x28)))
 (let (($x23 (and $x36 $x49)))
 (let (($x93 (and $x23 $x90)))
 (let (($x98 (and $x93 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x24 (= $x14 true)))
 (let (($x37 (= $x24 true)))
 (let (($x51 (= $x37 true)))
 (let (($x26 (and $x51 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x17 (and $x40 $x80)))
 (let (($x12 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x102 (and $x12 $x17)))
 (let (($x103 (and $x61 $x102)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x66 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x66 (or false (or false (and true (or $x53 $x13)))))))
 (let (($x31 (=> (and $x14 $x66) (or false (or false (and true (or $x53 $x13)))))))
 (let (($x104 (and $x31 $x103)))
 (let (($x83 (=> $x104 $x7)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x63 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x63)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x75 $x54)))
 (let (($x55 (and $x71 $x56)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x70 $x55)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x30 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x96 (= true $x30)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x97 (=> $x14 $x96)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x82 (concat ?x89 ?x79)))))
 (let (($x84 (= input.dst.llvm-%opt ?x92)))
 (let (($x90 (and (and (and $x30 $x70) $x55) $x84)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x64 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x49 (=> $x35 $x64)))
 (let ((?x38 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x38 (_ bv1 32))))
 (let (($x28 (= $x35 $x52)))
 (let (($x61 (= false false)))
 (let (($x8 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x8 $x61)))
 (let (($x18 (= ?x38 (_ bv0 32))))
 (let (($x74 (= $x8 $x18)))
 (let (($x62 (and $x74 $x33)))
 (let (($x36 (and $x62 $x28)))
 (let (($x23 (and $x36 $x49)))
 (let (($x93 (and $x23 $x90)))
 (let (($x98 (and $x93 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x24 (= $x14 true)))
 (let (($x37 (= $x24 true)))
 (let (($x51 (= $x37 true)))
 (let (($x26 (and $x51 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x17 (and $x40 $x80)))
 (let (($x12 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x102 (and $x12 $x17)))
 (let (($x103 (and $x61 $x102)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x66 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x66 (or false (or false (and true (or $x53 $x13)))))))
 (let (($x31 (=> (and $x14 $x66) (or false (or false (and true (or $x53 $x13)))))))
 (let (($x104 (and $x31 $x103)))
 (let (($x83 (=> $x104 $x7)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x36)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x83 (= (_ bv0 32) ?x77)))
 (let (($x44 (= $x83 true)))
 (let (($x70 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x99 (= true $x70)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x100 (=> $x14 $x99)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x92 (concat ?x79 (concat ?x82 ?x91)))))
 (let (($x90 (= input.dst.llvm-%opt ?x84)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x56)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x72 $x71)))
 (let (($x81 (and $x63 $x55)))
 (let (($x75 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and (and (and $x70 $x75) $x81) $x90)))
 (let (($x23 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x8 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x65 (=> $x8 $x23)))
 (let ((?x33 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x64 (= $x8 $x6)))
 (let (($x40 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x21 (=> $x61 $x40)))
 (let (($x39 (= ?x33 (_ bv0 32))))
 (let (($x10 (= $x61 $x39)))
 (let (($x5 (and $x10 $x21)))
 (let (($x49 (and $x5 $x64)))
 (let (($x68 (and $x49 $x65)))
 (let (($x98 (and $x68 $x97)))
 (let (($x101 (and $x98 $x100)))
 (let (($x26 (= $x101 true)))
 (let (($x80 (= $x26 true)))
 (let (($x17 (= $x80 true)))
 (let (($x38 (= $x14 true)))
 (let (($x18 (= $x38 true)))
 (let (($x74 (= $x18 true)))
 (let (($x102 (and $x74 $x17)))
 (let (($x103 (and $x8 $x102)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x104 (and $x67 $x103)))
 (let (($x37 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x105 (and $x37 $x104)))
 (let (($x106 (and $x40 $x105)))
 (let (($x15 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x12 (=> $x29 (or false (or false (and true (or $x27 $x15)))))))
 (let (($x48 (=> (and $x14 $x29) (or false (or false (and true (or $x27 $x15)))))))
 (let (($x7 (and $x48 $x106)))
 (let (($x9 (=> $x7 $x44)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x36)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x83 (= (_ bv0 32) ?x77)))
 (let (($x44 (= $x83 true)))
 (let (($x70 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x99 (= true $x70)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x100 (=> $x14 $x99)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x92 (concat ?x79 (concat ?x82 ?x91)))))
 (let (($x90 (= input.dst.llvm-%opt ?x84)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x56)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x72 $x71)))
 (let (($x81 (and $x63 $x55)))
 (let (($x75 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and (and (and $x70 $x75) $x81) $x90)))
 (let (($x23 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x8 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x65 (=> $x8 $x23)))
 (let ((?x33 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x64 (= $x8 $x6)))
 (let (($x40 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x21 (=> $x61 $x40)))
 (let (($x39 (= ?x33 (_ bv0 32))))
 (let (($x10 (= $x61 $x39)))
 (let (($x5 (and $x10 $x21)))
 (let (($x49 (and $x5 $x64)))
 (let (($x68 (and $x49 $x65)))
 (let (($x98 (and $x68 $x97)))
 (let (($x101 (and $x98 $x100)))
 (let (($x26 (= $x101 true)))
 (let (($x80 (= $x26 true)))
 (let (($x17 (= $x80 true)))
 (let (($x38 (= $x14 true)))
 (let (($x18 (= $x38 true)))
 (let (($x74 (= $x18 true)))
 (let (($x102 (and $x74 $x17)))
 (let (($x103 (and $x8 $x102)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x104 (and $x67 $x103)))
 (let (($x37 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x105 (and $x37 $x104)))
 (let (($x106 (and $x40 $x105)))
 (let (($x15 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x12 (=> $x29 (or false (or false (and true (or $x27 $x15)))))))
 (let (($x48 (=> (and $x14 $x29) (or false (or false (and true (or $x27 $x15)))))))
 (let (($x7 (and $x48 $x106)))
 (let (($x9 (=> $x7 $x44)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3221224956 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4156689528 32) (_ bv252 8)) (_ bv4156689529 32) (_ bv253 8)) (_ bv4156689530 32) (_ bv255 8)) (_ bv4156689531 32) (_ bv191 8)) (_ bv3221224956 32) (_ bv1 8)))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4156689528 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4156689528 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4156689531 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x007f37fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x007f37fe
                     #x39)
              #x007f37fd
              #x04)
       #x00390402
       #x01))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x007f37ff)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00390400)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x007f37fc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let ((?x45 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x45)))
 (let (($x50 (= ?x95 ?x52)))
 (let (($x32 (= $x50 true)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (= true $x75)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x73 (not $x19)))
 (let (($x80 (=> $x73 $x26)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x84 (concat ?x91 (concat ?x79 ?x92)))))
 (let (($x97 (= input.dst.llvm-%opt ?x90)))
 (let ((?x55 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x55)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x54 $x63)))
 (let (($x96 (and $x56 $x81)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and (and (and $x75 $x72) $x96) $x97)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x30 (=> $x61 $x68)))
 (let ((?x21 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x21 (_ bv1 32))))
 (let (($x23 (= $x61 $x77)))
 (let (($x67 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x36 (=> $x40 $x67)))
 (let (($x28 (= ?x21 (_ bv0 32))))
 (let (($x35 (= $x40 $x28)))
 (let (($x22 (and $x35 $x36)))
 (let (($x65 (and $x22 $x23)))
 (let (($x42 (and $x65 $x30)))
 (let (($x101 (and $x42 $x100)))
 (let (($x17 (and $x101 $x80)))
 (let (($x102 (= $x17 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x33 (= $x73 true)))
 (let (($x39 (= $x33 true)))
 (let (($x10 (= $x39 true)))
 (let (($x105 (and $x10 $x104)))
 (let (($x106 (and $x61 $x105)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x7 (and $x66 $x106)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x83 (and $x18 $x7)))
 (let (($x44 (and $x67 $x83)))
 (let (($x31 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x24 (or false (or false (and true (or $x41 $x31)))))))
 (let (($x14 (=> (and $x73 $x24) (or false (or false (and true (or $x41 $x31)))))))
 (let (($x9 (and $x14 $x44)))
 (let (($x107 (=> $x9 $x32)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let ((?x45 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x45)))
 (let (($x50 (= ?x95 ?x52)))
 (let (($x32 (= $x50 true)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (= true $x75)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x73 (not $x19)))
 (let (($x80 (=> $x73 $x26)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x84 (concat ?x91 (concat ?x79 ?x92)))))
 (let (($x97 (= input.dst.llvm-%opt ?x90)))
 (let ((?x55 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x55)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x54 $x63)))
 (let (($x96 (and $x56 $x81)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and (and (and $x75 $x72) $x96) $x97)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x30 (=> $x61 $x68)))
 (let ((?x21 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x21 (_ bv1 32))))
 (let (($x23 (= $x61 $x77)))
 (let (($x67 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x36 (=> $x40 $x67)))
 (let (($x28 (= ?x21 (_ bv0 32))))
 (let (($x35 (= $x40 $x28)))
 (let (($x22 (and $x35 $x36)))
 (let (($x65 (and $x22 $x23)))
 (let (($x42 (and $x65 $x30)))
 (let (($x101 (and $x42 $x100)))
 (let (($x17 (and $x101 $x80)))
 (let (($x102 (= $x17 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x33 (= $x73 true)))
 (let (($x39 (= $x33 true)))
 (let (($x10 (= $x39 true)))
 (let (($x105 (and $x10 $x104)))
 (let (($x106 (and $x61 $x105)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x7 (and $x66 $x106)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x83 (and $x18 $x7)))
 (let (($x44 (and $x67 $x83)))
 (let (($x31 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x24 (or false (or false (and true (or $x41 $x31)))))))
 (let (($x14 (=> (and $x73 $x24) (or false (or false (and true (or $x41 $x31)))))))
 (let (($x9 (and $x14 $x44)))
 (let (($x107 (=> $x9 $x32)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x32 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x107 (bvmul (_ bv508 10) ?x32)))
 (let (($x46 (= ?x107 ?x108)))
 (let (($x94 (= $x46 true)))
 (let (($x72 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x102 (= true $x72)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x76)))
 (let (($x103 (=> $x43 $x102)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x90 (concat ?x92 (concat ?x91 ?x84)))))
 (let (($x100 (= input.dst.llvm-%opt ?x97)))
 (let ((?x81 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x81)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x71 $x56)))
 (let (($x99 (and $x55 $x96)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and (and (and $x72 $x54) $x99) $x100)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x42 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x40 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x70 (=> $x40 $x42)))
 (let ((?x36 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x36 (_ bv1 32))))
 (let (($x68 (= $x40 $x52)))
 (let (($x66 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x67 $x66)))
 (let (($x64 (= ?x36 (_ bv0 32))))
 (let (($x8 (= $x67 $x64)))
 (let (($x20 (and $x8 $x49)))
 (let (($x30 (and $x20 $x68)))
 (let (($x87 (and $x30 $x70)))
 (let (($x17 (and $x87 $x80)))
 (let (($x104 (and $x17 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x21 (= $x43 true)))
 (let (($x28 (= $x21 true)))
 (let (($x35 (= $x28 true)))
 (let (($x83 (and $x35 $x7)))
 (let (($x44 (and $x40 $x83)))
 (let (($x53 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (and $x53 $x44)))
 (let (($x39 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x78 (and $x39 $x9)))
 (let (($x45 (and $x66 $x78)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x38 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x38 (or false (or false (and true (or $x12 $x48)))))))
 (let (($x59 (=> (and $x43 $x38) (or false (or false (and true (or $x12 $x48)))))))
 (let (($x95 (and $x59 $x45)))
 (let (($x29 (=> $x95 $x94)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x32 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x107 (bvmul (_ bv508 10) ?x32)))
 (let (($x46 (= ?x107 ?x108)))
 (let (($x94 (= $x46 true)))
 (let (($x72 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x102 (= true $x72)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x76)))
 (let (($x103 (=> $x43 $x102)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x90 (concat ?x92 (concat ?x91 ?x84)))))
 (let (($x100 (= input.dst.llvm-%opt ?x97)))
 (let ((?x81 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x81)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x71 $x56)))
 (let (($x99 (and $x55 $x96)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and (and (and $x72 $x54) $x99) $x100)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x42 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x40 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x70 (=> $x40 $x42)))
 (let ((?x36 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x36 (_ bv1 32))))
 (let (($x68 (= $x40 $x52)))
 (let (($x66 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x67 $x66)))
 (let (($x64 (= ?x36 (_ bv0 32))))
 (let (($x8 (= $x67 $x64)))
 (let (($x20 (and $x8 $x49)))
 (let (($x30 (and $x20 $x68)))
 (let (($x87 (and $x30 $x70)))
 (let (($x17 (and $x87 $x80)))
 (let (($x104 (and $x17 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x21 (= $x43 true)))
 (let (($x28 (= $x21 true)))
 (let (($x35 (= $x28 true)))
 (let (($x83 (and $x35 $x7)))
 (let (($x44 (and $x40 $x83)))
 (let (($x53 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (and $x53 $x44)))
 (let (($x39 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x78 (and $x39 $x9)))
 (let (($x45 (and $x66 $x78)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x38 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x38 (or false (or false (and true (or $x12 $x48)))))))
 (let (($x59 (=> (and $x43 $x38) (or false (or false (and true (or $x12 $x48)))))))
 (let (($x95 (and $x59 $x45)))
 (let (($x29 (=> $x95 $x94)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000010000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000010000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000010000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000000) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x036ffe3c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x80)
                                #x020f0001
                                #x00)
                         #x036ffe3d
                         #x00)
                  #x036ffe3f
                  #x02)))
  (store (store a!1 #x036ffe3c #x00) #x036ffe3e #x0f)))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x80800080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x80800080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x036ffe3f)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80800080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x020f0000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x036ffe3c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv469759996 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1587158012 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1587158012 32) (_ bv252 8)) (_ bv1587158013 32) (_ bv247 8)) (_ bv1587158014 32) (_ bv255 8)) (_ bv1587158015 32) (_ bv27 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1587158012 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1587158015 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x94 (= (_ bv0 2) ?x46)))
 (let (($x29 (= $x94 true)))
 (let (($x54 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= true $x54)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x19)))
 (let (($x106 (=> $x43 $x105)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x97 (concat ?x84 (concat ?x92 ?x90)))))
 (let (($x80 (= input.dst.llvm-%opt ?x100)))
 (let ((?x96 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x96)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x63 $x55)))
 (let (($x26 (and $x81 $x99)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and (and (and $x54 $x71) $x26) $x80)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x30)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x87 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x67 $x87)))
 (let ((?x49 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x49 (_ bv1 32))))
 (let (($x42 (= $x67 $x6)))
 (let (($x53 (= false false)))
 (let (($x66 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x66 $x53)))
 (let (($x23 (= ?x49 (_ bv0 32))))
 (let (($x61 (= $x66 $x23)))
 (let (($x69 (and $x61 $x65)))
 (let (($x70 (and $x69 $x42)))
 (let (($x93 (and $x70 $x75)))
 (let (($x104 (and $x93 $x103)))
 (let (($x7 (and $x104 $x106)))
 (let (($x83 (= $x7 true)))
 (let (($x44 (= $x83 true)))
 (let (($x9 (= $x44 true)))
 (let (($x36 (= $x43 true)))
 (let (($x64 (= $x36 true)))
 (let (($x8 (= $x64 true)))
 (let (($x78 (and $x8 $x9)))
 (let (($x45 (and $x67 $x78)))
 (let (($x24 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x24 $x45)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (and $x28 $x95)))
 (let (($x32 (and $x53 $x50)))
 (let (($x14 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x33 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x39 (=> $x33 (or false (or false (and true (or $x37 $x14)))))))
 (let (($x60 (=> (and $x43 $x33) (or false (or false (and true (or $x37 $x14)))))))
 (let (($x107 (and $x60 $x32)))
 (let (($x109 (=> $x107 $x29)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x94 (= (_ bv0 2) ?x46)))
 (let (($x29 (= $x94 true)))
 (let (($x54 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= true $x54)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x19)))
 (let (($x106 (=> $x43 $x105)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x97 (concat ?x84 (concat ?x92 ?x90)))))
 (let (($x80 (= input.dst.llvm-%opt ?x100)))
 (let ((?x96 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x96)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x63 $x55)))
 (let (($x26 (and $x81 $x99)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and (and (and $x54 $x71) $x26) $x80)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x30)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x87 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x67 $x87)))
 (let ((?x49 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x49 (_ bv1 32))))
 (let (($x42 (= $x67 $x6)))
 (let (($x53 (= false false)))
 (let (($x66 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x66 $x53)))
 (let (($x23 (= ?x49 (_ bv0 32))))
 (let (($x61 (= $x66 $x23)))
 (let (($x69 (and $x61 $x65)))
 (let (($x70 (and $x69 $x42)))
 (let (($x93 (and $x70 $x75)))
 (let (($x104 (and $x93 $x103)))
 (let (($x7 (and $x104 $x106)))
 (let (($x83 (= $x7 true)))
 (let (($x44 (= $x83 true)))
 (let (($x9 (= $x44 true)))
 (let (($x36 (= $x43 true)))
 (let (($x64 (= $x36 true)))
 (let (($x8 (= $x64 true)))
 (let (($x78 (and $x8 $x9)))
 (let (($x45 (and $x67 $x78)))
 (let (($x24 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x24 $x45)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (and $x28 $x95)))
 (let (($x32 (and $x53 $x50)))
 (let (($x14 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x33 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x39 (=> $x33 (or false (or false (and true (or $x37 $x14)))))))
 (let (($x60 (=> (and $x43 $x33) (or false (or false (and true (or $x37 $x14)))))))
 (let (($x107 (and $x60 $x32)))
 (let (($x109 (=> $x107 $x29)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x76)))
 (let ((?x16 (ite $x43 (_ bv1 1) (_ bv0 1))))
 (let ((?x47 ((_ zero_extend 31) ?x16)))
 (let (($x88 (= (_ bv1 32) ?x47)))
 (let (($x15 (= $x88 true)))
 (let (($x71 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x83 (= true $x71)))
 (let (($x44 (=> $x43 $x83)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x100 (concat ?x90 (concat ?x84 ?x97)))))
 (let (($x103 (= input.dst.llvm-%opt ?x80)))
 (let ((?x99 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x99)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x56 $x81)))
 (let (($x102 (and $x96 $x26)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and (and (and $x71 $x63) $x102) $x103)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x70)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let (($x93 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x72 (=> $x66 $x93)))
 (let ((?x65 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x65 (_ bv1 32))))
 (let (($x87 (= $x66 $x77)))
 (let (($x24 (= false false)))
 (let (($x53 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x53 $x24)))
 (let (($x68 (= ?x65 (_ bv0 32))))
 (let (($x40 (= $x53 $x68)))
 (let (($x34 (and $x40 $x30)))
 (let (($x75 (and $x34 $x87)))
 (let (($x98 (and $x75 $x72)))
 (let (($x7 (and $x98 $x106)))
 (let (($x9 (and $x7 $x44)))
 (let (($x78 (= $x9 true)))
 (let (($x45 (= $x78 true)))
 (let (($x95 (= $x45 true)))
 (let (($x49 (= $x43 true)))
 (let (($x23 (= $x49 true)))
 (let (($x61 (= $x23 true)))
 (let (($x50 (and $x61 $x95)))
 (let (($x32 (and $x66 $x50)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x107 (and $x38 $x32)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x108 (and $x64 $x107)))
 (let (($x46 (and $x24 $x108)))
 (let (($x59 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x28 (=> $x21 (or false (or false (and true (or $x18 $x59)))))))
 (let (($x25 (=> (and $x43 $x21) (or false (or false (and true (or $x18 $x59)))))))
 (let (($x94 (and $x25 $x46)))
 (let (($x85 (=> $x94 $x15)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x76)))
 (let ((?x16 (ite $x43 (_ bv1 1) (_ bv0 1))))
 (let ((?x47 ((_ zero_extend 31) ?x16)))
 (let (($x88 (= (_ bv1 32) ?x47)))
 (let (($x15 (= $x88 true)))
 (let (($x71 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x83 (= true $x71)))
 (let (($x44 (=> $x43 $x83)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x100 (concat ?x90 (concat ?x84 ?x97)))))
 (let (($x103 (= input.dst.llvm-%opt ?x80)))
 (let ((?x99 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x99)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x56 $x81)))
 (let (($x102 (and $x96 $x26)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and (and (and $x71 $x63) $x102) $x103)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x70)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let (($x93 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x72 (=> $x66 $x93)))
 (let ((?x65 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x65 (_ bv1 32))))
 (let (($x87 (= $x66 $x77)))
 (let (($x24 (= false false)))
 (let (($x53 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x53 $x24)))
 (let (($x68 (= ?x65 (_ bv0 32))))
 (let (($x40 (= $x53 $x68)))
 (let (($x34 (and $x40 $x30)))
 (let (($x75 (and $x34 $x87)))
 (let (($x98 (and $x75 $x72)))
 (let (($x7 (and $x98 $x106)))
 (let (($x9 (and $x7 $x44)))
 (let (($x78 (= $x9 true)))
 (let (($x45 (= $x78 true)))
 (let (($x95 (= $x45 true)))
 (let (($x49 (= $x43 true)))
 (let (($x23 (= $x49 true)))
 (let (($x61 (= $x23 true)))
 (let (($x50 (and $x61 $x95)))
 (let (($x32 (and $x66 $x50)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x107 (and $x38 $x32)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x108 (and $x64 $x107)))
 (let (($x46 (and $x24 $x108)))
 (let (($x59 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x28 (=> $x21 (or false (or false (and true (or $x18 $x59)))))))
 (let (($x25 (=> (and $x43 $x21) (or false (or false (and true (or $x18 $x59)))))))
 (let (($x94 (and $x25 $x46)))
 (let (($x85 (=> $x94 $x15)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x60 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x36 (or false (or false (and true (or $x39 $x60)))))))
 (let (($x47 (= $x64 true)))
 (let (($x88 (= $x47 true)))
 (let (($x63 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x78 (= true $x63)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x76)))
 (let (($x45 (=> $x43 $x78)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x80 (concat ?x97 (concat ?x90 ?x100)))))
 (let (($x106 (= input.dst.llvm-%opt ?x103)))
 (let ((?x26 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x26)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x55 $x96)))
 (let (($x105 (and $x99 $x102)))
 (let (($x56 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and (and (and $x63 $x56) $x105) $x106)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x6 (concat (select input.dst.llvm-mem ?x74) ?x62)))
 (let (($x98 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x53 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x54 (=> $x53 $x98)))
 (let ((?x30 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x30 (_ bv1 32))))
 (let (($x93 (= $x53 $x52)))
 (let (($x38 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x70 (=> $x24 $x38)))
 (let (($x42 (= ?x30 (_ bv0 32))))
 (let (($x67 (= $x24 $x42)))
 (let (($x57 (and $x67 $x70)))
 (let (($x72 (and $x57 $x93)))
 (let (($x101 (and $x72 $x54)))
 (let (($x9 (and $x101 $x44)))
 (let (($x95 (and $x9 $x45)))
 (let (($x50 (= $x95 true)))
 (let (($x32 (= $x50 true)))
 (let (($x107 (= $x32 true)))
 (let (($x65 (= $x43 true)))
 (let (($x68 (= $x65 true)))
 (let (($x40 (= $x68 true)))
 (let (($x108 (and $x40 $x107)))
 (let (($x46 (and $x53 $x108)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x94 (and $x33 $x46)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x29 (and $x23 $x94)))
 (let (($x109 (and $x38 $x29)))
 (let (($x11 (=> (and $x43 $x36) (or false (or false (and true (or $x39 $x60)))))))
 (let (($x16 (and $x11 $x109)))
 (let (($x15 (=> $x16 $x88)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x60 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x36 (or false (or false (and true (or $x39 $x60)))))))
 (let (($x47 (= $x64 true)))
 (let (($x88 (= $x47 true)))
 (let (($x63 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x78 (= true $x63)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x43 (not $x76)))
 (let (($x45 (=> $x43 $x78)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x80 (concat ?x97 (concat ?x90 ?x100)))))
 (let (($x106 (= input.dst.llvm-%opt ?x103)))
 (let ((?x26 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x26)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x55 $x96)))
 (let (($x105 (and $x99 $x102)))
 (let (($x56 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and (and (and $x63 $x56) $x105) $x106)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x6 (concat (select input.dst.llvm-mem ?x74) ?x62)))
 (let (($x98 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x53 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x54 (=> $x53 $x98)))
 (let ((?x30 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x30 (_ bv1 32))))
 (let (($x93 (= $x53 $x52)))
 (let (($x38 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x70 (=> $x24 $x38)))
 (let (($x42 (= ?x30 (_ bv0 32))))
 (let (($x67 (= $x24 $x42)))
 (let (($x57 (and $x67 $x70)))
 (let (($x72 (and $x57 $x93)))
 (let (($x101 (and $x72 $x54)))
 (let (($x9 (and $x101 $x44)))
 (let (($x95 (and $x9 $x45)))
 (let (($x50 (= $x95 true)))
 (let (($x32 (= $x50 true)))
 (let (($x107 (= $x32 true)))
 (let (($x65 (= $x43 true)))
 (let (($x68 (= $x65 true)))
 (let (($x40 (= $x68 true)))
 (let (($x108 (and $x40 $x107)))
 (let (($x46 (and $x53 $x108)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x94 (and $x33 $x46)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x29 (and $x23 $x94)))
 (let (($x109 (and $x38 $x29)))
 (let (($x11 (=> (and $x43 $x36) (or false (or false (and true (or $x39 $x60)))))))
 (let (($x16 (and $x11 $x109)))
 (let (($x15 (=> $x16 $x88)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x72)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x27))))
 (let (($x120 (= input.spec-%var-opt-0.2 ?x113)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x24 $x120)))
 (let (($x85 (= (_ bv0 32) ?x77)))
 (let ((?x41 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x41 (_ bv1 32))))
 (let (($x118 (= $x24 $x117)))
 (let (($x33 (= false false)))
 (let (($x38 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x38 $x33)))
 (let (($x114 (= ?x41 (_ bv0 32))))
 (let (($x115 (= $x38 $x114)))
 (let (($x116 (and $x115 $x75)))
 (let (($x119 (and $x116 $x118)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x56 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x50 (= true $x56)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x43)))
 (let (($x32 (=> $x76 $x50)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x103 (concat ?x100 (concat ?x97 ?x80)))))
 (let (($x44 (= input.dst.llvm-%opt ?x106)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x102)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x81 $x99)))
 (let (($x83 (and $x26 $x105)))
 (let (($x55 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and (and (and $x56 $x55) $x83) $x44)))
 (let (($x101 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x71 (=> $x24 $x101)))
 (let ((?x70 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x70 (_ bv1 32))))
 (let (($x98 (= $x24 $x6)))
 (let (($x87 (= ?x70 (_ bv0 32))))
 (let (($x66 (= $x38 $x87)))
 (let (($x62 (and $x66 $x75)))
 (let (($x54 (and $x62 $x98)))
 (let (($x17 (and $x54 $x71)))
 (let (($x95 (and $x17 $x45)))
 (let (($x107 (and $x95 $x32)))
 (let (($x108 (= $x107 true)))
 (let (($x46 (= $x108 true)))
 (let (($x94 (= $x46 true)))
 (let (($x30 (= $x76 true)))
 (let (($x42 (= $x30 true)))
 (let (($x67 (= $x42 true)))
 (let (($x29 (and $x67 $x94)))
 (let (($x109 (and $x24 $x29)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x16 (and $x21 $x109)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x47 (and $x68 $x16)))
 (let (($x88 (and $x33 $x47)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x49 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x23 (=> $x49 (or false (or false (and true (or $x28 $x25)))))))
 (let (($x51 (=> (and $x76 $x49) (or false (or false (and true (or $x28 $x25)))))))
 (let (($x15 (and $x51 $x88)))
 (let (($x125 (=> $x15 $x124)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x72)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x27))))
 (let (($x120 (= input.spec-%var-opt-0.2 ?x113)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x24 $x120)))
 (let (($x85 (= (_ bv0 32) ?x77)))
 (let ((?x41 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x41 (_ bv1 32))))
 (let (($x118 (= $x24 $x117)))
 (let (($x33 (= false false)))
 (let (($x38 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x38 $x33)))
 (let (($x114 (= ?x41 (_ bv0 32))))
 (let (($x115 (= $x38 $x114)))
 (let (($x116 (and $x115 $x75)))
 (let (($x119 (and $x116 $x118)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x56 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x50 (= true $x56)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x43)))
 (let (($x32 (=> $x76 $x50)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x103 (concat ?x100 (concat ?x97 ?x80)))))
 (let (($x44 (= input.dst.llvm-%opt ?x106)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x102)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x81 $x99)))
 (let (($x83 (and $x26 $x105)))
 (let (($x55 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and (and (and $x56 $x55) $x83) $x44)))
 (let (($x101 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x71 (=> $x24 $x101)))
 (let ((?x70 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x70 (_ bv1 32))))
 (let (($x98 (= $x24 $x6)))
 (let (($x87 (= ?x70 (_ bv0 32))))
 (let (($x66 (= $x38 $x87)))
 (let (($x62 (and $x66 $x75)))
 (let (($x54 (and $x62 $x98)))
 (let (($x17 (and $x54 $x71)))
 (let (($x95 (and $x17 $x45)))
 (let (($x107 (and $x95 $x32)))
 (let (($x108 (= $x107 true)))
 (let (($x46 (= $x108 true)))
 (let (($x94 (= $x46 true)))
 (let (($x30 (= $x76 true)))
 (let (($x42 (= $x30 true)))
 (let (($x67 (= $x42 true)))
 (let (($x29 (and $x67 $x94)))
 (let (($x109 (and $x24 $x29)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x16 (and $x21 $x109)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x47 (and $x68 $x16)))
 (let (($x88 (and $x33 $x47)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x49 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x23 (=> $x49 (or false (or false (and true (or $x28 $x25)))))))
 (let (($x51 (=> (and $x76 $x49) (or false (or false (and true (or $x28 $x25)))))))
 (let (($x15 (and $x51 $x88)))
 (let (($x125 (=> $x15 $x124)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3204423156 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv254 8)) (_ bv2 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)) (_ bv4138368216 32) (_ bv244 8)) (_ bv4138368217 32) (_ bv157 8)) (_ bv4138368218 32) (_ bv255 8)) (_ bv4138368219 32) (_ bv190 8)) (_ bv3204423156 32) (_ bv1 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4138368216 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4138368216 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4138368219 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0080ff00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x80)
                                #x0080ff02
                                #x00)
                         #x80000001
                         #xff)
                  #x0080ff00
                  #x00)))
  (store (store (store a!1 #x80000000 #x00) #x8080ff01 #x00) #x0080ff01 #x00)))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x8080ff00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x8080ff00)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0080ff03)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x8080ff00)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0080ff00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x48 (= input.spec-%tmpvar-6.E0%0%d.2 ?x52)))
 (let (($x112 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x13 (=> $x112 $x48)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x75 (_ bv1 32))))
 (let (($x86 (= $x112 $x77)))
 (let (($x21 (= false false)))
 (let (($x117 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (=> $x117 $x21)))
 (let (($x93 (= ?x75 (_ bv0 32))))
 (let (($x118 (= $x117 $x93)))
 (let (($x111 (and $x118 $x119)))
 (let (($x31 (and $x111 $x86)))
 (let (($x89 (and $x31 $x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x55 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x55)))
 (let (($x76 (not $x43)))
 (let (($x46 (=> $x76 $x108)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x106 (concat ?x80 (concat ?x100 ?x103)))))
 (let (($x45 (= input.dst.llvm-%opt ?x44)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x105)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x96 $x26)))
 (let (($x78 (and $x102 $x83)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and (and (and $x55 $x81) $x78) $x45)))
 (let (($x17 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x63 (=> $x38 $x17)))
 (let (($x101 (= $x38 $x77)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x72 (=> $x33 $x21)))
 (let (($x53 (= $x33 $x93)))
 (let (($x5 (and $x53 $x72)))
 (let (($x71 (and $x5 $x101)))
 (let (($x104 (and $x71 $x63)))
 (let (($x107 (and $x104 $x32)))
 (let (($x94 (and $x107 $x46)))
 (let (($x29 (= $x94 true)))
 (let (($x109 (= $x29 true)))
 (let (($x16 (= $x109 true)))
 (let (($x70 (= $x76 true)))
 (let (($x87 (= $x70 true)))
 (let (($x66 (= $x87 true)))
 (let (($x47 (and $x66 $x16)))
 (let (($x88 (and $x38 $x47)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x15 (and $x36 $x88)))
 (let (($x42 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x85 (and $x42 $x15)))
 (let (($x41 (and $x21 $x85)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x65 (or false (or false (and true (or $x64 $x11)))))))
 (let (($x74 (=> (and $x76 $x65) (or false (or false (and true (or $x64 $x11)))))))
 (let (($x114 (and $x74 $x41)))
 (let (($x113 (=> $x114 $x110)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x48 (= input.spec-%tmpvar-6.E0%0%d.2 ?x52)))
 (let (($x112 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x13 (=> $x112 $x48)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x75 (_ bv1 32))))
 (let (($x86 (= $x112 $x77)))
 (let (($x21 (= false false)))
 (let (($x117 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (=> $x117 $x21)))
 (let (($x93 (= ?x75 (_ bv0 32))))
 (let (($x118 (= $x117 $x93)))
 (let (($x111 (and $x118 $x119)))
 (let (($x31 (and $x111 $x86)))
 (let (($x89 (and $x31 $x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x55 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x55)))
 (let (($x76 (not $x43)))
 (let (($x46 (=> $x76 $x108)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x106 (concat ?x80 (concat ?x100 ?x103)))))
 (let (($x45 (= input.dst.llvm-%opt ?x44)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x105)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x96 $x26)))
 (let (($x78 (and $x102 $x83)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and (and (and $x55 $x81) $x78) $x45)))
 (let (($x17 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x63 (=> $x38 $x17)))
 (let (($x101 (= $x38 $x77)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x72 (=> $x33 $x21)))
 (let (($x53 (= $x33 $x93)))
 (let (($x5 (and $x53 $x72)))
 (let (($x71 (and $x5 $x101)))
 (let (($x104 (and $x71 $x63)))
 (let (($x107 (and $x104 $x32)))
 (let (($x94 (and $x107 $x46)))
 (let (($x29 (= $x94 true)))
 (let (($x109 (= $x29 true)))
 (let (($x16 (= $x109 true)))
 (let (($x70 (= $x76 true)))
 (let (($x87 (= $x70 true)))
 (let (($x66 (= $x87 true)))
 (let (($x47 (and $x66 $x16)))
 (let (($x88 (and $x38 $x47)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x15 (and $x36 $x88)))
 (let (($x42 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x85 (and $x42 $x15)))
 (let (($x41 (and $x21 $x85)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x65 (or false (or false (and true (or $x64 $x11)))))))
 (let (($x74 (=> (and $x76 $x65) (or false (or false (and true (or $x64 $x11)))))))
 (let (($x114 (and $x74 $x41)))
 (let (($x113 (=> $x114 $x110)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb7)
                     #xb6800218
                     #x1c)
              #xb680021a
              #xc1)
       #xb6800219
       #xfe))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb680021b)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb6800218)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv255776252 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4160531464 32) (_ bv252 8)) (_ bv4160531465 32) (_ bv213 8)) (_ bv4160531466 32) (_ bv62 8)) (_ bv4160531467 32) (_ bv15 8)) (_ bv255776252 32) (_ bv255 8)) (_ bv255776253 32) (_ bv255 8)) (_ bv255776254 32) (_ bv255 8)) (_ bv255776255 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4160531464 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4160531464 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4160531467 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let (($x104 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x33 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x33 $x104)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x72 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x72 (_ bv1 32))))
 (let (($x17 (= $x33 $x52)))
 (let (($x36 (= false false)))
 (let (($x21 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x21 $x36)))
 (let (($x98 (= ?x72 (_ bv0 32))))
 (let (($x24 (= $x21 $x98)))
 (let (($x22 (and $x24 $x54)))
 (let (($x63 (and $x22 $x17)))
 (let (($x7 (and $x63 $x56)))
 (let (($x119 (= $x7 true)))
 (let (($x111 (= $x119 true)))
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x29 (= true $x81)))
 (let (($x76 (not $x43)))
 (let (($x109 (=> $x76 $x29)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x44 (concat ?x103 (concat ?x80 ?x106)))))
 (let (($x32 (= input.dst.llvm-%opt ?x45)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x99 $x102)))
 (let (($x50 (and $x105 $x78)))
 (let (($x96 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and (and (and $x81 $x96) $x50) $x32)))
 (let (($x94 (and $x7 $x46)))
 (let (($x16 (and $x94 $x109)))
 (let (($x47 (= $x16 true)))
 (let (($x88 (= $x47 true)))
 (let (($x15 (= $x88 true)))
 (let (($x75 (= $x76 true)))
 (let (($x93 (= $x75 true)))
 (let (($x53 (= $x93 true)))
 (let (($x85 (and $x53 $x15)))
 (let (($x41 (and $x33 $x85)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x114 (and $x49 $x41)))
 (let (($x87 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (and $x87 $x114)))
 (let (($x117 (and $x36 $x115)))
 (let (($x51 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x30 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x42 (=> $x30 (or false (or false (and true (or $x23 $x51)))))))
 (let (($x10 (=> (and $x76 $x30) (or false (or false (and true (or $x23 $x51)))))))
 (let (($x118 (and $x10 $x117)))
 (let (($x112 (=> $x118 $x111)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let (($x104 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x33 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x33 $x104)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x72 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x72 (_ bv1 32))))
 (let (($x17 (= $x33 $x52)))
 (let (($x36 (= false false)))
 (let (($x21 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x21 $x36)))
 (let (($x98 (= ?x72 (_ bv0 32))))
 (let (($x24 (= $x21 $x98)))
 (let (($x22 (and $x24 $x54)))
 (let (($x63 (and $x22 $x17)))
 (let (($x7 (and $x63 $x56)))
 (let (($x119 (= $x7 true)))
 (let (($x111 (= $x119 true)))
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x29 (= true $x81)))
 (let (($x76 (not $x43)))
 (let (($x109 (=> $x76 $x29)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x44 (concat ?x103 (concat ?x80 ?x106)))))
 (let (($x32 (= input.dst.llvm-%opt ?x45)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x99 $x102)))
 (let (($x50 (and $x105 $x78)))
 (let (($x96 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and (and (and $x81 $x96) $x50) $x32)))
 (let (($x94 (and $x7 $x46)))
 (let (($x16 (and $x94 $x109)))
 (let (($x47 (= $x16 true)))
 (let (($x88 (= $x47 true)))
 (let (($x15 (= $x88 true)))
 (let (($x75 (= $x76 true)))
 (let (($x93 (= $x75 true)))
 (let (($x53 (= $x93 true)))
 (let (($x85 (and $x53 $x15)))
 (let (($x41 (and $x33 $x85)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x114 (and $x49 $x41)))
 (let (($x87 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (and $x87 $x114)))
 (let (($x117 (and $x36 $x115)))
 (let (($x51 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x30 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x42 (=> $x30 (or false (or false (and true (or $x23 $x51)))))))
 (let (($x10 (=> (and $x76 $x30) (or false (or false (and true (or $x23 $x51)))))))
 (let (($x118 (and $x10 $x117)))
 (let (($x112 (=> $x118 $x111)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x86 (= false true)))
 (let (($x18 (= $x86 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (= true $x96)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x43)))
 (let (($x88 (=> $x76 $x47)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x45 (concat ?x106 (concat ?x103 ?x44)))))
 (let (($x46 (= input.dst.llvm-%opt ?x32)))
 (let ((?x78 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x78)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x26 $x105)))
 (let (($x108 (and $x83 $x50)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and (and (and $x96 $x99) $x108) $x46)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x7 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x55 (=> $x21 $x7)))
 (let ((?x54 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x54 (_ bv1 32))))
 (let (($x104 (= $x21 $x6)))
 (let (($x49 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x36 $x49)))
 (let (($x101 (= ?x54 (_ bv0 32))))
 (let (($x38 (= $x36 $x101)))
 (let (($x20 (and $x38 $x71)))
 (let (($x56 (and $x20 $x104)))
 (let (($x9 (and $x56 $x55)))
 (let (($x16 (and $x9 $x109)))
 (let (($x15 (and $x16 $x88)))
 (let (($x85 (= $x15 true)))
 (let (($x41 (= $x85 true)))
 (let (($x114 (= $x41 true)))
 (let (($x72 (= $x76 true)))
 (let (($x98 (= $x72 true)))
 (let (($x24 (= $x98 true)))
 (let (($x115 (and $x24 $x114)))
 (let (($x117 (and $x21 $x115)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x118 (and $x65 $x117)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x119 (and $x93 $x118)))
 (let (($x111 (and $x49 $x119)))
 (let (($x74 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x70 (or false (or false (and true (or $x68 $x74)))))))
 (let (($x35 (=> (and $x76 $x70) (or false (or false (and true (or $x68 $x74)))))))
 (let (($x112 (and $x35 $x111)))
 (let (($x91 (=> $x112 $x18)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x86 (= false true)))
 (let (($x18 (= $x86 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (= true $x96)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x43)))
 (let (($x88 (=> $x76 $x47)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x45 (concat ?x106 (concat ?x103 ?x44)))))
 (let (($x46 (= input.dst.llvm-%opt ?x32)))
 (let ((?x78 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x78)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x26 $x105)))
 (let (($x108 (and $x83 $x50)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and (and (and $x96 $x99) $x108) $x46)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x7 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x55 (=> $x21 $x7)))
 (let ((?x54 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x54 (_ bv1 32))))
 (let (($x104 (= $x21 $x6)))
 (let (($x49 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x36 $x49)))
 (let (($x101 (= ?x54 (_ bv0 32))))
 (let (($x38 (= $x36 $x101)))
 (let (($x20 (and $x38 $x71)))
 (let (($x56 (and $x20 $x104)))
 (let (($x9 (and $x56 $x55)))
 (let (($x16 (and $x9 $x109)))
 (let (($x15 (and $x16 $x88)))
 (let (($x85 (= $x15 true)))
 (let (($x41 (= $x85 true)))
 (let (($x114 (= $x41 true)))
 (let (($x72 (= $x76 true)))
 (let (($x98 (= $x72 true)))
 (let (($x24 (= $x98 true)))
 (let (($x115 (and $x24 $x114)))
 (let (($x117 (and $x21 $x115)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x118 (and $x65 $x117)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x119 (and $x93 $x118)))
 (let (($x111 (and $x49 $x119)))
 (let (($x74 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x70 (or false (or false (and true (or $x68 $x74)))))))
 (let (($x35 (=> (and $x76 $x70) (or false (or false (and true (or $x68 $x74)))))))
 (let (($x112 (and $x35 $x111)))
 (let (($x91 (=> $x112 $x18)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x203b68e5
                     #x20)
              #x203b68e7
              #x20)
       #x203b68e6
       #x3b))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3690987004 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4157017272 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4157017272 32) (_ bv252 8)) (_ bv4157017273 32) (_ bv253 8)) (_ bv4157017274 32) (_ bv255 8)) (_ bv4157017275 32) (_ bv219 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4157017272 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4157017275 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x13 (= true false)))
 (let (($x89 (= $x13 true)))
 (let ((?x111 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x111)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x115 $x118)))
 (let (($x86 (and $x119 $x112)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x114 $x86)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let (($x39 (= $x60 true)))
 (let ((?x109 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x16 ((_ zero_extend 31) ?x109)))
 (let (($x47 (= (_ bv1 32) ?x16)))
 (let (($x88 (= $x47 true)))
 (let (($x15 (= $x88 true)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x52)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let ((?x8 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x8)))
 (let (($x100 (= ?x64 ?x7)))
 (let (($x103 (= $x100 true)))
 (let (($x44 (= $x103 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x84 (= (_ bv0 2) ?x29)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let (($x94 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x26 (=> $x43 $x94)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x22 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x22 (_ bv1 32))))
 (let (($x107 (= $x43 $x96)))
 (let (($x40 (= false false)))
 (let (($x104 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x81 (=> $x104 $x40)))
 (let (($x55 (= ?x22 (_ bv0 32))))
 (let (($x9 (= $x104 $x55)))
 (let (($x95 (and $x9 $x81)))
 (let (($x99 (and $x95 $x107)))
 (let (($x102 (and $x99 $x26)))
 (let (($x105 (= $x102 true)))
 (let (($x83 (= $x105 true)))
 (let (($x78 (= $x83 true)))
 (let (($x30 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x49 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x71 (=> $x49 (or false (or false (and true (or $x24 $x30)))))))
 (let (($x35 (= $x71 true)))
 (let (($x66 (= $x35 true)))
 (let (($x20 (= $x66 true)))
 (let (($x61 (= ?x64 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x68 (= $x61 true)))
 (let (($x70 (= $x68 true)))
 (let (($x21 (and $x70 $x20)))
 (let (($x50 (and $x21 $x78)))
 (let (($x106 (and $x50 $x80)))
 (let (($x97 (and $x106 $x44)))
 (let (($x85 (and $x97 $x15)))
 (let (($x92 (and $x85 $x39)))
 (let (($x25 (and $x43 $x92)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x31 (and $x23 $x25)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x116 (and $x58 $x31)))
 (let (($x48 (and $x40 $x116)))
 (let (($x27 (=> $x48 $x89)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x13 (= true false)))
 (let (($x89 (= $x13 true)))
 (let ((?x111 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x111)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x115 $x118)))
 (let (($x86 (and $x119 $x112)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x114 $x86)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let (($x39 (= $x60 true)))
 (let ((?x109 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x16 ((_ zero_extend 31) ?x109)))
 (let (($x47 (= (_ bv1 32) ?x16)))
 (let (($x88 (= $x47 true)))
 (let (($x15 (= $x88 true)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x52)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let ((?x8 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x8)))
 (let (($x100 (= ?x64 ?x7)))
 (let (($x103 (= $x100 true)))
 (let (($x44 (= $x103 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x84 (= (_ bv0 2) ?x29)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let (($x94 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x26 (=> $x43 $x94)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x22 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x22 (_ bv1 32))))
 (let (($x107 (= $x43 $x96)))
 (let (($x40 (= false false)))
 (let (($x104 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x81 (=> $x104 $x40)))
 (let (($x55 (= ?x22 (_ bv0 32))))
 (let (($x9 (= $x104 $x55)))
 (let (($x95 (and $x9 $x81)))
 (let (($x99 (and $x95 $x107)))
 (let (($x102 (and $x99 $x26)))
 (let (($x105 (= $x102 true)))
 (let (($x83 (= $x105 true)))
 (let (($x78 (= $x83 true)))
 (let (($x30 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x49 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x71 (=> $x49 (or false (or false (and true (or $x24 $x30)))))))
 (let (($x35 (= $x71 true)))
 (let (($x66 (= $x35 true)))
 (let (($x20 (= $x66 true)))
 (let (($x61 (= ?x64 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x68 (= $x61 true)))
 (let (($x70 (= $x68 true)))
 (let (($x21 (and $x70 $x20)))
 (let (($x50 (and $x21 $x78)))
 (let (($x106 (and $x50 $x80)))
 (let (($x97 (and $x106 $x44)))
 (let (($x85 (and $x97 $x15)))
 (let (($x92 (and $x85 $x39)))
 (let (($x25 (and $x43 $x92)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x31 (and $x23 $x25)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x116 (and $x58 $x31)))
 (let (($x48 (and $x40 $x116)))
 (let (($x27 (=> $x48 $x89)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2740979411 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1552580672 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x79 (= input.spec-%var-val-1.L2%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x55)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x95)))
 (let ((?x39 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x39)))
 (let (($x89 (= ?x92 ?x96)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x31 (= ?x92 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x85 $x114)))
 (let (($x119 (and $x115 $x118)))
 (let (($x15 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x15 $x119)))
 (let (($x112 (= $x111 true)))
 (let (($x86 (= $x112 true)))
 (let (($x18 (= $x86 true)))
 (let ((?x90 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x32 ((_ zero_extend 31) ?x90)))
 (let (($x46 (= (_ bv1 32) ?x32)))
 (let (($x109 (= $x46 true)))
 (let (($x16 (= $x109 true)))
 (let (($x84 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let (($x106 (= $x80 true)))
 (let ((?x102 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x105 (= (_ bv0 2) ?x102)))
 (let (($x83 (= $x105 true)))
 (let (($x78 (= $x83 true)))
 (let (($x34 (= input.spec-%var-opt-0.2 ?x96)))
 (let (($x54 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x62 (=> $x54 $x34)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x73 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x73 (_ bv1 32))))
 (let (($x33 (= $x54 $x17)))
 (let (($x49 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x57 (=> $x24 $x49)))
 (let (($x107 (= ?x73 (_ bv0 32))))
 (let (($x99 (= $x24 $x107)))
 (let (($x77 (and $x99 $x57)))
 (let (($x63 (and $x77 $x33)))
 (let (($x5 (and $x63 $x62)))
 (let (($x52 (= $x5 true)))
 (let (($x69 (= $x52 true)))
 (let (($x7 (= $x69 true)))
 (let (($x64 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x23 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x67 (=> $x23 (or false (or false (and true (or $x101 $x64)))))))
 (let (($x65 (= $x67 true)))
 (let (($x71 (= $x65 true)))
 (let (($x75 (= $x71 true)))
 (let (($x94 (and $x75 $x7)))
 (let (($x50 (and $x94 $x78)))
 (let (($x100 (and $x50 $x106)))
 (let (($x47 (and $x100 $x16)))
 (let (($x91 (and $x47 $x18)))
 (let (($x13 (and $x91 $x48)))
 (let (($x42 (and $x13 $x110)))
 (let (($x87 (and $x54 $x42)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x113 (and $x38 $x87)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x61 $x113)))
 (let (($x37 (and $x49 $x120)))
 (let (($x122 (=> $x37 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x79 (= input.spec-%var-val-1.L2%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x55)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x95)))
 (let ((?x39 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x39)))
 (let (($x89 (= ?x92 ?x96)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x31 (= ?x92 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x85 $x114)))
 (let (($x119 (and $x115 $x118)))
 (let (($x15 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x15 $x119)))
 (let (($x112 (= $x111 true)))
 (let (($x86 (= $x112 true)))
 (let (($x18 (= $x86 true)))
 (let ((?x90 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x32 ((_ zero_extend 31) ?x90)))
 (let (($x46 (= (_ bv1 32) ?x32)))
 (let (($x109 (= $x46 true)))
 (let (($x16 (= $x109 true)))
 (let (($x84 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let (($x106 (= $x80 true)))
 (let ((?x102 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x105 (= (_ bv0 2) ?x102)))
 (let (($x83 (= $x105 true)))
 (let (($x78 (= $x83 true)))
 (let (($x34 (= input.spec-%var-opt-0.2 ?x96)))
 (let (($x54 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x62 (=> $x54 $x34)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x73 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x73 (_ bv1 32))))
 (let (($x33 (= $x54 $x17)))
 (let (($x49 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x57 (=> $x24 $x49)))
 (let (($x107 (= ?x73 (_ bv0 32))))
 (let (($x99 (= $x24 $x107)))
 (let (($x77 (and $x99 $x57)))
 (let (($x63 (and $x77 $x33)))
 (let (($x5 (and $x63 $x62)))
 (let (($x52 (= $x5 true)))
 (let (($x69 (= $x52 true)))
 (let (($x7 (= $x69 true)))
 (let (($x64 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x23 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x67 (=> $x23 (or false (or false (and true (or $x101 $x64)))))))
 (let (($x65 (= $x67 true)))
 (let (($x71 (= $x65 true)))
 (let (($x75 (= $x71 true)))
 (let (($x94 (and $x75 $x7)))
 (let (($x50 (and $x94 $x78)))
 (let (($x100 (and $x50 $x106)))
 (let (($x47 (and $x100 $x16)))
 (let (($x91 (and $x47 $x18)))
 (let (($x13 (and $x91 $x48)))
 (let (($x42 (and $x13 $x110)))
 (let (($x87 (and $x54 $x42)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x113 (and $x38 $x87)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x61 $x113)))
 (let (($x37 (and $x49 $x120)))
 (let (($x122 (=> $x37 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x25)))
 (let (($x121 (= ?x31 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (= $x121 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x40)))
 (let (($x110 (= ?x31 ?x56)))
 (let (($x42 (= $x110 true)))
 (let (($x87 (= $x42 true)))
 (let (($x48 (= ?x31 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x13 (= $x48 true)))
 (let (($x89 (= $x13 true)))
 (let ((?x119 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x114 $x117)))
 (let (($x112 (and $x118 $x111)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x41 $x112)))
 (let (($x18 (= $x86 true)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let ((?x46 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x109 ((_ zero_extend 31) ?x46)))
 (let (($x16 (= (_ bv1 32) ?x109)))
 (let (($x47 (= $x16 true)))
 (let (($x88 (= $x47 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x80 true)))
 (let (($x100 (= $x106 true)))
 (let (($x103 (= $x100 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x78 (= (_ bv0 2) ?x83)))
 (let (($x50 (= $x78 true)))
 (let (($x108 (= $x50 true)))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x56)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x52 (=> $x74 $x5)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x57 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x57 (_ bv1 32))))
 (let (($x34 (= $x74 $x96)))
 (let (($x61 (= false false)))
 (let (($x99 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x55 (=> $x99 $x61)))
 (let (($x22 (= ?x57 (_ bv0 32))))
 (let (($x104 (= $x99 $x22)))
 (let (($x95 (and $x104 $x55)))
 (let (($x62 (and $x95 $x34)))
 (let (($x69 (and $x62 $x52)))
 (let (($x7 (= $x69 true)))
 (let (($x94 (= $x7 true)))
 (let (($x26 (= $x94 true)))
 (let (($x65 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x21 (=> $x24 (or false (or false (and true (or $x67 $x65)))))))
 (let (($x35 (= $x21 true)))
 (let (($x101 (= $x35 true)))
 (let (($x73 (= $x101 true)))
 (let (($x102 (and $x73 $x26)))
 (let (($x29 (and $x102 $x108)))
 (let (($x44 (and $x29 $x103)))
 (let (($x15 (and $x44 $x88)))
 (let (($x39 (and $x15 $x60)))
 (let (($x27 (and $x39 $x89)))
 (let (($x113 (and $x27 $x87)))
 (let (($x120 (and $x74 $x113)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x37 (and $x66 $x120)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x79 (and $x38 $x37)))
 (let (($x59 (and $x61 $x79)))
 (let (($x123 (=> $x59 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x25)))
 (let (($x121 (= ?x31 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (= $x121 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x40)))
 (let (($x110 (= ?x31 ?x56)))
 (let (($x42 (= $x110 true)))
 (let (($x87 (= $x42 true)))
 (let (($x48 (= ?x31 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x13 (= $x48 true)))
 (let (($x89 (= $x13 true)))
 (let ((?x119 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x114 $x117)))
 (let (($x112 (and $x118 $x111)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x41 $x112)))
 (let (($x18 (= $x86 true)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let ((?x46 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x109 ((_ zero_extend 31) ?x46)))
 (let (($x16 (= (_ bv1 32) ?x109)))
 (let (($x47 (= $x16 true)))
 (let (($x88 (= $x47 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x80 true)))
 (let (($x100 (= $x106 true)))
 (let (($x103 (= $x100 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x78 (= (_ bv0 2) ?x83)))
 (let (($x50 (= $x78 true)))
 (let (($x108 (= $x50 true)))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x56)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x52 (=> $x74 $x5)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x57 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x57 (_ bv1 32))))
 (let (($x34 (= $x74 $x96)))
 (let (($x61 (= false false)))
 (let (($x99 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x55 (=> $x99 $x61)))
 (let (($x22 (= ?x57 (_ bv0 32))))
 (let (($x104 (= $x99 $x22)))
 (let (($x95 (and $x104 $x55)))
 (let (($x62 (and $x95 $x34)))
 (let (($x69 (and $x62 $x52)))
 (let (($x7 (= $x69 true)))
 (let (($x94 (= $x7 true)))
 (let (($x26 (= $x94 true)))
 (let (($x65 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x21 (=> $x24 (or false (or false (and true (or $x67 $x65)))))))
 (let (($x35 (= $x21 true)))
 (let (($x101 (= $x35 true)))
 (let (($x73 (= $x101 true)))
 (let (($x102 (and $x73 $x26)))
 (let (($x29 (and $x102 $x108)))
 (let (($x44 (and $x29 $x103)))
 (let (($x15 (and $x44 $x88)))
 (let (($x39 (and $x15 $x60)))
 (let (($x27 (and $x39 $x89)))
 (let (($x113 (and $x27 $x87)))
 (let (($x120 (and $x74 $x113)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x37 (and $x66 $x120)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x79 (and $x38 $x37)))
 (let (($x59 (and $x61 $x79)))
 (let (($x123 (=> $x59 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x53 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem ?x53))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv2 32))) ?x82))))
 (let (($x138 (= input.spec-%var-opt-0.2 ?x131)))
 (let (($x30 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x139 (=> $x30 $x138)))
 (let (($x72 (= (_ bv0 32) ?x53)))
 (let ((?x124 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x124 (_ bv1 32))))
 (let (($x136 (= $x30 $x135)))
 (let (($x38 (= false false)))
 (let (($x56 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x94 (=> $x56 $x38)))
 (let (($x132 (= ?x124 (_ bv0 32))))
 (let (($x133 (= $x56 $x132)))
 (let (($x134 (and $x133 $x94)))
 (let (($x137 (and $x134 $x136)))
 (let (($x140 (and $x137 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let ((?x64 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x64)))
 (let (($x87 (= ?x24 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x113 (= $x87 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x25 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x25)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x91 $x39)))
 (let (($x116 (and $x92 $x31)))
 (let (($x18 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x18 $x116)))
 (let (($x13 (= $x48 true)))
 (let (($x89 (= $x13 true)))
 (let (($x27 (= $x89 true)))
 (let ((?x115 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x117 ((_ zero_extend 31) ?x115)))
 (let (($x118 (= (_ bv1 32) ?x117)))
 (let (($x119 (= $x118 true)))
 (let (($x111 (= $x119 true)))
 (let (($x109 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x16 (= $x109 true)))
 (let (($x47 (= $x16 true)))
 (let (($x88 (= $x47 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x103 (= (_ bv0 2) ?x100)))
 (let (($x44 (= $x103 true)))
 (let (($x97 (= $x44 true)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x35)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x99)))
 (let (($x50 (=> $x30 $x78)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x52 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x52 (_ bv1 32))))
 (let (($x105 (= $x30 $x102)))
 (let (($x69 (= ?x52 (_ bv0 32))))
 (let (($x7 (= $x56 $x69)))
 (let (($x26 (and $x7 $x94)))
 (let (($x83 (and $x26 $x105)))
 (let (($x108 (and $x83 $x50)))
 (let (($x29 (= $x108 true)))
 (let (($x84 (= $x29 true)))
 (let (($x45 (= $x84 true)))
 (let (($x77 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x17 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x33 (=> $x17 (or false (or false (and true (or $x62 $x77)))))))
 (let (($x61 (= $x33 true)))
 (let (($x55 (= $x61 true)))
 (let (($x54 (= $x55 true)))
 (let (($x49 (= ?x24 ?x99)))
 (let (($x57 (= $x49 true)))
 (let (($x22 (= $x57 true)))
 (let (($x63 (and $x22 $x54)))
 (let (($x80 (and $x63 $x45)))
 (let (($x90 (and $x80 $x97)))
 (let (($x15 (and $x90 $x88)))
 (let (($x112 (and $x15 $x111)))
 (let (($x110 (and $x112 $x27)))
 (let (($x37 (and $x110 $x120)))
 (let (($x79 (and $x30 $x37)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x23 $x79)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x20 $x59)))
 (let (($x122 (and $x38 $x121)))
 (let (($x143 (=> $x122 $x142)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x53 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem ?x53))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv2 32))) ?x82))))
 (let (($x138 (= input.spec-%var-opt-0.2 ?x131)))
 (let (($x30 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x139 (=> $x30 $x138)))
 (let (($x72 (= (_ bv0 32) ?x53)))
 (let ((?x124 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x124 (_ bv1 32))))
 (let (($x136 (= $x30 $x135)))
 (let (($x38 (= false false)))
 (let (($x56 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x94 (=> $x56 $x38)))
 (let (($x132 (= ?x124 (_ bv0 32))))
 (let (($x133 (= $x56 $x132)))
 (let (($x134 (and $x133 $x94)))
 (let (($x137 (and $x134 $x136)))
 (let (($x140 (and $x137 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let ((?x64 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x64)))
 (let (($x87 (= ?x24 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x113 (= $x87 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x25 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x25)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x91 $x39)))
 (let (($x116 (and $x92 $x31)))
 (let (($x18 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x18 $x116)))
 (let (($x13 (= $x48 true)))
 (let (($x89 (= $x13 true)))
 (let (($x27 (= $x89 true)))
 (let ((?x115 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x117 ((_ zero_extend 31) ?x115)))
 (let (($x118 (= (_ bv1 32) ?x117)))
 (let (($x119 (= $x118 true)))
 (let (($x111 (= $x119 true)))
 (let (($x109 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x16 (= $x109 true)))
 (let (($x47 (= $x16 true)))
 (let (($x88 (= $x47 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x103 (= (_ bv0 2) ?x100)))
 (let (($x44 (= $x103 true)))
 (let (($x97 (= $x44 true)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x35)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x99)))
 (let (($x50 (=> $x30 $x78)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x52 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x52 (_ bv1 32))))
 (let (($x105 (= $x30 $x102)))
 (let (($x69 (= ?x52 (_ bv0 32))))
 (let (($x7 (= $x56 $x69)))
 (let (($x26 (and $x7 $x94)))
 (let (($x83 (and $x26 $x105)))
 (let (($x108 (and $x83 $x50)))
 (let (($x29 (= $x108 true)))
 (let (($x84 (= $x29 true)))
 (let (($x45 (= $x84 true)))
 (let (($x77 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x17 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x33 (=> $x17 (or false (or false (and true (or $x62 $x77)))))))
 (let (($x61 (= $x33 true)))
 (let (($x55 (= $x61 true)))
 (let (($x54 (= $x55 true)))
 (let (($x49 (= ?x24 ?x99)))
 (let (($x57 (= $x49 true)))
 (let (($x22 (= $x57 true)))
 (let (($x63 (and $x22 $x54)))
 (let (($x80 (and $x63 $x45)))
 (let (($x90 (and $x80 $x97)))
 (let (($x15 (and $x90 $x88)))
 (let (($x112 (and $x15 $x111)))
 (let (($x110 (and $x112 $x27)))
 (let (($x37 (and $x110 $x120)))
 (let (($x79 (and $x30 $x37)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x23 $x79)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x20 $x59)))
 (let (($x122 (and $x38 $x121)))
 (let (($x143 (=> $x122 $x142)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= nextpc_const.1 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= func.calla4bcb626de6152719ca44f8b649b9c4a.reg @fun_25)
(= input.dst.llvm-mem.alloc @fun_23)
(= memzero_memvar @fun_22)
(= input.dst.llvm-mem @fun_20)
(function @fun_25
 (type
  (FunType7 (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32)))
 (= (@fun_25 #b00000000 #b00000000 @fun_22 @fun_23 #b00000000000000000000000000000000 #b00000000000000000000001111101000 #b00000000000000000000000000000000)
    #b00000000000000000000000000000000)
 (default #b10000000000000000000000000000000))
(function @fun_23
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
(function @fun_22
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000010))
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_20 #b10000000000000000000000000000000) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000011) #b00000000)
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((BOUND_VARIABLE_4307 (_ BitVec 8)) (BOUND_VARIABLE_4308 (_ BitVec 8)) (BOUND_VARIABLE_4309 (Array (_ BitVec 32) (_ BitVec 8))) (BOUND_VARIABLE_4310 (Array (_ BitVec 32) (_ BitVec 8))) (BOUND_VARIABLE_4311 (_ BitVec 32)) (BOUND_VARIABLE_4312 (_ BitVec 32)) (BOUND_VARIABLE_4313 (_ BitVec 32))) (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun nextpc_const.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)))
(define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv16384 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1732282064 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1732282064 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1732282067 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv447725632 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x2b)
                                #x00000002
                                #x38)
                         #x00000004
                         #x39)
                  #x00000005
                  #x39)))
  (store (store (store (store a!1 #x00000004 #x39) #x00000007 #x39)
                #x00000005
                #x39)
         #x00000006
         #x39)))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x39393939)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x39393939)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x39393939)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x39393939)
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x00)
              (= x!1 #x00)
              (= x!2 ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
              (= x!3 ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x39393939))
      #x00000002
      #x00000000))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x15)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x115)))
 (let (($x135 (= input.spec-%tmpvar-6.E0%0%d.2 ?x118)))
 (let (($x132 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x136 (=> $x132 $x135)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x46 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x46 (_ bv1 32))))
 (let (($x133 (= $x132 $x18)))
 (let (($x20 (= false false)))
 (let (($x36 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x36 $x20)))
 (let (($x119 (= ?x46 (_ bv0 32))))
 (let (($x53 (= $x36 $x119)))
 (let (($x124 (and $x53 $x72)))
 (let (($x134 (and $x124 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x129 (= $x137 true)))
 (let (($x130 (= $x129 true)))
 (let ((?x101 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x101)))
 (let (($x120 (= ?x73 ?x118)))
 (let (($x37 (= $x120 true)))
 (let (($x79 (= $x37 true)))
 (let ((?x27 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x110 (= (_ bv0 2) ?x27)))
 (let (($x42 (= $x110 true)))
 (let (($x87 (= $x42 true)))
 (let (($x39 (= input.spec-%var-opt-0.2 ?x118)))
 (let (($x19 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x92 (=> $x19 $x39)))
 (let (($x91 (= $x19 $x18)))
 (let (($x90 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x90 $x20)))
 (let (($x111 (= $x90 $x119)))
 (let (($x86 (and $x111 $x112)))
 (let (($x60 (and $x86 $x91)))
 (let (($x25 (and $x60 $x92)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let (($x29 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x100 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x103 (=> $x100 (or false (or false (and true (or $x108 $x29)))))))
 (let (($x102 (= $x103 true)))
 (let (($x105 (= $x102 true)))
 (let (($x44 (= $x105 true)))
 (let (($x5 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x52 (= $x5 true)))
 (let (($x69 (= $x52 true)))
 (let (($x7 (= $x69 true)))
 (let ((?x6 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x6)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x17 $x34)))
 (let (($x9 (and $x77 $x43)))
 (let (($x95 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x95 $x9)))
 (let (($x61 (= $x33 true)))
 (let (($x55 (= $x61 true)))
 (let (($x54 (= $x55 true)))
 (let ((?x70 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x75 ((_ zero_extend 31) ?x70)))
 (let (($x35 (= (_ bv1 32) ?x75)))
 (let (($x99 (= $x35 true)))
 (let (($x49 (= $x99 true)))
 (let (($x93 (= ?x73 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x51 (= $x93 true)))
 (let (($x21 (= $x51 true)))
 (let (($x57 (and $x21 $x49)))
 (let (($x63 (and $x57 $x54)))
 (let (($x38 (and $x63 $x7)))
 (let (($x97 (and $x38 $x44)))
 (let (($x13 (and $x97 $x48)))
 (let (($x113 (and $x13 $x87)))
 (let (($x59 (and $x113 $x79)))
 (let (($x121 (and $x19 $x59)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (and $x64 $x121)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x58 (and $x23 $x122)))
 (let (($x123 (and $x20 $x58)))
 (let (($x14 (=> $x123 $x130)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x15)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x115)))
 (let (($x135 (= input.spec-%tmpvar-6.E0%0%d.2 ?x118)))
 (let (($x132 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x136 (=> $x132 $x135)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x46 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x46 (_ bv1 32))))
 (let (($x133 (= $x132 $x18)))
 (let (($x20 (= false false)))
 (let (($x36 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x36 $x20)))
 (let (($x119 (= ?x46 (_ bv0 32))))
 (let (($x53 (= $x36 $x119)))
 (let (($x124 (and $x53 $x72)))
 (let (($x134 (and $x124 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x129 (= $x137 true)))
 (let (($x130 (= $x129 true)))
 (let ((?x101 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x101)))
 (let (($x120 (= ?x73 ?x118)))
 (let (($x37 (= $x120 true)))
 (let (($x79 (= $x37 true)))
 (let ((?x27 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x110 (= (_ bv0 2) ?x27)))
 (let (($x42 (= $x110 true)))
 (let (($x87 (= $x42 true)))
 (let (($x39 (= input.spec-%var-opt-0.2 ?x118)))
 (let (($x19 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x92 (=> $x19 $x39)))
 (let (($x91 (= $x19 $x18)))
 (let (($x90 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x90 $x20)))
 (let (($x111 (= $x90 $x119)))
 (let (($x86 (and $x111 $x112)))
 (let (($x60 (and $x86 $x91)))
 (let (($x25 (and $x60 $x92)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let (($x29 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x100 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x103 (=> $x100 (or false (or false (and true (or $x108 $x29)))))))
 (let (($x102 (= $x103 true)))
 (let (($x105 (= $x102 true)))
 (let (($x44 (= $x105 true)))
 (let (($x5 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x52 (= $x5 true)))
 (let (($x69 (= $x52 true)))
 (let (($x7 (= $x69 true)))
 (let ((?x6 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x6)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x17 $x34)))
 (let (($x9 (and $x77 $x43)))
 (let (($x95 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x95 $x9)))
 (let (($x61 (= $x33 true)))
 (let (($x55 (= $x61 true)))
 (let (($x54 (= $x55 true)))
 (let ((?x70 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x75 ((_ zero_extend 31) ?x70)))
 (let (($x35 (= (_ bv1 32) ?x75)))
 (let (($x99 (= $x35 true)))
 (let (($x49 (= $x99 true)))
 (let (($x93 (= ?x73 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x51 (= $x93 true)))
 (let (($x21 (= $x51 true)))
 (let (($x57 (and $x21 $x49)))
 (let (($x63 (and $x57 $x54)))
 (let (($x38 (and $x63 $x7)))
 (let (($x97 (and $x38 $x44)))
 (let (($x13 (and $x97 $x48)))
 (let (($x113 (and $x13 $x87)))
 (let (($x59 (and $x113 $x79)))
 (let (($x121 (and $x19 $x59)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (and $x64 $x121)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x58 (and $x23 $x122)))
 (let (($x123 (and $x20 $x58)))
 (let (($x14 (=> $x123 $x130)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c1fe1f)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c1fe1c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv380256320 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv380256320 32) (_ bv255 8)) (_ bv380256321 32) (_ bv255 8)) (_ bv380256322 32) (_ bv255 8)) (_ bv380256323 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv694167251 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv694167248 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv694167248 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x53 (= false true)))
 (let (($x72 (= $x53 true)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x87)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x89 $x110)))
 (let (($x120 (and $x42 $x113)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x120)))
 (let (($x79 (= $x37 true)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x118 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x39 ((_ zero_extend 31) ?x118)))
 (let (($x92 (= (_ bv1 32) ?x39)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x41 (= $x85 true)))
 (let (($x114 (= $x41 true)))
 (let (($x47 (= $x114 true)))
 (let ((?x86 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x19 (= (_ bv0 2) ?x86)))
 (let (($x18 (= $x19 true)))
 (let (($x91 (= $x18 true)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x104)))
 (let (($x107 (= input.spec-%var-opt-0.2 ?x96)))
 (let (($x10 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x90 (=> $x10 $x107)))
 (let (($x84 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x45 (ite $x84 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x45 (_ bv1 32))))
 (let (($x44 (= $x10 $x105)))
 (let (($x23 (= false false)))
 (let (($x29 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x103 (=> $x29 $x23)))
 (let (($x80 (= ?x45 (_ bv0 32))))
 (let (($x106 (= $x29 $x80)))
 (let (($x102 (and $x106 $x103)))
 (let (($x97 (and $x102 $x44)))
 (let (($x32 (and $x97 $x90)))
 (let (($x46 (= $x32 true)))
 (let (($x119 (= $x46 true)))
 (let (($x111 (= $x119 true)))
 (let (($x52 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x78 (=> $x83 (or false (or false (and true (or $x5 $x52)))))))
 (let (($x55 (= $x78 true)))
 (let (($x54 (= $x55 true)))
 (let (($x100 (= $x54 true)))
 (let ((?x51 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x51)))
 (let (($x6 (= ?x21 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x43 (= $x6 true)))
 (let (($x9 (= $x43 true)))
 (let (($x62 (= ?x21 ?x96)))
 (let (($x34 (= $x62 true)))
 (let (($x77 (= $x34 true)))
 (let (($x33 (and $x77 $x9)))
 (let (($x50 (and $x33 $x100)))
 (let (($x20 (and $x50 $x111)))
 (let (($x60 (and $x20 $x91)))
 (let (($x88 (and $x60 $x47)))
 (let (($x116 (and $x88 $x31)))
 (let (($x122 (and $x116 $x121)))
 (let (($x58 (and $x10 $x122)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x123 (and $x101 $x58)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x28 (and $x64 $x123)))
 (let (($x36 (and $x23 $x28)))
 (let (($x124 (=> $x36 $x72)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x53 (= false true)))
 (let (($x72 (= $x53 true)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x87)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x89 $x110)))
 (let (($x120 (and $x42 $x113)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x120)))
 (let (($x79 (= $x37 true)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x118 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x39 ((_ zero_extend 31) ?x118)))
 (let (($x92 (= (_ bv1 32) ?x39)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x41 (= $x85 true)))
 (let (($x114 (= $x41 true)))
 (let (($x47 (= $x114 true)))
 (let ((?x86 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x19 (= (_ bv0 2) ?x86)))
 (let (($x18 (= $x19 true)))
 (let (($x91 (= $x18 true)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x99)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x104)))
 (let (($x107 (= input.spec-%var-opt-0.2 ?x96)))
 (let (($x10 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x90 (=> $x10 $x107)))
 (let (($x84 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x45 (ite $x84 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x45 (_ bv1 32))))
 (let (($x44 (= $x10 $x105)))
 (let (($x23 (= false false)))
 (let (($x29 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x103 (=> $x29 $x23)))
 (let (($x80 (= ?x45 (_ bv0 32))))
 (let (($x106 (= $x29 $x80)))
 (let (($x102 (and $x106 $x103)))
 (let (($x97 (and $x102 $x44)))
 (let (($x32 (and $x97 $x90)))
 (let (($x46 (= $x32 true)))
 (let (($x119 (= $x46 true)))
 (let (($x111 (= $x119 true)))
 (let (($x52 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x78 (=> $x83 (or false (or false (and true (or $x5 $x52)))))))
 (let (($x55 (= $x78 true)))
 (let (($x54 (= $x55 true)))
 (let (($x100 (= $x54 true)))
 (let ((?x51 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x51)))
 (let (($x6 (= ?x21 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x43 (= $x6 true)))
 (let (($x9 (= $x43 true)))
 (let (($x62 (= ?x21 ?x96)))
 (let (($x34 (= $x62 true)))
 (let (($x77 (= $x34 true)))
 (let (($x33 (and $x77 $x9)))
 (let (($x50 (and $x33 $x100)))
 (let (($x20 (and $x50 $x111)))
 (let (($x60 (and $x20 $x91)))
 (let (($x88 (and $x60 $x47)))
 (let (($x116 (and $x88 $x31)))
 (let (($x122 (and $x116 $x121)))
 (let (($x58 (and $x10 $x122)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x123 (and $x101 $x58)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x28 (and $x64 $x123)))
 (let (($x36 (and $x23 $x28)))
 (let (($x124 (=> $x36 $x72)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2740979411 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1552580672 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x58 (= true false)))
 (let (($x123 (= $x58 true)))
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x89)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x31 $x48)))
 (let (($x110 (and $x13 $x27)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x25 $x110)))
 (let (($x87 (= $x42 true)))
 (let (($x113 (= $x87 true)))
 (let (($x120 (= $x113 true)))
 (let (($x41 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x15 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x115 (=> $x15 (or false (or false (and true (or $x85 $x41)))))))
 (let (($x19 (= $x115 true)))
 (let (($x18 (= $x19 true)))
 (let (($x118 (= $x18 true)))
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x119 (= (_ bv0 2) ?x46)))
 (let (($x111 (= $x119 true)))
 (let (($x20 (= $x111 true)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x45)))
 (let ((?x103 (concat (select input.dst.llvm-mem ?x81) ?x106)))
 (let (($x102 (= input.spec-%var-opt-0.2 ?x103)))
 (let (($x93 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x93 $x102)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x95 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x98 (bvuge ?x95 (_ bv1 32))))
 (let (($x83 (= $x93 $x98)))
 (let (($x21 (= false false)))
 (let (($x17 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x61 (=> $x17 $x21)))
 (let (($x9 (= ?x95 (_ bv0 32))))
 (let (($x33 (= $x17 $x9)))
 (let (($x63 (and $x33 $x61)))
 (let (($x40 (and $x63 $x83)))
 (let (($x105 (and $x40 $x10)))
 (let (($x44 (= $x105 true)))
 (let (($x97 (= $x44 true)))
 (let (($x107 (= $x97 true)))
 (let ((?x78 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x78)))
 (let (($x54 (= ?x55 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x100 (= $x54 true)))
 (let (($x50 (= $x100 true)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x35) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x96 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x81) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x96) ?x99))))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x43)))
 (let (($x56 (=> $x93 $x5)))
 (let (($x52 (and $x40 $x56)))
 (let (($x69 (= $x52 true)))
 (let (($x7 (= $x69 true)))
 (let (($x38 (= $x7 true)))
 (let (($x11 (and $x38 $x50)))
 (let (($x90 (and $x11 $x107)))
 (let (($x112 (and $x90 $x20)))
 (let (($x39 (and $x112 $x118)))
 (let (($x37 (and $x39 $x120)))
 (let (($x79 (and $x93 $x37)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x71 $x79)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x64 $x59)))
 (let (($x122 (and $x21 $x121)))
 (let (($x28 (=> $x122 $x123)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x58 (= true false)))
 (let (($x123 (= $x58 true)))
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x89)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x31 $x48)))
 (let (($x110 (and $x13 $x27)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x25 $x110)))
 (let (($x87 (= $x42 true)))
 (let (($x113 (= $x87 true)))
 (let (($x120 (= $x113 true)))
 (let (($x41 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x15 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x115 (=> $x15 (or false (or false (and true (or $x85 $x41)))))))
 (let (($x19 (= $x115 true)))
 (let (($x18 (= $x19 true)))
 (let (($x118 (= $x18 true)))
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x119 (= (_ bv0 2) ?x46)))
 (let (($x111 (= $x119 true)))
 (let (($x20 (= $x111 true)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x45)))
 (let ((?x103 (concat (select input.dst.llvm-mem ?x81) ?x106)))
 (let (($x102 (= input.spec-%var-opt-0.2 ?x103)))
 (let (($x93 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x93 $x102)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x95 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x98 (bvuge ?x95 (_ bv1 32))))
 (let (($x83 (= $x93 $x98)))
 (let (($x21 (= false false)))
 (let (($x17 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x61 (=> $x17 $x21)))
 (let (($x9 (= ?x95 (_ bv0 32))))
 (let (($x33 (= $x17 $x9)))
 (let (($x63 (and $x33 $x61)))
 (let (($x40 (and $x63 $x83)))
 (let (($x105 (and $x40 $x10)))
 (let (($x44 (= $x105 true)))
 (let (($x97 (= $x44 true)))
 (let (($x107 (= $x97 true)))
 (let ((?x78 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x78)))
 (let (($x54 (= ?x55 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x100 (= $x54 true)))
 (let (($x50 (= $x100 true)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x35) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x96 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x81) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x96) ?x99))))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x43)))
 (let (($x56 (=> $x93 $x5)))
 (let (($x52 (and $x40 $x56)))
 (let (($x69 (= $x52 true)))
 (let (($x7 (= $x69 true)))
 (let (($x38 (= $x7 true)))
 (let (($x11 (and $x38 $x50)))
 (let (($x90 (and $x11 $x107)))
 (let (($x112 (and $x90 $x20)))
 (let (($x39 (and $x112 $x118)))
 (let (($x37 (and $x39 $x120)))
 (let (($x79 (and $x93 $x37)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x71 $x79)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x64 $x59)))
 (let (($x122 (and $x21 $x121)))
 (let (($x28 (=> $x122 $x123)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(= input.dst.llvm-mem.Lif.then%2%fcallEnd @fun_12)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000000) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000011) #b00000000)
 (default #b00000001))
(function @fun_12
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3846309584 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3846309584 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3846309587 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv413466688 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv512 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)) (_ bv413466688 32) (_ bv0 8)) (_ bv413466689 32) (_ bv0 8)) (_ bv413466690 32) (_ bv0 8)) (_ bv413466691 32) (_ bv0 8)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x36 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x134 (=> $x36 true)))
 (let (($x8 (= $x134 true)))
 (let (($x135 (= $x8 true)))
 (let (($x22 (= $x36 true)))
 (let (($x73 (= $x22 true)))
 (let (($x53 (= $x73 true)))
 (let ((?x113 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x113)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x27 $x42)))
 (let (($x37 (and $x87 $x120)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x89 $x37)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let (($x122 (= $x121 true)))
 (let (($x92 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x16 (= (_ bv0 2) ?x88)))
 (let (($x115 (= $x16 true)))
 (let (($x19 (= $x115 true)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x111)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x112)))
 (let (($x60 (= input.spec-%var-opt-0.2 ?x91)))
 (let (($x96 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x15 (=> $x96 $x60)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x11 (bvuge ?x75 (_ bv1 32))))
 (let (($x108 (= $x96 $x11)))
 (let (($x57 (= false false)))
 (let (($x35 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x100 (=> $x35 $x57)))
 (let (($x55 (= ?x75 (_ bv0 32))))
 (let (($x54 (= $x35 $x55)))
 (let (($x50 (and $x54 $x100)))
 (let (($x23 (and $x50 $x108)))
 (let (($x109 (and $x23 $x15)))
 (let (($x85 (= $x109 true)))
 (let (($x117 (= $x85 true)))
 (let (($x41 (= $x117 true)))
 (let ((?x10 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x10)))
 (let (($x44 (= ?x105 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x97 (= $x44 true)))
 (let (($x107 (= $x97 true)))
 (let ((?x43 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x43) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x69 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x9 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x9) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x69) ?x56))))
 (let (($x80 (= input.spec-%var-opt-0.2 ?x78)))
 (let (($x84 (=> $x96 $x80)))
 (let (($x29 (and $x23 $x84)))
 (let (($x45 (= $x29 true)))
 (let (($x106 (= $x45 true)))
 (let (($x103 (= $x106 true)))
 (let (($x90 (and $x103 $x107)))
 (let (($x114 (and $x90 $x41)))
 (let (($x18 (and $x114 $x19)))
 (let (($x48 (and $x18 $x116)))
 (let (($x58 (and $x48 $x122)))
 (let (($x72 (and $x58 $x53)))
 (let (($x124 (and $x96 $x72)))
 (let (($x104 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x132 (and $x104 $x124)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x76 (and $x81 $x132)))
 (let (($x65 (and $x57 $x76)))
 (let (($x21 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x40 (=> $x83 (or false (or false (and true (or $x33 $x21)))))))
 (let (($x133 (and $x40 $x65)))
 (let (($x136 (=> $x133 $x135)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x36 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x134 (=> $x36 true)))
 (let (($x8 (= $x134 true)))
 (let (($x135 (= $x8 true)))
 (let (($x22 (= $x36 true)))
 (let (($x73 (= $x22 true)))
 (let (($x53 (= $x73 true)))
 (let ((?x113 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x113)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x27 $x42)))
 (let (($x37 (and $x87 $x120)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x89 $x37)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let (($x122 (= $x121 true)))
 (let (($x92 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x16 (= (_ bv0 2) ?x88)))
 (let (($x115 (= $x16 true)))
 (let (($x19 (= $x115 true)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x111)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x112)))
 (let (($x60 (= input.spec-%var-opt-0.2 ?x91)))
 (let (($x96 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x15 (=> $x96 $x60)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x11 (bvuge ?x75 (_ bv1 32))))
 (let (($x108 (= $x96 $x11)))
 (let (($x57 (= false false)))
 (let (($x35 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x100 (=> $x35 $x57)))
 (let (($x55 (= ?x75 (_ bv0 32))))
 (let (($x54 (= $x35 $x55)))
 (let (($x50 (and $x54 $x100)))
 (let (($x23 (and $x50 $x108)))
 (let (($x109 (and $x23 $x15)))
 (let (($x85 (= $x109 true)))
 (let (($x117 (= $x85 true)))
 (let (($x41 (= $x117 true)))
 (let ((?x10 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x10)))
 (let (($x44 (= ?x105 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x97 (= $x44 true)))
 (let (($x107 (= $x97 true)))
 (let ((?x43 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x43) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x69 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x9 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x9) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x69) ?x56))))
 (let (($x80 (= input.spec-%var-opt-0.2 ?x78)))
 (let (($x84 (=> $x96 $x80)))
 (let (($x29 (and $x23 $x84)))
 (let (($x45 (= $x29 true)))
 (let (($x106 (= $x45 true)))
 (let (($x103 (= $x106 true)))
 (let (($x90 (and $x103 $x107)))
 (let (($x114 (and $x90 $x41)))
 (let (($x18 (and $x114 $x19)))
 (let (($x48 (and $x18 $x116)))
 (let (($x58 (and $x48 $x122)))
 (let (($x72 (and $x58 $x53)))
 (let (($x124 (and $x96 $x72)))
 (let (($x104 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x132 (and $x104 $x124)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x76 (and $x81 $x132)))
 (let (($x65 (and $x57 $x76)))
 (let (($x21 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x40 (=> $x83 (or false (or false (and true (or $x33 $x21)))))))
 (let (($x133 (and $x40 $x65)))
 (let (($x136 (=> $x133 $x135)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x31 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x94 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x12 (=> $x94 $x31)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x97 (_ bv1 32))))
 (let (($x30 (= $x94 $x41)))
 (let (($x104 (= false false)))
 (let (($x129 (= (_ bv1 32) (_ bv0 32))))
 (let (($x14 (=> $x129 $x104)))
 (let (($x15 (= ?x97 (_ bv0 32))))
 (let (($x130 (= $x129 $x15)))
 (let (($x127 (and $x130 $x14)))
 (let (($x126 (and $x127 $x30)))
 (let (($x125 (and $x126 $x12)))
 (let (($x82 (= $x125 true)))
 (let (($x128 (= $x82 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x65 (= (_ bv0 2) ?x76)))
 (let (($x133 (= $x65 true)))
 (let (($x134 (= $x133 true)))
 (let (($x45 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x22 (and $x45 $x31)))
 (let (($x73 (= $x22 true)))
 (let (($x53 (= $x73 true)))
 (let (($x72 (= $x53 true)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x87)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x59 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x75 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x75 $x59)))
 (let (($x114 (= $x75 $x41)))
 (let (($x105 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x85 (=> $x105 $x104)))
 (let (($x109 (= $x105 $x15)))
 (let (($x117 (and $x109 $x85)))
 (let (($x47 (and $x117 $x114)))
 (let (($x122 (and $x47 $x121)))
 (let (($x58 (= $x122 true)))
 (let (($x123 (= $x58 true)))
 (let (($x28 (= $x123 true)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let (($x13 (= $x48 true)))
 (let ((?x32 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x32) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x61 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x61) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x46) ?x20))))
 (let (($x88 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x16 (=> $x75 $x88)))
 (let (($x115 (and $x47 $x16)))
 (let (($x19 (= $x115 true)))
 (let (($x18 (= $x19 true)))
 (let (($x118 (= $x18 true)))
 (let (($x106 (= $x45 true)))
 (let (($x103 (= $x106 true)))
 (let (($x102 (= $x103 true)))
 (let ((?x7 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x7)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x23 $x26)))
 (let (($x5 (and $x52 $x43)))
 (let (($x108 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x108 $x5)))
 (let (($x56 (= $x34 true)))
 (let (($x38 (= $x56 true)))
 (let (($x78 (= $x38 true)))
 (let ((?x54 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x54)))
 (let (($x100 (= ?x57 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (= $x100 true)))
 (let (($x96 (= $x50 true)))
 (let (($x80 (and $x96 $x78)))
 (let (($x10 (and $x80 $x102)))
 (let (($x39 (and $x10 $x118)))
 (let (($x89 (and $x39 $x13)))
 (let (($x36 (and $x89 $x28)))
 (let (($x124 (and $x36 $x72)))
 (let (($x8 (and $x124 $x134)))
 (let (($x135 (and $x75 $x8)))
 (let (($x70 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x136 (and $x70 $x135)))
 (let (($x62 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x137 (and $x62 $x136)))
 (let (($x68 (and $x104 $x137)))
 (let (($x93 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x81 (or false (or false (and true (or $x63 $x93)))))))
 (let (($x67 (and $x6 $x68)))
 (let (($x131 (=> $x67 $x128)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x31 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x94 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x12 (=> $x94 $x31)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x97 (_ bv1 32))))
 (let (($x30 (= $x94 $x41)))
 (let (($x104 (= false false)))
 (let (($x129 (= (_ bv1 32) (_ bv0 32))))
 (let (($x14 (=> $x129 $x104)))
 (let (($x15 (= ?x97 (_ bv0 32))))
 (let (($x130 (= $x129 $x15)))
 (let (($x127 (and $x130 $x14)))
 (let (($x126 (and $x127 $x30)))
 (let (($x125 (and $x126 $x12)))
 (let (($x82 (= $x125 true)))
 (let (($x128 (= $x82 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x65 (= (_ bv0 2) ?x76)))
 (let (($x133 (= $x65 true)))
 (let (($x134 (= $x133 true)))
 (let (($x45 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x22 (and $x45 $x31)))
 (let (($x73 (= $x22 true)))
 (let (($x53 (= $x73 true)))
 (let (($x72 (= $x53 true)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x87)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x59 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x75 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x75 $x59)))
 (let (($x114 (= $x75 $x41)))
 (let (($x105 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x85 (=> $x105 $x104)))
 (let (($x109 (= $x105 $x15)))
 (let (($x117 (and $x109 $x85)))
 (let (($x47 (and $x117 $x114)))
 (let (($x122 (and $x47 $x121)))
 (let (($x58 (= $x122 true)))
 (let (($x123 (= $x58 true)))
 (let (($x28 (= $x123 true)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let (($x13 (= $x48 true)))
 (let ((?x32 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x32) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x61 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x61) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x46) ?x20))))
 (let (($x88 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x16 (=> $x75 $x88)))
 (let (($x115 (and $x47 $x16)))
 (let (($x19 (= $x115 true)))
 (let (($x18 (= $x19 true)))
 (let (($x118 (= $x18 true)))
 (let (($x106 (= $x45 true)))
 (let (($x103 (= $x106 true)))
 (let (($x102 (= $x103 true)))
 (let ((?x7 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x7)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x23 $x26)))
 (let (($x5 (and $x52 $x43)))
 (let (($x108 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x108 $x5)))
 (let (($x56 (= $x34 true)))
 (let (($x38 (= $x56 true)))
 (let (($x78 (= $x38 true)))
 (let ((?x54 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x54)))
 (let (($x100 (= ?x57 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (= $x100 true)))
 (let (($x96 (= $x50 true)))
 (let (($x80 (and $x96 $x78)))
 (let (($x10 (and $x80 $x102)))
 (let (($x39 (and $x10 $x118)))
 (let (($x89 (and $x39 $x13)))
 (let (($x36 (and $x89 $x28)))
 (let (($x124 (and $x36 $x72)))
 (let (($x8 (and $x124 $x134)))
 (let (($x135 (and $x75 $x8)))
 (let (($x70 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x136 (and $x70 $x135)))
 (let (($x62 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x137 (and $x62 $x136)))
 (let (($x68 (and $x104 $x137)))
 (let (($x93 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x81 (or false (or false (and true (or $x63 $x93)))))))
 (let (($x67 (and $x6 $x68)))
 (let (($x131 (=> $x67 $x128)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x113 (= $x51 false)))
 (let (($x42 (= $x113 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x39 (concat ?x19 (concat ?x88 ?x112)))))
 (let (($x25 (= ?x92 input.dst.llvm-%opt)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x10)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x97)))
 (let (($x91 (= input.spec-%var-opt-0.2 ?x109)))
 (let (($x41 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x119 (=> $x41 $x91)))
 (let ((?x29 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x29 (_ bv1 32))))
 (let (($x47 (= $x41 $x114)))
 (let (($x57 (= false false)))
 (let (($x84 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x117 (=> $x84 $x57)))
 (let (($x104 (= ?x29 (_ bv0 32))))
 (let (($x85 (= $x84 $x104)))
 (let (($x75 (and $x85 $x117)))
 (let (($x107 (and $x75 $x47)))
 (let (($x46 (and $x107 $x119)))
 (let (($x111 (= $x46 true)))
 (let (($x32 (= $x111 true)))
 (let (($x86 (= $x32 true)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x43)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x99 $x52)))
 (let (($x34 (and $x7 $x5)))
 (let (($x23 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x23 $x34)))
 (let (($x38 (= $x56 true)))
 (let (($x78 (= $x38 true)))
 (let (($x80 (= $x78 true)))
 (let (($x90 (and $x80 $x86)))
 (let (($x48 (and $x90 $x116)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x13 (and $x11 $x48)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x89 (and $x50 $x13)))
 (let (($x27 (and $x57 $x89)))
 (let (($x6 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x55 (=> $x70 (or false (or false (and true (or $x77 $x6)))))))
 (let (($x101 (not $x51)))
 (let (($x33 (=> (and $x101 $x70) (or false (or false (and true (or $x77 $x6)))))))
 (let (($x37 (and $x33 $x27)))
 (let (($x110 (=> $x37 $x42)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x113 (= $x51 false)))
 (let (($x42 (= $x113 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x39 (concat ?x19 (concat ?x88 ?x112)))))
 (let (($x25 (= ?x92 input.dst.llvm-%opt)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x10)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x97)))
 (let (($x91 (= input.spec-%var-opt-0.2 ?x109)))
 (let (($x41 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x119 (=> $x41 $x91)))
 (let ((?x29 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x29 (_ bv1 32))))
 (let (($x47 (= $x41 $x114)))
 (let (($x57 (= false false)))
 (let (($x84 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x117 (=> $x84 $x57)))
 (let (($x104 (= ?x29 (_ bv0 32))))
 (let (($x85 (= $x84 $x104)))
 (let (($x75 (and $x85 $x117)))
 (let (($x107 (and $x75 $x47)))
 (let (($x46 (and $x107 $x119)))
 (let (($x111 (= $x46 true)))
 (let (($x32 (= $x111 true)))
 (let (($x86 (= $x32 true)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x43)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x99 $x52)))
 (let (($x34 (and $x7 $x5)))
 (let (($x23 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x23 $x34)))
 (let (($x38 (= $x56 true)))
 (let (($x78 (= $x38 true)))
 (let (($x80 (= $x78 true)))
 (let (($x90 (and $x80 $x86)))
 (let (($x48 (and $x90 $x116)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x13 (and $x11 $x48)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x89 (and $x50 $x13)))
 (let (($x27 (and $x57 $x89)))
 (let (($x6 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x55 (=> $x70 (or false (or false (and true (or $x77 $x6)))))))
 (let (($x101 (not $x51)))
 (let (($x33 (=> (and $x101 $x70) (or false (or false (and true (or $x77 $x6)))))))
 (let (($x37 (and $x33 $x27)))
 (let (($x110 (=> $x37 $x42)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-val-1.L2%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x51)))
 (let (($x107 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (or $x107 $x63)))
 (let (($x122 (= $x121 true)))
 (let (($x58 (= $x122 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x113 (concat ?x89 (concat ?x116 ?x25)))))
 (let (($x110 (= ?x42 input.dst.llvm-%opt)))
 (let (($x87 (= $x110 true)))
 (let (($x95 (= $x87 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x97)))
 (let (($x115 (= input.spec-%var-opt-0.2 ?x91)))
 (let (($x86 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x19 (=> $x86 $x115)))
 (let ((?x45 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x45 (_ bv1 32))))
 (let (($x118 (= $x86 $x90)))
 (let (($x11 (= false false)))
 (let (($x111 (=> $x107 $x11)))
 (let (($x119 (= ?x45 (_ bv0 32))))
 (let (($x46 (= $x107 $x119)))
 (let (($x32 (and $x46 $x111)))
 (let (($x39 (and $x32 $x118)))
 (let (($x60 (and $x39 $x19)))
 (let (($x88 (= $x60 true)))
 (let (($x112 (= $x88 true)))
 (let (($x16 (= $x112 true)))
 (let (($x117 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x75 (= $x117 true)))
 (let (($x41 (= $x75 true)))
 (let (($x114 (= $x41 true)))
 (let ((?x38 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x38)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x43 $x34)))
 (let (($x80 (and $x56 $x78)))
 (let (($x7 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x7 $x80)))
 (let (($x84 (= $x21 true)))
 (let (($x29 (= $x84 true)))
 (let (($x104 (= $x29 true)))
 (let (($x47 (and $x104 $x114)))
 (let (($x18 (and $x47 $x16)))
 (let (($x20 (and $x18 $x95)))
 (let (($x26 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x81 (and $x26 $x20)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x23 $x81)))
 (let (($x79 (and $x11 $x120)))
 (let (($x62 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x100 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x50 (=> $x100 (or false (or false (and true (or $x71 $x62)))))))
 (let (($x9 (=> (and $x63 $x100) (or false (or false (and true (or $x71 $x62)))))))
 (let (($x59 (and $x9 $x79)))
 (let (($x123 (=> $x59 $x58)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x51)))
 (let (($x107 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (or $x107 $x63)))
 (let (($x122 (= $x121 true)))
 (let (($x58 (= $x122 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x113 (concat ?x89 (concat ?x116 ?x25)))))
 (let (($x110 (= ?x42 input.dst.llvm-%opt)))
 (let (($x87 (= $x110 true)))
 (let (($x95 (= $x87 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x97)))
 (let (($x115 (= input.spec-%var-opt-0.2 ?x91)))
 (let (($x86 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x19 (=> $x86 $x115)))
 (let ((?x45 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x45 (_ bv1 32))))
 (let (($x118 (= $x86 $x90)))
 (let (($x11 (= false false)))
 (let (($x111 (=> $x107 $x11)))
 (let (($x119 (= ?x45 (_ bv0 32))))
 (let (($x46 (= $x107 $x119)))
 (let (($x32 (and $x46 $x111)))
 (let (($x39 (and $x32 $x118)))
 (let (($x60 (and $x39 $x19)))
 (let (($x88 (= $x60 true)))
 (let (($x112 (= $x88 true)))
 (let (($x16 (= $x112 true)))
 (let (($x117 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x75 (= $x117 true)))
 (let (($x41 (= $x75 true)))
 (let (($x114 (= $x41 true)))
 (let ((?x38 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x38)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x43 $x34)))
 (let (($x80 (and $x56 $x78)))
 (let (($x7 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x7 $x80)))
 (let (($x84 (= $x21 true)))
 (let (($x29 (= $x84 true)))
 (let (($x104 (= $x29 true)))
 (let (($x47 (and $x104 $x114)))
 (let (($x18 (and $x47 $x16)))
 (let (($x20 (and $x18 $x95)))
 (let (($x26 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x81 (and $x26 $x20)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x23 $x81)))
 (let (($x79 (and $x11 $x120)))
 (let (($x62 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x100 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x50 (=> $x100 (or false (or false (and true (or $x71 $x62)))))))
 (let (($x9 (=> (and $x63 $x100) (or false (or false (and true (or $x71 $x62)))))))
 (let (($x59 (and $x9 $x79)))
 (let (($x123 (=> $x59 $x58)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x15)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x96)))
 (let (($x111 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x32 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x32 $x111)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x100 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x100 (_ bv1 32))))
 (let (($x11 (= $x32 $x117)))
 (let (($x93 (= false false)))
 (let (($x5 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x61 (=> $x5 $x93)))
 (let (($x43 (= ?x100 (_ bv0 32))))
 (let (($x54 (= $x5 $x43)))
 (let (($x86 (and $x54 $x61)))
 (let (($x46 (and $x86 $x11)))
 (let (($x90 (and $x46 $x118)))
 (let (($x95 (= $x90 true)))
 (let (($x20 (= $x95 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x115 (concat ?x103 (concat ?x105 ?x106)))))
 (let (($x31 (= ?x19 input.dst.llvm-%opt)))
 (let (($x116 (= $x31 true)))
 (let (($x25 (= $x116 true)))
 (let (($x60 (= input.dst.llvm-%opt ?x19)))
 (let ((?x47 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x47)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x84 $x34)))
 (let (($x38 (and $x119 $x56)))
 (let (($x21 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x16 (and (and (and $x55 $x21) $x38) $x60)))
 (let (($x18 (and $x90 $x16)))
 (let (($x37 (= $x18 true)))
 (let (($x113 (= $x37 true)))
 (let (($x13 (= $x113 true)))
 (let (($x99 (= $x23 true)))
 (let (($x26 (= $x99 true)))
 (let (($x109 (= $x26 true)))
 (let (($x33 (= $x55 true)))
 (let (($x50 (= $x33 true)))
 (let (($x9 (= $x50 true)))
 (let (($x7 (and $x9 $x109)))
 (let (($x89 (and $x7 $x13)))
 (let (($x48 (and $x89 $x25)))
 (let (($x27 (and $x5 $x48)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x42 (and $x40 $x27)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x110 (and $x51 $x42)))
 (let (($x87 (and $x93 $x110)))
 (let (($x81 (=> $x87 $x20)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x15)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x96)))
 (let (($x111 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x32 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x32 $x111)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x100 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x100 (_ bv1 32))))
 (let (($x11 (= $x32 $x117)))
 (let (($x93 (= false false)))
 (let (($x5 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x61 (=> $x5 $x93)))
 (let (($x43 (= ?x100 (_ bv0 32))))
 (let (($x54 (= $x5 $x43)))
 (let (($x86 (and $x54 $x61)))
 (let (($x46 (and $x86 $x11)))
 (let (($x90 (and $x46 $x118)))
 (let (($x95 (= $x90 true)))
 (let (($x20 (= $x95 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x115 (concat ?x103 (concat ?x105 ?x106)))))
 (let (($x31 (= ?x19 input.dst.llvm-%opt)))
 (let (($x116 (= $x31 true)))
 (let (($x25 (= $x116 true)))
 (let (($x60 (= input.dst.llvm-%opt ?x19)))
 (let ((?x47 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x47)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x84 $x34)))
 (let (($x38 (and $x119 $x56)))
 (let (($x21 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x16 (and (and (and $x55 $x21) $x38) $x60)))
 (let (($x18 (and $x90 $x16)))
 (let (($x37 (= $x18 true)))
 (let (($x113 (= $x37 true)))
 (let (($x13 (= $x113 true)))
 (let (($x99 (= $x23 true)))
 (let (($x26 (= $x99 true)))
 (let (($x109 (= $x26 true)))
 (let (($x33 (= $x55 true)))
 (let (($x50 (= $x33 true)))
 (let (($x9 (= $x50 true)))
 (let (($x7 (and $x9 $x109)))
 (let (($x89 (and $x7 $x13)))
 (let (($x48 (and $x89 $x25)))
 (let (($x27 (and $x5 $x48)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x42 (and $x40 $x27)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x110 (and $x51 $x42)))
 (let (($x87 (and $x93 $x110)))
 (let (($x81 (=> $x87 $x20)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x41 (or $x70 $x51)))
 (let (($x78 (= $x41 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x48 (concat ?x31 (concat ?x113 ?x18)))))
 (let (($x42 (= ?x27 input.dst.llvm-%opt)))
 (let (($x110 (= $x42 true)))
 (let (($x87 (= $x110 true)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x107)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x119)))
 (let (($x91 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x105 (=> $x91 $x10)))
 (let ((?x111 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x111 (_ bv1 32))))
 (let (($x74 (= $x91 $x115)))
 (let (($x61 (= false false)))
 (let (($x98 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x38 (=> $x98 $x61)))
 (let (($x47 (= ?x111 (_ bv0 32))))
 (let (($x56 (= $x98 $x47)))
 (let (($x112 (and $x56 $x38)))
 (let (($x103 (and $x112 $x74)))
 (let (($x106 (and $x103 $x105)))
 (let (($x44 (= $x106 true)))
 (let (($x97 (= $x44 true)))
 (let (($x19 (= $x97 true)))
 (let ((?x35 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x35)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x52 $x71)))
 (let (($x85 (and $x62 $x6)))
 (let (($x102 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x102 $x85)))
 (let (($x80 (= $x39 true)))
 (let (($x15 (= $x80 true)))
 (let (($x96 (= $x15 true)))
 (let (($x60 (and $x96 $x19)))
 (let (($x95 (and $x60 $x87)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x20 (and $x11 $x95)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x81 (and $x32 $x20)))
 (let (($x120 (and $x61 $x81)))
 (let (($x7 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x43 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x54 (=> $x43 (or false (or false (and true (or $x109 $x7)))))))
 (let (($x29 (=> (and $x51 $x43) (or false (or false (and true (or $x109 $x7)))))))
 (let (($x77 (and $x29 $x120)))
 (let (($x59 (=> $x77 $x79)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x41 (or $x70 $x51)))
 (let (($x78 (= $x41 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x48 (concat ?x31 (concat ?x113 ?x18)))))
 (let (($x42 (= ?x27 input.dst.llvm-%opt)))
 (let (($x110 (= $x42 true)))
 (let (($x87 (= $x110 true)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x107)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x119)))
 (let (($x91 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x105 (=> $x91 $x10)))
 (let ((?x111 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x111 (_ bv1 32))))
 (let (($x74 (= $x91 $x115)))
 (let (($x61 (= false false)))
 (let (($x98 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x38 (=> $x98 $x61)))
 (let (($x47 (= ?x111 (_ bv0 32))))
 (let (($x56 (= $x98 $x47)))
 (let (($x112 (and $x56 $x38)))
 (let (($x103 (and $x112 $x74)))
 (let (($x106 (and $x103 $x105)))
 (let (($x44 (= $x106 true)))
 (let (($x97 (= $x44 true)))
 (let (($x19 (= $x97 true)))
 (let ((?x35 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x35)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x52 $x71)))
 (let (($x85 (and $x62 $x6)))
 (let (($x102 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x102 $x85)))
 (let (($x80 (= $x39 true)))
 (let (($x15 (= $x80 true)))
 (let (($x96 (= $x15 true)))
 (let (($x60 (and $x96 $x19)))
 (let (($x95 (and $x60 $x87)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x20 (and $x11 $x95)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x81 (and $x32 $x20)))
 (let (($x120 (and $x61 $x81)))
 (let (($x7 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x43 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x54 (=> $x43 (or false (or false (and true (or $x109 $x7)))))))
 (let (($x29 (=> (and $x51 $x43) (or false (or false (and true (or $x109 $x7)))))))
 (let (($x77 (and $x29 $x120)))
 (let (($x59 (=> $x77 $x79)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x48 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x48)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x97 $x60)))
 (let (($x31 (and $x25 $x89)))
 (let (($x44 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x44 $x31)))
 (let (($x72 (= $x53 true)))
 (let (($x124 (= $x72 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x95 (concat ?x42 (concat ?x13 ?x113)))))
 (let (($x58 (= ?x20 input.dst.llvm-%opt)))
 (let (($x123 (= $x58 true)))
 (let (($x28 (= $x123 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= true $x80)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x59 (=> $x51 $x79)))
 (let (($x81 (= input.dst.llvm-%opt ?x20)))
 (let (($x41 (and (and (and $x80 $x44) $x31) $x81)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x118)))
 (let (($x119 (= input.spec-%var-opt-0.2 ?x88)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x71 $x119)))
 (let ((?x47 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x47 (_ bv1 32))))
 (let (($x21 (= $x71 $x90)))
 (let (($x11 (= false false)))
 (let (($x111 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x114 (=> $x111 $x11)))
 (let (($x75 (= ?x47 (_ bv0 32))))
 (let (($x84 (= $x111 $x75)))
 (let (($x57 (and $x84 $x114)))
 (let (($x107 (and $x57 $x21)))
 (let (($x105 (and $x107 $x10)))
 (let (($x78 (and $x105 $x41)))
 (let (($x121 (and $x78 $x59)))
 (let (($x63 (= $x121 true)))
 (let (($x16 (= $x63 true)))
 (let (($x45 (= $x16 true)))
 (let (($x15 (= $x80 true)))
 (let (($x96 (= $x15 true)))
 (let (($x104 (= $x96 true)))
 (let (($x62 (= $x51 true)))
 (let (($x35 (= $x62 true)))
 (let (($x6 (= $x35 true)))
 (let (($x98 (and $x6 $x104)))
 (let (($x122 (and $x98 $x45)))
 (let (($x24 (and $x122 $x28)))
 (let (($x92 (and $x71 $x24)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x101 (and $x83 $x92)))
 (let (($x102 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x36 (and $x102 $x101)))
 (let (($x22 (and $x11 $x36)))
 (let (($x66 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x86 (or false (or false (and true (or $x5 $x66)))))))
 (let (($x50 (=> (and $x51 $x86) (or false (or false (and true (or $x5 $x66)))))))
 (let (($x73 (and $x50 $x22)))
 (let (($x132 (=> $x73 $x124)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x48 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x48)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x97 $x60)))
 (let (($x31 (and $x25 $x89)))
 (let (($x44 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x44 $x31)))
 (let (($x72 (= $x53 true)))
 (let (($x124 (= $x72 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x95 (concat ?x42 (concat ?x13 ?x113)))))
 (let (($x58 (= ?x20 input.dst.llvm-%opt)))
 (let (($x123 (= $x58 true)))
 (let (($x28 (= $x123 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= true $x80)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x59 (=> $x51 $x79)))
 (let (($x81 (= input.dst.llvm-%opt ?x20)))
 (let (($x41 (and (and (and $x80 $x44) $x31) $x81)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x118)))
 (let (($x119 (= input.spec-%var-opt-0.2 ?x88)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x71 $x119)))
 (let ((?x47 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x47 (_ bv1 32))))
 (let (($x21 (= $x71 $x90)))
 (let (($x11 (= false false)))
 (let (($x111 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x114 (=> $x111 $x11)))
 (let (($x75 (= ?x47 (_ bv0 32))))
 (let (($x84 (= $x111 $x75)))
 (let (($x57 (and $x84 $x114)))
 (let (($x107 (and $x57 $x21)))
 (let (($x105 (and $x107 $x10)))
 (let (($x78 (and $x105 $x41)))
 (let (($x121 (and $x78 $x59)))
 (let (($x63 (= $x121 true)))
 (let (($x16 (= $x63 true)))
 (let (($x45 (= $x16 true)))
 (let (($x15 (= $x80 true)))
 (let (($x96 (= $x15 true)))
 (let (($x104 (= $x96 true)))
 (let (($x62 (= $x51 true)))
 (let (($x35 (= $x62 true)))
 (let (($x6 (= $x35 true)))
 (let (($x98 (and $x6 $x104)))
 (let (($x122 (and $x98 $x45)))
 (let (($x24 (and $x122 $x28)))
 (let (($x92 (and $x71 $x24)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x101 (and $x83 $x92)))
 (let (($x102 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x36 (and $x102 $x101)))
 (let (($x22 (and $x11 $x36)))
 (let (($x66 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x86 (or false (or false (and true (or $x5 $x66)))))))
 (let (($x50 (=> (and $x51 $x86) (or false (or false (and true (or $x5 $x66)))))))
 (let (($x73 (and $x50 $x22)))
 (let (($x132 (=> $x73 $x124)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x107)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x74)))
 (let ((?x76 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x76)))
 (let (($x37 (= ?x40 ?x38)))
 (let (($x33 (= $x37 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x20 (concat ?x113 (concat ?x42 ?x95)))))
 (let (($x24 (= ?x81 input.dst.llvm-%opt)))
 (let (($x92 (= $x24 true)))
 (let (($x101 (= $x92 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x63 (= true $x96)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x16 (=> $x51 $x63)))
 (let (($x41 (= input.dst.llvm-%opt ?x81)))
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x89)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x19 $x25)))
 (let (($x77 (and $x48 $x31)))
 (let (($x97 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and (and (and $x96 $x97) $x77) $x41)))
 (let (($x105 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x106 (=> $x39 $x105)))
 (let ((?x114 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x114 (_ bv1 32))))
 (let (($x119 (= $x39 $x88)))
 (let (($x83 (= false false)))
 (let (($x11 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x11 $x83)))
 (let (($x112 (= ?x114 (_ bv0 32))))
 (let (($x61 (= $x11 $x112)))
 (let (($x118 (and $x61 $x91)))
 (let (($x10 (and $x118 $x119)))
 (let (($x44 (and $x10 $x106)))
 (let (($x121 (and $x44 $x59)))
 (let (($x45 (and $x121 $x16)))
 (let (($x122 (= $x45 true)))
 (let (($x58 (= $x122 true)))
 (let (($x123 (= $x58 true)))
 (let (($x111 (= $x51 true)))
 (let (($x47 (= $x111 true)))
 (let (($x75 (= $x47 true)))
 (let (($x104 (= $x96 true)))
 (let (($x98 (= $x104 true)))
 (let (($x43 (= $x98 true)))
 (let (($x84 (and $x43 $x75)))
 (let (($x28 (and $x84 $x123)))
 (let (($x36 (and $x28 $x101)))
 (let (($x22 (and $x39 $x36)))
 (let (($x85 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x73 (and $x85 $x22)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x53 (and $x35 $x73)))
 (let (($x72 (and $x83 $x53)))
 (let (($x29 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x46 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x102 (=> $x46 (or false (or false (and true (or $x54 $x29)))))))
 (let (($x26 (=> (and $x51 $x46) (or false (or false (and true (or $x54 $x29)))))))
 (let (($x124 (and $x26 $x72)))
 (let (($x65 (=> $x124 $x33)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x107)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x74)))
 (let ((?x76 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x76)))
 (let (($x37 (= ?x40 ?x38)))
 (let (($x33 (= $x37 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x20 (concat ?x113 (concat ?x42 ?x95)))))
 (let (($x24 (= ?x81 input.dst.llvm-%opt)))
 (let (($x92 (= $x24 true)))
 (let (($x101 (= $x92 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x63 (= true $x96)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x16 (=> $x51 $x63)))
 (let (($x41 (= input.dst.llvm-%opt ?x81)))
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x89)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x19 $x25)))
 (let (($x77 (and $x48 $x31)))
 (let (($x97 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and (and (and $x96 $x97) $x77) $x41)))
 (let (($x105 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x106 (=> $x39 $x105)))
 (let ((?x114 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x114 (_ bv1 32))))
 (let (($x119 (= $x39 $x88)))
 (let (($x83 (= false false)))
 (let (($x11 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x11 $x83)))
 (let (($x112 (= ?x114 (_ bv0 32))))
 (let (($x61 (= $x11 $x112)))
 (let (($x118 (and $x61 $x91)))
 (let (($x10 (and $x118 $x119)))
 (let (($x44 (and $x10 $x106)))
 (let (($x121 (and $x44 $x59)))
 (let (($x45 (and $x121 $x16)))
 (let (($x122 (= $x45 true)))
 (let (($x58 (= $x122 true)))
 (let (($x123 (= $x58 true)))
 (let (($x111 (= $x51 true)))
 (let (($x47 (= $x111 true)))
 (let (($x75 (= $x47 true)))
 (let (($x104 (= $x96 true)))
 (let (($x98 (= $x104 true)))
 (let (($x43 (= $x98 true)))
 (let (($x84 (and $x43 $x75)))
 (let (($x28 (and $x84 $x123)))
 (let (($x36 (and $x28 $x101)))
 (let (($x22 (and $x39 $x36)))
 (let (($x85 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x73 (and $x85 $x22)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x53 (and $x35 $x73)))
 (let (($x72 (and $x83 $x53)))
 (let (($x29 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x46 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x102 (=> $x46 (or false (or false (and true (or $x54 $x29)))))))
 (let (($x26 (=> (and $x51 $x46) (or false (or false (and true (or $x54 $x29)))))))
 (let (($x124 (and $x26 $x72)))
 (let (($x65 (=> $x124 $x33)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let ((?x65 (ite $x51 (_ bv1 1) (_ bv0 1))))
 (let ((?x133 ((_ zero_extend 31) ?x65)))
 (let (($x55 (= (_ bv1 32) ?x133)))
 (let (($x87 (= $x55 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x81 (concat ?x95 (concat ?x113 ?x20)))))
 (let (($x36 (= ?x41 input.dst.llvm-%opt)))
 (let (($x22 (= $x36 true)))
 (let (($x73 (= $x22 true)))
 (let (($x47 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x122 (= true $x47)))
 (let (($x58 (=> $x51 $x122)))
 (let (($x59 (= input.dst.llvm-%opt ?x41)))
 (let ((?x31 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x31)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x60 $x48)))
 (let (($x79 (and $x89 $x77)))
 (let (($x19 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and (and (and $x47 $x19) $x79) $x59)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x10)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x44 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x98 $x44)))
 (let ((?x91 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x91 (_ bv1 32))))
 (let (($x105 (= $x98 $x38)))
 (let (($x85 (= false false)))
 (let (($x83 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x107 (=> $x83 $x85)))
 (let (($x21 (= ?x91 (_ bv0 32))))
 (let (($x71 (= $x83 $x21)))
 (let (($x74 (and $x71 $x107)))
 (let (($x106 (and $x74 $x105)))
 (let (($x97 (and $x106 $x120)))
 (let (($x45 (and $x97 $x16)))
 (let (($x123 (and $x45 $x58)))
 (let (($x28 (= $x123 true)))
 (let (($x24 (= $x28 true)))
 (let (($x92 (= $x24 true)))
 (let (($x11 (= $x51 true)))
 (let (($x114 (= $x11 true)))
 (let (($x112 (= $x114 true)))
 (let (($x75 (= $x47 true)))
 (let (($x84 (= $x75 true)))
 (let (($x86 (= $x84 true)))
 (let (($x61 (and $x86 $x112)))
 (let (($x101 (and $x61 $x92)))
 (let (($x53 (and $x101 $x73)))
 (let (($x72 (and $x98 $x53)))
 (let (($x104 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x124 (and $x104 $x72)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x132 (and $x15 $x124)))
 (let (($x76 (and $x85 $x132)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x35 (=> $x62 (or false (or false (and true (or $x32 $x50)))))))
 (let (($x69 (=> (and $x51 $x62) (or false (or false (and true (or $x32 $x50)))))))
 (let (($x40 (and $x69 $x76)))
 (let (($x99 (=> $x40 $x87)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let ((?x65 (ite $x51 (_ bv1 1) (_ bv0 1))))
 (let ((?x133 ((_ zero_extend 31) ?x65)))
 (let (($x55 (= (_ bv1 32) ?x133)))
 (let (($x87 (= $x55 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x81 (concat ?x95 (concat ?x113 ?x20)))))
 (let (($x36 (= ?x41 input.dst.llvm-%opt)))
 (let (($x22 (= $x36 true)))
 (let (($x73 (= $x22 true)))
 (let (($x47 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x122 (= true $x47)))
 (let (($x58 (=> $x51 $x122)))
 (let (($x59 (= input.dst.llvm-%opt ?x41)))
 (let ((?x31 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x31)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x60 $x48)))
 (let (($x79 (and $x89 $x77)))
 (let (($x19 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and (and (and $x47 $x19) $x79) $x59)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x10)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x44 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x120 (=> $x98 $x44)))
 (let ((?x91 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x91 (_ bv1 32))))
 (let (($x105 (= $x98 $x38)))
 (let (($x85 (= false false)))
 (let (($x83 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x107 (=> $x83 $x85)))
 (let (($x21 (= ?x91 (_ bv0 32))))
 (let (($x71 (= $x83 $x21)))
 (let (($x74 (and $x71 $x107)))
 (let (($x106 (and $x74 $x105)))
 (let (($x97 (and $x106 $x120)))
 (let (($x45 (and $x97 $x16)))
 (let (($x123 (and $x45 $x58)))
 (let (($x28 (= $x123 true)))
 (let (($x24 (= $x28 true)))
 (let (($x92 (= $x24 true)))
 (let (($x11 (= $x51 true)))
 (let (($x114 (= $x11 true)))
 (let (($x112 (= $x114 true)))
 (let (($x75 (= $x47 true)))
 (let (($x84 (= $x75 true)))
 (let (($x86 (= $x84 true)))
 (let (($x61 (and $x86 $x112)))
 (let (($x101 (and $x61 $x92)))
 (let (($x53 (and $x101 $x73)))
 (let (($x72 (and $x98 $x53)))
 (let (($x104 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x124 (and $x104 $x72)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x132 (and $x15 $x124)))
 (let (($x76 (and $x85 $x132)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x35 (=> $x62 (or false (or false (and true (or $x32 $x50)))))))
 (let (($x69 (=> (and $x51 $x62) (or false (or false (and true (or $x32 $x50)))))))
 (let (($x40 (and $x69 $x76)))
 (let (($x99 (=> $x40 $x87)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x26 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x80 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x15 (=> $x80 (or false (or false (and true (or $x102 $x26)))))))
 (let (($x133 (= $x15 true)))
 (let (($x55 (= $x133 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x41 (concat ?x20 (concat ?x95 ?x81)))))
 (let (($x53 (= ?x59 input.dst.llvm-%opt)))
 (let (($x72 (= $x53 true)))
 (let (($x124 (= $x72 true)))
 (let (($x114 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x28 (= true $x114)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x24 (=> $x51 $x28)))
 (let (($x16 (= input.dst.llvm-%opt ?x59)))
 (let ((?x77 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x77)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x25 $x89)))
 (let (($x63 (and $x31 $x79)))
 (let (($x60 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and (and (and $x114 $x60) $x63) $x16)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x88 (concat (select input.dst.llvm-mem ?x117) ?x103)))
 (let (($x97 (= input.spec-%var-opt-0.2 ?x88)))
 (let (($x84 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x78 (=> $x84 $x97)))
 (let ((?x107 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x107 (_ bv1 32))))
 (let (($x44 (= $x84 $x90)))
 (let (($x104 (= false false)))
 (let (($x85 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x10 (=> $x85 $x104)))
 (let (($x119 (= ?x107 (_ bv0 32))))
 (let (($x39 (= $x85 $x119)))
 (let (($x34 (and $x39 $x10)))
 (let (($x120 (and $x34 $x44)))
 (let (($x19 (and $x120 $x78)))
 (let (($x123 (and $x19 $x58)))
 (let (($x92 (and $x123 $x24)))
 (let (($x101 (= $x92 true)))
 (let (($x36 (= $x101 true)))
 (let (($x22 (= $x36 true)))
 (let (($x83 (= $x51 true)))
 (let (($x91 (= $x83 true)))
 (let (($x21 (= $x91 true)))
 (let (($x112 (= $x114 true)))
 (let (($x61 (= $x112 true)))
 (let (($x46 (= $x61 true)))
 (let (($x71 (and $x46 $x21)))
 (let (($x73 (and $x71 $x22)))
 (let (($x132 (and $x73 $x124)))
 (let (($x76 (and $x84 $x132)))
 (let (($x75 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x40 (and $x75 $x76)))
 (let (($x111 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x37 (and $x111 $x40)))
 (let (($x33 (and $x104 $x37)))
 (let (($x100 (=> (and $x51 $x80) (or false (or false (and true (or $x102 $x26)))))))
 (let (($x65 (and $x100 $x33)))
 (let (($x87 (=> $x65 $x55)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x26 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x80 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x15 (=> $x80 (or false (or false (and true (or $x102 $x26)))))))
 (let (($x133 (= $x15 true)))
 (let (($x55 (= $x133 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x41 (concat ?x20 (concat ?x95 ?x81)))))
 (let (($x53 (= ?x59 input.dst.llvm-%opt)))
 (let (($x72 (= $x53 true)))
 (let (($x124 (= $x72 true)))
 (let (($x114 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x28 (= true $x114)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x24 (=> $x51 $x28)))
 (let (($x16 (= input.dst.llvm-%opt ?x59)))
 (let ((?x77 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x77)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x25 $x89)))
 (let (($x63 (and $x31 $x79)))
 (let (($x60 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and (and (and $x114 $x60) $x63) $x16)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x88 (concat (select input.dst.llvm-mem ?x117) ?x103)))
 (let (($x97 (= input.spec-%var-opt-0.2 ?x88)))
 (let (($x84 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x78 (=> $x84 $x97)))
 (let ((?x107 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x107 (_ bv1 32))))
 (let (($x44 (= $x84 $x90)))
 (let (($x104 (= false false)))
 (let (($x85 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x10 (=> $x85 $x104)))
 (let (($x119 (= ?x107 (_ bv0 32))))
 (let (($x39 (= $x85 $x119)))
 (let (($x34 (and $x39 $x10)))
 (let (($x120 (and $x34 $x44)))
 (let (($x19 (and $x120 $x78)))
 (let (($x123 (and $x19 $x58)))
 (let (($x92 (and $x123 $x24)))
 (let (($x101 (= $x92 true)))
 (let (($x36 (= $x101 true)))
 (let (($x22 (= $x36 true)))
 (let (($x83 (= $x51 true)))
 (let (($x91 (= $x83 true)))
 (let (($x21 (= $x91 true)))
 (let (($x112 (= $x114 true)))
 (let (($x61 (= $x112 true)))
 (let (($x46 (= $x61 true)))
 (let (($x71 (and $x46 $x21)))
 (let (($x73 (and $x71 $x22)))
 (let (($x132 (and $x73 $x124)))
 (let (($x76 (and $x84 $x132)))
 (let (($x75 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x40 (and $x75 $x76)))
 (let (($x111 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x37 (and $x111 $x40)))
 (let (($x33 (and $x104 $x37)))
 (let (($x100 (=> (and $x51 $x80) (or false (or false (and true (or $x102 $x26)))))))
 (let (($x65 (and $x100 $x33)))
 (let (($x87 (=> $x65 $x55)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x116 (= (_ bv0 2) ?x109)))
 (let (($x66 (= $x116 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x59 (concat ?x81 (concat ?x20 ?x41)))))
 (let (($x132 (= ?x16 input.dst.llvm-%opt)))
 (let (($x76 (= $x132 true)))
 (let (($x40 (= $x76 true)))
 (let (($x91 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x101 (= true $x91)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x36 (=> $x51 $x101)))
 (let (($x58 (= input.dst.llvm-%opt ?x16)))
 (let ((?x79 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x79)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x48 $x31)))
 (let (($x122 (and $x77 $x63)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and (and (and $x91 $x25) $x122) $x58)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x120)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x115)))
 (let (($x19 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x61 $x19)))
 (let ((?x10 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x10 (_ bv1 32))))
 (let (($x97 (= $x61 $x88)))
 (let (($x75 (= false false)))
 (let (($x104 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x104 $x75)))
 (let (($x105 (= ?x10 (_ bv0 32))))
 (let (($x98 (= $x104 $x105)))
 (let (($x103 (and $x98 $x106)))
 (let (($x78 (and $x103 $x97)))
 (let (($x60 (and $x78 $x121)))
 (let (($x92 (and $x60 $x24)))
 (let (($x22 (and $x92 $x36)))
 (let (($x73 (= $x22 true)))
 (let (($x53 (= $x73 true)))
 (let (($x72 (= $x53 true)))
 (let (($x85 (= $x51 true)))
 (let (($x107 (= $x85 true)))
 (let (($x119 (= $x107 true)))
 (let (($x21 (= $x91 true)))
 (let (($x71 (= $x21 true)))
 (let (($x62 (= $x71 true)))
 (let (($x39 (and $x62 $x119)))
 (let (($x124 (and $x39 $x72)))
 (let (($x37 (and $x124 $x40)))
 (let (($x33 (and $x61 $x37)))
 (let (($x112 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x65 (and $x112 $x33)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x133 (and $x11 $x65)))
 (let (($x55 (and $x75 $x133)))
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x43 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x111 (=> $x43 (or false (or false (and true (or $x35 $x69)))))))
 (let (($x93 (=> (and $x51 $x43) (or false (or false (and true (or $x35 $x69)))))))
 (let (($x87 (and $x93 $x55)))
 (let (($x134 (=> $x87 $x66)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x116 (= (_ bv0 2) ?x109)))
 (let (($x66 (= $x116 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x59 (concat ?x81 (concat ?x20 ?x41)))))
 (let (($x132 (= ?x16 input.dst.llvm-%opt)))
 (let (($x76 (= $x132 true)))
 (let (($x40 (= $x76 true)))
 (let (($x91 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x101 (= true $x91)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x51 (not $x70)))
 (let (($x36 (=> $x51 $x101)))
 (let (($x58 (= input.dst.llvm-%opt ?x16)))
 (let ((?x79 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x79)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x48 $x31)))
 (let (($x122 (and $x77 $x63)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and (and (and $x91 $x25) $x122) $x58)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x120)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x115)))
 (let (($x19 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x61 $x19)))
 (let ((?x10 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x10 (_ bv1 32))))
 (let (($x97 (= $x61 $x88)))
 (let (($x75 (= false false)))
 (let (($x104 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x104 $x75)))
 (let (($x105 (= ?x10 (_ bv0 32))))
 (let (($x98 (= $x104 $x105)))
 (let (($x103 (and $x98 $x106)))
 (let (($x78 (and $x103 $x97)))
 (let (($x60 (and $x78 $x121)))
 (let (($x92 (and $x60 $x24)))
 (let (($x22 (and $x92 $x36)))
 (let (($x73 (= $x22 true)))
 (let (($x53 (= $x73 true)))
 (let (($x72 (= $x53 true)))
 (let (($x85 (= $x51 true)))
 (let (($x107 (= $x85 true)))
 (let (($x119 (= $x107 true)))
 (let (($x21 (= $x91 true)))
 (let (($x71 (= $x21 true)))
 (let (($x62 (= $x71 true)))
 (let (($x39 (and $x62 $x119)))
 (let (($x124 (and $x39 $x72)))
 (let (($x37 (and $x124 $x40)))
 (let (($x33 (and $x61 $x37)))
 (let (($x112 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x65 (and $x112 $x33)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x133 (and $x11 $x65)))
 (let (($x55 (and $x75 $x133)))
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x43 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x111 (=> $x43 (or false (or false (and true (or $x35 $x69)))))))
 (let (($x93 (=> (and $x51 $x43) (or false (or false (and true (or $x35 $x69)))))))
 (let (($x87 (and $x93 $x55)))
 (let (($x134 (=> $x87 $x66)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x78)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let (($x60 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x45 (=> $x71 $x60)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x106 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x106 (_ bv1 32))))
 (let (($x19 (= $x71 $x38)))
 (let (($x112 (= false false)))
 (let (($x75 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x120 (=> $x75 $x112)))
 (let (($x44 (= ?x106 (_ bv0 32))))
 (let (($x84 (= $x75 $x44)))
 (let (($x115 (and $x84 $x120)))
 (let (($x121 (and $x115 $x19)))
 (let (($x25 (and $x121 $x45)))
 (let (($x66 (= $x25 true)))
 (let (($x134 (= $x66 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x16 (concat ?x41 (concat ?x81 ?x59)))))
 (let (($x37 (= ?x58 input.dst.llvm-%opt)))
 (let (($x33 (= $x37 true)))
 (let (($x65 (= $x33 true)))
 (let (($x107 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x73 (= true $x107)))
 (let (($x51 (not $x70)))
 (let (($x53 (=> $x51 $x73)))
 (let (($x24 (= input.dst.llvm-%opt ?x58)))
 (let ((?x63 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x63)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x89 $x77)))
 (let (($x28 (and $x79 $x122)))
 (let (($x48 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and (and (and $x107 $x48) $x28) $x24)))
 (let (($x22 (and $x25 $x36)))
 (let (($x72 (and $x22 $x53)))
 (let (($x124 (= $x72 true)))
 (let (($x132 (= $x124 true)))
 (let (($x76 (= $x132 true)))
 (let (($x104 (= $x51 true)))
 (let (($x10 (= $x104 true)))
 (let (($x105 (= $x10 true)))
 (let (($x119 (= $x107 true)))
 (let (($x39 (= $x119 true)))
 (let (($x80 (= $x39 true)))
 (let (($x98 (and $x80 $x105)))
 (let (($x40 (and $x98 $x76)))
 (let (($x133 (and $x40 $x65)))
 (let (($x55 (and $x71 $x133)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x87 (and $x21 $x55)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x99 (and $x83 $x87)))
 (let (($x109 (and $x112 $x99)))
 (let (($x100 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x86 (or false (or false (and true (or $x15 $x100)))))))
 (let (($x117 (=> (and $x51 $x86) (or false (or false (and true (or $x15 $x100)))))))
 (let (($x116 (and $x117 $x109)))
 (let (($x9 (=> $x116 $x134)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x78)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let (($x60 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x45 (=> $x71 $x60)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x106 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x106 (_ bv1 32))))
 (let (($x19 (= $x71 $x38)))
 (let (($x112 (= false false)))
 (let (($x75 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x120 (=> $x75 $x112)))
 (let (($x44 (= ?x106 (_ bv0 32))))
 (let (($x84 (= $x75 $x44)))
 (let (($x115 (and $x84 $x120)))
 (let (($x121 (and $x115 $x19)))
 (let (($x25 (and $x121 $x45)))
 (let (($x66 (= $x25 true)))
 (let (($x134 (= $x66 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x16 (concat ?x41 (concat ?x81 ?x59)))))
 (let (($x37 (= ?x58 input.dst.llvm-%opt)))
 (let (($x33 (= $x37 true)))
 (let (($x65 (= $x33 true)))
 (let (($x107 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x73 (= true $x107)))
 (let (($x51 (not $x70)))
 (let (($x53 (=> $x51 $x73)))
 (let (($x24 (= input.dst.llvm-%opt ?x58)))
 (let ((?x63 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x63)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x89 $x77)))
 (let (($x28 (and $x79 $x122)))
 (let (($x48 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and (and (and $x107 $x48) $x28) $x24)))
 (let (($x22 (and $x25 $x36)))
 (let (($x72 (and $x22 $x53)))
 (let (($x124 (= $x72 true)))
 (let (($x132 (= $x124 true)))
 (let (($x76 (= $x132 true)))
 (let (($x104 (= $x51 true)))
 (let (($x10 (= $x104 true)))
 (let (($x105 (= $x10 true)))
 (let (($x119 (= $x107 true)))
 (let (($x39 (= $x119 true)))
 (let (($x80 (= $x39 true)))
 (let (($x98 (and $x80 $x105)))
 (let (($x40 (and $x98 $x76)))
 (let (($x133 (and $x40 $x65)))
 (let (($x55 (and $x71 $x133)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x87 (and $x21 $x55)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x99 (and $x83 $x87)))
 (let (($x109 (and $x112 $x99)))
 (let (($x100 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x86 (or false (or false (and true (or $x15 $x100)))))))
 (let (($x117 (=> (and $x51 $x86) (or false (or false (and true (or $x15 $x100)))))))
 (let (($x116 (and $x117 $x109)))
 (let (($x9 (=> $x116 $x134)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x133)))
 (let (($x110 (= ?x55 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x7 (= $x110 true)))
 (let (($x134 (= ?x55 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x9 (= $x134 true)))
 (let (($x5 (= $x9 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x87 (= ?x55 ?x71)))
 (let (($x99 (= $x87 true)))
 (let (($x109 (= $x99 true)))
 (let ((?x53 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x53)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x24 $x22)))
 (let (($x124 (and $x73 $x72)))
 (let (($x58 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x58 $x124)))
 (let (($x76 (= $x132 true)))
 (let (($x40 (= $x76 true)))
 (let (($x37 (= $x40 true)))
 (let ((?x20 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x41 ((_ zero_extend 31) ?x20)))
 (let (($x95 (= (_ bv1 32) ?x41)))
 (let (($x81 (= $x95 true)))
 (let (($x59 (= $x81 true)))
 (let (($x77 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= $x77 true)))
 (let (($x63 (= $x79 true)))
 (let (($x122 (= $x63 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x25 (= (_ bv0 2) ?x45)))
 (let (($x123 (= $x25 true)))
 (let (($x48 (= $x123 true)))
 (let (($x74 (= input.spec-%var-opt-0.2 ?x71)))
 (let (($x86 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x88 (=> $x86 $x74)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x10 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x10 (_ bv1 32))))
 (let (($x34 (= $x86 $x118)))
 (let (($x70 (= false false)))
 (let (($x80 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (=> $x80 $x70)))
 (let (($x38 (= ?x10 (_ bv0 32))))
 (let (($x19 (= $x80 $x38)))
 (let (($x103 (and $x19 $x121)))
 (let (($x57 (and $x103 $x34)))
 (let (($x97 (and $x57 $x88)))
 (let (($x61 (= $x97 true)))
 (let (($x78 (= $x61 true)))
 (let (($x56 (= $x78 true)))
 (let (($x46 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x85 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x107 (=> $x85 (or false (or false (and true (or $x114 $x46)))))))
 (let (($x23 (= $x107 true)))
 (let (($x100 (= $x23 true)))
 (let (($x119 (= $x100 true)))
 (let (($x90 (and $x119 $x56)))
 (let (($x92 (and $x90 $x48)))
 (let (($x28 (and $x92 $x122)))
 (let (($x113 (and $x28 $x59)))
 (let (($x33 (and $x113 $x37)))
 (let (($x116 (and $x33 $x109)))
 (let (($x54 (and $x116 $x5)))
 (let (($x27 (and $x86 $x54)))
 (let (($x26 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x50 (and $x26 $x27)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x18 (and $x32 $x50)))
 (let (($x29 (and $x70 $x18)))
 (let (($x8 (=> $x29 $x7)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x133)))
 (let (($x110 (= ?x55 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x7 (= $x110 true)))
 (let (($x134 (= ?x55 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x9 (= $x134 true)))
 (let (($x5 (= $x9 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x87 (= ?x55 ?x71)))
 (let (($x99 (= $x87 true)))
 (let (($x109 (= $x99 true)))
 (let ((?x53 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x53)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x24 $x22)))
 (let (($x124 (and $x73 $x72)))
 (let (($x58 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x58 $x124)))
 (let (($x76 (= $x132 true)))
 (let (($x40 (= $x76 true)))
 (let (($x37 (= $x40 true)))
 (let ((?x20 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x41 ((_ zero_extend 31) ?x20)))
 (let (($x95 (= (_ bv1 32) ?x41)))
 (let (($x81 (= $x95 true)))
 (let (($x59 (= $x81 true)))
 (let (($x77 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= $x77 true)))
 (let (($x63 (= $x79 true)))
 (let (($x122 (= $x63 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x25 (= (_ bv0 2) ?x45)))
 (let (($x123 (= $x25 true)))
 (let (($x48 (= $x123 true)))
 (let (($x74 (= input.spec-%var-opt-0.2 ?x71)))
 (let (($x86 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x88 (=> $x86 $x74)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x10 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x10 (_ bv1 32))))
 (let (($x34 (= $x86 $x118)))
 (let (($x70 (= false false)))
 (let (($x80 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (=> $x80 $x70)))
 (let (($x38 (= ?x10 (_ bv0 32))))
 (let (($x19 (= $x80 $x38)))
 (let (($x103 (and $x19 $x121)))
 (let (($x57 (and $x103 $x34)))
 (let (($x97 (and $x57 $x88)))
 (let (($x61 (= $x97 true)))
 (let (($x78 (= $x61 true)))
 (let (($x56 (= $x78 true)))
 (let (($x46 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x85 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x107 (=> $x85 (or false (or false (and true (or $x114 $x46)))))))
 (let (($x23 (= $x107 true)))
 (let (($x100 (= $x23 true)))
 (let (($x119 (= $x100 true)))
 (let (($x90 (and $x119 $x56)))
 (let (($x92 (and $x90 $x48)))
 (let (($x28 (and $x92 $x122)))
 (let (($x113 (and $x28 $x59)))
 (let (($x33 (and $x113 $x37)))
 (let (($x116 (and $x33 $x109)))
 (let (($x54 (and $x116 $x5)))
 (let (($x27 (and $x86 $x54)))
 (let (($x26 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x50 (and $x26 $x27)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x18 (and $x32 $x50)))
 (let (($x29 (and $x70 $x18)))
 (let (($x8 (=> $x29 $x7)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x60 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x126 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x82 (=> $x126 $x60)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x77 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (bvuge ?x77 (_ bv1 32))))
 (let (($x12 (= $x126 $x24)))
 (let (($x107 (= false false)))
 (let (($x14 (= (_ bv1 32) (_ bv0 32))))
 (let (($x94 (=> $x14 $x107)))
 (let (($x59 (= ?x77 (_ bv0 32))))
 (let (($x127 (= $x14 $x59)))
 (let (($x30 (and $x127 $x94)))
 (let (($x125 (and $x30 $x12)))
 (let (($x128 (and $x125 $x82)))
 (let (($x131 (= $x128 true)))
 (let (($x138 (= $x131 true)))
 (let ((?x8 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x135 (= (_ bv0 2) ?x8)))
 (let (($x35 (= $x135 true)))
 (let (($x15 (= $x35 true)))
 (let (($x50 (= $x60 true)))
 (let (($x18 (= $x50 true)))
 (let (($x29 (= $x18 true)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x133)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x87)))
 (let (($x116 (= input.spec-%var-opt-0.2 ?x109)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x66 (=> $x39 $x116)))
 (let (($x36 (= $x39 $x24)))
 (let (($x89 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x42 (=> $x89 $x107)))
 (let (($x113 (= $x89 $x59)))
 (let (($x58 (and $x113 $x42)))
 (let (($x22 (and $x58 $x36)))
 (let (($x134 (and $x22 $x66)))
 (let (($x9 (= $x134 true)))
 (let (($x5 (= $x9 true)))
 (let (($x54 (= $x5 true)))
 (let ((?x122 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x122) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x16 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x11) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x16) ?x101))))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x81)))
 (let (($x53 (=> $x39 $x73)))
 (let (($x72 (and $x22 $x53)))
 (let (($x124 (= $x72 true)))
 (let (($x132 (= $x124 true)))
 (let (($x76 (= $x132 true)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (and $x74 $x60)))
 (let (($x25 (= $x45 true)))
 (let (($x123 (= $x25 true)))
 (let (($x48 (= $x123 true)))
 (let (($x88 (= $x74 true)))
 (let (($x97 (= $x88 true)))
 (let (($x61 (= $x97 true)))
 (let ((?x115 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x115)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x86 $x34)))
 (let (($x84 (and $x57 $x44)))
 (let (($x103 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x103 $x84)))
 (let (($x43 (= $x112 true)))
 (let (($x75 (= $x43 true)))
 (let (($x98 (= $x75 true)))
 (let ((?x104 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x104)))
 (let (($x38 (= ?x10 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x19 (= $x38 true)))
 (let (($x70 (= $x19 true)))
 (let (($x106 (and $x70 $x98)))
 (let (($x78 (and $x106 $x61)))
 (let (($x92 (and $x78 $x48)))
 (let (($x40 (and $x92 $x76)))
 (let (($x27 (and $x40 $x54)))
 (let (($x110 (and $x27 $x29)))
 (let (($x136 (and $x110 $x15)))
 (let (($x137 (and $x39 $x136)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x68 (and $x108 $x137)))
 (let (($x100 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x67 (and $x100 $x68)))
 (let (($x129 (and $x107 $x67)))
 (let (($x114 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x21 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x21 (or false (or false (and true (or $x117 $x114)))))))
 (let (($x130 (and $x62 $x129)))
 (let (($x49 (=> $x130 $x138)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x60 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x126 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x82 (=> $x126 $x60)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x77 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (bvuge ?x77 (_ bv1 32))))
 (let (($x12 (= $x126 $x24)))
 (let (($x107 (= false false)))
 (let (($x14 (= (_ bv1 32) (_ bv0 32))))
 (let (($x94 (=> $x14 $x107)))
 (let (($x59 (= ?x77 (_ bv0 32))))
 (let (($x127 (= $x14 $x59)))
 (let (($x30 (and $x127 $x94)))
 (let (($x125 (and $x30 $x12)))
 (let (($x128 (and $x125 $x82)))
 (let (($x131 (= $x128 true)))
 (let (($x138 (= $x131 true)))
 (let ((?x8 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x135 (= (_ bv0 2) ?x8)))
 (let (($x35 (= $x135 true)))
 (let (($x15 (= $x35 true)))
 (let (($x50 (= $x60 true)))
 (let (($x18 (= $x50 true)))
 (let (($x29 (= $x18 true)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x133)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x87)))
 (let (($x116 (= input.spec-%var-opt-0.2 ?x109)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x66 (=> $x39 $x116)))
 (let (($x36 (= $x39 $x24)))
 (let (($x89 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x42 (=> $x89 $x107)))
 (let (($x113 (= $x89 $x59)))
 (let (($x58 (and $x113 $x42)))
 (let (($x22 (and $x58 $x36)))
 (let (($x134 (and $x22 $x66)))
 (let (($x9 (= $x134 true)))
 (let (($x5 (= $x9 true)))
 (let (($x54 (= $x5 true)))
 (let ((?x122 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x122) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x16 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x11) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x16) ?x101))))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x81)))
 (let (($x53 (=> $x39 $x73)))
 (let (($x72 (and $x22 $x53)))
 (let (($x124 (= $x72 true)))
 (let (($x132 (= $x124 true)))
 (let (($x76 (= $x132 true)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (and $x74 $x60)))
 (let (($x25 (= $x45 true)))
 (let (($x123 (= $x25 true)))
 (let (($x48 (= $x123 true)))
 (let (($x88 (= $x74 true)))
 (let (($x97 (= $x88 true)))
 (let (($x61 (= $x97 true)))
 (let ((?x115 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x115)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x86 $x34)))
 (let (($x84 (and $x57 $x44)))
 (let (($x103 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x103 $x84)))
 (let (($x43 (= $x112 true)))
 (let (($x75 (= $x43 true)))
 (let (($x98 (= $x75 true)))
 (let ((?x104 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x104)))
 (let (($x38 (= ?x10 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x19 (= $x38 true)))
 (let (($x70 (= $x19 true)))
 (let (($x106 (and $x70 $x98)))
 (let (($x78 (and $x106 $x61)))
 (let (($x92 (and $x78 $x48)))
 (let (($x40 (and $x92 $x76)))
 (let (($x27 (and $x40 $x54)))
 (let (($x110 (and $x27 $x29)))
 (let (($x136 (and $x110 $x15)))
 (let (($x137 (and $x39 $x136)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x68 (and $x108 $x137)))
 (let (($x100 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x67 (and $x100 $x68)))
 (let (($x129 (and $x107 $x67)))
 (let (($x114 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x21 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x21 (or false (or false (and true (or $x117 $x114)))))))
 (let (($x130 (and $x62 $x129)))
 (let (($x49 (=> $x130 $x138)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x91 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x114 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= ?x114 (_ bv0 32))))
 (let ((?x111 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x96 $x93)))
 (let (($x83 (and $x51 $x46)))
 (and $x83 $x91)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x91 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x114 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= ?x114 (_ bv0 32))))
 (let ((?x111 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x96 $x93)))
 (let (($x83 (and $x51 $x46)))
 (and $x83 $x91)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x123 (= true false)))
 (let (($x48 (= $x123 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x88 (concat ?x120 (concat ?x100 ?x51)))))
 (let (($x61 (= ?x97 input.dst.llvm-%val)))
 (let (($x78 (= $x61 true)))
 (let (($x56 (= $x78 true)))
 (let ((?x96 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x96)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x103 $x111)))
 (let (($x52 (and $x46 $x38)))
 (let (($x98 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x98 $x52)))
 (let (($x34 (= $x32 true)))
 (let (($x19 (= $x34 true)))
 (let (($x114 (= $x19 true)))
 (let (($x106 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x84 (= $x106 true)))
 (let (($x112 (= $x84 true)))
 (let (($x104 (= $x112 true)))
 (let (($x119 (and $x104 $x114)))
 (let (($x90 (and $x119 $x56)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x60 (and $x11 $x90)))
 (let ((?x108 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x43 (= ?x108 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x45 (and $x43 $x60)))
 (let (($x10 (= ?x108 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x25 (and $x10 $x45)))
 (let (($x92 (=> $x25 $x48)))
 (not $x92))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x123 (= true false)))
 (let (($x48 (= $x123 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x88 (concat ?x120 (concat ?x100 ?x51)))))
 (let (($x61 (= ?x97 input.dst.llvm-%val)))
 (let (($x78 (= $x61 true)))
 (let (($x56 (= $x78 true)))
 (let ((?x96 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x96)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x103 $x111)))
 (let (($x52 (and $x46 $x38)))
 (let (($x98 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x98 $x52)))
 (let (($x34 (= $x32 true)))
 (let (($x19 (= $x34 true)))
 (let (($x114 (= $x19 true)))
 (let (($x106 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x84 (= $x106 true)))
 (let (($x112 (= $x84 true)))
 (let (($x104 (= $x112 true)))
 (let (($x119 (and $x104 $x114)))
 (let (($x90 (and $x119 $x56)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x60 (and $x11 $x90)))
 (let ((?x108 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x43 (= ?x108 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x45 (and $x43 $x60)))
 (let (($x10 (= ?x108 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x25 (and $x10 $x45)))
 (let (($x92 (=> $x25 $x48)))
 (not $x92))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000001010)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111110110)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111110110)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv10 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x48 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x75 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x92 (= ?x75 ?x48)))
 (let (($x26 (= $x92 true)))
 (let (($x105 (= $x26 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x98 (concat ?x44 (concat ?x43 ?x93)))))
 (let (($x32 (= ?x88 input.dst.llvm-%val)))
 (let (($x38 (= $x32 true)))
 (let (($x117 (= $x38 true)))
 (let (($x100 (= input.dst.llvm-%val ?x88)))
 (let ((?x51 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x51)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x90 $x85)))
 (let (($x56 (and $x86 $x80)))
 (let (($x84 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x84 $x56)))
 (let (($x74 (and $x91 $x100)))
 (let (($x19 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and $x19 $x74)))
 (let (($x118 (= $x104 true)))
 (let (($x57 (= $x118 true)))
 (let (($x34 (= $x57 true)))
 (let (($x60 (and $x34 $x117)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x45 (and $x11 $x60)))
 (let (($x121 (= ?x75 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x25 (and $x121 $x45)))
 (let (($x108 (= ?x75 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x123 (and $x108 $x25)))
 (let (($x115 (=> $x123 $x105)))
 (not $x115)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x48 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x75 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x92 (= ?x75 ?x48)))
 (let (($x26 (= $x92 true)))
 (let (($x105 (= $x26 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x98 (concat ?x44 (concat ?x43 ?x93)))))
 (let (($x32 (= ?x88 input.dst.llvm-%val)))
 (let (($x38 (= $x32 true)))
 (let (($x117 (= $x38 true)))
 (let (($x100 (= input.dst.llvm-%val ?x88)))
 (let ((?x51 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x51)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x90 $x85)))
 (let (($x56 (and $x86 $x80)))
 (let (($x84 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x84 $x56)))
 (let (($x74 (and $x91 $x100)))
 (let (($x19 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and $x19 $x74)))
 (let (($x118 (= $x104 true)))
 (let (($x57 (= $x118 true)))
 (let (($x34 (= $x57 true)))
 (let (($x60 (and $x34 $x117)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x45 (and $x11 $x60)))
 (let (($x121 (= ?x75 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x25 (and $x121 $x45)))
 (let (($x108 (= ?x75 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x123 (and $x108 $x25)))
 (let (($x115 (=> $x123 $x105)))
 (not $x115)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311330/query
