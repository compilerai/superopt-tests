==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x25 (not $x20)))
 (let (($x98 (= $x25 false)))
 (let (($x99 (= $x98 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x83 ?x81)))))
 (let (($x91 (= ?x90 input.dst.llvm-%opt)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x58)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x62)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x64)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x74 (=> $x69 $x73)))
 (let ((?x53 (ite $x20 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x53 (_ bv1 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x33 (= false false)))
 (let (($x52 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x52 $x33)))
 (let (($x65 (= ?x53 (_ bv0 32))))
 (let (($x66 (= $x52 $x65)))
 (let (($x68 (and $x66 $x67)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x48 (=> $x36 (or false (or false (and true (or $x10 $x11)))))))
 (let (($x6 (=> (and $x25 $x36) (or false (or false (and true (or $x10 $x11)))))))
 (let (($x38 (= $x6 true)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let ((?x46 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x46)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x47 $x37)))
 (let (($x23 (and $x15 $x22)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x45 $x23)))
 (let (($x27 (= $x18 true)))
 (let (($x40 (= $x27 true)))
 (let (($x30 (= $x40 true)))
 (let (($x51 (and $x30 $x50)))
 (let (($x79 (and $x51 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x7 $x94)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x96 (and $x14 $x95)))
 (let (($x97 (and $x33 $x96)))
 (let (($x100 (=> $x97 $x99)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x25 (not $x20)))
 (let (($x98 (= $x25 false)))
 (let (($x99 (= $x98 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x83 ?x81)))))
 (let (($x91 (= ?x90 input.dst.llvm-%opt)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x58)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x62)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x64)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x74 (=> $x69 $x73)))
 (let ((?x53 (ite $x20 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x53 (_ bv1 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x33 (= false false)))
 (let (($x52 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x52 $x33)))
 (let (($x65 (= ?x53 (_ bv0 32))))
 (let (($x66 (= $x52 $x65)))
 (let (($x68 (and $x66 $x67)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x48 (=> $x36 (or false (or false (and true (or $x10 $x11)))))))
 (let (($x6 (=> (and $x25 $x36) (or false (or false (and true (or $x10 $x11)))))))
 (let (($x38 (= $x6 true)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let ((?x46 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x46)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x47 $x37)))
 (let (($x23 (and $x15 $x22)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x45 $x23)))
 (let (($x27 (= $x18 true)))
 (let (($x40 (= $x27 true)))
 (let (($x30 (= $x40 true)))
 (let (($x51 (and $x30 $x50)))
 (let (($x79 (and $x51 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x7 $x94)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x96 (and $x14 $x95)))
 (let (($x97 (and $x33 $x96)))
 (let (($x100 (=> $x97 $x99)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6000fffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfe)
                     #x6000fffd
                     #xff)
              #x6000ffff
              #x5f)
       #x6000fffe
       #xff))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xfefefefe)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x5ffffffe)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6000fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6000ffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3205076480 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3205076480 32) (_ bv253 8)) (_ bv3205076481 32) (_ bv255 8)) (_ bv3205076482 32) (_ bv255 8)) (_ bv3205076483 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3205076483 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3205076480 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x102 (or $x74 $x32)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x92 (concat ?x87 ?x81)))))
 (let (($x97 (= ?x96 input.dst.llvm-%opt)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x55)))
 (let (($x79 (=> $x74 $x78)))
 (let ((?x69 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x69 (_ bv1 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x35 (= false false)))
 (let (($x68 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x64 (=> $x68 $x35)))
 (let (($x58 (= ?x69 (_ bv0 32))))
 (let (($x62 (= $x68 $x58)))
 (let (($x73 (and $x62 $x64)))
 (let (($x77 (and $x73 $x76)))
 (let (($x88 (and $x77 $x79)))
 (let (($x89 (= $x88 true)))
 (let (($x85 (= $x89 true)))
 (let (($x86 (= $x85 true)))
 (let (($x53 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x65 (= $x53 true)))
 (let (($x66 (= $x65 true)))
 (let (($x33 (= $x66 true)))
 (let ((?x41 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x41)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x11 $x13)))
 (let (($x6 (and $x29 $x48)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x10 $x6)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x67 (and $x51 $x33)))
 (let (($x82 (and $x67 $x86)))
 (let (($x100 (and $x82 $x99)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x101 (and $x36 $x100)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x26 (and $x8 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x23 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x20 (=> $x24 (or false (or false (and true (or $x22 $x23)))))))
 (let (($x31 (not $x32)))
 (let (($x45 (=> (and $x31 $x24) (or false (or false (and true (or $x22 $x23)))))))
 (let (($x17 (and $x45 $x80)))
 (let (($x105 (=> $x17 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x102 (or $x74 $x32)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x92 (concat ?x87 ?x81)))))
 (let (($x97 (= ?x96 input.dst.llvm-%opt)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x55)))
 (let (($x79 (=> $x74 $x78)))
 (let ((?x69 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x69 (_ bv1 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x35 (= false false)))
 (let (($x68 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x64 (=> $x68 $x35)))
 (let (($x58 (= ?x69 (_ bv0 32))))
 (let (($x62 (= $x68 $x58)))
 (let (($x73 (and $x62 $x64)))
 (let (($x77 (and $x73 $x76)))
 (let (($x88 (and $x77 $x79)))
 (let (($x89 (= $x88 true)))
 (let (($x85 (= $x89 true)))
 (let (($x86 (= $x85 true)))
 (let (($x53 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x65 (= $x53 true)))
 (let (($x66 (= $x65 true)))
 (let (($x33 (= $x66 true)))
 (let ((?x41 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x41)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x11 $x13)))
 (let (($x6 (and $x29 $x48)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x10 $x6)))
 (let (($x49 (= $x38 true)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x67 (and $x51 $x33)))
 (let (($x82 (and $x67 $x86)))
 (let (($x100 (and $x82 $x99)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x101 (and $x36 $x100)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x26 (and $x8 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x23 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x20 (=> $x24 (or false (or false (and true (or $x22 $x23)))))))
 (let (($x31 (not $x32)))
 (let (($x45 (=> (and $x31 $x24) (or false (or false (and true (or $x22 $x23)))))))
 (let (($x17 (and $x45 $x80)))
 (let (($x105 (=> $x17 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x63 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x63)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x75 $x54)))
 (let (($x55 (and $x71 $x56)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x70 $x55)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x30 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x96 (= true $x30)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x97 (=> $x14 $x96)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x82 (concat ?x89 ?x79)))))
 (let (($x84 (= input.dst.llvm-%opt ?x92)))
 (let (($x90 (and (and (and $x30 $x70) $x55) $x84)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x64 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x49 (=> $x35 $x64)))
 (let ((?x38 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x38 (_ bv1 32))))
 (let (($x28 (= $x35 $x52)))
 (let (($x61 (= false false)))
 (let (($x8 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x8 $x61)))
 (let (($x18 (= ?x38 (_ bv0 32))))
 (let (($x74 (= $x8 $x18)))
 (let (($x62 (and $x74 $x33)))
 (let (($x36 (and $x62 $x28)))
 (let (($x23 (and $x36 $x49)))
 (let (($x93 (and $x23 $x90)))
 (let (($x98 (and $x93 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x24 (= $x14 true)))
 (let (($x37 (= $x24 true)))
 (let (($x51 (= $x37 true)))
 (let (($x26 (and $x51 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x17 (and $x40 $x80)))
 (let (($x12 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x102 (and $x12 $x17)))
 (let (($x103 (and $x61 $x102)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x66 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x66 (or false (or false (and true (or $x53 $x13)))))))
 (let (($x31 (=> (and $x14 $x66) (or false (or false (and true (or $x53 $x13)))))))
 (let (($x104 (and $x31 $x103)))
 (let (($x83 (=> $x104 $x7)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x63 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x63)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x75 $x54)))
 (let (($x55 (and $x71 $x56)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x70 $x55)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x30 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x96 (= true $x30)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x97 (=> $x14 $x96)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x82 (concat ?x89 ?x79)))))
 (let (($x84 (= input.dst.llvm-%opt ?x92)))
 (let (($x90 (and (and (and $x30 $x70) $x55) $x84)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x64 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x49 (=> $x35 $x64)))
 (let ((?x38 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x38 (_ bv1 32))))
 (let (($x28 (= $x35 $x52)))
 (let (($x61 (= false false)))
 (let (($x8 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x8 $x61)))
 (let (($x18 (= ?x38 (_ bv0 32))))
 (let (($x74 (= $x8 $x18)))
 (let (($x62 (and $x74 $x33)))
 (let (($x36 (and $x62 $x28)))
 (let (($x23 (and $x36 $x49)))
 (let (($x93 (and $x23 $x90)))
 (let (($x98 (and $x93 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x24 (= $x14 true)))
 (let (($x37 (= $x24 true)))
 (let (($x51 (= $x37 true)))
 (let (($x26 (and $x51 $x101)))
 (let (($x80 (and $x35 $x26)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x17 (and $x40 $x80)))
 (let (($x12 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x102 (and $x12 $x17)))
 (let (($x103 (and $x61 $x102)))
 (let (($x13 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x66 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x66 (or false (or false (and true (or $x53 $x13)))))))
 (let (($x31 (=> (and $x14 $x66) (or false (or false (and true (or $x53 $x13)))))))
 (let (($x104 (and $x31 $x103)))
 (let (($x83 (=> $x104 $x7)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x36)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x83 (= (_ bv0 32) ?x77)))
 (let (($x44 (= $x83 true)))
 (let (($x70 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x99 (= true $x70)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x100 (=> $x14 $x99)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x92 (concat ?x79 (concat ?x82 ?x91)))))
 (let (($x90 (= input.dst.llvm-%opt ?x84)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x56)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x72 $x71)))
 (let (($x81 (and $x63 $x55)))
 (let (($x75 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and (and (and $x70 $x75) $x81) $x90)))
 (let (($x23 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x8 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x65 (=> $x8 $x23)))
 (let ((?x33 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x64 (= $x8 $x6)))
 (let (($x40 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x21 (=> $x61 $x40)))
 (let (($x39 (= ?x33 (_ bv0 32))))
 (let (($x10 (= $x61 $x39)))
 (let (($x5 (and $x10 $x21)))
 (let (($x49 (and $x5 $x64)))
 (let (($x68 (and $x49 $x65)))
 (let (($x98 (and $x68 $x97)))
 (let (($x101 (and $x98 $x100)))
 (let (($x26 (= $x101 true)))
 (let (($x80 (= $x26 true)))
 (let (($x17 (= $x80 true)))
 (let (($x38 (= $x14 true)))
 (let (($x18 (= $x38 true)))
 (let (($x74 (= $x18 true)))
 (let (($x102 (and $x74 $x17)))
 (let (($x103 (and $x8 $x102)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x104 (and $x67 $x103)))
 (let (($x37 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x105 (and $x37 $x104)))
 (let (($x106 (and $x40 $x105)))
 (let (($x15 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x12 (=> $x29 (or false (or false (and true (or $x27 $x15)))))))
 (let (($x48 (=> (and $x14 $x29) (or false (or false (and true (or $x27 $x15)))))))
 (let (($x7 (and $x48 $x106)))
 (let (($x9 (=> $x7 $x44)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x36)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x83 (= (_ bv0 32) ?x77)))
 (let (($x44 (= $x83 true)))
 (let (($x70 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x99 (= true $x70)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (not $x19)))
 (let (($x100 (=> $x14 $x99)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x92 (concat ?x79 (concat ?x82 ?x91)))))
 (let (($x90 (= input.dst.llvm-%opt ?x84)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x56)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x72 $x71)))
 (let (($x81 (and $x63 $x55)))
 (let (($x75 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and (and (and $x70 $x75) $x81) $x90)))
 (let (($x23 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x8 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x65 (=> $x8 $x23)))
 (let ((?x33 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x64 (= $x8 $x6)))
 (let (($x40 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x21 (=> $x61 $x40)))
 (let (($x39 (= ?x33 (_ bv0 32))))
 (let (($x10 (= $x61 $x39)))
 (let (($x5 (and $x10 $x21)))
 (let (($x49 (and $x5 $x64)))
 (let (($x68 (and $x49 $x65)))
 (let (($x98 (and $x68 $x97)))
 (let (($x101 (and $x98 $x100)))
 (let (($x26 (= $x101 true)))
 (let (($x80 (= $x26 true)))
 (let (($x17 (= $x80 true)))
 (let (($x38 (= $x14 true)))
 (let (($x18 (= $x38 true)))
 (let (($x74 (= $x18 true)))
 (let (($x102 (and $x74 $x17)))
 (let (($x103 (and $x8 $x102)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x104 (and $x67 $x103)))
 (let (($x37 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x105 (and $x37 $x104)))
 (let (($x106 (and $x40 $x105)))
 (let (($x15 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x12 (=> $x29 (or false (or false (and true (or $x27 $x15)))))))
 (let (($x48 (=> (and $x14 $x29) (or false (or false (and true (or $x27 $x15)))))))
 (let (($x7 (and $x48 $x106)))
 (let (($x9 (=> $x7 $x44)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x007f37fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x007f37fe
                     #x39)
              #x007f37fd
              #x04)
       #x00390402
       #x01))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x007f37ff)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00390400)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x007f37fc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3221224956 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4156689528 32) (_ bv252 8)) (_ bv4156689529 32) (_ bv253 8)) (_ bv4156689530 32) (_ bv255 8)) (_ bv4156689531 32) (_ bv191 8)) (_ bv3221224956 32) (_ bv1 8)))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4156689528 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4156689528 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4156689531 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let ((?x45 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x45)))
 (let (($x50 (= ?x95 ?x52)))
 (let (($x32 (= $x50 true)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (= true $x75)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x19 (not $x73)))
 (let (($x80 (=> $x19 $x26)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x84 (concat ?x91 (concat ?x79 ?x92)))))
 (let (($x97 (= input.dst.llvm-%opt ?x90)))
 (let ((?x55 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x55)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x54 $x63)))
 (let (($x96 (and $x56 $x81)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and (and (and $x75 $x72) $x96) $x97)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x30 (=> $x61 $x68)))
 (let ((?x21 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x21 (_ bv1 32))))
 (let (($x23 (= $x61 $x77)))
 (let (($x67 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x36 (=> $x40 $x67)))
 (let (($x28 (= ?x21 (_ bv0 32))))
 (let (($x35 (= $x40 $x28)))
 (let (($x22 (and $x35 $x36)))
 (let (($x65 (and $x22 $x23)))
 (let (($x42 (and $x65 $x30)))
 (let (($x101 (and $x42 $x100)))
 (let (($x17 (and $x101 $x80)))
 (let (($x102 (= $x17 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x33 (= $x19 true)))
 (let (($x39 (= $x33 true)))
 (let (($x10 (= $x39 true)))
 (let (($x105 (and $x10 $x104)))
 (let (($x106 (and $x61 $x105)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x7 (and $x66 $x106)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x83 (and $x18 $x7)))
 (let (($x44 (and $x67 $x83)))
 (let (($x31 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x24 (or false (or false (and true (or $x41 $x31)))))))
 (let (($x47 (=> (and $x19 $x24) (or false (or false (and true (or $x41 $x31)))))))
 (let (($x9 (and $x47 $x44)))
 (let (($x107 (=> $x9 $x32)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let ((?x45 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x45)))
 (let (($x50 (= ?x95 ?x52)))
 (let (($x32 (= $x50 true)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (= true $x75)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x19 (not $x73)))
 (let (($x80 (=> $x19 $x26)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x84 (concat ?x91 (concat ?x79 ?x92)))))
 (let (($x97 (= input.dst.llvm-%opt ?x90)))
 (let ((?x55 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x55)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x54 $x63)))
 (let (($x96 (and $x56 $x81)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and (and (and $x75 $x72) $x96) $x97)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x61 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x30 (=> $x61 $x68)))
 (let ((?x21 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x21 (_ bv1 32))))
 (let (($x23 (= $x61 $x77)))
 (let (($x67 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x36 (=> $x40 $x67)))
 (let (($x28 (= ?x21 (_ bv0 32))))
 (let (($x35 (= $x40 $x28)))
 (let (($x22 (and $x35 $x36)))
 (let (($x65 (and $x22 $x23)))
 (let (($x42 (and $x65 $x30)))
 (let (($x101 (and $x42 $x100)))
 (let (($x17 (and $x101 $x80)))
 (let (($x102 (= $x17 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x33 (= $x19 true)))
 (let (($x39 (= $x33 true)))
 (let (($x10 (= $x39 true)))
 (let (($x105 (and $x10 $x104)))
 (let (($x106 (and $x61 $x105)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x7 (and $x66 $x106)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x83 (and $x18 $x7)))
 (let (($x44 (and $x67 $x83)))
 (let (($x31 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x24 (or false (or false (and true (or $x41 $x31)))))))
 (let (($x47 (=> (and $x19 $x24) (or false (or false (and true (or $x41 $x31)))))))
 (let (($x9 (and $x47 $x44)))
 (let (($x107 (=> $x9 $x32)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x32 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x107 (bvmul (_ bv508 10) ?x32)))
 (let (($x14 (= ?x107 ?x108)))
 (let (($x94 (= $x14 true)))
 (let (($x72 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x102 (= true $x72)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x76)))
 (let (($x103 (=> $x29 $x102)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x90 (concat ?x92 (concat ?x91 ?x84)))))
 (let (($x100 (= input.dst.llvm-%opt ?x97)))
 (let ((?x81 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x81)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x71 $x56)))
 (let (($x99 (and $x55 $x96)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and (and (and $x72 $x54) $x99) $x100)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x42 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x40 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x70 (=> $x40 $x42)))
 (let ((?x36 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x36 (_ bv1 32))))
 (let (($x68 (= $x40 $x52)))
 (let (($x66 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x67 $x66)))
 (let (($x64 (= ?x36 (_ bv0 32))))
 (let (($x8 (= $x67 $x64)))
 (let (($x20 (and $x8 $x49)))
 (let (($x30 (and $x20 $x68)))
 (let (($x87 (and $x30 $x70)))
 (let (($x17 (and $x87 $x80)))
 (let (($x104 (and $x17 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x21 (= $x29 true)))
 (let (($x28 (= $x21 true)))
 (let (($x35 (= $x28 true)))
 (let (($x83 (and $x35 $x7)))
 (let (($x44 (and $x40 $x83)))
 (let (($x16 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (and $x16 $x44)))
 (let (($x39 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x78 (and $x39 $x9)))
 (let (($x45 (and $x66 $x78)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x38 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x38 (or false (or false (and true (or $x12 $x48)))))))
 (let (($x59 (=> (and $x29 $x38) (or false (or false (and true (or $x12 $x48)))))))
 (let (($x95 (and $x59 $x45)))
 (let (($x46 (=> $x95 $x94)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x32 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x107 (bvmul (_ bv508 10) ?x32)))
 (let (($x14 (= ?x107 ?x108)))
 (let (($x94 (= $x14 true)))
 (let (($x72 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x102 (= true $x72)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x76)))
 (let (($x103 (=> $x29 $x102)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x90 (concat ?x92 (concat ?x91 ?x84)))))
 (let (($x100 (= input.dst.llvm-%opt ?x97)))
 (let ((?x81 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x81)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x71 $x56)))
 (let (($x99 (and $x55 $x96)))
 (let (($x54 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and (and (and $x72 $x54) $x99) $x100)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x42 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x40 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x70 (=> $x40 $x42)))
 (let ((?x36 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x36 (_ bv1 32))))
 (let (($x68 (= $x40 $x52)))
 (let (($x66 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x67 $x66)))
 (let (($x64 (= ?x36 (_ bv0 32))))
 (let (($x8 (= $x67 $x64)))
 (let (($x20 (and $x8 $x49)))
 (let (($x30 (and $x20 $x68)))
 (let (($x87 (and $x30 $x70)))
 (let (($x17 (and $x87 $x80)))
 (let (($x104 (and $x17 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x7 (= $x106 true)))
 (let (($x21 (= $x29 true)))
 (let (($x28 (= $x21 true)))
 (let (($x35 (= $x28 true)))
 (let (($x83 (and $x35 $x7)))
 (let (($x44 (and $x40 $x83)))
 (let (($x16 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (and $x16 $x44)))
 (let (($x39 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x78 (and $x39 $x9)))
 (let (($x45 (and $x66 $x78)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x38 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x38 (or false (or false (and true (or $x12 $x48)))))))
 (let (($x59 (=> (and $x29 $x38) (or false (or false (and true (or $x12 $x48)))))))
 (let (($x95 (and $x59 $x45)))
 (let (($x46 (=> $x95 $x94)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000010000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000010000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000010000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000000) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x036ffe3c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x80)
                                #x020f0001
                                #x00)
                         #x036ffe3d
                         #x00)
                  #x036ffe3f
                  #x02)))
  (store (store a!1 #x036ffe3c #x00) #x036ffe3e #x0f)))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x80800080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x80800080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x036ffe3f)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80800080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x020f0000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x036ffe3c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv469759996 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1587158012 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1587158012 32) (_ bv252 8)) (_ bv1587158013 32) (_ bv247 8)) (_ bv1587158014 32) (_ bv255 8)) (_ bv1587158015 32) (_ bv27 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1587158012 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1587158015 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x94 (= (_ bv0 2) ?x14)))
 (let (($x46 (= $x94 true)))
 (let (($x54 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= true $x54)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x73)))
 (let (($x106 (=> $x29 $x105)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x97 (concat ?x84 (concat ?x92 ?x90)))))
 (let (($x80 (= input.dst.llvm-%opt ?x100)))
 (let ((?x96 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x96)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x63 $x55)))
 (let (($x26 (and $x81 $x99)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and (and (and $x54 $x71) $x26) $x80)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x30)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x87 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x67 $x87)))
 (let ((?x49 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x49 (_ bv1 32))))
 (let (($x42 (= $x67 $x6)))
 (let (($x16 (= false false)))
 (let (($x66 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x66 $x16)))
 (let (($x23 (= ?x49 (_ bv0 32))))
 (let (($x61 (= $x66 $x23)))
 (let (($x69 (and $x61 $x65)))
 (let (($x70 (and $x69 $x42)))
 (let (($x93 (and $x70 $x75)))
 (let (($x104 (and $x93 $x103)))
 (let (($x7 (and $x104 $x106)))
 (let (($x83 (= $x7 true)))
 (let (($x44 (= $x83 true)))
 (let (($x9 (= $x44 true)))
 (let (($x36 (= $x29 true)))
 (let (($x64 (= $x36 true)))
 (let (($x8 (= $x64 true)))
 (let (($x78 (and $x8 $x9)))
 (let (($x45 (and $x67 $x78)))
 (let (($x24 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x24 $x45)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (and $x28 $x95)))
 (let (($x32 (and $x16 $x50)))
 (let (($x47 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x33 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x39 (=> $x33 (or false (or false (and true (or $x37 $x47)))))))
 (let (($x60 (=> (and $x29 $x33) (or false (or false (and true (or $x37 $x47)))))))
 (let (($x107 (and $x60 $x32)))
 (let (($x109 (=> $x107 $x46)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x94 (= (_ bv0 2) ?x14)))
 (let (($x46 (= $x94 true)))
 (let (($x54 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= true $x54)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x73)))
 (let (($x106 (=> $x29 $x105)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x97 (concat ?x84 (concat ?x92 ?x90)))))
 (let (($x80 (= input.dst.llvm-%opt ?x100)))
 (let ((?x96 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x96)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x63 $x55)))
 (let (($x26 (and $x81 $x99)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and (and (and $x54 $x71) $x26) $x80)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x30)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x87 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x67 $x87)))
 (let ((?x49 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x49 (_ bv1 32))))
 (let (($x42 (= $x67 $x6)))
 (let (($x16 (= false false)))
 (let (($x66 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x66 $x16)))
 (let (($x23 (= ?x49 (_ bv0 32))))
 (let (($x61 (= $x66 $x23)))
 (let (($x69 (and $x61 $x65)))
 (let (($x70 (and $x69 $x42)))
 (let (($x93 (and $x70 $x75)))
 (let (($x104 (and $x93 $x103)))
 (let (($x7 (and $x104 $x106)))
 (let (($x83 (= $x7 true)))
 (let (($x44 (= $x83 true)))
 (let (($x9 (= $x44 true)))
 (let (($x36 (= $x29 true)))
 (let (($x64 (= $x36 true)))
 (let (($x8 (= $x64 true)))
 (let (($x78 (and $x8 $x9)))
 (let (($x45 (and $x67 $x78)))
 (let (($x24 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x95 (and $x24 $x45)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (and $x28 $x95)))
 (let (($x32 (and $x16 $x50)))
 (let (($x47 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x33 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x39 (=> $x33 (or false (or false (and true (or $x37 $x47)))))))
 (let (($x60 (=> (and $x29 $x33) (or false (or false (and true (or $x37 $x47)))))))
 (let (($x107 (and $x60 $x32)))
 (let (($x109 (=> $x107 $x46)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x76)))
 (let ((?x43 (ite $x29 (_ bv1 1) (_ bv0 1))))
 (let ((?x53 ((_ zero_extend 31) ?x43)))
 (let (($x88 (= (_ bv1 32) ?x53)))
 (let (($x15 (= $x88 true)))
 (let (($x71 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x83 (= true $x71)))
 (let (($x44 (=> $x29 $x83)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x100 (concat ?x90 (concat ?x84 ?x97)))))
 (let (($x103 (= input.dst.llvm-%opt ?x80)))
 (let ((?x99 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x99)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x56 $x81)))
 (let (($x102 (and $x96 $x26)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and (and (and $x71 $x63) $x102) $x103)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x70)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let (($x93 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x72 (=> $x66 $x93)))
 (let ((?x65 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x65 (_ bv1 32))))
 (let (($x87 (= $x66 $x77)))
 (let (($x24 (= false false)))
 (let (($x16 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x16 $x24)))
 (let (($x68 (= ?x65 (_ bv0 32))))
 (let (($x40 (= $x16 $x68)))
 (let (($x34 (and $x40 $x30)))
 (let (($x75 (and $x34 $x87)))
 (let (($x98 (and $x75 $x72)))
 (let (($x7 (and $x98 $x106)))
 (let (($x9 (and $x7 $x44)))
 (let (($x78 (= $x9 true)))
 (let (($x45 (= $x78 true)))
 (let (($x95 (= $x45 true)))
 (let (($x49 (= $x29 true)))
 (let (($x23 (= $x49 true)))
 (let (($x61 (= $x23 true)))
 (let (($x50 (and $x61 $x95)))
 (let (($x32 (and $x66 $x50)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x107 (and $x38 $x32)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x108 (and $x64 $x107)))
 (let (($x14 (and $x24 $x108)))
 (let (($x59 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x28 (=> $x21 (or false (or false (and true (or $x18 $x59)))))))
 (let (($x25 (=> (and $x29 $x21) (or false (or false (and true (or $x18 $x59)))))))
 (let (($x94 (and $x25 $x14)))
 (let (($x85 (=> $x94 $x15)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x76)))
 (let ((?x43 (ite $x29 (_ bv1 1) (_ bv0 1))))
 (let ((?x53 ((_ zero_extend 31) ?x43)))
 (let (($x88 (= (_ bv1 32) ?x53)))
 (let (($x15 (= $x88 true)))
 (let (($x71 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x83 (= true $x71)))
 (let (($x44 (=> $x29 $x83)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x100 (concat ?x90 (concat ?x84 ?x97)))))
 (let (($x103 (= input.dst.llvm-%opt ?x80)))
 (let ((?x99 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x99)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x56 $x81)))
 (let (($x102 (and $x96 $x26)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and (and (and $x71 $x63) $x102) $x103)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x70)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let (($x93 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x72 (=> $x66 $x93)))
 (let ((?x65 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x65 (_ bv1 32))))
 (let (($x87 (= $x66 $x77)))
 (let (($x24 (= false false)))
 (let (($x16 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x16 $x24)))
 (let (($x68 (= ?x65 (_ bv0 32))))
 (let (($x40 (= $x16 $x68)))
 (let (($x34 (and $x40 $x30)))
 (let (($x75 (and $x34 $x87)))
 (let (($x98 (and $x75 $x72)))
 (let (($x7 (and $x98 $x106)))
 (let (($x9 (and $x7 $x44)))
 (let (($x78 (= $x9 true)))
 (let (($x45 (= $x78 true)))
 (let (($x95 (= $x45 true)))
 (let (($x49 (= $x29 true)))
 (let (($x23 (= $x49 true)))
 (let (($x61 (= $x23 true)))
 (let (($x50 (and $x61 $x95)))
 (let (($x32 (and $x66 $x50)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x107 (and $x38 $x32)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x108 (and $x64 $x107)))
 (let (($x14 (and $x24 $x108)))
 (let (($x59 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x28 (=> $x21 (or false (or false (and true (or $x18 $x59)))))))
 (let (($x25 (=> (and $x29 $x21) (or false (or false (and true (or $x18 $x59)))))))
 (let (($x94 (and $x25 $x14)))
 (let (($x85 (=> $x94 $x15)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x60 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x36 (or false (or false (and true (or $x39 $x60)))))))
 (let (($x53 (= $x64 true)))
 (let (($x88 (= $x53 true)))
 (let (($x63 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x78 (= true $x63)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x76)))
 (let (($x45 (=> $x29 $x78)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x80 (concat ?x97 (concat ?x90 ?x100)))))
 (let (($x106 (= input.dst.llvm-%opt ?x103)))
 (let ((?x26 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x26)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x55 $x96)))
 (let (($x105 (and $x99 $x102)))
 (let (($x56 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and (and (and $x63 $x56) $x105) $x106)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x6 (concat (select input.dst.llvm-mem ?x74) ?x62)))
 (let (($x98 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x16 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x54 (=> $x16 $x98)))
 (let ((?x30 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x30 (_ bv1 32))))
 (let (($x93 (= $x16 $x52)))
 (let (($x38 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x70 (=> $x24 $x38)))
 (let (($x42 (= ?x30 (_ bv0 32))))
 (let (($x67 (= $x24 $x42)))
 (let (($x57 (and $x67 $x70)))
 (let (($x72 (and $x57 $x93)))
 (let (($x101 (and $x72 $x54)))
 (let (($x9 (and $x101 $x44)))
 (let (($x95 (and $x9 $x45)))
 (let (($x50 (= $x95 true)))
 (let (($x32 (= $x50 true)))
 (let (($x107 (= $x32 true)))
 (let (($x65 (= $x29 true)))
 (let (($x68 (= $x65 true)))
 (let (($x40 (= $x68 true)))
 (let (($x108 (and $x40 $x107)))
 (let (($x14 (and $x16 $x108)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x94 (and $x33 $x14)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x46 (and $x23 $x94)))
 (let (($x109 (and $x38 $x46)))
 (let (($x11 (=> (and $x29 $x36) (or false (or false (and true (or $x39 $x60)))))))
 (let (($x43 (and $x11 $x109)))
 (let (($x15 (=> $x43 $x88)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x60 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x36 (or false (or false (and true (or $x39 $x60)))))))
 (let (($x53 (= $x64 true)))
 (let (($x88 (= $x53 true)))
 (let (($x63 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x78 (= true $x63)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x76)))
 (let (($x45 (=> $x29 $x78)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x80 (concat ?x97 (concat ?x90 ?x100)))))
 (let (($x106 (= input.dst.llvm-%opt ?x103)))
 (let ((?x26 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x26)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x55 $x96)))
 (let (($x105 (and $x99 $x102)))
 (let (($x56 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and (and (and $x63 $x56) $x105) $x106)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x6 (concat (select input.dst.llvm-mem ?x74) ?x62)))
 (let (($x98 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x16 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x54 (=> $x16 $x98)))
 (let ((?x30 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x30 (_ bv1 32))))
 (let (($x93 (= $x16 $x52)))
 (let (($x38 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x70 (=> $x24 $x38)))
 (let (($x42 (= ?x30 (_ bv0 32))))
 (let (($x67 (= $x24 $x42)))
 (let (($x57 (and $x67 $x70)))
 (let (($x72 (and $x57 $x93)))
 (let (($x101 (and $x72 $x54)))
 (let (($x9 (and $x101 $x44)))
 (let (($x95 (and $x9 $x45)))
 (let (($x50 (= $x95 true)))
 (let (($x32 (= $x50 true)))
 (let (($x107 (= $x32 true)))
 (let (($x65 (= $x29 true)))
 (let (($x68 (= $x65 true)))
 (let (($x40 (= $x68 true)))
 (let (($x108 (and $x40 $x107)))
 (let (($x14 (and $x16 $x108)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x94 (and $x33 $x14)))
 (let (($x23 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x46 (and $x23 $x94)))
 (let (($x109 (and $x38 $x46)))
 (let (($x11 (=> (and $x29 $x36) (or false (or false (and true (or $x39 $x60)))))))
 (let (($x43 (and $x11 $x109)))
 (let (($x15 (=> $x43 $x88)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x72)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x27))))
 (let (($x120 (= input.spec-%var-opt-0.2 ?x113)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x24 $x120)))
 (let (($x85 (= (_ bv0 32) ?x77)))
 (let ((?x41 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x41 (_ bv1 32))))
 (let (($x118 (= $x24 $x117)))
 (let (($x33 (= false false)))
 (let (($x38 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x38 $x33)))
 (let (($x114 (= ?x41 (_ bv0 32))))
 (let (($x115 (= $x38 $x114)))
 (let (($x116 (and $x115 $x75)))
 (let (($x119 (and $x116 $x118)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x56 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x50 (= true $x56)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x29)))
 (let (($x32 (=> $x76 $x50)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x103 (concat ?x100 (concat ?x97 ?x80)))))
 (let (($x44 (= input.dst.llvm-%opt ?x106)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x102)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x81 $x99)))
 (let (($x83 (and $x26 $x105)))
 (let (($x55 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and (and (and $x56 $x55) $x83) $x44)))
 (let (($x101 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x71 (=> $x24 $x101)))
 (let ((?x70 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x70 (_ bv1 32))))
 (let (($x98 (= $x24 $x6)))
 (let (($x87 (= ?x70 (_ bv0 32))))
 (let (($x66 (= $x38 $x87)))
 (let (($x62 (and $x66 $x75)))
 (let (($x54 (and $x62 $x98)))
 (let (($x17 (and $x54 $x71)))
 (let (($x95 (and $x17 $x45)))
 (let (($x107 (and $x95 $x32)))
 (let (($x108 (= $x107 true)))
 (let (($x14 (= $x108 true)))
 (let (($x94 (= $x14 true)))
 (let (($x30 (= $x76 true)))
 (let (($x42 (= $x30 true)))
 (let (($x67 (= $x42 true)))
 (let (($x46 (and $x67 $x94)))
 (let (($x109 (and $x24 $x46)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x43 (and $x21 $x109)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x53 (and $x68 $x43)))
 (let (($x88 (and $x33 $x53)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x49 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x23 (=> $x49 (or false (or false (and true (or $x28 $x25)))))))
 (let (($x51 (=> (and $x76 $x49) (or false (or false (and true (or $x28 $x25)))))))
 (let (($x15 (and $x51 $x88)))
 (let (($x125 (=> $x15 $x124)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x72)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x27))))
 (let (($x120 (= input.spec-%var-opt-0.2 ?x113)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x24 $x120)))
 (let (($x85 (= (_ bv0 32) ?x77)))
 (let ((?x41 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x41 (_ bv1 32))))
 (let (($x118 (= $x24 $x117)))
 (let (($x33 (= false false)))
 (let (($x38 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x38 $x33)))
 (let (($x114 (= ?x41 (_ bv0 32))))
 (let (($x115 (= $x38 $x114)))
 (let (($x116 (and $x115 $x75)))
 (let (($x119 (and $x116 $x118)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x56 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x50 (= true $x56)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x29)))
 (let (($x32 (=> $x76 $x50)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x103 (concat ?x100 (concat ?x97 ?x80)))))
 (let (($x44 (= input.dst.llvm-%opt ?x106)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x102)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x81 $x99)))
 (let (($x83 (and $x26 $x105)))
 (let (($x55 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and (and (and $x56 $x55) $x83) $x44)))
 (let (($x101 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x71 (=> $x24 $x101)))
 (let ((?x70 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x70 (_ bv1 32))))
 (let (($x98 (= $x24 $x6)))
 (let (($x87 (= ?x70 (_ bv0 32))))
 (let (($x66 (= $x38 $x87)))
 (let (($x62 (and $x66 $x75)))
 (let (($x54 (and $x62 $x98)))
 (let (($x17 (and $x54 $x71)))
 (let (($x95 (and $x17 $x45)))
 (let (($x107 (and $x95 $x32)))
 (let (($x108 (= $x107 true)))
 (let (($x14 (= $x108 true)))
 (let (($x94 (= $x14 true)))
 (let (($x30 (= $x76 true)))
 (let (($x42 (= $x30 true)))
 (let (($x67 (= $x42 true)))
 (let (($x46 (and $x67 $x94)))
 (let (($x109 (and $x24 $x46)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x43 (and $x21 $x109)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x53 (and $x68 $x43)))
 (let (($x88 (and $x33 $x53)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x49 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x23 (=> $x49 (or false (or false (and true (or $x28 $x25)))))))
 (let (($x51 (=> (and $x76 $x49) (or false (or false (and true (or $x28 $x25)))))))
 (let (($x15 (and $x51 $x88)))
 (let (($x125 (=> $x15 $x124)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3204423156 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv254 8)) (_ bv2 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)) (_ bv4138368216 32) (_ bv244 8)) (_ bv4138368217 32) (_ bv157 8)) (_ bv4138368218 32) (_ bv255 8)) (_ bv4138368219 32) (_ bv190 8)) (_ bv3204423156 32) (_ bv1 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4138368216 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4138368216 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4138368219 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0080ff00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x80)
                                #x0080ff02
                                #x00)
                         #x80000001
                         #xff)
                  #x0080ff00
                  #x00)))
  (store (store (store a!1 #x80000000 #x00) #x8080ff01 #x00) #x0080ff01 #x00)))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x8080ff00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x8080ff00)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0080ff03)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x8080ff00)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0080ff00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x48 (= input.spec-%tmpvar-6.E0%0%d.2 ?x52)))
 (let (($x112 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x13 (=> $x112 $x48)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x75 (_ bv1 32))))
 (let (($x86 (= $x112 $x77)))
 (let (($x21 (= false false)))
 (let (($x117 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (=> $x117 $x21)))
 (let (($x93 (= ?x75 (_ bv0 32))))
 (let (($x118 (= $x117 $x93)))
 (let (($x111 (and $x118 $x119)))
 (let (($x31 (and $x111 $x86)))
 (let (($x89 (and $x31 $x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x55 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x55)))
 (let (($x76 (not $x29)))
 (let (($x14 (=> $x76 $x108)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x106 (concat ?x80 (concat ?x100 ?x103)))))
 (let (($x45 (= input.dst.llvm-%opt ?x44)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x105)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x96 $x26)))
 (let (($x78 (and $x102 $x83)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and (and (and $x55 $x81) $x78) $x45)))
 (let (($x17 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x63 (=> $x38 $x17)))
 (let (($x101 (= $x38 $x77)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x72 (=> $x33 $x21)))
 (let (($x16 (= $x33 $x93)))
 (let (($x5 (and $x16 $x72)))
 (let (($x71 (and $x5 $x101)))
 (let (($x104 (and $x71 $x63)))
 (let (($x107 (and $x104 $x32)))
 (let (($x94 (and $x107 $x14)))
 (let (($x46 (= $x94 true)))
 (let (($x109 (= $x46 true)))
 (let (($x43 (= $x109 true)))
 (let (($x70 (= $x76 true)))
 (let (($x87 (= $x70 true)))
 (let (($x66 (= $x87 true)))
 (let (($x53 (and $x66 $x43)))
 (let (($x88 (and $x38 $x53)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x15 (and $x36 $x88)))
 (let (($x42 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x85 (and $x42 $x15)))
 (let (($x41 (and $x21 $x85)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x65 (or false (or false (and true (or $x64 $x11)))))))
 (let (($x74 (=> (and $x76 $x65) (or false (or false (and true (or $x64 $x11)))))))
 (let (($x114 (and $x74 $x41)))
 (let (($x113 (=> $x114 $x110)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x48 (= input.spec-%tmpvar-6.E0%0%d.2 ?x52)))
 (let (($x112 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x13 (=> $x112 $x48)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x75 (_ bv1 32))))
 (let (($x86 (= $x112 $x77)))
 (let (($x21 (= false false)))
 (let (($x117 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (=> $x117 $x21)))
 (let (($x93 (= ?x75 (_ bv0 32))))
 (let (($x118 (= $x117 $x93)))
 (let (($x111 (and $x118 $x119)))
 (let (($x31 (and $x111 $x86)))
 (let (($x89 (and $x31 $x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x55 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x55)))
 (let (($x76 (not $x29)))
 (let (($x14 (=> $x76 $x108)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x106 (concat ?x80 (concat ?x100 ?x103)))))
 (let (($x45 (= input.dst.llvm-%opt ?x44)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x105)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x96 $x26)))
 (let (($x78 (and $x102 $x83)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and (and (and $x55 $x81) $x78) $x45)))
 (let (($x17 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x63 (=> $x38 $x17)))
 (let (($x101 (= $x38 $x77)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x72 (=> $x33 $x21)))
 (let (($x16 (= $x33 $x93)))
 (let (($x5 (and $x16 $x72)))
 (let (($x71 (and $x5 $x101)))
 (let (($x104 (and $x71 $x63)))
 (let (($x107 (and $x104 $x32)))
 (let (($x94 (and $x107 $x14)))
 (let (($x46 (= $x94 true)))
 (let (($x109 (= $x46 true)))
 (let (($x43 (= $x109 true)))
 (let (($x70 (= $x76 true)))
 (let (($x87 (= $x70 true)))
 (let (($x66 (= $x87 true)))
 (let (($x53 (and $x66 $x43)))
 (let (($x88 (and $x38 $x53)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x15 (and $x36 $x88)))
 (let (($x42 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x85 (and $x42 $x15)))
 (let (($x41 (and $x21 $x85)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x65 (or false (or false (and true (or $x64 $x11)))))))
 (let (($x74 (=> (and $x76 $x65) (or false (or false (and true (or $x64 $x11)))))))
 (let (($x114 (and $x74 $x41)))
 (let (($x113 (=> $x114 $x110)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb7)
                     #xb6800218
                     #x1c)
              #xb680021a
              #xc1)
       #xb6800219
       #xfe))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb680021b)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb6800218)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv255776252 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4160531464 32) (_ bv252 8)) (_ bv4160531465 32) (_ bv213 8)) (_ bv4160531466 32) (_ bv62 8)) (_ bv4160531467 32) (_ bv15 8)) (_ bv255776252 32) (_ bv255 8)) (_ bv255776253 32) (_ bv255 8)) (_ bv255776254 32) (_ bv255 8)) (_ bv255776255 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4160531464 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4160531464 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4160531467 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let (($x104 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x33 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x33 $x104)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x72 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x72 (_ bv1 32))))
 (let (($x17 (= $x33 $x52)))
 (let (($x36 (= false false)))
 (let (($x21 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x21 $x36)))
 (let (($x98 (= ?x72 (_ bv0 32))))
 (let (($x24 (= $x21 $x98)))
 (let (($x22 (and $x24 $x54)))
 (let (($x63 (and $x22 $x17)))
 (let (($x7 (and $x63 $x56)))
 (let (($x119 (= $x7 true)))
 (let (($x111 (= $x119 true)))
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x46 (= true $x81)))
 (let (($x76 (not $x29)))
 (let (($x109 (=> $x76 $x46)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x44 (concat ?x103 (concat ?x80 ?x106)))))
 (let (($x32 (= input.dst.llvm-%opt ?x45)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x99 $x102)))
 (let (($x50 (and $x105 $x78)))
 (let (($x96 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and (and (and $x81 $x96) $x50) $x32)))
 (let (($x94 (and $x7 $x14)))
 (let (($x43 (and $x94 $x109)))
 (let (($x53 (= $x43 true)))
 (let (($x88 (= $x53 true)))
 (let (($x15 (= $x88 true)))
 (let (($x75 (= $x76 true)))
 (let (($x93 (= $x75 true)))
 (let (($x16 (= $x93 true)))
 (let (($x85 (and $x16 $x15)))
 (let (($x41 (and $x33 $x85)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x114 (and $x49 $x41)))
 (let (($x87 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (and $x87 $x114)))
 (let (($x117 (and $x36 $x115)))
 (let (($x51 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x30 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x42 (=> $x30 (or false (or false (and true (or $x23 $x51)))))))
 (let (($x10 (=> (and $x76 $x30) (or false (or false (and true (or $x23 $x51)))))))
 (let (($x118 (and $x10 $x117)))
 (let (($x112 (=> $x118 $x111)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x20)))
 (let (($x104 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x33 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x33 $x104)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x72 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x72 (_ bv1 32))))
 (let (($x17 (= $x33 $x52)))
 (let (($x36 (= false false)))
 (let (($x21 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x21 $x36)))
 (let (($x98 (= ?x72 (_ bv0 32))))
 (let (($x24 (= $x21 $x98)))
 (let (($x22 (and $x24 $x54)))
 (let (($x63 (and $x22 $x17)))
 (let (($x7 (and $x63 $x56)))
 (let (($x119 (= $x7 true)))
 (let (($x111 (= $x119 true)))
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x46 (= true $x81)))
 (let (($x76 (not $x29)))
 (let (($x109 (=> $x76 $x46)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x44 (concat ?x103 (concat ?x80 ?x106)))))
 (let (($x32 (= input.dst.llvm-%opt ?x45)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x99 $x102)))
 (let (($x50 (and $x105 $x78)))
 (let (($x96 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and (and (and $x81 $x96) $x50) $x32)))
 (let (($x94 (and $x7 $x14)))
 (let (($x43 (and $x94 $x109)))
 (let (($x53 (= $x43 true)))
 (let (($x88 (= $x53 true)))
 (let (($x15 (= $x88 true)))
 (let (($x75 (= $x76 true)))
 (let (($x93 (= $x75 true)))
 (let (($x16 (= $x93 true)))
 (let (($x85 (and $x16 $x15)))
 (let (($x41 (and $x33 $x85)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x114 (and $x49 $x41)))
 (let (($x87 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (and $x87 $x114)))
 (let (($x117 (and $x36 $x115)))
 (let (($x51 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x30 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x42 (=> $x30 (or false (or false (and true (or $x23 $x51)))))))
 (let (($x10 (=> (and $x76 $x30) (or false (or false (and true (or $x23 $x51)))))))
 (let (($x118 (and $x10 $x117)))
 (let (($x112 (=> $x118 $x111)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x86 (= false true)))
 (let (($x18 (= $x86 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (= true $x96)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x29)))
 (let (($x88 (=> $x76 $x53)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x45 (concat ?x106 (concat ?x103 ?x44)))))
 (let (($x14 (= input.dst.llvm-%opt ?x32)))
 (let ((?x78 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x78)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x26 $x105)))
 (let (($x108 (and $x83 $x50)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and (and (and $x96 $x99) $x108) $x14)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x7 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x55 (=> $x21 $x7)))
 (let ((?x54 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x54 (_ bv1 32))))
 (let (($x104 (= $x21 $x6)))
 (let (($x49 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x36 $x49)))
 (let (($x101 (= ?x54 (_ bv0 32))))
 (let (($x38 (= $x36 $x101)))
 (let (($x20 (and $x38 $x71)))
 (let (($x56 (and $x20 $x104)))
 (let (($x9 (and $x56 $x55)))
 (let (($x43 (and $x9 $x109)))
 (let (($x15 (and $x43 $x88)))
 (let (($x85 (= $x15 true)))
 (let (($x41 (= $x85 true)))
 (let (($x114 (= $x41 true)))
 (let (($x72 (= $x76 true)))
 (let (($x98 (= $x72 true)))
 (let (($x24 (= $x98 true)))
 (let (($x115 (and $x24 $x114)))
 (let (($x117 (and $x21 $x115)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x118 (and $x65 $x117)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x119 (and $x93 $x118)))
 (let (($x111 (and $x49 $x119)))
 (let (($x74 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x70 (or false (or false (and true (or $x68 $x74)))))))
 (let (($x35 (=> (and $x76 $x70) (or false (or false (and true (or $x68 $x74)))))))
 (let (($x112 (and $x35 $x111)))
 (let (($x91 (=> $x112 $x18)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x86 (= false true)))
 (let (($x18 (= $x86 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (= true $x96)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x76 (not $x29)))
 (let (($x88 (=> $x76 $x53)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x45 (concat ?x106 (concat ?x103 ?x44)))))
 (let (($x14 (= input.dst.llvm-%opt ?x32)))
 (let ((?x78 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x78)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x26 $x105)))
 (let (($x108 (and $x83 $x50)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and (and (and $x96 $x99) $x108) $x14)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x63)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x7 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x55 (=> $x21 $x7)))
 (let ((?x54 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x54 (_ bv1 32))))
 (let (($x104 (= $x21 $x6)))
 (let (($x49 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x36 $x49)))
 (let (($x101 (= ?x54 (_ bv0 32))))
 (let (($x38 (= $x36 $x101)))
 (let (($x20 (and $x38 $x71)))
 (let (($x56 (and $x20 $x104)))
 (let (($x9 (and $x56 $x55)))
 (let (($x43 (and $x9 $x109)))
 (let (($x15 (and $x43 $x88)))
 (let (($x85 (= $x15 true)))
 (let (($x41 (= $x85 true)))
 (let (($x114 (= $x41 true)))
 (let (($x72 (= $x76 true)))
 (let (($x98 (= $x72 true)))
 (let (($x24 (= $x98 true)))
 (let (($x115 (and $x24 $x114)))
 (let (($x117 (and $x21 $x115)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x118 (and $x65 $x117)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x119 (and $x93 $x118)))
 (let (($x111 (and $x49 $x119)))
 (let (($x74 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x70 (or false (or false (and true (or $x68 $x74)))))))
 (let (($x35 (=> (and $x76 $x70) (or false (or false (and true (or $x68 $x74)))))))
 (let (($x112 (and $x35 $x111)))
 (let (($x91 (=> $x112 $x18)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x203b68e5
                     #x20)
              #x203b68e7
              #x20)
       #x203b68e6
       #x3b))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3690987004 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4157017272 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4157017272 32) (_ bv252 8)) (_ bv4157017273 32) (_ bv253 8)) (_ bv4157017274 32) (_ bv255 8)) (_ bv4157017275 32) (_ bv219 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4157017272 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4157017275 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x13 (= true false)))
 (let (($x89 (= $x13 true)))
 (let ((?x111 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x111)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x115 $x118)))
 (let (($x86 (and $x119 $x112)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x114 $x86)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let (($x39 (= $x60 true)))
 (let ((?x109 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x43 ((_ zero_extend 31) ?x109)))
 (let (($x53 (= (_ bv1 32) ?x43)))
 (let (($x88 (= $x53 true)))
 (let (($x15 (= $x88 true)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x6)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let ((?x50 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x50)))
 (let (($x100 (= ?x108 ?x34)))
 (let (($x103 (= $x100 true)))
 (let (($x44 (= $x103 true)))
 (let (($x84 (= ?x108 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let ((?x94 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x26 (= (_ bv0 2) ?x94)))
 (let (($x102 (= $x26 true)))
 (let (($x105 (= $x102 true)))
 (let (($x7 (= input.spec-%var-opt-0.2 ?x34)))
 (let (($x73 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x55 (=> $x73 $x7)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x38 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x38 (_ bv1 32))))
 (let (($x69 (= $x73 $x63)))
 (let (($x40 (= false false)))
 (let (($x54 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x54 $x40)))
 (let (($x62 (= ?x38 (_ bv0 32))))
 (let (($x52 (= $x54 $x62)))
 (let (($x33 (and $x52 $x17)))
 (let (($x77 (and $x33 $x69)))
 (let (($x9 (and $x77 $x55)))
 (let (($x81 (= $x9 true)))
 (let (($x95 (= $x81 true)))
 (let (($x96 (= $x95 true)))
 (let (($x75 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x24 (=> $x98 (or false (or false (and true (or $x66 $x75)))))))
 (let (($x61 (= $x24 true)))
 (let (($x68 (= $x61 true)))
 (let (($x30 (= $x68 true)))
 (let (($x107 (and $x30 $x96)))
 (let (($x83 (and $x107 $x105)))
 (let (($x106 (and $x83 $x80)))
 (let (($x97 (and $x106 $x44)))
 (let (($x85 (and $x97 $x15)))
 (let (($x92 (and $x85 $x39)))
 (let (($x25 (and $x73 $x92)))
 (let (($x29 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x31 (and $x29 $x25)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x116 (and $x58 $x31)))
 (let (($x48 (and $x40 $x116)))
 (let (($x27 (=> $x48 $x89)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x13 (= true false)))
 (let (($x89 (= $x13 true)))
 (let ((?x111 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x111)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x115 $x118)))
 (let (($x86 (and $x119 $x112)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x114 $x86)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let (($x39 (= $x60 true)))
 (let ((?x109 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x43 ((_ zero_extend 31) ?x109)))
 (let (($x53 (= (_ bv1 32) ?x43)))
 (let (($x88 (= $x53 true)))
 (let (($x15 (= $x88 true)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x6)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let ((?x50 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x50)))
 (let (($x100 (= ?x108 ?x34)))
 (let (($x103 (= $x100 true)))
 (let (($x44 (= $x103 true)))
 (let (($x84 (= ?x108 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let ((?x94 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x26 (= (_ bv0 2) ?x94)))
 (let (($x102 (= $x26 true)))
 (let (($x105 (= $x102 true)))
 (let (($x7 (= input.spec-%var-opt-0.2 ?x34)))
 (let (($x73 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x55 (=> $x73 $x7)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x38 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x38 (_ bv1 32))))
 (let (($x69 (= $x73 $x63)))
 (let (($x40 (= false false)))
 (let (($x54 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x54 $x40)))
 (let (($x62 (= ?x38 (_ bv0 32))))
 (let (($x52 (= $x54 $x62)))
 (let (($x33 (and $x52 $x17)))
 (let (($x77 (and $x33 $x69)))
 (let (($x9 (and $x77 $x55)))
 (let (($x81 (= $x9 true)))
 (let (($x95 (= $x81 true)))
 (let (($x96 (= $x95 true)))
 (let (($x75 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x24 (=> $x98 (or false (or false (and true (or $x66 $x75)))))))
 (let (($x61 (= $x24 true)))
 (let (($x68 (= $x61 true)))
 (let (($x30 (= $x68 true)))
 (let (($x107 (and $x30 $x96)))
 (let (($x83 (and $x107 $x105)))
 (let (($x106 (and $x83 $x80)))
 (let (($x97 (and $x106 $x44)))
 (let (($x85 (and $x97 $x15)))
 (let (($x92 (and $x85 $x39)))
 (let (($x25 (and $x73 $x92)))
 (let (($x29 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x31 (and $x29 $x25)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x116 (and $x58 $x31)))
 (let (($x48 (and $x40 $x116)))
 (let (($x27 (=> $x48 $x89)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2740979411 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1552580672 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x79 (= input.spec-%var-val-1.L2%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x77)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let ((?x39 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x39)))
 (let (($x89 (= ?x92 ?x20)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x31 (= ?x92 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x85 $x114)))
 (let (($x119 (and $x115 $x118)))
 (let (($x15 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x15 $x119)))
 (let (($x112 (= $x111 true)))
 (let (($x86 (= $x112 true)))
 (let (($x18 (= $x86 true)))
 (let ((?x90 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x32 ((_ zero_extend 31) ?x90)))
 (let (($x14 (= (_ bv1 32) ?x32)))
 (let (($x109 (= $x14 true)))
 (let (($x43 (= $x109 true)))
 (let (($x84 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let (($x106 (= $x80 true)))
 (let ((?x102 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x105 (= (_ bv0 2) ?x102)))
 (let (($x83 (= $x105 true)))
 (let (($x78 (= $x83 true)))
 (let (($x9 (= input.spec-%var-opt-0.2 ?x20)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x72 $x9)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x17 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (bvuge ?x17 (_ bv1 32))))
 (let (($x7 (= $x72 $x34)))
 (let (($x61 (= false false)))
 (let (($x74 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x6 (=> $x74 $x61)))
 (let (($x21 (= ?x17 (_ bv0 32))))
 (let (($x71 (= $x74 $x21)))
 (let (($x57 (and $x71 $x6)))
 (let (($x55 (and $x57 $x7)))
 (let (($x95 (and $x55 $x81)))
 (let (($x96 (= $x95 true)))
 (let (($x107 (= $x96 true)))
 (let (($x99 (= $x107 true)))
 (let (($x30 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x29 (or false (or false (and true (or $x54 $x30)))))))
 (let (($x11 (= $x64 true)))
 (let (($x42 (= $x11 true)))
 (let (($x87 (= $x42 true)))
 (let (($x94 (and $x87 $x99)))
 (let (($x50 (and $x94 $x78)))
 (let (($x100 (and $x50 $x106)))
 (let (($x53 (and $x100 $x43)))
 (let (($x91 (and $x53 $x18)))
 (let (($x13 (and $x91 $x48)))
 (let (($x23 (and $x13 $x110)))
 (let (($x51 (and $x72 $x23)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x113 (and $x35 $x51)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x76 $x113)))
 (let (($x37 (and $x61 $x120)))
 (let (($x122 (=> $x37 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x79 (= input.spec-%var-val-1.L2%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x77)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x56)))
 (let ((?x39 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x39)))
 (let (($x89 (= ?x92 ?x20)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x31 (= ?x92 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x116 (= $x31 true)))
 (let (($x48 (= $x116 true)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x85 $x114)))
 (let (($x119 (and $x115 $x118)))
 (let (($x15 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x15 $x119)))
 (let (($x112 (= $x111 true)))
 (let (($x86 (= $x112 true)))
 (let (($x18 (= $x86 true)))
 (let ((?x90 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x32 ((_ zero_extend 31) ?x90)))
 (let (($x14 (= (_ bv1 32) ?x32)))
 (let (($x109 (= $x14 true)))
 (let (($x43 (= $x109 true)))
 (let (($x84 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (= $x84 true)))
 (let (($x80 (= $x45 true)))
 (let (($x106 (= $x80 true)))
 (let ((?x102 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x105 (= (_ bv0 2) ?x102)))
 (let (($x83 (= $x105 true)))
 (let (($x78 (= $x83 true)))
 (let (($x9 (= input.spec-%var-opt-0.2 ?x20)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x72 $x9)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x17 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (bvuge ?x17 (_ bv1 32))))
 (let (($x7 (= $x72 $x34)))
 (let (($x61 (= false false)))
 (let (($x74 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x6 (=> $x74 $x61)))
 (let (($x21 (= ?x17 (_ bv0 32))))
 (let (($x71 (= $x74 $x21)))
 (let (($x57 (and $x71 $x6)))
 (let (($x55 (and $x57 $x7)))
 (let (($x95 (and $x55 $x81)))
 (let (($x96 (= $x95 true)))
 (let (($x107 (= $x96 true)))
 (let (($x99 (= $x107 true)))
 (let (($x30 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x29 (or false (or false (and true (or $x54 $x30)))))))
 (let (($x11 (= $x64 true)))
 (let (($x42 (= $x11 true)))
 (let (($x87 (= $x42 true)))
 (let (($x94 (and $x87 $x99)))
 (let (($x50 (and $x94 $x78)))
 (let (($x100 (and $x50 $x106)))
 (let (($x53 (and $x100 $x43)))
 (let (($x91 (and $x53 $x18)))
 (let (($x13 (and $x91 $x48)))
 (let (($x23 (and $x13 $x110)))
 (let (($x51 (and $x72 $x23)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x113 (and $x35 $x51)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x76 $x113)))
 (let (($x37 (and $x61 $x120)))
 (let (($x122 (=> $x37 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x25)))
 (let (($x121 (= ?x31 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (= $x121 true)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x55)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x110 (= ?x31 ?x63)))
 (let (($x23 (= $x110 true)))
 (let (($x51 (= $x23 true)))
 (let (($x48 (= ?x31 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x13 (= $x48 true)))
 (let (($x89 (= $x13 true)))
 (let ((?x119 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x114 $x117)))
 (let (($x112 (and $x118 $x111)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x41 $x112)))
 (let (($x18 (= $x86 true)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let ((?x14 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x109 ((_ zero_extend 31) ?x14)))
 (let (($x43 (= (_ bv1 32) ?x109)))
 (let (($x53 (= $x43 true)))
 (let (($x88 (= $x53 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x80 true)))
 (let (($x100 (= $x106 true)))
 (let (($x103 (= $x100 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x78 (= (_ bv0 2) ?x83)))
 (let (($x50 (= $x78 true)))
 (let (($x108 (= $x50 true)))
 (let (($x95 (= input.spec-%var-opt-0.2 ?x63)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x96 (=> $x62 $x95)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x6 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x20 (bvuge ?x6 (_ bv1 32))))
 (let (($x9 (= $x62 $x20)))
 (let (($x76 (= false false)))
 (let (($x71 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x77 (=> $x71 $x76)))
 (let (($x69 (= ?x6 (_ bv0 32))))
 (let (($x73 (= $x71 $x69)))
 (let (($x56 (and $x73 $x77)))
 (let (($x81 (and $x56 $x9)))
 (let (($x107 (and $x81 $x96)))
 (let (($x99 (= $x107 true)))
 (let (($x94 (= $x99 true)))
 (let (($x26 (= $x94 true)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x40 (=> $x74 (or false (or false (and true (or $x64 $x11)))))))
 (let (($x28 (= $x40 true)))
 (let (($x54 (= $x28 true)))
 (let (($x17 (= $x54 true)))
 (let (($x102 (and $x17 $x26)))
 (let (($x46 (and $x102 $x108)))
 (let (($x44 (and $x46 $x103)))
 (let (($x15 (and $x44 $x88)))
 (let (($x39 (and $x15 $x60)))
 (let (($x27 (and $x39 $x89)))
 (let (($x113 (and $x27 $x51)))
 (let (($x120 (and $x62 $x113)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x37 (and $x101 $x120)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x79 (and $x35 $x37)))
 (let (($x59 (and $x76 $x79)))
 (let (($x123 (=> $x59 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x25)))
 (let (($x121 (= ?x31 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (= $x121 true)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x55)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x110 (= ?x31 ?x63)))
 (let (($x23 (= $x110 true)))
 (let (($x51 (= $x23 true)))
 (let (($x48 (= ?x31 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x13 (= $x48 true)))
 (let (($x89 (= $x13 true)))
 (let ((?x119 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x114 $x117)))
 (let (($x112 (and $x118 $x111)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x41 $x112)))
 (let (($x18 (= $x86 true)))
 (let (($x91 (= $x18 true)))
 (let (($x60 (= $x91 true)))
 (let ((?x14 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x109 ((_ zero_extend 31) ?x14)))
 (let (($x43 (= (_ bv1 32) ?x109)))
 (let (($x53 (= $x43 true)))
 (let (($x88 (= $x53 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x80 true)))
 (let (($x100 (= $x106 true)))
 (let (($x103 (= $x100 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x78 (= (_ bv0 2) ?x83)))
 (let (($x50 (= $x78 true)))
 (let (($x108 (= $x50 true)))
 (let (($x95 (= input.spec-%var-opt-0.2 ?x63)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x96 (=> $x62 $x95)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x6 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x20 (bvuge ?x6 (_ bv1 32))))
 (let (($x9 (= $x62 $x20)))
 (let (($x76 (= false false)))
 (let (($x71 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x77 (=> $x71 $x76)))
 (let (($x69 (= ?x6 (_ bv0 32))))
 (let (($x73 (= $x71 $x69)))
 (let (($x56 (and $x73 $x77)))
 (let (($x81 (and $x56 $x9)))
 (let (($x107 (and $x81 $x96)))
 (let (($x99 (= $x107 true)))
 (let (($x94 (= $x99 true)))
 (let (($x26 (= $x94 true)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x40 (=> $x74 (or false (or false (and true (or $x64 $x11)))))))
 (let (($x28 (= $x40 true)))
 (let (($x54 (= $x28 true)))
 (let (($x17 (= $x54 true)))
 (let (($x102 (and $x17 $x26)))
 (let (($x46 (and $x102 $x108)))
 (let (($x44 (and $x46 $x103)))
 (let (($x15 (and $x44 $x88)))
 (let (($x39 (and $x15 $x60)))
 (let (($x27 (and $x39 $x89)))
 (let (($x113 (and $x27 $x51)))
 (let (($x120 (and $x62 $x113)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x37 (and $x101 $x120)))
 (let (($x35 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x79 (and $x35 $x37)))
 (let (($x59 (and $x76 $x79)))
 (let (($x123 (=> $x59 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x53)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x41)))
 (let (($x82 (= input.spec-%tmpvar-6.E0%0%d.2 ?x115)))
 (let (($x125 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x125 $x82)))
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x97 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x90 (_ bv1 32))))
 (let (($x126 (= $x125 $x112)))
 (let (($x35 (= false false)))
 (let (($x65 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x38 (=> $x65 $x35)))
 (let (($x117 (= ?x90 (_ bv0 32))))
 (let (($x16 (= $x65 $x117)))
 (let (($x124 (and $x16 $x38)))
 (let (($x12 (and $x124 $x126)))
 (let (($x127 (and $x12 $x47)))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let ((?x74 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x74)))
 (let (($x51 (= ?x93 ?x115)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x13 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x89 (= (_ bv0 2) ?x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x91 (= input.spec-%var-opt-0.2 ?x115)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x52 $x91)))
 (let (($x86 (= $x52 $x112)))
 (let (($x44 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x119 (=> $x44 $x35)))
 (let (($x118 (= $x44 $x117)))
 (let (($x111 (and $x118 $x119)))
 (let (($x18 (and $x111 $x86)))
 (let (($x39 (and $x18 $x60)))
 (let (($x92 (= $x39 true)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x80 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x106 (=> $x80 (or false (or false (and true (or $x78 $x50)))))))
 (let (($x94 (= $x106 true)))
 (let (($x26 (= $x94 true)))
 (let (($x100 (= $x26 true)))
 (let (($x72 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x55 (= $x72 true)))
 (let (($x5 (= $x55 true)))
 (let (($x63 (= $x5 true)))
 (let ((?x62 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x62)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x6 $x76)))
 (let (($x9 (and $x77 $x20)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x71 $x9)))
 (let (($x57 (= $x81 true)))
 (let (($x104 (= $x57 true)))
 (let (($x33 (= $x104 true)))
 (let ((?x67 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x66 ((_ zero_extend 31) ?x67)))
 (let (($x40 (= (_ bv1 32) ?x66)))
 (let (($x28 (= $x40 true)))
 (let (($x54 (= $x28 true)))
 (let (($x36 (= ?x93 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x64 (= $x36 true)))
 (let (($x24 (= $x64 true)))
 (let (($x17 (and $x24 $x54)))
 (let (($x22 (and $x17 $x33)))
 (let (($x95 (and $x22 $x63)))
 (let (($x103 (and $x95 $x100)))
 (let (($x116 (and $x103 $x31)))
 (let (($x23 (and $x116 $x110)))
 (let (($x37 (and $x23 $x120)))
 (let (($x79 (and $x52 $x37)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x8 $x79)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x101 $x59)))
 (let (($x122 (and $x35 $x121)))
 (let (($x130 (=> $x122 $x129)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x53)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x41)))
 (let (($x82 (= input.spec-%tmpvar-6.E0%0%d.2 ?x115)))
 (let (($x125 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x125 $x82)))
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x97 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x90 (_ bv1 32))))
 (let (($x126 (= $x125 $x112)))
 (let (($x35 (= false false)))
 (let (($x65 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x38 (=> $x65 $x35)))
 (let (($x117 (= ?x90 (_ bv0 32))))
 (let (($x16 (= $x65 $x117)))
 (let (($x124 (and $x16 $x38)))
 (let (($x12 (and $x124 $x126)))
 (let (($x127 (and $x12 $x47)))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let ((?x74 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x74)))
 (let (($x51 (= ?x93 ?x115)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x13 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x89 (= (_ bv0 2) ?x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x91 (= input.spec-%var-opt-0.2 ?x115)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x52 $x91)))
 (let (($x86 (= $x52 $x112)))
 (let (($x44 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x119 (=> $x44 $x35)))
 (let (($x118 (= $x44 $x117)))
 (let (($x111 (and $x118 $x119)))
 (let (($x18 (and $x111 $x86)))
 (let (($x39 (and $x18 $x60)))
 (let (($x92 (= $x39 true)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x80 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x106 (=> $x80 (or false (or false (and true (or $x78 $x50)))))))
 (let (($x94 (= $x106 true)))
 (let (($x26 (= $x94 true)))
 (let (($x100 (= $x26 true)))
 (let (($x72 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x55 (= $x72 true)))
 (let (($x5 (= $x55 true)))
 (let (($x63 (= $x5 true)))
 (let ((?x62 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x62)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x6 $x76)))
 (let (($x9 (and $x77 $x20)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x71 $x9)))
 (let (($x57 (= $x81 true)))
 (let (($x104 (= $x57 true)))
 (let (($x33 (= $x104 true)))
 (let ((?x67 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x66 ((_ zero_extend 31) ?x67)))
 (let (($x40 (= (_ bv1 32) ?x66)))
 (let (($x28 (= $x40 true)))
 (let (($x54 (= $x28 true)))
 (let (($x36 (= ?x93 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x64 (= $x36 true)))
 (let (($x24 (= $x64 true)))
 (let (($x17 (and $x24 $x54)))
 (let (($x22 (and $x17 $x33)))
 (let (($x95 (and $x22 $x63)))
 (let (($x103 (and $x95 $x100)))
 (let (($x116 (and $x103 $x31)))
 (let (($x23 (and $x116 $x110)))
 (let (($x37 (and $x23 $x120)))
 (let (($x79 (and $x52 $x37)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x8 $x79)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x101 $x59)))
 (let (($x122 (and $x35 $x121)))
 (let (($x130 (=> $x122 $x129)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c1fe1f)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c1fe1c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv380256320 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv380256320 32) (_ bv255 8)) (_ bv380256321 32) (_ bv255 8)) (_ bv380256322 32) (_ bv255 8)) (_ bv380256323 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv694167251 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv694167248 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv694167248 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x125 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x127))))
 (let (($x138 (= input.spec-%var-opt-0.2 ?x99)))
 (let (($x93 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x139 (=> $x93 $x138)))
 (let (($x126 (= (_ bv0 32) ?x125)))
 (let ((?x12 (ite $x126 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (let (($x136 (= $x93 $x135)))
 (let (($x101 (= false false)))
 (let (($x102 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x50 (=> $x102 $x101)))
 (let (($x132 (= ?x12 (_ bv0 32))))
 (let (($x133 (= $x102 $x132)))
 (let (($x134 (and $x133 $x50)))
 (let (($x137 (and $x134 $x136)))
 (let (($x140 (and $x137 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let ((?x36 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x120 (= ?x64 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x37 (= $x120 true)))
 (let (($x79 (= $x37 true)))
 (let ((?x116 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x116)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x39 $x25)))
 (let (($x13 (and $x31 $x48)))
 (let (($x60 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x60 $x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x23 (= $x110 true)))
 (let ((?x109 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x43 ((_ zero_extend 31) ?x109)))
 (let (($x14 (= (_ bv1 32) ?x43)))
 (let (($x53 (= $x14 true)))
 (let (($x41 (= $x53 true)))
 (let (($x112 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x86 (= $x112 true)))
 (let (($x18 (= $x86 true)))
 (let (($x32 (= $x18 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x117 (= (_ bv0 2) ?x90)))
 (let (($x118 (= $x117 true)))
 (let (($x35 (= $x118 true)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x40)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x68)))
 (let (($x106 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x94 (=> $x93 $x106)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x80 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x80 (_ bv1 32))))
 (let (($x84 (= $x93 $x46)))
 (let (($x83 (= ?x80 (_ bv0 32))))
 (let (($x78 (= $x102 $x83)))
 (let (($x108 (and $x78 $x50)))
 (let (($x45 (and $x108 $x84)))
 (let (($x26 (and $x45 $x94)))
 (let (($x100 (= $x26 true)))
 (let (($x103 (= $x100 true)))
 (let (($x75 (= $x103 true)))
 (let (($x22 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x55 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x5 (=> $x55 (or false (or false (and true (or $x33 $x22)))))))
 (let (($x62 (= $x5 true)))
 (let (($x20 (= $x62 true)))
 (let (($x63 (= $x20 true)))
 (let (($x69 (= ?x64 ?x6)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x95 (and $x76 $x63)))
 (let (($x44 (and $x95 $x75)))
 (let (($x119 (and $x44 $x35)))
 (let (($x114 (and $x119 $x32)))
 (let (($x115 (and $x114 $x41)))
 (let (($x51 (and $x115 $x23)))
 (let (($x59 (and $x51 $x79)))
 (let (($x121 (and $x93 $x59)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (and $x30 $x121)))
 (let (($x29 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x123 (and $x29 $x122)))
 (let (($x65 (and $x101 $x123)))
 (let (($x143 (=> $x65 $x142)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x125 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x127))))
 (let (($x138 (= input.spec-%var-opt-0.2 ?x99)))
 (let (($x93 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x139 (=> $x93 $x138)))
 (let (($x126 (= (_ bv0 32) ?x125)))
 (let ((?x12 (ite $x126 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (let (($x136 (= $x93 $x135)))
 (let (($x101 (= false false)))
 (let (($x102 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x50 (=> $x102 $x101)))
 (let (($x132 (= ?x12 (_ bv0 32))))
 (let (($x133 (= $x102 $x132)))
 (let (($x134 (and $x133 $x50)))
 (let (($x137 (and $x134 $x136)))
 (let (($x140 (and $x137 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let ((?x36 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x120 (= ?x64 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x37 (= $x120 true)))
 (let (($x79 (= $x37 true)))
 (let ((?x116 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x116)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x39 $x25)))
 (let (($x13 (and $x31 $x48)))
 (let (($x60 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x60 $x13)))
 (let (($x27 (= $x89 true)))
 (let (($x110 (= $x27 true)))
 (let (($x23 (= $x110 true)))
 (let ((?x109 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x43 ((_ zero_extend 31) ?x109)))
 (let (($x14 (= (_ bv1 32) ?x43)))
 (let (($x53 (= $x14 true)))
 (let (($x41 (= $x53 true)))
 (let (($x112 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x86 (= $x112 true)))
 (let (($x18 (= $x86 true)))
 (let (($x32 (= $x18 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x117 (= (_ bv0 2) ?x90)))
 (let (($x118 (= $x117 true)))
 (let (($x35 (= $x118 true)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x40)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x68)))
 (let (($x106 (= input.spec-%var-opt-0.2 ?x6)))
 (let (($x94 (=> $x93 $x106)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x80 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x80 (_ bv1 32))))
 (let (($x84 (= $x93 $x46)))
 (let (($x83 (= ?x80 (_ bv0 32))))
 (let (($x78 (= $x102 $x83)))
 (let (($x108 (and $x78 $x50)))
 (let (($x45 (and $x108 $x84)))
 (let (($x26 (and $x45 $x94)))
 (let (($x100 (= $x26 true)))
 (let (($x103 (= $x100 true)))
 (let (($x75 (= $x103 true)))
 (let (($x22 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x55 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x5 (=> $x55 (or false (or false (and true (or $x33 $x22)))))))
 (let (($x62 (= $x5 true)))
 (let (($x20 (= $x62 true)))
 (let (($x63 (= $x20 true)))
 (let (($x69 (= ?x64 ?x6)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x95 (and $x76 $x63)))
 (let (($x44 (and $x95 $x75)))
 (let (($x119 (and $x44 $x35)))
 (let (($x114 (and $x119 $x32)))
 (let (($x115 (and $x114 $x41)))
 (let (($x51 (and $x115 $x23)))
 (let (($x59 (and $x51 $x79)))
 (let (($x121 (and $x93 $x59)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x122 (and $x30 $x121)))
 (let (($x29 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x123 (and $x29 $x122)))
 (let (($x65 (and $x101 $x123)))
 (let (($x143 (=> $x65 $x142)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= nextpc_const.1 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= func.calla4bcb626de6152719ca44f8b649b9c4a.reg @fun_25)
(= input.dst.llvm-mem.alloc @fun_23)
(= memzero_memvar @fun_22)
(= input.dst.llvm-mem @fun_20)
(function @fun_25
 (type
  (FunType7 (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32)))
 (= (@fun_25 #b00000000 #b00000000 @fun_22 @fun_23 #b00000000000000000000000000000000 #b00000000000000000000001111101000 #b00000000000000000000000000000000)
    #b00000000000000000000000000000000)
 (default #b10000000000000000000000000000000))
(function @fun_23
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
(function @fun_22
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000010))
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_20 #b10000000000000000000000000000000) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000011) #b00000000)
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((BOUND_VARIABLE_4307 (_ BitVec 8)) (BOUND_VARIABLE_4308 (_ BitVec 8)) (BOUND_VARIABLE_4309 (Array (_ BitVec 32) (_ BitVec 8))) (BOUND_VARIABLE_4310 (Array (_ BitVec 32) (_ BitVec 8))) (BOUND_VARIABLE_4311 (_ BitVec 32)) (BOUND_VARIABLE_4312 (_ BitVec 32)) (BOUND_VARIABLE_4313 (_ BitVec 32))) (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun nextpc_const.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)))
(define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv16384 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1732282064 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1732282064 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1732282067 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv447725632 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x2b)
                                #x00000002
                                #x38)
                         #x00000004
                         #x39)
                  #x00000005
                  #x39)))
  (store (store (store (store a!1 #x00000004 #x39) #x00000007 #x39)
                #x00000005
                #x39)
         #x00000006
         #x39)))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x39393939)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x39393939)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x39393939)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x39393939)
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x00)
              (= x!1 #x00)
              (= x!2 ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
              (= x!3 ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x39393939))
      #x00000002
      #x00000000))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x10 (= false true)))
 (let (($x38 (= $x10 true)))
 (let ((?x51 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x51)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x89 $x110)))
 (let (($x120 (and $x23 $x113)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x120)))
 (let (($x79 (= $x37 true)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x60 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x39 ((_ zero_extend 31) ?x60)))
 (let (($x92 (= (_ bv1 32) ?x39)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x109 (= $x85 true)))
 (let (($x43 (= $x109 true)))
 (let (($x14 (= $x43 true)))
 (let ((?x21 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x21)))
 (let (($x86 (= ?x71 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x18 (= $x86 true)))
 (let (($x32 (= $x18 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x35 (= (_ bv0 2) ?x118)))
 (let (($x119 (= $x35 true)))
 (let (($x111 (= $x119 true)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x87)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x26 (= input.spec-%var-opt-0.2 ?x9)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x24 $x26)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x50 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x50 (_ bv1 32))))
 (let (($x106 (= $x24 $x45)))
 (let (($x29 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x46 (=> $x78 $x29)))
 (let (($x108 (= ?x50 (_ bv0 32))))
 (let (($x93 (= $x78 $x108)))
 (let (($x84 (and $x93 $x46)))
 (let (($x94 (and $x84 $x106)))
 (let (($x103 (and $x94 $x100)))
 (let (($x75 (= $x103 true)))
 (let (($x44 (= $x75 true)))
 (let (($x97 (= $x44 true)))
 (let (($x62 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x107 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x102 (=> $x107 (or false (or false (and true (or $x5 $x62)))))))
 (let (($x104 (= $x102 true)))
 (let (($x22 (= $x104 true)))
 (let (($x105 (= $x22 true)))
 (let (($x81 (= ?x71 ?x9)))
 (let (($x55 (= $x81 true)))
 (let (($x57 (= $x55 true)))
 (let (($x80 (and $x57 $x105)))
 (let (($x90 (and $x80 $x97)))
 (let (($x52 (and $x90 $x111)))
 (let (($x114 (and $x52 $x32)))
 (let (($x53 (and $x114 $x14)))
 (let (($x116 (and $x53 $x31)))
 (let (($x122 (and $x116 $x121)))
 (let (($x123 (and $x24 $x122)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x65 (and $x36 $x123)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x11 (and $x30 $x65)))
 (let (($x16 (and $x29 $x11)))
 (let (($x124 (=> $x16 $x38)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x10 (= false true)))
 (let (($x38 (= $x10 true)))
 (let ((?x51 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x51)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x89 $x110)))
 (let (($x120 (and $x23 $x113)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x120)))
 (let (($x79 (= $x37 true)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let ((?x60 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x39 ((_ zero_extend 31) ?x60)))
 (let (($x92 (= (_ bv1 32) ?x39)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x109 (= $x85 true)))
 (let (($x43 (= $x109 true)))
 (let (($x14 (= $x43 true)))
 (let ((?x21 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x21)))
 (let (($x86 (= ?x71 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x18 (= $x86 true)))
 (let (($x32 (= $x18 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x35 (= (_ bv0 2) ?x118)))
 (let (($x119 (= $x35 true)))
 (let (($x111 (= $x119 true)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x87)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x26 (= input.spec-%var-opt-0.2 ?x9)))
 (let (($x24 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x24 $x26)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x50 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x50 (_ bv1 32))))
 (let (($x106 (= $x24 $x45)))
 (let (($x29 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x46 (=> $x78 $x29)))
 (let (($x108 (= ?x50 (_ bv0 32))))
 (let (($x93 (= $x78 $x108)))
 (let (($x84 (and $x93 $x46)))
 (let (($x94 (and $x84 $x106)))
 (let (($x103 (and $x94 $x100)))
 (let (($x75 (= $x103 true)))
 (let (($x44 (= $x75 true)))
 (let (($x97 (= $x44 true)))
 (let (($x62 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x107 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x102 (=> $x107 (or false (or false (and true (or $x5 $x62)))))))
 (let (($x104 (= $x102 true)))
 (let (($x22 (= $x104 true)))
 (let (($x105 (= $x22 true)))
 (let (($x81 (= ?x71 ?x9)))
 (let (($x55 (= $x81 true)))
 (let (($x57 (= $x55 true)))
 (let (($x80 (and $x57 $x105)))
 (let (($x90 (and $x80 $x97)))
 (let (($x52 (and $x90 $x111)))
 (let (($x114 (and $x52 $x32)))
 (let (($x53 (and $x114 $x14)))
 (let (($x116 (and $x53 $x31)))
 (let (($x122 (and $x116 $x121)))
 (let (($x123 (and $x24 $x122)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x65 (and $x36 $x123)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x11 (and $x30 $x65)))
 (let (($x16 (and $x29 $x11)))
 (let (($x124 (=> $x16 $x38)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2740979408 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2740979411 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1552580672 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x123 (= true false)))
 (let (($x65 (= $x123 true)))
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x89)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x31 $x48)))
 (let (($x110 (and $x13 $x27)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x25 $x110)))
 (let (($x51 (= $x23 true)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x115 (= (_ bv0 2) ?x41)))
 (let (($x91 (= $x115 true)))
 (let (($x60 (= $x91 true)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x52)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x86)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x32)))
 (let (($x42 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x88 (=> $x42 $x114)))
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x73 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x62 (bvuge ?x73 (_ bv1 32))))
 (let (($x20 (= $x42 $x62)))
 (let (($x71 (= false false)))
 (let (($x77 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x5 (=> $x77 $x71)))
 (let (($x107 (= ?x73 (_ bv0 32))))
 (let (($x7 (= $x77 $x107)))
 (let (($x72 (and $x7 $x5)))
 (let (($x63 (and $x72 $x20)))
 (let (($x15 (and $x63 $x88)))
 (let (($x85 (= $x15 true)))
 (let (($x109 (= $x85 true)))
 (let (($x43 (= $x109 true)))
 (let (($x26 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x97 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x97 (or false (or false (and true (or $x94 $x26)))))))
 (let (($x29 (= $x90 true)))
 (let (($x46 (= $x29 true)))
 (let (($x117 (= $x46 true)))
 (let ((?x56 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x56)))
 (let (($x78 (= ?x83 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x101 (= $x78 true)))
 (let (($x50 (= $x101 true)))
 (let ((?x66 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x66) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x9 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x33) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x9) ?x87))))
 (let (($x95 (= input.spec-%var-opt-0.2 ?x34)))
 (let (($x70 (=> $x42 $x95)))
 (let (($x102 (and $x63 $x70)))
 (let (($x104 (= $x102 true)))
 (let (($x22 (= $x104 true)))
 (let (($x105 (= $x22 true)))
 (let (($x108 (and $x105 $x50)))
 (let (($x118 (and $x108 $x117)))
 (let (($x14 (and $x118 $x43)))
 (let (($x39 (and $x14 $x60)))
 (let (($x37 (and $x39 $x120)))
 (let (($x79 (and $x42 $x37)))
 (let (($x17 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x17 $x79)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x30 $x59)))
 (let (($x122 (and $x71 $x121)))
 (let (($x11 (=> $x122 $x65)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x123 (= true false)))
 (let (($x65 (= $x123 true)))
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x89)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x31 $x48)))
 (let (($x110 (and $x13 $x27)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x25 $x110)))
 (let (($x51 (= $x23 true)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x115 (= (_ bv0 2) ?x41)))
 (let (($x91 (= $x115 true)))
 (let (($x60 (= $x91 true)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x52)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x86)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x32)))
 (let (($x42 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x88 (=> $x42 $x114)))
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x73 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x62 (bvuge ?x73 (_ bv1 32))))
 (let (($x20 (= $x42 $x62)))
 (let (($x71 (= false false)))
 (let (($x77 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x5 (=> $x77 $x71)))
 (let (($x107 (= ?x73 (_ bv0 32))))
 (let (($x7 (= $x77 $x107)))
 (let (($x72 (and $x7 $x5)))
 (let (($x63 (and $x72 $x20)))
 (let (($x15 (and $x63 $x88)))
 (let (($x85 (= $x15 true)))
 (let (($x109 (= $x85 true)))
 (let (($x43 (= $x109 true)))
 (let (($x26 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x97 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x97 (or false (or false (and true (or $x94 $x26)))))))
 (let (($x29 (= $x90 true)))
 (let (($x46 (= $x29 true)))
 (let (($x117 (= $x46 true)))
 (let ((?x56 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x56)))
 (let (($x78 (= ?x83 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x101 (= $x78 true)))
 (let (($x50 (= $x101 true)))
 (let ((?x66 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x66) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x9 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x33) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x9) ?x87))))
 (let (($x95 (= input.spec-%var-opt-0.2 ?x34)))
 (let (($x70 (=> $x42 $x95)))
 (let (($x102 (and $x63 $x70)))
 (let (($x104 (= $x102 true)))
 (let (($x22 (= $x104 true)))
 (let (($x105 (= $x22 true)))
 (let (($x108 (and $x105 $x50)))
 (let (($x118 (and $x108 $x117)))
 (let (($x14 (and $x118 $x43)))
 (let (($x39 (and $x14 $x60)))
 (let (($x37 (and $x39 $x120)))
 (let (($x79 (and $x42 $x37)))
 (let (($x17 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x59 (and $x17 $x79)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x30 $x59)))
 (let (($x122 (and $x71 $x121)))
 (let (($x11 (=> $x122 $x65)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(= input.dst.llvm-mem.Lif.then%2%fcallEnd @fun_12)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000000) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000011) #b00000000)
 (default #b00000001))
(function @fun_12
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3846309584 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3846309584 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3846309587 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv413466688 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv512 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)) (_ bv413466688 32) (_ bv0 8)) (_ bv413466689 32) (_ bv0 8)) (_ bv413466690 32) (_ bv0 8)) (_ bv413466691 32) (_ bv0 8)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x16 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x12 (=> $x16 true)))
 (let (($x132 (= $x12 true)))
 (let (($x133 (= $x132 true)))
 (let (($x6 (= $x16 true)))
 (let (($x64 (= $x6 true)))
 (let (($x10 (= $x64 true)))
 (let ((?x113 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x113)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x27 $x23)))
 (let (($x37 (and $x51 $x120)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x89 $x37)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let (($x122 (= $x121 true)))
 (let (($x92 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x53 (= (_ bv0 2) ?x14)))
 (let (($x41 (= $x53 true)))
 (let (($x115 (= $x41 true)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x18)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x111)))
 (let (($x86 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x9 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x32 (=> $x9 $x86)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x67 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x67 (_ bv1 32))))
 (let (($x93 (= $x9 $x108)))
 (let (($x68 (= false false)))
 (let (($x66 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x101 (=> $x66 $x68)))
 (let (($x83 (= ?x67 (_ bv0 32))))
 (let (($x78 (= $x66 $x83)))
 (let (($x50 (and $x78 $x101)))
 (let (($x84 (and $x50 $x93)))
 (let (($x114 (and $x84 $x32)))
 (let (($x88 (= $x114 true)))
 (let (($x15 (= $x88 true)))
 (let (($x85 (= $x15 true)))
 (let ((?x103 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x103)))
 (let (($x44 (= ?x75 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x90 (= $x44 true)))
 (let (($x29 (= $x90 true)))
 (let ((?x34 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x34) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x107 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x107) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x104) ?x70))))
 (let (($x24 (= input.spec-%var-opt-0.2 ?x56)))
 (let (($x97 (=> $x9 $x24)))
 (let (($x45 (and $x84 $x97)))
 (let (($x94 (= $x45 true)))
 (let (($x106 (= $x94 true)))
 (let (($x26 (= $x106 true)))
 (let (($x46 (and $x26 $x29)))
 (let (($x109 (and $x46 $x85)))
 (let (($x91 (and $x109 $x115)))
 (let (($x48 (and $x91 $x116)))
 (let (($x123 (and $x48 $x122)))
 (let (($x38 (and $x123 $x10)))
 (let (($x124 (and $x9 $x38)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x125 (and $x69 $x124)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x28 (and $x33 $x125)))
 (let (($x54 (and $x68 $x28)))
 (let (($x71 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x20 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x63 (=> $x20 (or false (or false (and true (or $x7 $x71)))))))
 (let (($x126 (and $x63 $x54)))
 (let (($x134 (=> $x126 $x133)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x16 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x12 (=> $x16 true)))
 (let (($x132 (= $x12 true)))
 (let (($x133 (= $x132 true)))
 (let (($x6 (= $x16 true)))
 (let (($x64 (= $x6 true)))
 (let (($x10 (= $x64 true)))
 (let ((?x113 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x113)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x27 $x23)))
 (let (($x37 (and $x51 $x120)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x89 $x37)))
 (let (($x59 (= $x79 true)))
 (let (($x121 (= $x59 true)))
 (let (($x122 (= $x121 true)))
 (let (($x92 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (= $x92 true)))
 (let (($x31 (= $x25 true)))
 (let (($x116 (= $x31 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x53 (= (_ bv0 2) ?x14)))
 (let (($x41 (= $x53 true)))
 (let (($x115 (= $x41 true)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x18)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x111)))
 (let (($x86 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x9 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x32 (=> $x9 $x86)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x67 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x67 (_ bv1 32))))
 (let (($x93 (= $x9 $x108)))
 (let (($x68 (= false false)))
 (let (($x66 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x101 (=> $x66 $x68)))
 (let (($x83 (= ?x67 (_ bv0 32))))
 (let (($x78 (= $x66 $x83)))
 (let (($x50 (and $x78 $x101)))
 (let (($x84 (and $x50 $x93)))
 (let (($x114 (and $x84 $x32)))
 (let (($x88 (= $x114 true)))
 (let (($x15 (= $x88 true)))
 (let (($x85 (= $x15 true)))
 (let ((?x103 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x103)))
 (let (($x44 (= ?x75 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x90 (= $x44 true)))
 (let (($x29 (= $x90 true)))
 (let ((?x34 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x34) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x107 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x107) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x104) ?x70))))
 (let (($x24 (= input.spec-%var-opt-0.2 ?x56)))
 (let (($x97 (=> $x9 $x24)))
 (let (($x45 (and $x84 $x97)))
 (let (($x94 (= $x45 true)))
 (let (($x106 (= $x94 true)))
 (let (($x26 (= $x106 true)))
 (let (($x46 (and $x26 $x29)))
 (let (($x109 (and $x46 $x85)))
 (let (($x91 (and $x109 $x115)))
 (let (($x48 (and $x91 $x116)))
 (let (($x123 (and $x48 $x122)))
 (let (($x38 (and $x123 $x10)))
 (let (($x124 (and $x9 $x38)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x125 (and $x69 $x124)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x28 (and $x33 $x125)))
 (let (($x54 (and $x68 $x28)))
 (let (($x71 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x20 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x63 (=> $x20 (or false (or false (and true (or $x7 $x71)))))))
 (let (($x126 (and $x63 $x54)))
 (let (($x134 (=> $x126 $x133)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x122 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x128 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x47 (=> $x128 $x122)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x90 (_ bv1 32))))
 (let (($x129 (= $x128 $x85)))
 (let (($x69 (= false false)))
 (let (($x136 (= (_ bv1 32) (_ bv0 32))))
 (let (($x131 (=> $x136 $x69)))
 (let (($x32 (= ?x90 (_ bv0 32))))
 (let (($x137 (= $x136 $x32)))
 (let (($x96 (and $x137 $x131)))
 (let (($x82 (and $x96 $x129)))
 (let (($x98 (and $x82 $x47)))
 (let (($x127 (= $x98 true)))
 (let (($x130 (= $x127 true)))
 (let ((?x28 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x54 (= (_ bv0 2) ?x28)))
 (let (($x126 (= $x54 true)))
 (let (($x12 (= $x126 true)))
 (let (($x94 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x6 (and $x94 $x122)))
 (let (($x64 (= $x6 true)))
 (let (($x10 (= $x64 true)))
 (let (($x38 (= $x10 true)))
 (let (($x123 (= $x122 true)))
 (let (($x65 (= $x123 true)))
 (let (($x11 (= $x65 true)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x13)))
 (let (($x110 (= input.spec-%var-opt-0.2 ?x27)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x23 (=> $x67 $x110)))
 (let (($x109 (= $x67 $x85)))
 (let (($x75 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x88 (=> $x75 $x69)))
 (let (($x114 (= $x75 $x32)))
 (let (($x15 (and $x114 $x88)))
 (let (($x43 (and $x15 $x109)))
 (let (($x51 (and $x43 $x23)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let (($x37 (= $x120 true)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x117) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x118 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x5) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x118) ?x112))))
 (let (($x14 (= input.spec-%var-opt-0.2 ?x86)))
 (let (($x53 (=> $x67 $x14)))
 (let (($x41 (and $x43 $x53)))
 (let (($x115 (= $x41 true)))
 (let (($x91 (= $x115 true)))
 (let (($x60 (= $x91 true)))
 (let (($x106 (= $x94 true)))
 (let (($x26 (= $x106 true)))
 (let (($x100 (= $x26 true)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x22)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x84 $x80)))
 (let (($x95 (and $x102 $x34)))
 (let (($x93 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x93 $x95)))
 (let (($x70 (= $x55 true)))
 (let (($x105 (= $x70 true)))
 (let (($x56 (= $x105 true)))
 (let ((?x78 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x78)))
 (let (($x101 (= ?x68 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (= $x101 true)))
 (let (($x9 (= $x50 true)))
 (let (($x24 (and $x9 $x56)))
 (let (($x103 (and $x24 $x100)))
 (let (($x39 (and $x103 $x60)))
 (let (($x79 (and $x39 $x37)))
 (let (($x16 (and $x79 $x11)))
 (let (($x124 (and $x16 $x38)))
 (let (($x132 (and $x124 $x12)))
 (let (($x133 (and $x67 $x132)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x134 (and $x74 $x133)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x135 (and $x81 $x134)))
 (let (($x8 (and $x69 $x135)))
 (let (($x42 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x33 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x49 (=> $x33 (or false (or false (and true (or $x72 $x42)))))))
 (let (($x19 (and $x49 $x8)))
 (let (($x99 (=> $x19 $x130)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x122 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x128 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x47 (=> $x128 $x122)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x90 (_ bv1 32))))
 (let (($x129 (= $x128 $x85)))
 (let (($x69 (= false false)))
 (let (($x136 (= (_ bv1 32) (_ bv0 32))))
 (let (($x131 (=> $x136 $x69)))
 (let (($x32 (= ?x90 (_ bv0 32))))
 (let (($x137 (= $x136 $x32)))
 (let (($x96 (and $x137 $x131)))
 (let (($x82 (and $x96 $x129)))
 (let (($x98 (and $x82 $x47)))
 (let (($x127 (= $x98 true)))
 (let (($x130 (= $x127 true)))
 (let ((?x28 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x54 (= (_ bv0 2) ?x28)))
 (let (($x126 (= $x54 true)))
 (let (($x12 (= $x126 true)))
 (let (($x94 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x6 (and $x94 $x122)))
 (let (($x64 (= $x6 true)))
 (let (($x10 (= $x64 true)))
 (let (($x38 (= $x10 true)))
 (let (($x123 (= $x122 true)))
 (let (($x65 (= $x123 true)))
 (let (($x11 (= $x65 true)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x13)))
 (let (($x110 (= input.spec-%var-opt-0.2 ?x27)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x23 (=> $x67 $x110)))
 (let (($x109 (= $x67 $x85)))
 (let (($x75 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x88 (=> $x75 $x69)))
 (let (($x114 (= $x75 $x32)))
 (let (($x15 (and $x114 $x88)))
 (let (($x43 (and $x15 $x109)))
 (let (($x51 (and $x43 $x23)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let (($x37 (= $x120 true)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x117) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x118 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x5) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x118) ?x112))))
 (let (($x14 (= input.spec-%var-opt-0.2 ?x86)))
 (let (($x53 (=> $x67 $x14)))
 (let (($x41 (and $x43 $x53)))
 (let (($x115 (= $x41 true)))
 (let (($x91 (= $x115 true)))
 (let (($x60 (= $x91 true)))
 (let (($x106 (= $x94 true)))
 (let (($x26 (= $x106 true)))
 (let (($x100 (= $x26 true)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x22)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x84 $x80)))
 (let (($x95 (and $x102 $x34)))
 (let (($x93 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x93 $x95)))
 (let (($x70 (= $x55 true)))
 (let (($x105 (= $x70 true)))
 (let (($x56 (= $x105 true)))
 (let ((?x78 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x78)))
 (let (($x101 (= ?x68 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x50 (= $x101 true)))
 (let (($x9 (= $x50 true)))
 (let (($x24 (and $x9 $x56)))
 (let (($x103 (and $x24 $x100)))
 (let (($x39 (and $x103 $x60)))
 (let (($x79 (and $x39 $x37)))
 (let (($x16 (and $x79 $x11)))
 (let (($x124 (and $x16 $x38)))
 (let (($x132 (and $x124 $x12)))
 (let (($x133 (and $x67 $x132)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x134 (and $x74 $x133)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x135 (and $x81 $x134)))
 (let (($x8 (and $x69 $x135)))
 (let (($x42 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x33 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x49 (=> $x33 (or false (or false (and true (or $x72 $x42)))))))
 (let (($x19 (and $x49 $x8)))
 (let (($x99 (=> $x19 $x130)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x23 (= $x21 false)))
 (let (($x51 (= $x23 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x39 (concat ?x115 (concat ?x14 ?x111)))))
 (let (($x89 (= ?x92 input.dst.llvm-%opt)))
 (let (($x48 (= $x89 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x90)))
 (let (($x52 (= input.spec-%var-opt-0.2 ?x114)))
 (let (($x85 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x35 (=> $x85 $x52)))
 (let ((?x45 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x45 (_ bv1 32))))
 (let (($x43 (= $x85 $x109)))
 (let (($x68 (= false false)))
 (let (($x97 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x15 (=> $x97 $x68)))
 (let (($x69 (= ?x45 (_ bv0 32))))
 (let (($x88 (= $x97 $x69)))
 (let (($x67 (and $x88 $x15)))
 (let (($x29 (and $x67 $x43)))
 (let (($x118 (and $x29 $x35)))
 (let (($x18 (= $x118 true)))
 (let (($x117 (= $x18 true)))
 (let (($x119 (= $x117 true)))
 (let ((?x34 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x34)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x87 $x102)))
 (let (($x55 (and $x22 $x95)))
 (let (($x84 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x84 $x55)))
 (let (($x105 (= $x70 true)))
 (let (($x56 (= $x105 true)))
 (let (($x24 (= $x56 true)))
 (let (($x46 (and $x24 $x119)))
 (let (($x25 (and $x46 $x31)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x116 (and $x108 $x25)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x13 (and $x50 $x116)))
 (let (($x27 (and $x68 $x13)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x83 (=> $x74 (or false (or false (and true (or $x57 $x49)))))))
 (let (($x36 (not $x21)))
 (let (($x7 (=> (and $x36 $x74) (or false (or false (and true (or $x57 $x49)))))))
 (let (($x110 (and $x7 $x27)))
 (let (($x113 (=> $x110 $x51)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x23 (= $x21 false)))
 (let (($x51 (= $x23 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x39 (concat ?x115 (concat ?x14 ?x111)))))
 (let (($x89 (= ?x92 input.dst.llvm-%opt)))
 (let (($x48 (= $x89 true)))
 (let (($x31 (= $x48 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x90)))
 (let (($x52 (= input.spec-%var-opt-0.2 ?x114)))
 (let (($x85 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x35 (=> $x85 $x52)))
 (let ((?x45 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x45 (_ bv1 32))))
 (let (($x43 (= $x85 $x109)))
 (let (($x68 (= false false)))
 (let (($x97 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x15 (=> $x97 $x68)))
 (let (($x69 (= ?x45 (_ bv0 32))))
 (let (($x88 (= $x97 $x69)))
 (let (($x67 (and $x88 $x15)))
 (let (($x29 (and $x67 $x43)))
 (let (($x118 (and $x29 $x35)))
 (let (($x18 (= $x118 true)))
 (let (($x117 (= $x18 true)))
 (let (($x119 (= $x117 true)))
 (let ((?x34 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x34)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x87 $x102)))
 (let (($x55 (and $x22 $x95)))
 (let (($x84 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x84 $x55)))
 (let (($x105 (= $x70 true)))
 (let (($x56 (= $x105 true)))
 (let (($x24 (= $x56 true)))
 (let (($x46 (and $x24 $x119)))
 (let (($x25 (and $x46 $x31)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x116 (and $x108 $x25)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x13 (and $x50 $x116)))
 (let (($x27 (and $x68 $x13)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x83 (=> $x74 (or false (or false (and true (or $x57 $x49)))))))
 (let (($x36 (not $x21)))
 (let (($x7 (=> (and $x36 $x74) (or false (or false (and true (or $x57 $x49)))))))
 (let (($x110 (and $x7 $x27)))
 (let (($x113 (=> $x110 $x51)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-val-1.L2%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x72 (not $x21)))
 (let (($x29 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (or $x29 $x72)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x23 (concat ?x13 (concat ?x31 ?x89)))))
 (let (($x113 (= ?x51 input.dst.llvm-%opt)))
 (let (($x120 (= $x113 true)))
 (let (($x73 (= $x120 true)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x26)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x90)))
 (let (($x41 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x115 (=> $x119 $x41)))
 (let ((?x94 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x94 (_ bv1 32))))
 (let (($x60 (= $x119 $x46)))
 (let (($x108 (= false false)))
 (let (($x18 (=> $x29 $x108)))
 (let (($x35 (= ?x94 (_ bv0 32))))
 (let (($x118 (= $x29 $x35)))
 (let (($x117 (and $x118 $x18)))
 (let (($x39 (and $x117 $x60)))
 (let (($x86 (and $x39 $x115)))
 (let (($x14 (= $x86 true)))
 (let (($x111 (= $x14 true)))
 (let (($x53 (= $x111 true)))
 (let (($x15 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x67 (= $x15 true)))
 (let (($x85 (= $x67 true)))
 (let (($x109 (= $x85 true)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x105)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x34 $x55)))
 (let (($x24 (and $x70 $x56)))
 (let (($x22 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x22 $x24)))
 (let (($x97 (= $x71 true)))
 (let (($x45 (= $x97 true)))
 (let (($x69 (= $x45 true)))
 (let (($x43 (and $x69 $x109)))
 (let (($x91 (and $x43 $x53)))
 (let (($x112 (and $x91 $x73)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x33 (and $x80 $x112)))
 (let (($x84 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x37 (and $x84 $x33)))
 (let (($x79 (and $x108 $x37)))
 (let (($x81 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x101 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x50 (=> $x101 (or false (or false (and true (or $x17 $x81)))))))
 (let (($x107 (=> (and $x72 $x101) (or false (or false (and true (or $x17 $x81)))))))
 (let (($x59 (and $x107 $x79)))
 (let (($x65 (=> $x59 $x123)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x72 (not $x21)))
 (let (($x29 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (or $x29 $x72)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x23 (concat ?x13 (concat ?x31 ?x89)))))
 (let (($x113 (= ?x51 input.dst.llvm-%opt)))
 (let (($x120 (= $x113 true)))
 (let (($x73 (= $x120 true)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x26)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x90)))
 (let (($x41 (= input.spec-%var-opt-0.2 ?x52)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x115 (=> $x119 $x41)))
 (let ((?x94 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x94 (_ bv1 32))))
 (let (($x60 (= $x119 $x46)))
 (let (($x108 (= false false)))
 (let (($x18 (=> $x29 $x108)))
 (let (($x35 (= ?x94 (_ bv0 32))))
 (let (($x118 (= $x29 $x35)))
 (let (($x117 (and $x118 $x18)))
 (let (($x39 (and $x117 $x60)))
 (let (($x86 (and $x39 $x115)))
 (let (($x14 (= $x86 true)))
 (let (($x111 (= $x14 true)))
 (let (($x53 (= $x111 true)))
 (let (($x15 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x67 (= $x15 true)))
 (let (($x85 (= $x67 true)))
 (let (($x109 (= $x85 true)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x105)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x34 $x55)))
 (let (($x24 (and $x70 $x56)))
 (let (($x22 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x22 $x24)))
 (let (($x97 (= $x71 true)))
 (let (($x45 (= $x97 true)))
 (let (($x69 (= $x45 true)))
 (let (($x43 (and $x69 $x109)))
 (let (($x91 (and $x43 $x53)))
 (let (($x112 (and $x91 $x73)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x33 (and $x80 $x112)))
 (let (($x84 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x37 (and $x84 $x33)))
 (let (($x79 (and $x108 $x37)))
 (let (($x81 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x101 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x50 (=> $x101 (or false (or false (and true (or $x17 $x81)))))))
 (let (($x107 (=> (and $x72 $x101) (or false (or false (and true (or $x17 $x81)))))))
 (let (($x59 (and $x107 $x79)))
 (let (($x65 (=> $x59 $x123)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x32)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x9)))
 (let (($x18 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x117 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x117 $x18)))
 (let (($x84 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x101 (ite $x84 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x101 (_ bv1 32))))
 (let (($x108 (= $x117 $x15)))
 (let (($x42 (= false false)))
 (let (($x95 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x5 (=> $x95 $x42)))
 (let (($x34 (= ?x101 (_ bv0 32))))
 (let (($x78 (= $x95 $x34)))
 (let (($x119 (and $x78 $x5)))
 (let (($x118 (and $x119 $x108)))
 (let (($x46 (and $x118 $x60)))
 (let (($x73 (= $x46 true)))
 (let (($x112 (= $x73 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x41 (concat ?x26 (concat ?x75 ?x106)))))
 (let (($x48 (= ?x115 input.dst.llvm-%opt)))
 (let (($x31 (= $x48 true)))
 (let (($x89 (= $x31 true)))
 (let (($x86 (= input.dst.llvm-%opt ?x115)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x43)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x97 $x55)))
 (let (($x105 (and $x35 $x70)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (and (and (and $x83 $x71) $x105) $x86)))
 (let (($x91 (and $x46 $x53)))
 (let (($x110 (= $x91 true)))
 (let (($x23 (= $x110 true)))
 (let (($x116 (= $x23 true)))
 (let (($x87 (= $x84 true)))
 (let (($x80 (= $x87 true)))
 (let (($x114 (= $x80 true)))
 (let (($x7 (= $x83 true)))
 (let (($x50 (= $x7 true)))
 (let (($x107 (= $x50 true)))
 (let (($x22 (and $x107 $x114)))
 (let (($x13 (and $x22 $x116)))
 (let (($x25 (and $x13 $x89)))
 (let (($x27 (and $x95 $x25)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x51 (and $x63 $x27)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x113 (and $x21 $x51)))
 (let (($x120 (and $x42 $x113)))
 (let (($x33 (=> $x120 $x112)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x32)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x9)))
 (let (($x18 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x117 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x117 $x18)))
 (let (($x84 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x101 (ite $x84 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x101 (_ bv1 32))))
 (let (($x108 (= $x117 $x15)))
 (let (($x42 (= false false)))
 (let (($x95 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x5 (=> $x95 $x42)))
 (let (($x34 (= ?x101 (_ bv0 32))))
 (let (($x78 (= $x95 $x34)))
 (let (($x119 (and $x78 $x5)))
 (let (($x118 (and $x119 $x108)))
 (let (($x46 (and $x118 $x60)))
 (let (($x73 (= $x46 true)))
 (let (($x112 (= $x73 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x41 (concat ?x26 (concat ?x75 ?x106)))))
 (let (($x48 (= ?x115 input.dst.llvm-%opt)))
 (let (($x31 (= $x48 true)))
 (let (($x89 (= $x31 true)))
 (let (($x86 (= input.dst.llvm-%opt ?x115)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x43)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x97 $x55)))
 (let (($x105 (and $x35 $x70)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (and (and (and $x83 $x71) $x105) $x86)))
 (let (($x91 (and $x46 $x53)))
 (let (($x110 (= $x91 true)))
 (let (($x23 (= $x110 true)))
 (let (($x116 (= $x23 true)))
 (let (($x87 (= $x84 true)))
 (let (($x80 (= $x87 true)))
 (let (($x114 (= $x80 true)))
 (let (($x7 (= $x83 true)))
 (let (($x50 (= $x7 true)))
 (let (($x107 (= $x50 true)))
 (let (($x22 (and $x107 $x114)))
 (let (($x13 (and $x22 $x116)))
 (let (($x25 (and $x13 $x89)))
 (let (($x27 (and $x95 $x25)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x51 (and $x63 $x27)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x113 (and $x21 $x51)))
 (let (($x120 (and $x42 $x113)))
 (let (($x33 (=> $x120 $x112)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x85 (or $x74 $x21)))
 (let (($x56 (= $x85 true)))
 (let (($x79 (= $x56 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x25 (concat ?x48 (concat ?x23 ?x91)))))
 (let (($x51 (= ?x27 input.dst.llvm-%opt)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x29)))
 (let (($x103 (= input.spec-%var-opt-0.2 ?x35)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x52 $x103)))
 (let ((?x18 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x18 (_ bv1 32))))
 (let (($x76 (= $x52 $x41)))
 (let (($x5 (= false false)))
 (let (($x62 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x105 (=> $x62 $x5)))
 (let (($x43 (= ?x18 (_ bv0 32))))
 (let (($x70 (= $x62 $x43)))
 (let (($x111 (and $x70 $x105)))
 (let (($x26 (and $x111 $x76)))
 (let (($x106 (and $x26 $x75)))
 (let (($x44 (= $x106 true)))
 (let (($x90 (= $x44 true)))
 (let (($x115 (= $x90 true)))
 (let ((?x66 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x66)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x102 $x17)))
 (let (($x88 (and $x81 $x49)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x100 $x88)))
 (let (($x24 (= $x39 true)))
 (let (($x32 (= $x24 true)))
 (let (($x9 (= $x32 true)))
 (let (($x86 (and $x9 $x115)))
 (let (($x73 (and $x86 $x120)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x112 (and $x108 $x73)))
 (let (($x117 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x33 (and $x117 $x112)))
 (let (($x37 (and $x5 $x33)))
 (let (($x22 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x34 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x78 (=> $x34 (or false (or false (and true (or $x114 $x22)))))))
 (let (($x45 (=> (and $x21 $x34) (or false (or false (and true (or $x114 $x22)))))))
 (let (($x57 (and $x45 $x37)))
 (let (($x59 (=> $x57 $x79)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x85 (or $x74 $x21)))
 (let (($x56 (= $x85 true)))
 (let (($x79 (= $x56 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x25 (concat ?x48 (concat ?x23 ?x91)))))
 (let (($x51 (= ?x27 input.dst.llvm-%opt)))
 (let (($x113 (= $x51 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x29)))
 (let (($x103 (= input.spec-%var-opt-0.2 ?x35)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x75 (=> $x52 $x103)))
 (let ((?x18 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x18 (_ bv1 32))))
 (let (($x76 (= $x52 $x41)))
 (let (($x5 (= false false)))
 (let (($x62 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x105 (=> $x62 $x5)))
 (let (($x43 (= ?x18 (_ bv0 32))))
 (let (($x70 (= $x62 $x43)))
 (let (($x111 (and $x70 $x105)))
 (let (($x26 (and $x111 $x76)))
 (let (($x106 (and $x26 $x75)))
 (let (($x44 (= $x106 true)))
 (let (($x90 (= $x44 true)))
 (let (($x115 (= $x90 true)))
 (let ((?x66 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x66)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x102 $x17)))
 (let (($x88 (and $x81 $x49)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x100 $x88)))
 (let (($x24 (= $x39 true)))
 (let (($x32 (= $x24 true)))
 (let (($x9 (= $x32 true)))
 (let (($x86 (and $x9 $x115)))
 (let (($x73 (and $x86 $x120)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x112 (and $x108 $x73)))
 (let (($x117 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x33 (and $x117 $x112)))
 (let (($x37 (and $x5 $x33)))
 (let (($x22 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x34 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x78 (=> $x34 (or false (or false (and true (or $x114 $x22)))))))
 (let (($x45 (=> (and $x21 $x34) (or false (or false (and true (or $x114 $x22)))))))
 (let (($x57 (and $x45 $x37)))
 (let (($x59 (=> $x57 $x79)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x25)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x90 $x86)))
 (let (($x48 (and $x89 $x13)))
 (let (($x44 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x44 $x48)))
 (let (($x38 (= $x10 true)))
 (let (($x124 (= $x38 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x73 (concat ?x51 (concat ?x116 ?x23)))))
 (let (($x123 (= ?x112 input.dst.llvm-%opt)))
 (let (($x65 (= $x123 true)))
 (let (($x11 (= $x65 true)))
 (let (($x24 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= true $x24)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x59 (=> $x21 $x79)))
 (let (($x33 (= input.dst.llvm-%opt ?x112)))
 (let (($x85 (and (and (and $x24 $x44) $x48) $x33)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x52)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x60)))
 (let (($x35 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x103 (=> $x17 $x35)))
 (let ((?x43 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x43 (_ bv1 32))))
 (let (($x71 (= $x17 $x46)))
 (let (($x108 (= false false)))
 (let (($x18 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x109 (=> $x18 $x108)))
 (let (($x67 (= ?x43 (_ bv0 32))))
 (let (($x97 (= $x18 $x67)))
 (let (($x68 (and $x97 $x109)))
 (let (($x29 (and $x68 $x71)))
 (let (($x75 (and $x29 $x103)))
 (let (($x56 (and $x75 $x85)))
 (let (($x121 (and $x56 $x59)))
 (let (($x72 (= $x121 true)))
 (let (($x53 (= $x72 true)))
 (let (($x94 (= $x53 true)))
 (let (($x32 (= $x24 true)))
 (let (($x9 (= $x32 true)))
 (let (($x69 (= $x9 true)))
 (let (($x81 (= $x21 true)))
 (let (($x66 (= $x81 true)))
 (let (($x49 (= $x66 true)))
 (let (($x62 (and $x49 $x69)))
 (let (($x122 (and $x62 $x94)))
 (let (($x61 (and $x122 $x11)))
 (let (($x92 (and $x17 $x61)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x36 (and $x20 $x92)))
 (let (($x100 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x16 (and $x100 $x36)))
 (let (($x6 (and $x108 $x16)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x119 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x117 (=> $x119 (or false (or false (and true (or $x95 $x58)))))))
 (let (($x50 (=> (and $x21 $x119) (or false (or false (and true (or $x95 $x58)))))))
 (let (($x64 (and $x50 $x6)))
 (let (($x125 (=> $x64 $x124)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x25)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x90 $x86)))
 (let (($x48 (and $x89 $x13)))
 (let (($x44 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x44 $x48)))
 (let (($x38 (= $x10 true)))
 (let (($x124 (= $x38 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x73 (concat ?x51 (concat ?x116 ?x23)))))
 (let (($x123 (= ?x112 input.dst.llvm-%opt)))
 (let (($x65 (= $x123 true)))
 (let (($x11 (= $x65 true)))
 (let (($x24 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= true $x24)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x59 (=> $x21 $x79)))
 (let (($x33 (= input.dst.llvm-%opt ?x112)))
 (let (($x85 (and (and (and $x24 $x44) $x48) $x33)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x52)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x60)))
 (let (($x35 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x103 (=> $x17 $x35)))
 (let ((?x43 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x43 (_ bv1 32))))
 (let (($x71 (= $x17 $x46)))
 (let (($x108 (= false false)))
 (let (($x18 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x109 (=> $x18 $x108)))
 (let (($x67 (= ?x43 (_ bv0 32))))
 (let (($x97 (= $x18 $x67)))
 (let (($x68 (and $x97 $x109)))
 (let (($x29 (and $x68 $x71)))
 (let (($x75 (and $x29 $x103)))
 (let (($x56 (and $x75 $x85)))
 (let (($x121 (and $x56 $x59)))
 (let (($x72 (= $x121 true)))
 (let (($x53 (= $x72 true)))
 (let (($x94 (= $x53 true)))
 (let (($x32 (= $x24 true)))
 (let (($x9 (= $x32 true)))
 (let (($x69 (= $x9 true)))
 (let (($x81 (= $x21 true)))
 (let (($x66 (= $x81 true)))
 (let (($x49 (= $x66 true)))
 (let (($x62 (and $x49 $x69)))
 (let (($x122 (and $x62 $x94)))
 (let (($x61 (and $x122 $x11)))
 (let (($x92 (and $x17 $x61)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x36 (and $x20 $x92)))
 (let (($x100 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x16 (and $x100 $x36)))
 (let (($x6 (and $x108 $x16)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x119 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x117 (=> $x119 (or false (or false (and true (or $x95 $x58)))))))
 (let (($x50 (=> (and $x21 $x119) (or false (or false (and true (or $x95 $x58)))))))
 (let (($x64 (and $x50 $x6)))
 (let (($x125 (=> $x64 $x124)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x29)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x76)))
 (let ((?x28 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x28)))
 (let (($x110 (= ?x63 ?x105)))
 (let (($x7 (= $x110 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x112 (concat ?x23 (concat ?x51 ?x73)))))
 (let (($x61 (= ?x33 input.dst.llvm-%opt)))
 (let (($x92 (= $x61 true)))
 (let (($x36 (= $x92 true)))
 (let (($x9 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x72 (= true $x9)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x53 (=> $x21 $x72)))
 (let (($x85 (= input.dst.llvm-%opt ?x33)))
 (let ((?x13 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x13)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x115 $x89)))
 (let (($x57 (and $x25 $x48)))
 (let (($x90 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and (and (and $x9 $x90) $x57) $x85)))
 (let (($x75 (= input.spec-%var-opt-0.2 ?x105)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x106 (=> $x39 $x75)))
 (let ((?x109 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x109 (_ bv1 32))))
 (let (($x35 (= $x39 $x14)))
 (let (($x20 (= false false)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x52 (=> $x108 $x20)))
 (let (($x111 (= ?x109 (_ bv0 32))))
 (let (($x5 (= $x108 $x111)))
 (let (($x60 (and $x5 $x52)))
 (let (($x103 (and $x60 $x35)))
 (let (($x44 (and $x103 $x106)))
 (let (($x121 (and $x44 $x59)))
 (let (($x94 (and $x121 $x53)))
 (let (($x122 (= $x94 true)))
 (let (($x123 (= $x122 true)))
 (let (($x65 (= $x123 true)))
 (let (($x18 (= $x21 true)))
 (let (($x43 (= $x18 true)))
 (let (($x67 (= $x43 true)))
 (let (($x69 (= $x9 true)))
 (let (($x62 (= $x69 true)))
 (let (($x34 (= $x62 true)))
 (let (($x97 (and $x34 $x67)))
 (let (($x11 (and $x97 $x65)))
 (let (($x16 (and $x11 $x36)))
 (let (($x6 (and $x39 $x16)))
 (let (($x88 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x64 (and $x88 $x6)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x10 (and $x66 $x64)))
 (let (($x38 (and $x20 $x10)))
 (let (($x45 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x118 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x100 (=> $x118 (or false (or false (and true (or $x78 $x45)))))))
 (let (($x80 (=> (and $x21 $x118) (or false (or false (and true (or $x78 $x45)))))))
 (let (($x124 (and $x80 $x38)))
 (let (($x54 (=> $x124 $x7)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x29)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x76)))
 (let ((?x28 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x28)))
 (let (($x110 (= ?x63 ?x105)))
 (let (($x7 (= $x110 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x112 (concat ?x23 (concat ?x51 ?x73)))))
 (let (($x61 (= ?x33 input.dst.llvm-%opt)))
 (let (($x92 (= $x61 true)))
 (let (($x36 (= $x92 true)))
 (let (($x9 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x72 (= true $x9)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x53 (=> $x21 $x72)))
 (let (($x85 (= input.dst.llvm-%opt ?x33)))
 (let ((?x13 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x13)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x115 $x89)))
 (let (($x57 (and $x25 $x48)))
 (let (($x90 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and (and (and $x9 $x90) $x57) $x85)))
 (let (($x75 (= input.spec-%var-opt-0.2 ?x105)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x106 (=> $x39 $x75)))
 (let ((?x109 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x109 (_ bv1 32))))
 (let (($x35 (= $x39 $x14)))
 (let (($x20 (= false false)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x52 (=> $x108 $x20)))
 (let (($x111 (= ?x109 (_ bv0 32))))
 (let (($x5 (= $x108 $x111)))
 (let (($x60 (and $x5 $x52)))
 (let (($x103 (and $x60 $x35)))
 (let (($x44 (and $x103 $x106)))
 (let (($x121 (and $x44 $x59)))
 (let (($x94 (and $x121 $x53)))
 (let (($x122 (= $x94 true)))
 (let (($x123 (= $x122 true)))
 (let (($x65 (= $x123 true)))
 (let (($x18 (= $x21 true)))
 (let (($x43 (= $x18 true)))
 (let (($x67 (= $x43 true)))
 (let (($x69 (= $x9 true)))
 (let (($x62 (= $x69 true)))
 (let (($x34 (= $x62 true)))
 (let (($x97 (and $x34 $x67)))
 (let (($x11 (and $x97 $x65)))
 (let (($x16 (and $x11 $x36)))
 (let (($x6 (and $x39 $x16)))
 (let (($x88 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x64 (and $x88 $x6)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x10 (and $x66 $x64)))
 (let (($x38 (and $x20 $x10)))
 (let (($x45 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x118 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x100 (=> $x118 (or false (or false (and true (or $x78 $x45)))))))
 (let (($x80 (=> (and $x21 $x118) (or false (or false (and true (or $x78 $x45)))))))
 (let (($x124 (and $x80 $x38)))
 (let (($x54 (=> $x124 $x7)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let ((?x54 (ite $x21 (_ bv1 1) (_ bv0 1))))
 (let ((?x126 ((_ zero_extend 31) ?x54)))
 (let (($x83 (= (_ bv1 32) ?x126)))
 (let (($x120 (= $x83 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x33 (concat ?x73 (concat ?x23 ?x112)))))
 (let (($x16 (= ?x85 input.dst.llvm-%opt)))
 (let (($x6 (= $x16 true)))
 (let (($x64 (= $x6 true)))
 (let (($x43 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x122 (= true $x43)))
 (let (($x123 (=> $x21 $x122)))
 (let (($x59 (= input.dst.llvm-%opt ?x85)))
 (let ((?x48 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x48)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x86 $x25)))
 (let (($x79 (and $x13 $x57)))
 (let (($x115 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and (and (and $x43 $x115) $x79) $x59)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x55)))
 (let (($x44 (= input.spec-%var-opt-0.2 ?x46)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x37 (=> $x62 $x44)))
 (let ((?x52 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x52 (_ bv1 32))))
 (let (($x75 (= $x62 $x105)))
 (let (($x88 (= false false)))
 (let (($x20 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x29 (=> $x20 $x88)))
 (let (($x71 (= ?x52 (_ bv0 32))))
 (let (($x17 (= $x20 $x71)))
 (let (($x76 (and $x17 $x29)))
 (let (($x106 (and $x76 $x75)))
 (let (($x90 (and $x106 $x37)))
 (let (($x94 (and $x90 $x53)))
 (let (($x65 (and $x94 $x123)))
 (let (($x11 (= $x65 true)))
 (let (($x61 (= $x11 true)))
 (let (($x92 (= $x61 true)))
 (let (($x108 (= $x21 true)))
 (let (($x109 (= $x108 true)))
 (let (($x111 (= $x109 true)))
 (let (($x67 (= $x43 true)))
 (let (($x97 (= $x67 true)))
 (let (($x119 (= $x97 true)))
 (let (($x5 (and $x119 $x111)))
 (let (($x36 (and $x5 $x92)))
 (let (($x10 (and $x36 $x64)))
 (let (($x38 (and $x62 $x10)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x124 (and $x69 $x38)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x125 (and $x32 $x124)))
 (let (($x28 (and $x88 $x125)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x81 (or false (or false (and true (or $x117 $x50)))))))
 (let (($x104 (=> (and $x21 $x81) (or false (or false (and true (or $x117 $x50)))))))
 (let (($x63 (and $x104 $x28)))
 (let (($x87 (=> $x63 $x120)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let ((?x54 (ite $x21 (_ bv1 1) (_ bv0 1))))
 (let ((?x126 ((_ zero_extend 31) ?x54)))
 (let (($x83 (= (_ bv1 32) ?x126)))
 (let (($x120 (= $x83 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x33 (concat ?x73 (concat ?x23 ?x112)))))
 (let (($x16 (= ?x85 input.dst.llvm-%opt)))
 (let (($x6 (= $x16 true)))
 (let (($x64 (= $x6 true)))
 (let (($x43 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x122 (= true $x43)))
 (let (($x123 (=> $x21 $x122)))
 (let (($x59 (= input.dst.llvm-%opt ?x85)))
 (let ((?x48 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x48)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x86 $x25)))
 (let (($x79 (and $x13 $x57)))
 (let (($x115 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and (and (and $x43 $x115) $x79) $x59)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x55)))
 (let (($x44 (= input.spec-%var-opt-0.2 ?x46)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x37 (=> $x62 $x44)))
 (let ((?x52 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x52 (_ bv1 32))))
 (let (($x75 (= $x62 $x105)))
 (let (($x88 (= false false)))
 (let (($x20 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x29 (=> $x20 $x88)))
 (let (($x71 (= ?x52 (_ bv0 32))))
 (let (($x17 (= $x20 $x71)))
 (let (($x76 (and $x17 $x29)))
 (let (($x106 (and $x76 $x75)))
 (let (($x90 (and $x106 $x37)))
 (let (($x94 (and $x90 $x53)))
 (let (($x65 (and $x94 $x123)))
 (let (($x11 (= $x65 true)))
 (let (($x61 (= $x11 true)))
 (let (($x92 (= $x61 true)))
 (let (($x108 (= $x21 true)))
 (let (($x109 (= $x108 true)))
 (let (($x111 (= $x109 true)))
 (let (($x67 (= $x43 true)))
 (let (($x97 (= $x67 true)))
 (let (($x119 (= $x97 true)))
 (let (($x5 (and $x119 $x111)))
 (let (($x36 (and $x5 $x92)))
 (let (($x10 (and $x36 $x64)))
 (let (($x38 (and $x62 $x10)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x124 (and $x69 $x38)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x125 (and $x32 $x124)))
 (let (($x28 (and $x88 $x125)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x81 (or false (or false (and true (or $x117 $x50)))))))
 (let (($x104 (=> (and $x21 $x81) (or false (or false (and true (or $x117 $x50)))))))
 (let (($x63 (and $x104 $x28)))
 (let (($x87 (=> $x63 $x120)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x120 (= (_ bv0 2) ?x83)))
 (let (($x87 (= $x120 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x85 (concat ?x112 (concat ?x73 ?x33)))))
 (let (($x10 (= ?x59 input.dst.llvm-%opt)))
 (let (($x38 (= $x10 true)))
 (let (($x124 (= $x38 true)))
 (let (($x109 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x11 (= true $x109)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x61 (=> $x21 $x11)))
 (let (($x53 (= input.dst.llvm-%opt ?x59)))
 (let ((?x57 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x57)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x89 $x13)))
 (let (($x72 (and $x48 $x79)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and (and (and $x109 $x86) $x72) $x53)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x26)))
 (let (($x90 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x97 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x97 $x90)))
 (let ((?x29 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x29 (_ bv1 32))))
 (let (($x44 (= $x97 $x46)))
 (let (($x69 (= false false)))
 (let (($x88 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x103 (=> $x88 $x69)))
 (let (($x35 (= ?x29 (_ bv0 32))))
 (let (($x39 (= $x88 $x35)))
 (let (($x55 (and $x39 $x103)))
 (let (($x37 (and $x55 $x44)))
 (let (($x115 (and $x37 $x56)))
 (let (($x65 (and $x115 $x123)))
 (let (($x92 (and $x65 $x61)))
 (let (($x36 (= $x92 true)))
 (let (($x16 (= $x36 true)))
 (let (($x6 (= $x16 true)))
 (let (($x20 (= $x21 true)))
 (let (($x52 (= $x20 true)))
 (let (($x71 (= $x52 true)))
 (let (($x111 (= $x109 true)))
 (let (($x5 (= $x111 true)))
 (let (($x118 (= $x5 true)))
 (let (($x17 (and $x118 $x71)))
 (let (($x64 (and $x17 $x6)))
 (let (($x125 (and $x64 $x124)))
 (let (($x28 (and $x97 $x125)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x63 (and $x67 $x28)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x110 (and $x18 $x63)))
 (let (($x7 (and $x69 $x110)))
 (let (($x80 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x24 (or false (or false (and true (or $x100 $x80)))))))
 (let (($x101 (=> (and $x21 $x24) (or false (or false (and true (or $x100 $x80)))))))
 (let (($x54 (and $x101 $x7)))
 (let (($x12 (=> $x54 $x87)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x120 (= (_ bv0 2) ?x83)))
 (let (($x87 (= $x120 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x85 (concat ?x112 (concat ?x73 ?x33)))))
 (let (($x10 (= ?x59 input.dst.llvm-%opt)))
 (let (($x38 (= $x10 true)))
 (let (($x124 (= $x38 true)))
 (let (($x109 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x11 (= true $x109)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x61 (=> $x21 $x11)))
 (let (($x53 (= input.dst.llvm-%opt ?x59)))
 (let ((?x57 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x57)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x89 $x13)))
 (let (($x72 (and $x48 $x79)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and (and (and $x109 $x86) $x72) $x53)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x26)))
 (let (($x90 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x97 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x97 $x90)))
 (let ((?x29 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x29 (_ bv1 32))))
 (let (($x44 (= $x97 $x46)))
 (let (($x69 (= false false)))
 (let (($x88 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x103 (=> $x88 $x69)))
 (let (($x35 (= ?x29 (_ bv0 32))))
 (let (($x39 (= $x88 $x35)))
 (let (($x55 (and $x39 $x103)))
 (let (($x37 (and $x55 $x44)))
 (let (($x115 (and $x37 $x56)))
 (let (($x65 (and $x115 $x123)))
 (let (($x92 (and $x65 $x61)))
 (let (($x36 (= $x92 true)))
 (let (($x16 (= $x36 true)))
 (let (($x6 (= $x16 true)))
 (let (($x20 (= $x21 true)))
 (let (($x52 (= $x20 true)))
 (let (($x71 (= $x52 true)))
 (let (($x111 (= $x109 true)))
 (let (($x5 (= $x111 true)))
 (let (($x118 (= $x5 true)))
 (let (($x17 (and $x118 $x71)))
 (let (($x64 (and $x17 $x6)))
 (let (($x125 (and $x64 $x124)))
 (let (($x28 (and $x97 $x125)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x63 (and $x67 $x28)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x110 (and $x18 $x63)))
 (let (($x7 (and $x69 $x110)))
 (let (($x80 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x24 (or false (or false (and true (or $x100 $x80)))))))
 (let (($x101 (=> (and $x21 $x24) (or false (or false (and true (or $x100 $x80)))))))
 (let (($x54 (and $x101 $x7)))
 (let (($x12 (=> $x54 $x87)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x104 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x34 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x34 (or false (or false (and true (or $x66 $x104)))))))
 (let (($x87 (= $x18 true)))
 (let (($x12 (= $x87 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x59 (concat ?x33 (concat ?x112 ?x85)))))
 (let (($x125 (= ?x53 input.dst.llvm-%opt)))
 (let (($x28 (= $x125 true)))
 (let (($x63 (= $x28 true)))
 (let (($x52 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x36 (= true $x52)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x16 (=> $x21 $x36)))
 (let (($x123 (= input.dst.llvm-%opt ?x53)))
 (let ((?x79 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x79)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x25 $x48)))
 (let (($x122 (and $x57 $x72)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and (and (and $x52 $x89) $x122) $x123)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x37)))
 (let ((?x105 (concat (select input.dst.llvm-mem ?x102) ?x41)))
 (let (($x115 (= input.spec-%var-opt-0.2 ?x105)))
 (let (($x5 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x5 $x115)))
 (let ((?x103 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x103 (_ bv1 32))))
 (let (($x90 (= $x5 $x14)))
 (let (($x67 (= false false)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x69 $x67)))
 (let (($x75 (= ?x103 (_ bv0 32))))
 (let (($x62 (= $x69 $x75)))
 (let (($x26 (and $x62 $x106)))
 (let (($x56 (and $x26 $x90)))
 (let (($x86 (and $x56 $x121)))
 (let (($x92 (and $x86 $x61)))
 (let (($x6 (and $x92 $x16)))
 (let (($x64 (= $x6 true)))
 (let (($x10 (= $x64 true)))
 (let (($x38 (= $x10 true)))
 (let (($x88 (= $x21 true)))
 (let (($x29 (= $x88 true)))
 (let (($x35 (= $x29 true)))
 (let (($x71 (= $x52 true)))
 (let (($x17 (= $x71 true)))
 (let (($x81 (= $x17 true)))
 (let (($x39 (and $x81 $x35)))
 (let (($x124 (and $x39 $x38)))
 (let (($x110 (and $x124 $x63)))
 (let (($x7 (and $x5 $x110)))
 (let (($x111 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x54 (and $x111 $x7)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x126 (and $x108 $x54)))
 (let (($x83 (and $x67 $x126)))
 (let (($x42 (=> (and $x21 $x34) (or false (or false (and true (or $x66 $x104)))))))
 (let (($x120 (and $x42 $x83)))
 (let (($x107 (=> $x120 $x12)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x104 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x34 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x34 (or false (or false (and true (or $x66 $x104)))))))
 (let (($x87 (= $x18 true)))
 (let (($x12 (= $x87 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x59 (concat ?x33 (concat ?x112 ?x85)))))
 (let (($x125 (= ?x53 input.dst.llvm-%opt)))
 (let (($x28 (= $x125 true)))
 (let (($x63 (= $x28 true)))
 (let (($x52 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x36 (= true $x52)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x74)))
 (let (($x16 (=> $x21 $x36)))
 (let (($x123 (= input.dst.llvm-%opt ?x53)))
 (let ((?x79 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x79)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x25 $x48)))
 (let (($x122 (and $x57 $x72)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and (and (and $x52 $x89) $x122) $x123)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x37)))
 (let ((?x105 (concat (select input.dst.llvm-mem ?x102) ?x41)))
 (let (($x115 (= input.spec-%var-opt-0.2 ?x105)))
 (let (($x5 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x5 $x115)))
 (let ((?x103 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x103 (_ bv1 32))))
 (let (($x90 (= $x5 $x14)))
 (let (($x67 (= false false)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x69 $x67)))
 (let (($x75 (= ?x103 (_ bv0 32))))
 (let (($x62 (= $x69 $x75)))
 (let (($x26 (and $x62 $x106)))
 (let (($x56 (and $x26 $x90)))
 (let (($x86 (and $x56 $x121)))
 (let (($x92 (and $x86 $x61)))
 (let (($x6 (and $x92 $x16)))
 (let (($x64 (= $x6 true)))
 (let (($x10 (= $x64 true)))
 (let (($x38 (= $x10 true)))
 (let (($x88 (= $x21 true)))
 (let (($x29 (= $x88 true)))
 (let (($x35 (= $x29 true)))
 (let (($x71 (= $x52 true)))
 (let (($x17 (= $x71 true)))
 (let (($x81 (= $x17 true)))
 (let (($x39 (and $x81 $x35)))
 (let (($x124 (and $x39 $x38)))
 (let (($x110 (and $x124 $x63)))
 (let (($x7 (and $x5 $x110)))
 (let (($x111 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x54 (and $x111 $x7)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x126 (and $x108 $x54)))
 (let (($x83 (and $x67 $x126)))
 (let (($x42 (=> (and $x21 $x34) (or false (or false (and true (or $x66 $x104)))))))
 (let (($x120 (and $x42 $x83)))
 (let (($x107 (=> $x120 $x12)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x56)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x70)))
 (let (($x86 (= input.spec-%var-opt-0.2 ?x46)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x94 (=> $x17 $x86)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x106 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x106 (_ bv1 32))))
 (let (($x115 (= $x17 $x105)))
 (let (($x111 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x37 (=> $x67 $x111)))
 (let (($x44 (= ?x106 (_ bv0 32))))
 (let (($x97 (= $x67 $x44)))
 (let (($x41 (and $x97 $x37)))
 (let (($x121 (and $x41 $x115)))
 (let (($x89 (and $x121 $x94)))
 (let (($x114 (= $x89 true)))
 (let (($x95 (= $x114 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x53 (concat ?x85 (concat ?x33 ?x59)))))
 (let (($x110 (= ?x123 input.dst.llvm-%opt)))
 (let (($x7 (= $x110 true)))
 (let (($x54 (= $x7 true)))
 (let (($x29 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x64 (= true $x29)))
 (let (($x21 (not $x74)))
 (let (($x10 (=> $x21 $x64)))
 (let (($x61 (= input.dst.llvm-%opt ?x123)))
 (let ((?x72 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x72)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x13 $x57)))
 (let (($x11 (and $x79 $x122)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and (and (and $x29 $x25) $x11) $x61)))
 (let (($x6 (and $x89 $x16)))
 (let (($x38 (and $x6 $x10)))
 (let (($x124 (= $x38 true)))
 (let (($x125 (= $x124 true)))
 (let (($x28 (= $x125 true)))
 (let (($x69 (= $x21 true)))
 (let (($x103 (= $x69 true)))
 (let (($x75 (= $x103 true)))
 (let (($x35 (= $x29 true)))
 (let (($x39 (= $x35 true)))
 (let (($x24 (= $x39 true)))
 (let (($x62 (and $x24 $x75)))
 (let (($x63 (and $x62 $x28)))
 (let (($x126 (and $x63 $x54)))
 (let (($x83 (and $x17 $x126)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x120 (and $x71 $x83)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x87 (and $x20 $x120)))
 (let (($x12 (and $x111 $x87)))
 (let (($x101 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x119 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x108 (=> $x119 (or false (or false (and true (or $x32 $x101)))))))
 (let (($x15 (=> (and $x21 $x119) (or false (or false (and true (or $x32 $x101)))))))
 (let (($x107 (and $x15 $x12)))
 (let (($x91 (=> $x107 $x95)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x56)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x70)))
 (let (($x86 (= input.spec-%var-opt-0.2 ?x46)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x94 (=> $x17 $x86)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x106 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x106 (_ bv1 32))))
 (let (($x115 (= $x17 $x105)))
 (let (($x111 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x37 (=> $x67 $x111)))
 (let (($x44 (= ?x106 (_ bv0 32))))
 (let (($x97 (= $x67 $x44)))
 (let (($x41 (and $x97 $x37)))
 (let (($x121 (and $x41 $x115)))
 (let (($x89 (and $x121 $x94)))
 (let (($x114 (= $x89 true)))
 (let (($x95 (= $x114 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x53 (concat ?x85 (concat ?x33 ?x59)))))
 (let (($x110 (= ?x123 input.dst.llvm-%opt)))
 (let (($x7 (= $x110 true)))
 (let (($x54 (= $x7 true)))
 (let (($x29 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x64 (= true $x29)))
 (let (($x21 (not $x74)))
 (let (($x10 (=> $x21 $x64)))
 (let (($x61 (= input.dst.llvm-%opt ?x123)))
 (let ((?x72 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x72)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x13 $x57)))
 (let (($x11 (and $x79 $x122)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and (and (and $x29 $x25) $x11) $x61)))
 (let (($x6 (and $x89 $x16)))
 (let (($x38 (and $x6 $x10)))
 (let (($x124 (= $x38 true)))
 (let (($x125 (= $x124 true)))
 (let (($x28 (= $x125 true)))
 (let (($x69 (= $x21 true)))
 (let (($x103 (= $x69 true)))
 (let (($x75 (= $x103 true)))
 (let (($x35 (= $x29 true)))
 (let (($x39 (= $x35 true)))
 (let (($x24 (= $x39 true)))
 (let (($x62 (and $x24 $x75)))
 (let (($x63 (and $x62 $x28)))
 (let (($x126 (and $x63 $x54)))
 (let (($x83 (and $x17 $x126)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x120 (and $x71 $x83)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x87 (and $x20 $x120)))
 (let (($x12 (and $x111 $x87)))
 (let (($x101 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x119 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x108 (=> $x119 (or false (or false (and true (or $x32 $x101)))))))
 (let (($x15 (=> (and $x21 $x119) (or false (or false (and true (or $x32 $x101)))))))
 (let (($x107 (and $x15 $x12)))
 (let (($x91 (=> $x107 $x95)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x126 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x126)))
 (let (($x113 (= ?x83 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x22 (= $x113 true)))
 (let (($x95 (= ?x83 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x91 (= $x95 true)))
 (let (($x45 (= $x91 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x37)))
 (let (($x120 (= ?x83 ?x17)))
 (let (($x87 (= $x120 true)))
 (let (($x12 (= $x87 true)))
 (let ((?x10 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x10)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x61 $x6)))
 (let (($x124 (and $x64 $x38)))
 (let (($x123 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x123 $x124)))
 (let (($x28 (= $x125 true)))
 (let (($x63 (= $x28 true)))
 (let (($x110 (= $x63 true)))
 (let ((?x112 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x85 ((_ zero_extend 31) ?x112)))
 (let (($x73 (= (_ bv1 32) ?x85)))
 (let (($x33 (= $x73 true)))
 (let (($x59 (= $x33 true)))
 (let (($x57 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= $x57 true)))
 (let (($x72 (= $x79 true)))
 (let (($x122 (= $x72 true)))
 (let ((?x94 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x89 (= (_ bv0 2) ?x94)))
 (let (($x65 (= $x89 true)))
 (let (($x25 (= $x65 true)))
 (let (($x76 (= input.spec-%var-opt-0.2 ?x17)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x14 (=> $x119 $x76)))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x103 (ite $x69 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x103 (_ bv1 32))))
 (let (($x55 (= $x119 $x60)))
 (let (($x74 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (=> $x24 $x74)))
 (let (($x105 (= ?x103 (_ bv0 32))))
 (let (($x115 (= $x24 $x105)))
 (let (($x26 (and $x115 $x121)))
 (let (($x68 (and $x26 $x55)))
 (let (($x90 (and $x68 $x14)))
 (let (($x5 (= $x90 true)))
 (let (($x56 (= $x5 true)))
 (let (($x70 (= $x56 true)))
 (let (($x118 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x88 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x29 (=> $x88 (or false (or false (and true (or $x109 $x118)))))))
 (let (($x84 (= $x29 true)))
 (let (($x101 (= $x84 true)))
 (let (($x35 (= $x101 true)))
 (let (($x46 (and $x35 $x70)))
 (let (($x92 (and $x46 $x25)))
 (let (($x11 (and $x92 $x122)))
 (let (($x23 (and $x11 $x59)))
 (let (($x7 (and $x23 $x110)))
 (let (($x107 (and $x7 $x12)))
 (let (($x78 (and $x107 $x45)))
 (let (($x27 (and $x119 $x78)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x50 (and $x80 $x27)))
 (let (($x117 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x31 (and $x117 $x50)))
 (let (($x58 (and $x74 $x31)))
 (let (($x132 (=> $x58 $x22)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x126 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x126)))
 (let (($x113 (= ?x83 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x22 (= $x113 true)))
 (let (($x95 (= ?x83 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x91 (= $x95 true)))
 (let (($x45 (= $x91 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x37)))
 (let (($x120 (= ?x83 ?x17)))
 (let (($x87 (= $x120 true)))
 (let (($x12 (= $x87 true)))
 (let ((?x10 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x10)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x61 $x6)))
 (let (($x124 (and $x64 $x38)))
 (let (($x123 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x123 $x124)))
 (let (($x28 (= $x125 true)))
 (let (($x63 (= $x28 true)))
 (let (($x110 (= $x63 true)))
 (let ((?x112 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x85 ((_ zero_extend 31) ?x112)))
 (let (($x73 (= (_ bv1 32) ?x85)))
 (let (($x33 (= $x73 true)))
 (let (($x59 (= $x33 true)))
 (let (($x57 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x79 (= $x57 true)))
 (let (($x72 (= $x79 true)))
 (let (($x122 (= $x72 true)))
 (let ((?x94 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x89 (= (_ bv0 2) ?x94)))
 (let (($x65 (= $x89 true)))
 (let (($x25 (= $x65 true)))
 (let (($x76 (= input.spec-%var-opt-0.2 ?x17)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x14 (=> $x119 $x76)))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x103 (ite $x69 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x103 (_ bv1 32))))
 (let (($x55 (= $x119 $x60)))
 (let (($x74 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (=> $x24 $x74)))
 (let (($x105 (= ?x103 (_ bv0 32))))
 (let (($x115 (= $x24 $x105)))
 (let (($x26 (and $x115 $x121)))
 (let (($x68 (and $x26 $x55)))
 (let (($x90 (and $x68 $x14)))
 (let (($x5 (= $x90 true)))
 (let (($x56 (= $x5 true)))
 (let (($x70 (= $x56 true)))
 (let (($x118 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x88 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x29 (=> $x88 (or false (or false (and true (or $x109 $x118)))))))
 (let (($x84 (= $x29 true)))
 (let (($x101 (= $x84 true)))
 (let (($x35 (= $x101 true)))
 (let (($x46 (and $x35 $x70)))
 (let (($x92 (and $x46 $x25)))
 (let (($x11 (and $x92 $x122)))
 (let (($x23 (and $x11 $x59)))
 (let (($x7 (and $x23 $x110)))
 (let (($x107 (and $x7 $x12)))
 (let (($x78 (and $x107 $x45)))
 (let (($x27 (and $x119 $x78)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x50 (and $x80 $x27)))
 (let (($x117 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x31 (and $x117 $x50)))
 (let (($x58 (and $x74 $x31)))
 (let (($x132 (=> $x58 $x22)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x10 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x82 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x127 (=> $x82 $x10)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x86 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x86 (_ bv1 32))))
 (let (($x47 (= $x82 $x112)))
 (let (($x29 (= false false)))
 (let (($x131 (= (_ bv1 32) (_ bv0 32))))
 (let (($x128 (=> $x131 $x29)))
 (let (($x11 (= ?x86 (_ bv0 32))))
 (let (($x96 (= $x131 $x11)))
 (let (($x129 (and $x96 $x128)))
 (let (($x98 (and $x129 $x47)))
 (let (($x130 (and $x98 $x127)))
 (let (($x99 (= $x130 true)))
 (let (($x138 (= $x99 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x133 (= (_ bv0 2) ?x132)))
 (let (($x66 (= $x133 true)))
 (let (($x32 (= $x66 true)))
 (let (($x50 (= $x10 true)))
 (let (($x31 (= $x50 true)))
 (let (($x58 (= $x31 true)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x126)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x107 (= input.spec-%var-opt-0.2 ?x12)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x39 $x107)))
 (let (($x85 (= $x39 $x112)))
 (let (($x70 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x116 (=> $x70 $x29)))
 (let (($x36 (= $x70 $x11)))
 (let (($x53 (and $x36 $x116)))
 (let (($x73 (and $x53 $x85)))
 (let (($x95 (and $x73 $x114)))
 (let (($x91 (= $x95 true)))
 (let (($x45 (= $x91 true)))
 (let (($x78 (= $x45 true)))
 (let (($x76 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x38 (and $x76 $x10)))
 (let (($x124 (= $x38 true)))
 (let (($x125 (= $x124 true)))
 (let (($x28 (= $x125 true)))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x65) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x108) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x48) ?x92))))
 (let (($x33 (= input.spec-%var-opt-0.2 ?x122)))
 (let (($x59 (=> $x39 $x33)))
 (let (($x23 (and $x73 $x59)))
 (let (($x51 (= $x23 true)))
 (let (($x123 (= $x51 true)))
 (let (($x61 (= $x123 true)))
 (let (($x14 (= $x76 true)))
 (let (($x90 (= $x14 true)))
 (let (($x5 (= $x90 true)))
 (let ((?x41 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x41)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x119 $x55)))
 (let (($x97 (and $x68 $x44)))
 (let (($x26 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x26 $x97)))
 (let (($x34 (= $x111 true)))
 (let (($x67 (= $x34 true)))
 (let (($x62 (= $x67 true)))
 (let ((?x69 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x69)))
 (let (($x105 (= ?x103 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (= $x105 true)))
 (let (($x74 (= $x115 true)))
 (let (($x106 (and $x74 $x62)))
 (let (($x56 (and $x106 $x5)))
 (let (($x16 (and $x56 $x61)))
 (let (($x63 (and $x16 $x28)))
 (let (($x27 (and $x63 $x78)))
 (let (($x113 (and $x27 $x58)))
 (let (($x134 (and $x113 $x32)))
 (let (($x135 (and $x39 $x134)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x8 (and $x93 $x135)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x19 (and $x101 $x8)))
 (let (($x136 (and $x29 $x19)))
 (let (($x109 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x71 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x81 (=> $x71 (or false (or false (and true (or $x15 $x109)))))))
 (let (($x137 (and $x81 $x136)))
 (let (($x40 (=> $x137 $x138)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x10 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x82 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x127 (=> $x82 $x10)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x86 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x86 (_ bv1 32))))
 (let (($x47 (= $x82 $x112)))
 (let (($x29 (= false false)))
 (let (($x131 (= (_ bv1 32) (_ bv0 32))))
 (let (($x128 (=> $x131 $x29)))
 (let (($x11 (= ?x86 (_ bv0 32))))
 (let (($x96 (= $x131 $x11)))
 (let (($x129 (and $x96 $x128)))
 (let (($x98 (and $x129 $x47)))
 (let (($x130 (and $x98 $x127)))
 (let (($x99 (= $x130 true)))
 (let (($x138 (= $x99 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x133 (= (_ bv0 2) ?x132)))
 (let (($x66 (= $x133 true)))
 (let (($x32 (= $x66 true)))
 (let (($x50 (= $x10 true)))
 (let (($x31 (= $x50 true)))
 (let (($x58 (= $x31 true)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x126)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x107 (= input.spec-%var-opt-0.2 ?x12)))
 (let (($x39 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x39 $x107)))
 (let (($x85 (= $x39 $x112)))
 (let (($x70 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x116 (=> $x70 $x29)))
 (let (($x36 (= $x70 $x11)))
 (let (($x53 (and $x36 $x116)))
 (let (($x73 (and $x53 $x85)))
 (let (($x95 (and $x73 $x114)))
 (let (($x91 (= $x95 true)))
 (let (($x45 (= $x91 true)))
 (let (($x78 (= $x45 true)))
 (let (($x76 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x38 (and $x76 $x10)))
 (let (($x124 (= $x38 true)))
 (let (($x125 (= $x124 true)))
 (let (($x28 (= $x125 true)))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x65) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x108) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x48) ?x92))))
 (let (($x33 (= input.spec-%var-opt-0.2 ?x122)))
 (let (($x59 (=> $x39 $x33)))
 (let (($x23 (and $x73 $x59)))
 (let (($x51 (= $x23 true)))
 (let (($x123 (= $x51 true)))
 (let (($x61 (= $x123 true)))
 (let (($x14 (= $x76 true)))
 (let (($x90 (= $x14 true)))
 (let (($x5 (= $x90 true)))
 (let ((?x41 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x41)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x119 $x55)))
 (let (($x97 (and $x68 $x44)))
 (let (($x26 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x26 $x97)))
 (let (($x34 (= $x111 true)))
 (let (($x67 (= $x34 true)))
 (let (($x62 (= $x67 true)))
 (let ((?x69 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x69)))
 (let (($x105 (= ?x103 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (= $x105 true)))
 (let (($x74 (= $x115 true)))
 (let (($x106 (and $x74 $x62)))
 (let (($x56 (and $x106 $x5)))
 (let (($x16 (and $x56 $x61)))
 (let (($x63 (and $x16 $x28)))
 (let (($x27 (and $x63 $x78)))
 (let (($x113 (and $x27 $x58)))
 (let (($x134 (and $x113 $x32)))
 (let (($x135 (and $x39 $x134)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x8 (and $x93 $x135)))
 (let (($x101 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x19 (and $x101 $x8)))
 (let (($x136 (and $x29 $x19)))
 (let (($x109 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x71 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x81 (=> $x71 (or false (or false (and true (or $x15 $x109)))))))
 (let (($x137 (and $x81 $x136)))
 (let (($x40 (=> $x137 $x138)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x109 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= ?x109 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x9 $x42)))
 (let (($x20 (and $x21 $x118)))
 (and $x20 $x52)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x109 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= ?x109 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x9 $x42)))
 (let (($x20 (and $x21 $x118)))
 (and $x20 $x52)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x36 (= true false)))
 (let (($x29 (= $x36 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x14 (concat ?x37 (concat ?x101 ?x21)))))
 (let (($x5 (= ?x90 input.dst.llvm-%val)))
 (let (($x56 (= $x5 true)))
 (let (($x80 (= $x56 true)))
 (let (($x117 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x55 (= $x117 true)))
 (let (($x115 (= $x55 true)))
 (let (($x109 (= $x115 true)))
 (let ((?x20 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x20)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x69 $x62)))
 (let (($x18 (and $x121 $x88)))
 (let (($x97 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x97 $x18)))
 (let (($x43 (= $x118 true)))
 (let (($x9 (= $x43 true)))
 (let (($x105 (= $x9 true)))
 (let (($x35 (and $x105 $x109)))
 (let (($x70 (and $x35 $x80)))
 (let (($x108 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x46 (and $x108 $x70)))
 (let ((?x93 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x34 (= ?x93 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x86 (and $x34 $x46)))
 (let (($x103 (= ?x93 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x11 (and $x103 $x86)))
 (let (($x116 (=> $x11 $x29)))
 (not $x116))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x36 (= true false)))
 (let (($x29 (= $x36 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x14 (concat ?x37 (concat ?x101 ?x21)))))
 (let (($x5 (= ?x90 input.dst.llvm-%val)))
 (let (($x56 (= $x5 true)))
 (let (($x80 (= $x56 true)))
 (let (($x117 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x55 (= $x117 true)))
 (let (($x115 (= $x55 true)))
 (let (($x109 (= $x115 true)))
 (let ((?x20 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x20)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x69 $x62)))
 (let (($x18 (and $x121 $x88)))
 (let (($x97 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x97 $x18)))
 (let (($x43 (= $x118 true)))
 (let (($x9 (= $x43 true)))
 (let (($x105 (= $x9 true)))
 (let (($x35 (and $x105 $x109)))
 (let (($x70 (and $x35 $x80)))
 (let (($x108 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x46 (and $x108 $x70)))
 (let ((?x93 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x34 (= ?x93 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x86 (and $x34 $x46)))
 (let (($x103 (= ?x93 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x11 (and $x103 $x86)))
 (let (($x116 (=> $x11 $x29)))
 (not $x116))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000001010)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111110110)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111110110)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv10 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x29 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x67 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x116 (= ?x67 ?x29)))
 (let (($x53 (= $x116 true)))
 (let (($x75 (= $x53 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x9 (concat ?x71 (concat ?x105 ?x117)))))
 (let (($x121 (= ?x97 input.dst.llvm-%val)))
 (let (($x24 (= $x121 true)))
 (let (($x37 (= $x24 true)))
 (let (($x20 (= input.dst.llvm-%val ?x97)))
 (let ((?x44 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x44)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x70 $x68)))
 (let (($x34 (and $x76 $x115)))
 (let (($x80 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x119 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and (and (and $x119 $x80) $x34) $x20)))
 (let (($x111 (= $x5 true)))
 (let (($x69 (= $x111 true)))
 (let (($x43 (= $x69 true)))
 (let (($x46 (and $x43 $x37)))
 (let (($x56 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x86 (and $x56 $x46)))
 (let (($x88 (= ?x67 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x11 (and $x88 $x86)))
 (let (($x93 (= ?x67 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x36 (and $x93 $x11)))
 (let (($x41 (=> $x36 $x75)))
 (not $x41)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x29 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x67 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x116 (= ?x67 ?x29)))
 (let (($x53 (= $x116 true)))
 (let (($x75 (= $x53 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x9 (concat ?x71 (concat ?x105 ?x117)))))
 (let (($x121 (= ?x97 input.dst.llvm-%val)))
 (let (($x24 (= $x121 true)))
 (let (($x37 (= $x24 true)))
 (let (($x20 (= input.dst.llvm-%val ?x97)))
 (let ((?x44 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x44)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x70 $x68)))
 (let (($x34 (and $x76 $x115)))
 (let (($x80 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x119 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and (and (and $x119 $x80) $x34) $x20)))
 (let (($x111 (= $x5 true)))
 (let (($x69 (= $x111 true)))
 (let (($x43 (= $x69 true)))
 (let (($x46 (and $x43 $x37)))
 (let (($x56 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x86 (and $x56 $x46)))
 (let (($x88 (= ?x67 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x11 (and $x88 $x86)))
 (let (($x93 (= ?x67 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x36 (and $x93 $x11)))
 (let (($x41 (=> $x36 $x75)))
 (not $x41)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287183/query
