==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x44 (not $x32)))
 (let (($x107 (= $x44 false)))
 (let (($x108 (= $x107 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x96 (concat ?x93 ?x91)))))
 (let (($x101 (= ?x100 input.dst.llvm-%opt)))
 (let (($x102 (= $x101 true)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x77)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x81)))
 (let (($x84 (= input.spec-%var-opt-0.2 ?x83)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x85 (=> $x69 $x84)))
 (let ((?x64 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x64 (_ bv1 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x18 (= false false)))
 (let (($x63 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x63 $x18)))
 (let (($x65 (= ?x64 (_ bv0 32))))
 (let (($x66 (= $x63 $x65)))
 (let (($x68 (and $x66 $x67)))
 (let (($x72 (and $x68 $x71)))
 (let (($x86 (and $x72 $x85)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (= $x87 true)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x58 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x59 (=> $x58 (or false (or false (and true (or $x52 $x53)))))))
 (let (($x45 (=> (and $x44 $x58) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x40 (= $x45 true)))
 (let (($x60 (= $x40 true)))
 (let ((?x6 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x6)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x30 $x28)))
 (let (($x11 (and $x27 $x16)))
 (let (($x24 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x24 $x11)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x46)))))))
 (let (($x10 (and $x14 $x19)))
 (let (($x37 (= $x10 true)))
 (let (($x5 (= $x37 true)))
 (let (($x61 (and $x5 $x60)))
 (let (($x89 (and $x61 $x88)))
 (let (($x103 (and $x89 $x102)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x104 (and $x7 $x103)))
 (let (($x22 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x105 (and $x22 $x104)))
 (let (($x106 (and $x18 $x105)))
 (let (($x109 (=> $x106 $x108)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x44 (not $x32)))
 (let (($x107 (= $x44 false)))
 (let (($x108 (= $x107 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x96 (concat ?x93 ?x91)))))
 (let (($x101 (= ?x100 input.dst.llvm-%opt)))
 (let (($x102 (= $x101 true)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x77)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x81)))
 (let (($x84 (= input.spec-%var-opt-0.2 ?x83)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x85 (=> $x69 $x84)))
 (let ((?x64 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x64 (_ bv1 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x18 (= false false)))
 (let (($x63 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x63 $x18)))
 (let (($x65 (= ?x64 (_ bv0 32))))
 (let (($x66 (= $x63 $x65)))
 (let (($x68 (and $x66 $x67)))
 (let (($x72 (and $x68 $x71)))
 (let (($x86 (and $x72 $x85)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (= $x87 true)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x58 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x59 (=> $x58 (or false (or false (and true (or $x52 $x53)))))))
 (let (($x45 (=> (and $x44 $x58) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x40 (= $x45 true)))
 (let (($x60 (= $x40 true)))
 (let ((?x6 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x6)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x30 $x28)))
 (let (($x11 (and $x27 $x16)))
 (let (($x24 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x24 $x11)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x46)))))))
 (let (($x10 (and $x14 $x19)))
 (let (($x37 (= $x10 true)))
 (let (($x5 (= $x37 true)))
 (let (($x61 (and $x5 $x60)))
 (let (($x89 (and $x61 $x88)))
 (let (($x103 (and $x89 $x102)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x104 (and $x7 $x103)))
 (let (($x22 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x105 (and $x22 $x104)))
 (let (($x106 (and $x18 $x105)))
 (let (($x109 (=> $x106 $x108)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfd)
                     #x42f70005
                     #xff)
              #x42f70007
              #x32)
       #x42f70006
       #xde))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x32defffd)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42f70007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2158588 32) (_ bv253 8)) (_ bv2158589 32) (_ bv255 8)) (_ bv2158590 32) (_ bv255 8)) (_ bv2158591 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2158591 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x82 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x111 (or $x82 $x7)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x105 (concat ?x102 (concat ?x97 ?x91)))))
 (let (($x107 (= ?x106 input.dst.llvm-%opt)))
 (let (($x108 (= $x107 true)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x81)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x86)))
 (let (($x89 (= input.spec-%var-opt-0.2 ?x88)))
 (let (($x98 (=> $x82 $x89)))
 (let ((?x69 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x69 (_ bv1 32))))
 (let (($x79 (= $x82 $x78)))
 (let (($x31 (= false false)))
 (let (($x68 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x72 (=> $x68 $x31)))
 (let (($x70 (= ?x69 (_ bv0 32))))
 (let (($x71 (= $x68 $x70)))
 (let (($x73 (and $x71 $x72)))
 (let (($x80 (and $x73 $x79)))
 (let (($x99 (and $x80 $x98)))
 (let (($x95 (= $x99 true)))
 (let (($x96 (= $x95 true)))
 (let (($x64 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x59 (and $x55 $x57)))
 (let (($x19 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x19 $x59)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x32)))))))
 (let (($x40 (and $x51 $x45)))
 (let (($x60 (= $x40 true)))
 (let (($x61 (= $x60 true)))
 (let (($x18 (and $x61 $x66)))
 (let (($x92 (and $x18 $x96)))
 (let (($x109 (and $x92 $x108)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x110 (and $x6 $x109)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x39 (and $x28 $x110)))
 (let (($x90 (and $x31 $x39)))
 (let (($x23 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x24 (or false (or false (and true (or $x47 $x23)))))))
 (let (($x15 (not $x7)))
 (let (($x34 (=> (and $x15 $x24) (or false (or false (and true (or $x47 $x23)))))))
 (let (($x43 (and $x34 $x90)))
 (let (($x114 (=> $x43 $x113)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x82 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x111 (or $x82 $x7)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x105 (concat ?x102 (concat ?x97 ?x91)))))
 (let (($x107 (= ?x106 input.dst.llvm-%opt)))
 (let (($x108 (= $x107 true)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x81)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x86)))
 (let (($x89 (= input.spec-%var-opt-0.2 ?x88)))
 (let (($x98 (=> $x82 $x89)))
 (let ((?x69 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x69 (_ bv1 32))))
 (let (($x79 (= $x82 $x78)))
 (let (($x31 (= false false)))
 (let (($x68 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x72 (=> $x68 $x31)))
 (let (($x70 (= ?x69 (_ bv0 32))))
 (let (($x71 (= $x68 $x70)))
 (let (($x73 (and $x71 $x72)))
 (let (($x80 (and $x73 $x79)))
 (let (($x99 (and $x80 $x98)))
 (let (($x95 (= $x99 true)))
 (let (($x96 (= $x95 true)))
 (let (($x64 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x59 (and $x55 $x57)))
 (let (($x19 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x19 $x59)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x32)))))))
 (let (($x40 (and $x51 $x45)))
 (let (($x60 (= $x40 true)))
 (let (($x61 (= $x60 true)))
 (let (($x18 (and $x61 $x66)))
 (let (($x92 (and $x18 $x96)))
 (let (($x109 (and $x92 $x108)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x110 (and $x6 $x109)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x39 (and $x28 $x110)))
 (let (($x90 (and $x31 $x39)))
 (let (($x23 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x24 (or false (or false (and true (or $x47 $x23)))))))
 (let (($x15 (not $x7)))
 (let (($x34 (=> (and $x15 $x24) (or false (or false (and true (or $x47 $x23)))))))
 (let (($x43 (and $x34 $x90)))
 (let (($x114 (=> $x43 $x113)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x81 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x81)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x85 $x77)))
 (let (($x88 (and $x76 $x86)))
 (let (($x36 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x36 $x88)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x78)))))))
 (let (($x16 (and $x84 $x89)))
 (let (($x93 (= $x16 true)))
 (let (($x9 (= $x93 true)))
 (let (($x10 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x10)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x20 (not $x47)))
 (let (($x109 (=> $x20 $x108)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x94 (concat ?x105 (concat ?x96 ?x99)))))
 (let (($x91 (= input.dst.llvm-%opt ?x97)))
 (let (($x106 (and (and (and $x10 $x84) $x89) $x91)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x34)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x50)))
 (let (($x61 (= input.spec-%var-opt-0.2 ?x18)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x37 (=> $x52 $x61)))
 (let ((?x41 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x41 (_ bv1 32))))
 (let (($x58 (= $x52 $x56)))
 (let (($x13 (= false false)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x31 (=> $x69 $x13)))
 (let (($x28 (= ?x41 (_ bv0 32))))
 (let (($x19 (= $x69 $x28)))
 (let (($x40 (and $x19 $x31)))
 (let (($x12 (and $x40 $x58)))
 (let (($x63 (and $x12 $x37)))
 (let (($x107 (and $x63 $x106)))
 (let (($x110 (and $x107 $x109)))
 (let (($x39 (= $x110 true)))
 (let (($x90 (= $x39 true)))
 (let (($x71 (= $x20 true)))
 (let (($x68 (= $x71 true)))
 (let (($x43 (and $x68 $x90)))
 (let (($x111 (and $x52 $x43)))
 (let (($x48 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x112 (and $x48 $x111)))
 (let (($x72 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x113 (and $x72 $x112)))
 (let (($x114 (and $x13 $x113)))
 (let (($x46 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x6 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x45 (=> $x6 (or false (or false (and true (or $x42 $x46)))))))
 (let (($x7 (=> (and $x20 $x6) (or false (or false (and true (or $x42 $x46)))))))
 (let (($x115 (and $x7 $x114)))
 (let (($x116 (=> $x115 $x9)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x81 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x81)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x85 $x77)))
 (let (($x88 (and $x76 $x86)))
 (let (($x36 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x36 $x88)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x78)))))))
 (let (($x16 (and $x84 $x89)))
 (let (($x93 (= $x16 true)))
 (let (($x9 (= $x93 true)))
 (let (($x10 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x10)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x20 (not $x47)))
 (let (($x109 (=> $x20 $x108)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x94 (concat ?x105 (concat ?x96 ?x99)))))
 (let (($x91 (= input.dst.llvm-%opt ?x97)))
 (let (($x106 (and (and (and $x10 $x84) $x89) $x91)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x34)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x50)))
 (let (($x61 (= input.spec-%var-opt-0.2 ?x18)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x37 (=> $x52 $x61)))
 (let ((?x41 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x41 (_ bv1 32))))
 (let (($x58 (= $x52 $x56)))
 (let (($x13 (= false false)))
 (let (($x69 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x31 (=> $x69 $x13)))
 (let (($x28 (= ?x41 (_ bv0 32))))
 (let (($x19 (= $x69 $x28)))
 (let (($x40 (and $x19 $x31)))
 (let (($x12 (and $x40 $x58)))
 (let (($x63 (and $x12 $x37)))
 (let (($x107 (and $x63 $x106)))
 (let (($x110 (and $x107 $x109)))
 (let (($x39 (= $x110 true)))
 (let (($x90 (= $x39 true)))
 (let (($x71 (= $x20 true)))
 (let (($x68 (= $x71 true)))
 (let (($x43 (and $x68 $x90)))
 (let (($x111 (and $x52 $x43)))
 (let (($x48 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x112 (and $x48 $x111)))
 (let (($x72 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x113 (and $x72 $x112)))
 (let (($x114 (and $x13 $x113)))
 (let (($x46 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x6 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x45 (=> $x6 (or false (or false (and true (or $x42 $x46)))))))
 (let (($x7 (=> (and $x20 $x6) (or false (or false (and true (or $x42 $x46)))))))
 (let (($x115 (and $x7 $x114)))
 (let (($x116 (=> $x115 $x9)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x60)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x18)))
 (let (($x117 (= (_ bv0 32) ?x37)))
 (let (($x24 (= $x117 true)))
 (let (($x62 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x90 (= true $x62)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x20 (not $x47)))
 (let (($x43 (=> $x20 $x90)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x91 (concat ?x92 (concat ?x95 ?x104)))))
 (let (($x107 (= input.dst.llvm-%opt ?x106)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x88)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x77 $x81)))
 (let (($x103 (and $x86 $x89)))
 (let (($x82 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x82 $x103)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x87)))))))
 (let (($x110 (and (and (and $x62 $x74) $x102) $x107)))
 (let (($x63 (= input.spec-%var-opt-0.2 ?x37)))
 (let (($x41 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x59 (=> $x41 $x63)))
 (let ((?x31 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x31 (_ bv1 32))))
 (let (($x25 (= $x41 $x12)))
 (let (($x6 (= false false)))
 (let (($x13 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x56 (=> $x13 $x6)))
 (let (($x40 (= ?x31 (_ bv0 32))))
 (let (($x52 (= $x13 $x40)))
 (let (($x58 (and $x52 $x56)))
 (let (($x14 (and $x58 $x25)))
 (let (($x54 (and $x14 $x59)))
 (let (($x39 (and $x54 $x110)))
 (let (($x111 (and $x39 $x43)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x28 (= $x20 true)))
 (let (($x19 (= $x28 true)))
 (let (($x114 (and $x19 $x113)))
 (let (($x115 (and $x41 $x114)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x16 (and $x66 $x115)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x93 (and $x71 $x16)))
 (let (($x9 (and $x6 $x93)))
 (let (($x32 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x51 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x72 (=> $x51 (or false (or false (and true (or $x55 $x32)))))))
 (let (($x15 (=> (and $x20 $x51) (or false (or false (and true (or $x55 $x32)))))))
 (let (($x116 (and $x15 $x9)))
 (let (($x33 (=> $x116 $x24)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x60)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x18)))
 (let (($x117 (= (_ bv0 32) ?x37)))
 (let (($x24 (= $x117 true)))
 (let (($x62 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x90 (= true $x62)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x20 (not $x47)))
 (let (($x43 (=> $x20 $x90)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x91 (concat ?x92 (concat ?x95 ?x104)))))
 (let (($x107 (= input.dst.llvm-%opt ?x106)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x88)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x77 $x81)))
 (let (($x103 (and $x86 $x89)))
 (let (($x82 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x82 $x103)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x87)))))))
 (let (($x110 (and (and (and $x62 $x74) $x102) $x107)))
 (let (($x63 (= input.spec-%var-opt-0.2 ?x37)))
 (let (($x41 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x59 (=> $x41 $x63)))
 (let ((?x31 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x31 (_ bv1 32))))
 (let (($x25 (= $x41 $x12)))
 (let (($x6 (= false false)))
 (let (($x13 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x56 (=> $x13 $x6)))
 (let (($x40 (= ?x31 (_ bv0 32))))
 (let (($x52 (= $x13 $x40)))
 (let (($x58 (and $x52 $x56)))
 (let (($x14 (and $x58 $x25)))
 (let (($x54 (and $x14 $x59)))
 (let (($x39 (and $x54 $x110)))
 (let (($x111 (and $x39 $x43)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x28 (= $x20 true)))
 (let (($x19 (= $x28 true)))
 (let (($x114 (and $x19 $x113)))
 (let (($x115 (and $x41 $x114)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x16 (and $x66 $x115)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x93 (and $x71 $x16)))
 (let (($x9 (and $x6 $x93)))
 (let (($x32 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x51 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x72 (=> $x51 (or false (or false (and true (or $x55 $x32)))))))
 (let (($x15 (=> (and $x20 $x51) (or false (or false (and true (or $x55 $x32)))))))
 (let (($x116 (and $x15 $x9)))
 (let (($x33 (=> $x116 $x24)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x583df768)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x68)
                                #x583df76a
                                #x1f)
                         #x9c1f776b
                         #xc2)
                  #x583df769
                  #x77)))
  (store (store (store (store a!1 #x9c1f776a #x1f) #x9c1f7769 #x65)
                #x583df76b
                #x9c)
         #x9c1f7768
         #x70)))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #xc21f6570)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #xc21f6570)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x583df76b)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xc21f6570)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x9c1f7768)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x583df768)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1610317820 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147549180 32) (_ bv252 8)) (_ bv2147549181 32) (_ bv127 8)) (_ bv2147549182 32) (_ bv251 8)) (_ bv2147549183 32) (_ bv95 8)) (_ bv1610317820 32) (_ bv1 8)))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147549180 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147549180 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147549183 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x37)))
 (let ((?x83 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x83)))
 (let (($x44 (= ?x94 ?x59)))
 (let (($x22 (= $x44 true)))
 (let (($x79 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x113 (= true $x79)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x42 (not $x5)))
 (let (($x114 (=> $x42 $x113)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x107 (concat ?x96 (concat ?x105 ?x99)))))
 (let (($x39 (= input.dst.llvm-%opt ?x110)))
 (let ((?x103 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x103)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x88)))
 (let (($x109 (and $x89 $x102)))
 (let (($x75 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x75 $x109)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x36)))))))
 (let (($x111 (and (and (and $x79 $x76) $x97) $x39)))
 (let (($x54 (= input.spec-%var-opt-0.2 ?x59)))
 (let (($x31 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x31 $x54)))
 (let ((?x56 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x56 (_ bv1 32))))
 (let (($x30 (= $x31 $x14)))
 (let (($x21 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x12 (=> $x6 $x21)))
 (let (($x58 (= ?x56 (_ bv0 32))))
 (let (($x41 (= $x6 $x58)))
 (let (($x25 (and $x41 $x12)))
 (let (($x61 (and $x25 $x30)))
 (let (($x38 (and $x61 $x10)))
 (let (($x112 (and $x38 $x111)))
 (let (($x115 (and $x112 $x114)))
 (let (($x16 (= $x115 true)))
 (let (($x93 (= $x16 true)))
 (let (($x40 (= $x42 true)))
 (let (($x52 (= $x40 true)))
 (let (($x9 (and $x52 $x93)))
 (let (($x116 (and $x31 $x9)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x117 (and $x69 $x116)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x24 (and $x28 $x117)))
 (let (($x33 (and $x21 $x24)))
 (let (($x45 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x48 (=> $x70 (or false (or false (and true (or $x27 $x45)))))))
 (let (($x68 (=> (and $x42 $x70) (or false (or false (and true (or $x27 $x45)))))))
 (let (($x98 (and $x68 $x33)))
 (let (($x118 (=> $x98 $x22)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x37)))
 (let ((?x83 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x83)))
 (let (($x44 (= ?x94 ?x59)))
 (let (($x22 (= $x44 true)))
 (let (($x79 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x113 (= true $x79)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x42 (not $x5)))
 (let (($x114 (=> $x42 $x113)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x107 (concat ?x96 (concat ?x105 ?x99)))))
 (let (($x39 (= input.dst.llvm-%opt ?x110)))
 (let ((?x103 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x103)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x88)))
 (let (($x109 (and $x89 $x102)))
 (let (($x75 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x75 $x109)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x36)))))))
 (let (($x111 (and (and (and $x79 $x76) $x97) $x39)))
 (let (($x54 (= input.spec-%var-opt-0.2 ?x59)))
 (let (($x31 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x31 $x54)))
 (let ((?x56 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x56 (_ bv1 32))))
 (let (($x30 (= $x31 $x14)))
 (let (($x21 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x12 (=> $x6 $x21)))
 (let (($x58 (= ?x56 (_ bv0 32))))
 (let (($x41 (= $x6 $x58)))
 (let (($x25 (and $x41 $x12)))
 (let (($x61 (and $x25 $x30)))
 (let (($x38 (and $x61 $x10)))
 (let (($x112 (and $x38 $x111)))
 (let (($x115 (and $x112 $x114)))
 (let (($x16 (= $x115 true)))
 (let (($x93 (= $x16 true)))
 (let (($x40 (= $x42 true)))
 (let (($x52 (= $x40 true)))
 (let (($x9 (and $x52 $x93)))
 (let (($x116 (and $x31 $x9)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x117 (and $x69 $x116)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x24 (and $x28 $x117)))
 (let (($x33 (and $x21 $x24)))
 (let (($x45 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x70 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x48 (=> $x70 (or false (or false (and true (or $x27 $x45)))))))
 (let (($x68 (=> (and $x42 $x70) (or false (or false (and true (or $x27 $x45)))))))
 (let (($x98 (and $x68 $x33)))
 (let (($x118 (=> $x98 $x22)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x85 ((_ extract 2 0) input.dst.llvm-%opt)))
 (let ((?x22 ((_ extract 2 0) input.spec-%var-opt-0.2)))
 (let ((?x118 (bvmul (_ bv4 3) ?x22)))
 (let ((?x119 (bvneg ?x118)))
 (let (($x91 (= ?x119 ?x85)))
 (let (($x20 (= $x91 true)))
 (let (($x87 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x16 (= true $x87)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x11 (not $x51)))
 (let (($x93 (=> $x11 $x16)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x110 (concat ?x99 (concat ?x96 ?x107)))))
 (let (($x111 (= input.dst.llvm-%opt ?x39)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x102)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x86 $x89)))
 (let (($x97 (and $x103 $x109)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x100 $x97)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x73)))))))
 (let (($x114 (and (and (and $x87 $x81) $x43) $x111)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x50)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x37)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x54)))
 (let (($x6 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x38 (=> $x6 $x10)))
 (let ((?x21 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x21 (_ bv1 32))))
 (let (($x61 (= $x6 $x30)))
 (let (($x47 (= false false)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x31 (=> $x41 $x47)))
 (let (($x12 (= ?x21 (_ bv0 32))))
 (let (($x25 (= $x41 $x12)))
 (let (($x14 (and $x25 $x31)))
 (let (($x67 (and $x14 $x61)))
 (let (($x62 (and $x67 $x38)))
 (let (($x115 (and $x62 $x114)))
 (let (($x9 (and $x115 $x93)))
 (let (($x116 (= $x9 true)))
 (let (($x117 (= $x116 true)))
 (let (($x56 (= $x11 true)))
 (let (($x58 (= $x56 true)))
 (let (($x24 (and $x58 $x117)))
 (let (($x33 (and $x6 $x24)))
 (let (($x52 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x98 (and $x52 $x33)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x23 (and $x69 $x98)))
 (let (($x83 (and $x47 $x23)))
 (let (($x17 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x71 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x71 (or false (or false (and true (or $x7 $x17)))))))
 (let (($x35 (=> (and $x11 $x71) (or false (or false (and true (or $x7 $x17)))))))
 (let (($x94 (and $x35 $x83)))
 (let (($x120 (=> $x94 $x20)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x85 ((_ extract 2 0) input.dst.llvm-%opt)))
 (let ((?x22 ((_ extract 2 0) input.spec-%var-opt-0.2)))
 (let ((?x118 (bvmul (_ bv4 3) ?x22)))
 (let ((?x119 (bvneg ?x118)))
 (let (($x91 (= ?x119 ?x85)))
 (let (($x20 (= $x91 true)))
 (let (($x87 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x16 (= true $x87)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x11 (not $x51)))
 (let (($x93 (=> $x11 $x16)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x110 (concat ?x99 (concat ?x96 ?x107)))))
 (let (($x111 (= input.dst.llvm-%opt ?x39)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x102)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x86 $x89)))
 (let (($x97 (and $x103 $x109)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x100 $x97)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x73)))))))
 (let (($x114 (and (and (and $x87 $x81) $x43) $x111)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x50)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x37)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x54)))
 (let (($x6 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x38 (=> $x6 $x10)))
 (let ((?x21 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x21 (_ bv1 32))))
 (let (($x61 (= $x6 $x30)))
 (let (($x47 (= false false)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x31 (=> $x41 $x47)))
 (let (($x12 (= ?x21 (_ bv0 32))))
 (let (($x25 (= $x41 $x12)))
 (let (($x14 (and $x25 $x31)))
 (let (($x67 (and $x14 $x61)))
 (let (($x62 (and $x67 $x38)))
 (let (($x115 (and $x62 $x114)))
 (let (($x9 (and $x115 $x93)))
 (let (($x116 (= $x9 true)))
 (let (($x117 (= $x116 true)))
 (let (($x56 (= $x11 true)))
 (let (($x58 (= $x56 true)))
 (let (($x24 (and $x58 $x117)))
 (let (($x33 (and $x6 $x24)))
 (let (($x52 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x98 (and $x52 $x33)))
 (let (($x69 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x23 (and $x69 $x98)))
 (let (($x83 (and $x47 $x23)))
 (let (($x17 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x71 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x71 (or false (or false (and true (or $x7 $x17)))))))
 (let (($x35 (=> (and $x11 $x71) (or false (or false (and true (or $x7 $x17)))))))
 (let (($x94 (and $x35 $x83)))
 (let (($x120 (=> $x94 $x20)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000001)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000001)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_20)
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_20 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_20 #b10000000000000000000000000000000) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0446f004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x04)
              #x0446f005
              #xfe)
       #x0446f006
       #x46))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0446f007)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x0446fe04)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0446f004)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4160618492 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4161146884 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4161146884 32) (_ bv252 8)) (_ bv4161146885 32) (_ bv255 8)) (_ bv4161146886 32) (_ bv253 8)) (_ bv4161146887 32) (_ bv247 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4161146884 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4161146887 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x20 (= (_ bv0 2) ?x91)))
 (let (($x120 (= $x20 true)))
 (let (($x36 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x117 (= true $x36)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x11 (not $x5)))
 (let (($x24 (=> $x11 $x117)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x111 (concat ?x92 (concat ?x104 ?x105)))))
 (let (($x115 (= input.dst.llvm-%opt ?x114)))
 (let ((?x97 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x97)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x89 $x102)))
 (let (($x113 (and $x109 $x43)))
 (let (($x108 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x108 $x113)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x80)))))))
 (let (($x9 (and (and (and $x36 $x88) $x101) $x115)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x18)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x62 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x78 (=> $x21 $x62)))
 (let ((?x31 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x31 (_ bv1 32))))
 (let (($x63 (= $x21 $x67)))
 (let (($x71 (= false false)))
 (let (($x47 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x47 $x71)))
 (let (($x14 (= ?x31 (_ bv0 32))))
 (let (($x6 (= $x47 $x14)))
 (let (($x61 (and $x6 $x30)))
 (let (($x59 (and $x61 $x63)))
 (let (($x79 (and $x59 $x78)))
 (let (($x116 (and $x79 $x9)))
 (let (($x33 (and $x116 $x24)))
 (let (($x98 (= $x33 true)))
 (let (($x23 (= $x98 true)))
 (let (($x12 (= $x11 true)))
 (let (($x25 (= $x12 true)))
 (let (($x83 (and $x25 $x23)))
 (let (($x94 (and $x21 $x83)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x44 (and $x13 $x94)))
 (let (($x56 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x22 (and $x56 $x44)))
 (let (($x118 (and $x71 $x22)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x19 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x69 (=> $x19 (or false (or false (and true (or $x15 $x48)))))))
 (let (($x26 (=> (and $x11 $x19) (or false (or false (and true (or $x15 $x48)))))))
 (let (($x119 (and $x26 $x118)))
 (let (($x121 (=> $x119 $x120)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x20 (= (_ bv0 2) ?x91)))
 (let (($x120 (= $x20 true)))
 (let (($x36 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x117 (= true $x36)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x11 (not $x5)))
 (let (($x24 (=> $x11 $x117)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x111 (concat ?x92 (concat ?x104 ?x105)))))
 (let (($x115 (= input.dst.llvm-%opt ?x114)))
 (let ((?x97 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x97)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x89 $x102)))
 (let (($x113 (and $x109 $x43)))
 (let (($x108 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x108 $x113)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x80)))))))
 (let (($x9 (and (and (and $x36 $x88) $x101) $x115)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x18)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x62 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x78 (=> $x21 $x62)))
 (let ((?x31 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x31 (_ bv1 32))))
 (let (($x63 (= $x21 $x67)))
 (let (($x71 (= false false)))
 (let (($x47 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x47 $x71)))
 (let (($x14 (= ?x31 (_ bv0 32))))
 (let (($x6 (= $x47 $x14)))
 (let (($x61 (and $x6 $x30)))
 (let (($x59 (and $x61 $x63)))
 (let (($x79 (and $x59 $x78)))
 (let (($x116 (and $x79 $x9)))
 (let (($x33 (and $x116 $x24)))
 (let (($x98 (= $x33 true)))
 (let (($x23 (= $x98 true)))
 (let (($x12 (= $x11 true)))
 (let (($x25 (= $x12 true)))
 (let (($x83 (and $x25 $x23)))
 (let (($x94 (and $x21 $x83)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x44 (and $x13 $x94)))
 (let (($x56 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x22 (and $x56 $x44)))
 (let (($x118 (and $x71 $x22)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x19 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x69 (=> $x19 (or false (or false (and true (or $x15 $x48)))))))
 (let (($x26 (=> (and $x11 $x19) (or false (or false (and true (or $x15 $x48)))))))
 (let (($x119 (and $x26 $x118)))
 (let (($x121 (=> $x119 $x120)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x57)))
 (let ((?x42 (ite $x5 (_ bv1 1) (_ bv0 1))))
 (let ((?x75 ((_ zero_extend 31) ?x42)))
 (let (($x110 (= (_ bv1 32) ?x75)))
 (let (($x53 (= $x110 true)))
 (let (($x73 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x98 (= true $x73)))
 (let (($x23 (=> $x5 $x98)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x105 (concat ?x92 ?x111)))))
 (let (($x9 (= input.dst.llvm-%opt ?x115)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x43)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x103 $x109)))
 (let (($x101 (and $x97 $x113)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x76 $x101)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x77)))))))
 (let (($x24 (and (and (and $x73 $x89) $x93) $x9)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x47 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x79 (=> $x47 $x78)))
 (let ((?x71 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x71 (_ bv1 32))))
 (let (($x59 (= $x47 $x63)))
 (let (($x45 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x21 (=> $x6 $x45)))
 (let (($x30 (= ?x71 (_ bv0 32))))
 (let (($x61 (= $x6 $x30)))
 (let (($x67 (and $x61 $x21)))
 (let (($x29 (and $x67 $x59)))
 (let (($x87 (and $x29 $x79)))
 (let (($x33 (and $x87 $x24)))
 (let (($x83 (and $x33 $x23)))
 (let (($x94 (= $x83 true)))
 (let (($x44 (= $x94 true)))
 (let (($x31 (= $x5 true)))
 (let (($x14 (= $x31 true)))
 (let (($x22 (and $x14 $x44)))
 (let (($x118 (and $x47 $x22)))
 (let (($x25 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x119 (and $x25 $x118)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x85 (and $x13 $x119)))
 (let (($x91 (and $x45 $x85)))
 (let (($x66 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x40 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x52 (=> $x40 (or false (or false (and true (or $x68 $x66)))))))
 (let (($x55 (=> (and $x5 $x40) (or false (or false (and true (or $x68 $x66)))))))
 (let (($x20 (and $x55 $x91)))
 (let (($x84 (=> $x20 $x53)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x57)))
 (let ((?x42 (ite $x5 (_ bv1 1) (_ bv0 1))))
 (let ((?x75 ((_ zero_extend 31) ?x42)))
 (let (($x110 (= (_ bv1 32) ?x75)))
 (let (($x53 (= $x110 true)))
 (let (($x73 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x98 (= true $x73)))
 (let (($x23 (=> $x5 $x98)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x105 (concat ?x92 ?x111)))))
 (let (($x9 (= input.dst.llvm-%opt ?x115)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x43)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x103 $x109)))
 (let (($x101 (and $x97 $x113)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x76 $x101)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x77)))))))
 (let (($x24 (and (and (and $x73 $x89) $x93) $x9)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x78 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x47 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x79 (=> $x47 $x78)))
 (let ((?x71 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x71 (_ bv1 32))))
 (let (($x59 (= $x47 $x63)))
 (let (($x45 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x21 (=> $x6 $x45)))
 (let (($x30 (= ?x71 (_ bv0 32))))
 (let (($x61 (= $x6 $x30)))
 (let (($x67 (and $x61 $x21)))
 (let (($x29 (and $x67 $x59)))
 (let (($x87 (and $x29 $x79)))
 (let (($x33 (and $x87 $x24)))
 (let (($x83 (and $x33 $x23)))
 (let (($x94 (= $x83 true)))
 (let (($x44 (= $x94 true)))
 (let (($x31 (= $x5 true)))
 (let (($x14 (= $x31 true)))
 (let (($x22 (and $x14 $x44)))
 (let (($x118 (and $x47 $x22)))
 (let (($x25 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x119 (and $x25 $x118)))
 (let (($x13 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x85 (and $x13 $x119)))
 (let (($x91 (and $x45 $x85)))
 (let (($x66 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x40 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x52 (=> $x40 (or false (or false (and true (or $x68 $x66)))))))
 (let (($x55 (=> (and $x5 $x40) (or false (or false (and true (or $x68 $x66)))))))
 (let (($x20 (and $x55 $x91)))
 (let (($x84 (=> $x20 $x53)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x58 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x13 (=> $x58 (or false (or false (and true (or $x28 $x69)))))))
 (let (($x110 (= $x13 true)))
 (let (($x53 (= $x110 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x44 (= true $x80)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x57)))
 (let (($x22 (=> $x5 $x44)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x9 (concat ?x99 (concat ?x107 ?x104)))))
 (let (($x33 (= input.dst.llvm-%opt ?x24)))
 (let ((?x101 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x101)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x109 $x43)))
 (let (($x117 (and $x113 $x93)))
 (let (($x112 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x112 $x117)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x74)))))))
 (let (($x83 (and (and (and $x80 $x102) $x95) $x33)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x37)))
 (let ((?x79 (concat (select input.dst.llvm-mem ?x35) ?x62)))
 (let (($x87 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x65 (=> $x71 $x87)))
 (let ((?x21 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x21 (_ bv1 32))))
 (let (($x10 (= $x71 $x29)))
 (let (($x40 (= false false)))
 (let (($x45 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x63 (=> $x45 $x40)))
 (let (($x67 (= ?x21 (_ bv0 32))))
 (let (($x47 (= $x45 $x67)))
 (let (($x59 (and $x47 $x63)))
 (let (($x38 (and $x59 $x10)))
 (let (($x36 (and $x38 $x65)))
 (let (($x94 (and $x36 $x83)))
 (let (($x118 (and $x94 $x22)))
 (let (($x119 (= $x118 true)))
 (let (($x85 (= $x119 true)))
 (let (($x30 (= $x5 true)))
 (let (($x61 (= $x30 true)))
 (let (($x91 (and $x61 $x85)))
 (let (($x20 (and $x71 $x91)))
 (let (($x41 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x120 (and $x41 $x20)))
 (let (($x31 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x31 $x120)))
 (let (($x42 (and $x40 $x121)))
 (let (($x17 (=> (and $x5 $x58) (or false (or false (and true (or $x28 $x69)))))))
 (let (($x75 (and $x17 $x42)))
 (let (($x84 (=> $x75 $x53)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x58 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x13 (=> $x58 (or false (or false (and true (or $x28 $x69)))))))
 (let (($x110 (= $x13 true)))
 (let (($x53 (= $x110 true)))
 (let (($x80 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x44 (= true $x80)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x57)))
 (let (($x22 (=> $x5 $x44)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x9 (concat ?x99 (concat ?x107 ?x104)))))
 (let (($x33 (= input.dst.llvm-%opt ?x24)))
 (let ((?x101 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x101)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x109 $x43)))
 (let (($x117 (and $x113 $x93)))
 (let (($x112 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x112 $x117)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x74)))))))
 (let (($x83 (and (and (and $x80 $x102) $x95) $x33)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x37)))
 (let ((?x79 (concat (select input.dst.llvm-mem ?x35) ?x62)))
 (let (($x87 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x65 (=> $x71 $x87)))
 (let ((?x21 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x21 (_ bv1 32))))
 (let (($x10 (= $x71 $x29)))
 (let (($x40 (= false false)))
 (let (($x45 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x63 (=> $x45 $x40)))
 (let (($x67 (= ?x21 (_ bv0 32))))
 (let (($x47 (= $x45 $x67)))
 (let (($x59 (and $x47 $x63)))
 (let (($x38 (and $x59 $x10)))
 (let (($x36 (and $x38 $x65)))
 (let (($x94 (and $x36 $x83)))
 (let (($x118 (and $x94 $x22)))
 (let (($x119 (= $x118 true)))
 (let (($x85 (= $x119 true)))
 (let (($x30 (= $x5 true)))
 (let (($x61 (= $x30 true)))
 (let (($x91 (and $x61 $x85)))
 (let (($x20 (and $x71 $x91)))
 (let (($x41 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x120 (and $x41 $x20)))
 (let (($x31 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x121 (and $x31 $x120)))
 (let (($x42 (and $x40 $x121)))
 (let (($x17 (=> (and $x5 $x58) (or false (or false (and true (or $x28 $x69)))))))
 (let (($x75 (and $x17 $x42)))
 (let (($x84 (=> $x75 $x53)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x50)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x79)))
 (let (($x122 (= input.spec-%tmpvar-6.E0%0%d.2 ?x65)))
 (let (($x82 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x123 (=> $x82 $x122)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x63 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x63 (_ bv1 32))))
 (let (($x39 (= $x82 $x38)))
 (let (($x58 (= false false)))
 (let (($x108 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x7 (=> $x108 $x58)))
 (let (($x59 (= ?x63 (_ bv0 32))))
 (let (($x114 (= $x108 $x59)))
 (let (($x11 (and $x114 $x7)))
 (let (($x32 (and $x11 $x39)))
 (let (($x124 (and $x32 $x123)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x100 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x85 (= true $x100)))
 (let (($x5 (not $x57)))
 (let (($x91 (=> $x5 $x85)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x33 (concat ?x92 (concat ?x105 ?x111)))))
 (let (($x94 (= input.dst.llvm-%opt ?x83)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x117)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x43 $x101)))
 (let (($x23 (and $x93 $x95)))
 (let (($x16 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x16 $x23)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x76)))))))
 (let (($x118 (and (and (and $x100 $x97) $x115) $x94)))
 (let (($x36 (= input.spec-%var-opt-0.2 ?x65)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x73 (=> $x21 $x36)))
 (let (($x60 (= $x21 $x38)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x29 (=> $x40 $x58)))
 (let (($x71 (= $x40 $x59)))
 (let (($x10 (and $x71 $x29)))
 (let (($x78 (and $x10 $x60)))
 (let (($x90 (and $x78 $x73)))
 (let (($x119 (and $x90 $x118)))
 (let (($x20 (and $x119 $x91)))
 (let (($x120 (= $x20 true)))
 (let (($x121 (= $x120 true)))
 (let (($x67 (= $x5 true)))
 (let (($x47 (= $x67 true)))
 (let (($x42 (and $x47 $x121)))
 (let (($x75 (and $x21 $x42)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x110 (and $x6 $x75)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x53 (and $x30 $x110)))
 (let (($x84 (and $x58 $x53)))
 (let (($x55 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x31 (=> $x25 (or false (or false (and true (or $x52 $x55)))))))
 (let (($x48 (=> (and $x5 $x25) (or false (or false (and true (or $x52 $x55)))))))
 (let (($x106 (and $x48 $x84)))
 (let (($x127 (=> $x106 $x126)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x50)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x79)))
 (let (($x122 (= input.spec-%tmpvar-6.E0%0%d.2 ?x65)))
 (let (($x82 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x123 (=> $x82 $x122)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x63 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x63 (_ bv1 32))))
 (let (($x39 (= $x82 $x38)))
 (let (($x58 (= false false)))
 (let (($x108 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x7 (=> $x108 $x58)))
 (let (($x59 (= ?x63 (_ bv0 32))))
 (let (($x114 (= $x108 $x59)))
 (let (($x11 (and $x114 $x7)))
 (let (($x32 (and $x11 $x39)))
 (let (($x124 (and $x32 $x123)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x100 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x85 (= true $x100)))
 (let (($x5 (not $x57)))
 (let (($x91 (=> $x5 $x85)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x33 (concat ?x92 (concat ?x105 ?x111)))))
 (let (($x94 (= input.dst.llvm-%opt ?x83)))
 (let ((?x117 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x117)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x43 $x101)))
 (let (($x23 (and $x93 $x95)))
 (let (($x16 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x16 $x23)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x76)))))))
 (let (($x118 (and (and (and $x100 $x97) $x115) $x94)))
 (let (($x36 (= input.spec-%var-opt-0.2 ?x65)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x73 (=> $x21 $x36)))
 (let (($x60 (= $x21 $x38)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x29 (=> $x40 $x58)))
 (let (($x71 (= $x40 $x59)))
 (let (($x10 (and $x71 $x29)))
 (let (($x78 (and $x10 $x60)))
 (let (($x90 (and $x78 $x73)))
 (let (($x119 (and $x90 $x118)))
 (let (($x20 (and $x119 $x91)))
 (let (($x120 (= $x20 true)))
 (let (($x121 (= $x120 true)))
 (let (($x67 (= $x5 true)))
 (let (($x47 (= $x67 true)))
 (let (($x42 (and $x47 $x121)))
 (let (($x75 (and $x21 $x42)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x110 (and $x6 $x75)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x53 (and $x30 $x110)))
 (let (($x84 (and $x58 $x53)))
 (let (($x55 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x31 (=> $x25 (or false (or false (and true (or $x52 $x55)))))))
 (let (($x48 (=> (and $x5 $x25) (or false (or false (and true (or $x52 $x55)))))))
 (let (($x106 (and $x48 $x84)))
 (let (($x127 (=> $x106 $x126)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60000030)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x7f)
                     #x60000030
                     #xf4)
              #x60000032
              #xff)
       #x60000031
       #xa7))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60000033)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x7fffa7f4)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60000030)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1610612728 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2214592516 32) (_ bv248 8)) (_ bv2214592517 32) (_ bv255 8)) (_ bv2214592518 32) (_ bv255 8)) (_ bv2214592519 32) (_ bv95 8)) (_ bv1610612728 32) (_ bv255 8)) (_ bv1610612729 32) (_ bv255 8)) (_ bv1610612730 32) (_ bv255 8)) (_ bv1610612731 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2214592516 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2214592516 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2214592519 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x18)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x65)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x128))))
 (let (($x131 (= input.spec-%var-opt-0.2 ?x130)))
 (let (($x63 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x132 (=> $x63 $x131)))
 (let (($x11 (= (_ bv0 32) ?x73)))
 (let ((?x82 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge ?x82 (_ bv1 32))))
 (let (($x123 (= $x63 $x122)))
 (let (($x25 (= false false)))
 (let (($x58 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x38 (=> $x58 $x25)))
 (let (($x39 (= ?x82 (_ bv0 32))))
 (let (($x32 (= $x58 $x39)))
 (let (($x64 (and $x32 $x38)))
 (let (($x124 (and $x64 $x123)))
 (let (($x133 (and $x124 $x132)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x89 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x121 (= true $x89)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x51)))
 (let (($x42 (=> $x5 $x121)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x94 (concat ?x107 (concat ?x99 ?x104)))))
 (let (($x119 (= input.dst.llvm-%opt ?x118)))
 (let ((?x23 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x23)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x101 $x117)))
 (let (($x22 (and $x95 $x115)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x86 $x22)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x112)))))))
 (let (($x20 (and (and (and $x89 $x113) $x24) $x119)))
 (let (($x90 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x80 (=> $x63 $x90)))
 (let ((?x29 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x29 (_ bv1 32))))
 (let (($x8 (= $x63 $x78)))
 (let (($x10 (= ?x29 (_ bv0 32))))
 (let (($x21 (= $x58 $x10)))
 (let (($x60 (and $x21 $x38)))
 (let (($x87 (and $x60 $x8)))
 (let (($x77 (and $x87 $x80)))
 (let (($x120 (and $x77 $x20)))
 (let (($x75 (and $x120 $x42)))
 (let (($x110 (= $x75 true)))
 (let (($x53 (= $x110 true)))
 (let (($x59 (= $x5 true)))
 (let (($x71 (= $x59 true)))
 (let (($x84 (and $x71 $x53)))
 (let (($x106 (and $x63 $x84)))
 (let (($x45 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x70 (and $x45 $x106)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x108 (and $x67 $x70)))
 (let (($x114 (and $x25 $x108)))
 (let (($x17 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x41 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x41 (or false (or false (and true (or $x13 $x17)))))))
 (let (($x35 (=> (and $x5 $x41) (or false (or false (and true (or $x13 $x17)))))))
 (let (($x7 (and $x35 $x114)))
 (let (($x136 (=> $x7 $x135)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x18)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x65)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x128))))
 (let (($x131 (= input.spec-%var-opt-0.2 ?x130)))
 (let (($x63 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x132 (=> $x63 $x131)))
 (let (($x11 (= (_ bv0 32) ?x73)))
 (let ((?x82 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge ?x82 (_ bv1 32))))
 (let (($x123 (= $x63 $x122)))
 (let (($x25 (= false false)))
 (let (($x58 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x38 (=> $x58 $x25)))
 (let (($x39 (= ?x82 (_ bv0 32))))
 (let (($x32 (= $x58 $x39)))
 (let (($x64 (and $x32 $x38)))
 (let (($x124 (and $x64 $x123)))
 (let (($x133 (and $x124 $x132)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x89 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x121 (= true $x89)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x51)))
 (let (($x42 (=> $x5 $x121)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x94 (concat ?x107 (concat ?x99 ?x104)))))
 (let (($x119 (= input.dst.llvm-%opt ?x118)))
 (let ((?x23 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x23)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x101 $x117)))
 (let (($x22 (and $x95 $x115)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x86 $x22)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x112)))))))
 (let (($x20 (and (and (and $x89 $x113) $x24) $x119)))
 (let (($x90 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x80 (=> $x63 $x90)))
 (let ((?x29 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x29 (_ bv1 32))))
 (let (($x8 (= $x63 $x78)))
 (let (($x10 (= ?x29 (_ bv0 32))))
 (let (($x21 (= $x58 $x10)))
 (let (($x60 (and $x21 $x38)))
 (let (($x87 (and $x60 $x8)))
 (let (($x77 (and $x87 $x80)))
 (let (($x120 (and $x77 $x20)))
 (let (($x75 (and $x120 $x42)))
 (let (($x110 (= $x75 true)))
 (let (($x53 (= $x110 true)))
 (let (($x59 (= $x5 true)))
 (let (($x71 (= $x59 true)))
 (let (($x84 (and $x71 $x53)))
 (let (($x106 (and $x63 $x84)))
 (let (($x45 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x70 (and $x45 $x106)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x108 (and $x67 $x70)))
 (let (($x114 (and $x25 $x108)))
 (let (($x17 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x41 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x41 (or false (or false (and true (or $x13 $x17)))))))
 (let (($x35 (=> (and $x5 $x41) (or false (or false (and true (or $x13 $x17)))))))
 (let (($x7 (and $x35 $x114)))
 (let (($x136 (=> $x7 $x135)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv2147483644 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv254 8)) (_ bv2 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)) (_ bv2424307716 32) (_ bv252 8)) (_ bv2424307717 32) (_ bv255 8)) (_ bv2424307718 32) (_ bv255 8)) (_ bv2424307719 32) (_ bv127 8)) (_ bv2147483644 32) (_ bv1 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2424307716 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2424307716 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2424307719 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80800004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x80)
                                #x80800006
                                #x00)
                         #x80000001
                         #x00)
                  #x80800004
                  #x00)))
  (store (store (store a!1 #x80000000 #x00) #x80800001 #x00) #x80800005 #x00)))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x80800000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x80800000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80800007)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80800000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80800004)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x73)))
 (let (($x77 (= input.spec-%var-opt-0.2 ?x80)))
 (let (($x29 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x29 $x77)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x38 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x38 (_ bv1 32))))
 (let (($x34 (= $x29 $x87)))
 (let (($x41 (= false false)))
 (let (($x25 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x78 (=> $x25 $x41)))
 (let (($x60 (= ?x38 (_ bv0 32))))
 (let (($x63 (= $x25 $x60)))
 (let (($x8 (and $x63 $x78)))
 (let (($x36 (and $x8 $x34)))
 (let (($x74 (and $x36 $x100)))
 (let (($x64 (= $x74 true)))
 (let (($x122 (= $x64 true)))
 (let (($x102 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (= true $x102)))
 (let (($x5 (not $x51)))
 (let (($x84 (=> $x5 $x53)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x119 (concat ?x105 (concat ?x92 ?x111)))))
 (let (($x120 (= input.dst.llvm-%opt ?x20)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x22)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x117 $x23)))
 (let (($x91 (and $x115 $x24)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x81 $x91)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x16)))))))
 (let (($x75 (and (and (and $x102 $x93) $x83) $x120)))
 (let (($x110 (and $x74 $x75)))
 (let (($x106 (and $x110 $x84)))
 (let (($x70 (= $x106 true)))
 (let (($x108 (= $x70 true)))
 (let (($x10 (= $x5 true)))
 (let (($x21 (= $x10 true)))
 (let (($x114 (and $x21 $x108)))
 (let (($x7 (and $x29 $x114)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x11 (and $x40 $x7)))
 (let (($x59 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x82 (and $x59 $x11)))
 (let (($x39 (and $x41 $x82)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x6 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x67 (=> $x6 (or false (or false (and true (or $x31 $x48)))))))
 (let (($x26 (=> (and $x5 $x6) (or false (or false (and true (or $x31 $x48)))))))
 (let (($x32 (and $x26 $x39)))
 (let (($x123 (=> $x32 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x54)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x73)))
 (let (($x77 (= input.spec-%var-opt-0.2 ?x80)))
 (let (($x29 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x29 $x77)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x38 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x38 (_ bv1 32))))
 (let (($x34 (= $x29 $x87)))
 (let (($x41 (= false false)))
 (let (($x25 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x78 (=> $x25 $x41)))
 (let (($x60 (= ?x38 (_ bv0 32))))
 (let (($x63 (= $x25 $x60)))
 (let (($x8 (and $x63 $x78)))
 (let (($x36 (and $x8 $x34)))
 (let (($x74 (and $x36 $x100)))
 (let (($x64 (= $x74 true)))
 (let (($x122 (= $x64 true)))
 (let (($x102 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (= true $x102)))
 (let (($x5 (not $x51)))
 (let (($x84 (=> $x5 $x53)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x119 (concat ?x105 (concat ?x92 ?x111)))))
 (let (($x120 (= input.dst.llvm-%opt ?x20)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x22)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x117 $x23)))
 (let (($x91 (and $x115 $x24)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x81 $x91)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x16)))))))
 (let (($x75 (and (and (and $x102 $x93) $x83) $x120)))
 (let (($x110 (and $x74 $x75)))
 (let (($x106 (and $x110 $x84)))
 (let (($x70 (= $x106 true)))
 (let (($x108 (= $x70 true)))
 (let (($x10 (= $x5 true)))
 (let (($x21 (= $x10 true)))
 (let (($x114 (and $x21 $x108)))
 (let (($x7 (and $x29 $x114)))
 (let (($x40 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x11 (and $x40 $x7)))
 (let (($x59 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x82 (and $x59 $x11)))
 (let (($x39 (and $x41 $x82)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x6 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x67 (=> $x6 (or false (or false (and true (or $x31 $x48)))))))
 (let (($x26 (=> (and $x5 $x6) (or false (or false (and true (or $x31 $x48)))))))
 (let (($x32 (and $x26 $x39)))
 (let (($x123 (=> $x32 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x68 (= false true)))
 (let (($x43 (= $x68 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x97)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x51)))
 (let (($x114 (=> $x5 $x108)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x120 (concat ?x99 (concat ?x107 ?x104)))))
 (let (($x110 (= input.dst.llvm-%opt ?x75)))
 (let ((?x91 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x91)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x23 $x22)))
 (let (($x42 (and $x24 $x83)))
 (let (($x88 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x88 $x42)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x86)))))))
 (let (($x106 (and (and (and $x97 $x95) $x118) $x110)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x62)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x80)))
 (let (($x74 (= input.spec-%var-opt-0.2 ?x100)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x89 (=> $x38 $x74)))
 (let ((?x78 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x78 (_ bv1 32))))
 (let (($x49 (= $x38 $x36)))
 (let (($x6 (= false false)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x87 (=> $x41 $x6)))
 (let (($x8 (= ?x78 (_ bv0 32))))
 (let (($x29 (= $x41 $x8)))
 (let (($x34 (and $x29 $x87)))
 (let (($x90 (and $x34 $x49)))
 (let (($x76 (and $x90 $x89)))
 (let (($x70 (and $x76 $x106)))
 (let (($x7 (and $x70 $x114)))
 (let (($x11 (= $x7 true)))
 (let (($x82 (= $x11 true)))
 (let (($x60 (= $x5 true)))
 (let (($x63 (= $x60 true)))
 (let (($x39 (and $x63 $x82)))
 (let (($x32 (and $x38 $x39)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x64 (and $x58 $x32)))
 (let (($x10 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x122 (and $x10 $x64)))
 (let (($x123 (and $x6 $x122)))
 (let (($x35 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x45 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x59 (=> $x45 (or false (or false (and true (or $x30 $x35)))))))
 (let (($x56 (=> (and $x5 $x45) (or false (or false (and true (or $x30 $x35)))))))
 (let (($x124 (and $x56 $x123)))
 (let (($x94 (=> $x124 $x43)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x68 (= false true)))
 (let (($x43 (= $x68 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x108 (= true $x97)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x5 (not $x51)))
 (let (($x114 (=> $x5 $x108)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x120 (concat ?x99 (concat ?x107 ?x104)))))
 (let (($x110 (= input.dst.llvm-%opt ?x75)))
 (let ((?x91 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x91)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x23 $x22)))
 (let (($x42 (and $x24 $x83)))
 (let (($x88 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x88 $x42)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x86)))))))
 (let (($x106 (and (and (and $x97 $x95) $x118) $x110)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x62)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x80)))
 (let (($x74 (= input.spec-%var-opt-0.2 ?x100)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x89 (=> $x38 $x74)))
 (let ((?x78 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x78 (_ bv1 32))))
 (let (($x49 (= $x38 $x36)))
 (let (($x6 (= false false)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x87 (=> $x41 $x6)))
 (let (($x8 (= ?x78 (_ bv0 32))))
 (let (($x29 (= $x41 $x8)))
 (let (($x34 (and $x29 $x87)))
 (let (($x90 (and $x34 $x49)))
 (let (($x76 (and $x90 $x89)))
 (let (($x70 (and $x76 $x106)))
 (let (($x7 (and $x70 $x114)))
 (let (($x11 (= $x7 true)))
 (let (($x82 (= $x11 true)))
 (let (($x60 (= $x5 true)))
 (let (($x63 (= $x60 true)))
 (let (($x39 (and $x63 $x82)))
 (let (($x32 (and $x38 $x39)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x64 (and $x58 $x32)))
 (let (($x10 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x122 (and $x10 $x64)))
 (let (($x123 (and $x6 $x122)))
 (let (($x35 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x45 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x59 (=> $x45 (or false (or false (and true (or $x30 $x35)))))))
 (let (($x56 (=> (and $x5 $x45) (or false (or false (and true (or $x30 $x35)))))))
 (let (($x124 (and $x56 $x123)))
 (let (($x94 (=> $x124 $x43)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x203b68e5
                     #x20)
              #x203b68e7
              #x20)
       #x203b68e6
       #x3b))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3757703164 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3766620164 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3766620164 32) (_ bv252 8)) (_ bv3766620165 32) (_ bv255 8)) (_ bv3766620166 32) (_ bv249 8)) (_ bv3766620167 32) (_ bv223 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3766620164 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3766620167 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x119 (= true false)))
 (let (($x55 (= $x119 true)))
 (let ((?x82 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x82)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x108 $x7)))
 (let (($x32 (and $x11 $x39)))
 (let (($x120 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x120 $x32)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x104)))))))
 (let (($x122 (and $x70 $x64)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let ((?x31 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x31)))
 (let (($x83 (= ?x45 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x42 (= $x83 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x115 (= (_ bv0 2) ?x23)))
 (let (($x22 (= $x115 true)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x47)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x40)))
 (let (($x121 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x98 (=> $x52 $x121)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x97 (_ bv1 32))))
 (let (($x86 (= $x52 $x116)))
 (let (($x30 (= false false)))
 (let (($x102 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x117 (=> $x102 $x30)))
 (let (($x16 (= ?x97 (_ bv0 32))))
 (let (($x113 (= $x102 $x16)))
 (let (($x85 (and $x113 $x117)))
 (let (($x93 (and $x85 $x86)))
 (let (($x81 (and $x93 $x98)))
 (let (($x95 (= $x81 true)))
 (let (($x53 (= $x95 true)))
 (let (($x65 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x100 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x74 (=> $x100 (or false (or false (and true (or $x73 $x65)))))))
 (let (($x49 (= $x74 true)))
 (let (($x90 (= $x49 true)))
 (let ((?x29 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x6 ((_ zero_extend 31) ?x29)))
 (let (($x87 (= (_ bv1 32) ?x6)))
 (let (($x34 (= $x87 true)))
 (let (($x63 (= ?x45 ?x60)))
 (let (($x25 (= $x63 true)))
 (let (($x38 (and $x25 $x34)))
 (let (($x89 (and $x38 $x90)))
 (let (($x44 (and $x89 $x53)))
 (let (($x24 (and $x44 $x22)))
 (let (($x118 (and $x24 $x42)))
 (let (($x68 (and $x118 $x124)))
 (let (($x43 (and $x52 $x68)))
 (let (($x57 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x94 (and $x57 $x43)))
 (let (($x17 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x69 (and $x17 $x94)))
 (let (($x101 (and $x30 $x69)))
 (let (($x27 (=> $x101 $x55)))
 (not $x27))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x119 (= true false)))
 (let (($x55 (= $x119 true)))
 (let ((?x82 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x82)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x108 $x7)))
 (let (($x32 (and $x11 $x39)))
 (let (($x120 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x120 $x32)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x104)))))))
 (let (($x122 (and $x70 $x64)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let ((?x31 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x31)))
 (let (($x83 (= ?x45 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x42 (= $x83 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x115 (= (_ bv0 2) ?x23)))
 (let (($x22 (= $x115 true)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x47)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x40)))
 (let (($x121 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x52 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x98 (=> $x52 $x121)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x97 (_ bv1 32))))
 (let (($x86 (= $x52 $x116)))
 (let (($x30 (= false false)))
 (let (($x102 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x117 (=> $x102 $x30)))
 (let (($x16 (= ?x97 (_ bv0 32))))
 (let (($x113 (= $x102 $x16)))
 (let (($x85 (and $x113 $x117)))
 (let (($x93 (and $x85 $x86)))
 (let (($x81 (and $x93 $x98)))
 (let (($x95 (= $x81 true)))
 (let (($x53 (= $x95 true)))
 (let (($x65 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x100 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x74 (=> $x100 (or false (or false (and true (or $x73 $x65)))))))
 (let (($x49 (= $x74 true)))
 (let (($x90 (= $x49 true)))
 (let ((?x29 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x6 ((_ zero_extend 31) ?x29)))
 (let (($x87 (= (_ bv1 32) ?x6)))
 (let (($x34 (= $x87 true)))
 (let (($x63 (= ?x45 ?x60)))
 (let (($x25 (= $x63 true)))
 (let (($x38 (and $x25 $x34)))
 (let (($x89 (and $x38 $x90)))
 (let (($x44 (and $x89 $x53)))
 (let (($x24 (and $x44 $x22)))
 (let (($x118 (and $x24 $x42)))
 (let (($x68 (and $x118 $x124)))
 (let (($x43 (and $x52 $x68)))
 (let (($x57 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x94 (and $x57 $x43)))
 (let (($x17 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x69 (and $x17 $x94)))
 (let (($x101 (and $x30 $x69)))
 (let (($x27 (=> $x101 $x55)))
 (not $x27))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-%opt #b11010000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x126 (= input.spec-%var-val-1.L2%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x85)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x93)))
 (let ((?x43 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x43)))
 (let (($x27 (= ?x94 ?x98)))
 (let (($x129 (= $x27 true)))
 (let (($x101 (= ?x94 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x119 (= $x101 true)))
 (let ((?x11 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x11)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x120 $x114)))
 (let (($x39 (and $x7 $x82)))
 (let (($x111 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x111 $x39)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x104)))))))
 (let (($x64 (and $x20 $x32)))
 (let (($x122 (= $x64 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x24 (= (_ bv0 2) ?x22)))
 (let (($x91 (= $x24 true)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x58 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x95 (=> $x58 $x81)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x49 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x49 (_ bv1 32))))
 (let (($x112 (= $x58 $x102)))
 (let (($x31 (= false false)))
 (let (($x80 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x12 (=> $x80 $x31)))
 (let (($x90 (= ?x49 (_ bv0 32))))
 (let (($x89 (= $x80 $x90)))
 (let (($x76 (and $x89 $x12)))
 (let (($x97 (and $x76 $x112)))
 (let (($x53 (and $x97 $x95)))
 (let (($x44 (= $x53 true)))
 (let (($x88 (= $x44 true)))
 (let (($x77 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x79 (=> $x65 (or false (or false (and true (or $x37 $x77)))))))
 (let (($x40 (= $x79 true)))
 (let (($x60 (= $x40 true)))
 (let ((?x78 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x13 ((_ zero_extend 31) ?x78)))
 (let (($x56 (= (_ bv1 32) ?x13)))
 (let (($x48 (= $x56 true)))
 (let (($x25 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x63 (= $x25 true)))
 (let (($x26 (= $x63 true)))
 (let (($x41 (and $x26 $x48)))
 (let (($x18 (and $x41 $x60)))
 (let (($x23 (and $x18 $x88)))
 (let (($x83 (and $x23 $x91)))
 (let (($x124 (and $x83 $x123)))
 (let (($x55 (and $x124 $x119)))
 (let (($x14 (and $x55 $x129)))
 (let (($x84 (and $x58 $x14)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x5 (and $x15 $x84)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x19 (and $x8 $x5)))
 (let (($x103 (and $x31 $x19)))
 (let (($x128 (=> $x103 $x125)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x126 (= input.spec-%var-val-1.L2%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x85)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x93)))
 (let ((?x43 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x43)))
 (let (($x27 (= ?x94 ?x98)))
 (let (($x129 (= $x27 true)))
 (let (($x101 (= ?x94 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x119 (= $x101 true)))
 (let ((?x11 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x11)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x120 $x114)))
 (let (($x39 (and $x7 $x82)))
 (let (($x111 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x111 $x39)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x104)))))))
 (let (($x64 (and $x20 $x32)))
 (let (($x122 (= $x64 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x24 (= (_ bv0 2) ?x22)))
 (let (($x91 (= $x24 true)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x58 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x95 (=> $x58 $x81)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x49 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x49 (_ bv1 32))))
 (let (($x112 (= $x58 $x102)))
 (let (($x31 (= false false)))
 (let (($x80 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x12 (=> $x80 $x31)))
 (let (($x90 (= ?x49 (_ bv0 32))))
 (let (($x89 (= $x80 $x90)))
 (let (($x76 (and $x89 $x12)))
 (let (($x97 (and $x76 $x112)))
 (let (($x53 (and $x97 $x95)))
 (let (($x44 (= $x53 true)))
 (let (($x88 (= $x44 true)))
 (let (($x77 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x79 (=> $x65 (or false (or false (and true (or $x37 $x77)))))))
 (let (($x40 (= $x79 true)))
 (let (($x60 (= $x40 true)))
 (let ((?x78 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x13 ((_ zero_extend 31) ?x78)))
 (let (($x56 (= (_ bv1 32) ?x13)))
 (let (($x48 (= $x56 true)))
 (let (($x25 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x63 (= $x25 true)))
 (let (($x26 (= $x63 true)))
 (let (($x41 (and $x26 $x48)))
 (let (($x18 (and $x41 $x60)))
 (let (($x23 (and $x18 $x88)))
 (let (($x83 (and $x23 $x91)))
 (let (($x124 (and $x83 $x123)))
 (let (($x55 (and $x124 $x119)))
 (let (($x14 (and $x55 $x129)))
 (let (($x84 (and $x58 $x14)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x5 (and $x15 $x84)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x19 (and $x8 $x5)))
 (let (($x103 (and $x31 $x19)))
 (let (($x128 (=> $x103 $x125)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x101 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x101)))
 (let (($x128 (= ?x119 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (= $x128 true)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x117)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x98)))
 (let (($x84 (= ?x119 ?x95)))
 (let (($x5 (= $x84 true)))
 (let (($x27 (= ?x119 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x129 (= $x27 true)))
 (let ((?x32 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x32)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x7 $x82)))
 (let (($x122 (and $x39 $x64)))
 (let (($x107 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x107 $x122)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x110)))))))
 (let (($x124 (and $x114 $x123)))
 (let (($x68 (= $x124 true)))
 (let (($x43 (= $x68 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x83 (= (_ bv0 2) ?x91)))
 (let (($x99 (= $x83 true)))
 (let (($x53 (= input.spec-%var-opt-0.2 ?x95)))
 (let (($x46 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x44 (=> $x46 $x53)))
 (let (($x89 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x12 (ite $x89 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x12 (_ bv1 32))))
 (let (($x16 (= $x46 $x97)))
 (let (($x31 (= false false)))
 (let (($x90 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x102 (=> $x90 $x31)))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (let (($x58 (= $x90 $x76)))
 (let (($x112 (and $x58 $x102)))
 (let (($x121 (and $x112 $x16)))
 (let (($x88 (and $x121 $x44)))
 (let (($x23 (= $x88 true)))
 (let (($x115 (= $x23 true)))
 (let (($x79 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x62 (or false (or false (and true (or $x54 $x79)))))))
 (let (($x38 (= $x80 true)))
 (let (($x36 (= $x38 true)))
 (let ((?x56 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x48 ((_ zero_extend 31) ?x56)))
 (let (($x41 (= (_ bv1 32) ?x48)))
 (let (($x35 (= $x41 true)))
 (let (($x45 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x17 (= $x45 true)))
 (let (($x21 (= $x17 true)))
 (let (($x29 (and $x21 $x35)))
 (let (($x74 (and $x29 $x36)))
 (let (($x22 (and $x74 $x115)))
 (let (($x106 (and $x22 $x99)))
 (let (($x94 (and $x106 $x43)))
 (let (($x14 (and $x94 $x129)))
 (let (($x19 (and $x14 $x5)))
 (let (($x103 (and $x46 $x19)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x126 (and $x15 $x103)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x127 (and $x8 $x126)))
 (let (($x125 (and $x31 $x127)))
 (let (($x71 (=> $x125 $x9)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x101 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x101)))
 (let (($x128 (= ?x119 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (= $x128 true)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x117)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x98)))
 (let (($x84 (= ?x119 ?x95)))
 (let (($x5 (= $x84 true)))
 (let (($x27 (= ?x119 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x129 (= $x27 true)))
 (let ((?x32 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x32)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x7 $x82)))
 (let (($x122 (and $x39 $x64)))
 (let (($x107 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x107 $x122)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x110)))))))
 (let (($x124 (and $x114 $x123)))
 (let (($x68 (= $x124 true)))
 (let (($x43 (= $x68 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x83 (= (_ bv0 2) ?x91)))
 (let (($x99 (= $x83 true)))
 (let (($x53 (= input.spec-%var-opt-0.2 ?x95)))
 (let (($x46 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x44 (=> $x46 $x53)))
 (let (($x89 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x12 (ite $x89 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x12 (_ bv1 32))))
 (let (($x16 (= $x46 $x97)))
 (let (($x31 (= false false)))
 (let (($x90 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x102 (=> $x90 $x31)))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (let (($x58 (= $x90 $x76)))
 (let (($x112 (and $x58 $x102)))
 (let (($x121 (and $x112 $x16)))
 (let (($x88 (and $x121 $x44)))
 (let (($x23 (= $x88 true)))
 (let (($x115 (= $x23 true)))
 (let (($x79 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x62 (or false (or false (and true (or $x54 $x79)))))))
 (let (($x38 (= $x80 true)))
 (let (($x36 (= $x38 true)))
 (let ((?x56 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x48 ((_ zero_extend 31) ?x56)))
 (let (($x41 (= (_ bv1 32) ?x48)))
 (let (($x35 (= $x41 true)))
 (let (($x45 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x17 (= $x45 true)))
 (let (($x21 (= $x17 true)))
 (let (($x29 (and $x21 $x35)))
 (let (($x74 (and $x29 $x36)))
 (let (($x22 (and $x74 $x115)))
 (let (($x106 (and $x22 $x99)))
 (let (($x94 (and $x106 $x43)))
 (let (($x14 (and $x94 $x129)))
 (let (($x19 (and $x14 $x5)))
 (let (($x103 (and $x46 $x19)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x126 (and $x15 $x103)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x127 (and $x8 $x126)))
 (let (($x125 (and $x31 $x127)))
 (let (($x71 (=> $x125 $x9)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x87 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x33))))
 (let (($x143 (= input.spec-%var-opt-0.2 ?x142)))
 (let (($x26 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x144 (=> $x26 $x143)))
 (let (($x57 (= (_ bv0 32) ?x87)))
 (let ((?x130 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x130 (_ bv1 32))))
 (let (($x135 (= $x26 $x134)))
 (let (($x28 (= false false)))
 (let (($x98 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x23 (=> $x98 $x28)))
 (let (($x131 (= ?x130 (_ bv0 32))))
 (let (($x132 (= $x98 $x131)))
 (let (($x133 (and $x132 $x23)))
 (let (($x136 (and $x133 $x135)))
 (let (($x145 (and $x136 $x144)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let ((?x17 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x17)))
 (let (($x103 (= ?x21 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x126 (= $x103 true)))
 (let ((?x101 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x101)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x68 $x94)))
 (let (($x55 (and $x69 $x119)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x114 $x55)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x82)))))))
 (let (($x129 (and $x124 $x27)))
 (let (($x14 (= $x129 true)))
 (let (($x84 (= $x14 true)))
 (let ((?x75 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x110 (= (_ bv0 2) ?x75)))
 (let (($x20 (= $x110 true)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x35)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x83 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x99 (=> $x26 $x83)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x53 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x53 (_ bv1 32))))
 (let (($x24 (= $x26 $x22)))
 (let (($x44 (= ?x53 (_ bv0 32))))
 (let (($x88 (= $x98 $x44)))
 (let (($x115 (and $x88 $x23)))
 (let (($x91 (and $x115 $x24)))
 (let (($x106 (and $x91 $x99)))
 (let (($x104 (= $x106 true)))
 (let (($x92 (= $x104 true)))
 (let (($x52 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x86 (or false (or false (and true (or $x121 $x52)))))))
 (let (($x31 (= $x30 true)))
 (let (($x102 (= $x31 true)))
 (let ((?x47 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x90 ((_ zero_extend 31) ?x47)))
 (let (($x89 (= (_ bv1 32) ?x90)))
 (let (($x12 (= $x89 true)))
 (let (($x60 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= $x60 true)))
 (let (($x61 (= $x18 true)))
 (let (($x54 (= ?x21 ?x73)))
 (let (($x100 (= $x54 true)))
 (let (($x80 (and $x100 $x61)))
 (let (($x76 (and $x80 $x12)))
 (let (($x116 (and $x76 $x102)))
 (let (($x108 (and $x116 $x92)))
 (let (($x118 (and $x108 $x20)))
 (let (($x5 (and $x118 $x84)))
 (let (($x127 (and $x5 $x126)))
 (let (($x125 (and $x26 $x127)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x128 (and $x15 $x125)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x9 (and $x8 $x128)))
 (let (($x71 (and $x28 $x9)))
 (let (($x148 (=> $x71 $x147)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x87 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x33))))
 (let (($x143 (= input.spec-%var-opt-0.2 ?x142)))
 (let (($x26 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x144 (=> $x26 $x143)))
 (let (($x57 (= (_ bv0 32) ?x87)))
 (let ((?x130 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x130 (_ bv1 32))))
 (let (($x135 (= $x26 $x134)))
 (let (($x28 (= false false)))
 (let (($x98 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x23 (=> $x98 $x28)))
 (let (($x131 (= ?x130 (_ bv0 32))))
 (let (($x132 (= $x98 $x131)))
 (let (($x133 (and $x132 $x23)))
 (let (($x136 (and $x133 $x135)))
 (let (($x145 (and $x136 $x144)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let ((?x17 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x17)))
 (let (($x103 (= ?x21 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x126 (= $x103 true)))
 (let ((?x101 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x101)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x68 $x94)))
 (let (($x55 (and $x69 $x119)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x114 $x55)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x82)))))))
 (let (($x129 (and $x124 $x27)))
 (let (($x14 (= $x129 true)))
 (let (($x84 (= $x14 true)))
 (let ((?x75 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x110 (= (_ bv0 2) ?x75)))
 (let (($x20 (= $x110 true)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x35)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x34)))
 (let (($x83 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x99 (=> $x26 $x83)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x53 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x53 (_ bv1 32))))
 (let (($x24 (= $x26 $x22)))
 (let (($x44 (= ?x53 (_ bv0 32))))
 (let (($x88 (= $x98 $x44)))
 (let (($x115 (and $x88 $x23)))
 (let (($x91 (and $x115 $x24)))
 (let (($x106 (and $x91 $x99)))
 (let (($x104 (= $x106 true)))
 (let (($x92 (= $x104 true)))
 (let (($x52 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x86 (or false (or false (and true (or $x121 $x52)))))))
 (let (($x31 (= $x30 true)))
 (let (($x102 (= $x31 true)))
 (let ((?x47 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x90 ((_ zero_extend 31) ?x47)))
 (let (($x89 (= (_ bv1 32) ?x90)))
 (let (($x12 (= $x89 true)))
 (let (($x60 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= $x60 true)))
 (let (($x61 (= $x18 true)))
 (let (($x54 (= ?x21 ?x73)))
 (let (($x100 (= $x54 true)))
 (let (($x80 (and $x100 $x61)))
 (let (($x76 (and $x80 $x12)))
 (let (($x116 (and $x76 $x102)))
 (let (($x108 (and $x116 $x92)))
 (let (($x118 (and $x108 $x20)))
 (let (($x5 (and $x118 $x84)))
 (let (($x127 (and $x5 $x126)))
 (let (($x125 (and $x26 $x127)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x128 (and $x15 $x125)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x9 (and $x8 $x128)))
 (let (($x71 (and $x28 $x9)))
 (let (($x148 (=> $x71 $x147)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= nextpc_const.1 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= func.calla4bcb626de6152719ca44f8b649b9c4a.reg @fun_25)
(= input.dst.llvm-mem.alloc @fun_23)
(= memzero_memvar @fun_22)
(= input.dst.llvm-mem @fun_20)
(function @fun_25
 (type
  (FunType7 (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32)))
 (= (@fun_25 #b00000000 #b00000000 @fun_22 @fun_23 #b00000000000000000000000000000000 #b00000000000000000000001111101000 #b00000000000000000000000000000000)
    #b00000000000000000000000000000000)
 (default #b10000000000000000000000000000000))
(function @fun_23
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
(function @fun_22
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000010))
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_20 #b10000000000000000000000000000000) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_20 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_20 #b00000000000000000000000000000011) #b00000000)
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((BOUND_VARIABLE_4879 (_ BitVec 8)) (BOUND_VARIABLE_4880 (_ BitVec 8)) (BOUND_VARIABLE_4881 (Array (_ BitVec 32) (_ BitVec 8))) (BOUND_VARIABLE_4882 (Array (_ BitVec 32) (_ BitVec 8))) (BOUND_VARIABLE_4883 (_ BitVec 32)) (BOUND_VARIABLE_4884 (_ BitVec 32)) (BOUND_VARIABLE_4885 (_ BitVec 32))) (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun nextpc_const.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)))
(define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv1048576 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x43) #x80000004 #x41))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x43434341)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x43434341)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x43434341)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x43434341)
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x00)
              (= x!1 #x00)
              (= x!2 ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
              (= x!3 ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x43434341))
      #x80000005
      #x00000000))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x64)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x114)))
 (let (($x141 (= input.spec-%tmpvar-6.E0%0%d.2 ?x43)))
 (let (($x134 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x66 (=> $x134 $x141)))
 (let (($x96 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x75 (_ bv1 32))))
 (let (($x135 (= $x134 $x107)))
 (let (($x28 (= false false)))
 (let (($x130 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x132 (=> $x130 $x28)))
 (let (($x110 (= ?x75 (_ bv0 32))))
 (let (($x131 (= $x130 $x110)))
 (let (($x133 (and $x131 $x132)))
 (let (($x136 (and $x133 $x135)))
 (let (($x138 (and $x136 $x66)))
 (let (($x72 (= $x138 true)))
 (let (($x109 (= $x72 true)))
 (let ((?x63 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x63)))
 (let (($x126 (= ?x48 ?x43)))
 (let (($x127 (= $x126 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x84 (= (_ bv0 2) ?x14)))
 (let (($x5 (= $x84 true)))
 (let (($x94 (= input.spec-%var-opt-0.2 ?x43)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x69 (=> $x21 $x94)))
 (let (($x123 (= $x21 $x107)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x118 (=> $x108 $x28)))
 (let (($x20 (= $x108 $x110)))
 (let (($x105 (and $x20 $x118)))
 (let (($x7 (and $x105 $x123)))
 (let (($x101 (and $x7 $x69)))
 (let (($x119 (= $x101 true)))
 (let (($x55 (= $x119 true)))
 (let (($x22 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x106 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x104 (=> $x106 (or false (or false (and true (or $x26 $x22)))))))
 (let (($x53 (= $x104 true)))
 (let (($x44 (= $x53 true)))
 (let (($x116 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (= $x116 true)))
 (let (($x117 (= $x25 true)))
 (let ((?x97 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x97)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x76 $x46)))
 (let (($x16 (and $x86 $x121)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x100 $x16)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x38)))))))
 (let (($x81 (and $x12 $x52)))
 (let (($x113 (= $x81 true)))
 (let (($x85 (= $x113 true)))
 (let (($x41 (= ?x48 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x56 (= $x41 true)))
 (let ((?x77 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x50 ((_ zero_extend 31) ?x77)))
 (let (($x29 (= (_ bv1 32) ?x50)))
 (let (($x65 (= $x29 true)))
 (let (($x35 (and $x65 $x56)))
 (let (($x93 (and $x35 $x85)))
 (let (($x98 (and $x93 $x117)))
 (let (($x92 (and $x98 $x44)))
 (let (($x27 (and $x92 $x55)))
 (let (($x103 (and $x27 $x5)))
 (let (($x125 (and $x103 $x127)))
 (let (($x128 (and $x21 $x125)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (and $x15 $x128)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x71 (and $x8 $x9)))
 (let (($x87 (and $x28 $x71)))
 (let (($x137 (=> $x87 $x109)))
 (not $x137))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x64)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x114)))
 (let (($x141 (= input.spec-%tmpvar-6.E0%0%d.2 ?x43)))
 (let (($x134 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x66 (=> $x134 $x141)))
 (let (($x96 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x75 (_ bv1 32))))
 (let (($x135 (= $x134 $x107)))
 (let (($x28 (= false false)))
 (let (($x130 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x132 (=> $x130 $x28)))
 (let (($x110 (= ?x75 (_ bv0 32))))
 (let (($x131 (= $x130 $x110)))
 (let (($x133 (and $x131 $x132)))
 (let (($x136 (and $x133 $x135)))
 (let (($x138 (and $x136 $x66)))
 (let (($x72 (= $x138 true)))
 (let (($x109 (= $x72 true)))
 (let ((?x63 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x63)))
 (let (($x126 (= ?x48 ?x43)))
 (let (($x127 (= $x126 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x84 (= (_ bv0 2) ?x14)))
 (let (($x5 (= $x84 true)))
 (let (($x94 (= input.spec-%var-opt-0.2 ?x43)))
 (let (($x21 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x69 (=> $x21 $x94)))
 (let (($x123 (= $x21 $x107)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x118 (=> $x108 $x28)))
 (let (($x20 (= $x108 $x110)))
 (let (($x105 (and $x20 $x118)))
 (let (($x7 (and $x105 $x123)))
 (let (($x101 (and $x7 $x69)))
 (let (($x119 (= $x101 true)))
 (let (($x55 (= $x119 true)))
 (let (($x22 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x106 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x104 (=> $x106 (or false (or false (and true (or $x26 $x22)))))))
 (let (($x53 (= $x104 true)))
 (let (($x44 (= $x53 true)))
 (let (($x116 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x25 (= $x116 true)))
 (let (($x117 (= $x25 true)))
 (let ((?x97 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x97)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x76 $x46)))
 (let (($x16 (and $x86 $x121)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x100 $x16)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x38)))))))
 (let (($x81 (and $x12 $x52)))
 (let (($x113 (= $x81 true)))
 (let (($x85 (= $x113 true)))
 (let (($x41 (= ?x48 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x56 (= $x41 true)))
 (let ((?x77 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x50 ((_ zero_extend 31) ?x77)))
 (let (($x29 (= (_ bv1 32) ?x50)))
 (let (($x65 (= $x29 true)))
 (let (($x35 (and $x65 $x56)))
 (let (($x93 (and $x35 $x85)))
 (let (($x98 (and $x93 $x117)))
 (let (($x92 (and $x98 $x44)))
 (let (($x27 (and $x92 $x55)))
 (let (($x103 (and $x27 $x5)))
 (let (($x125 (and $x103 $x127)))
 (let (($x128 (and $x21 $x125)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x9 (and $x15 $x128)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x71 (and $x8 $x9)))
 (let (($x87 (and $x28 $x71)))
 (let (($x137 (=> $x87 $x109)))
 (not $x137))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c1fe1f)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c1fe1c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv255 8)) (_ bv1073741825 32) (_ bv255 8)) (_ bv1073741826 32) (_ bv255 8)) (_ bv1073741827 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x130 (= false true)))
 (let (($x131 (= $x130 true)))
 (let ((?x14 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x14)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x119 $x27)))
 (let (($x5 (and $x129 $x84)))
 (let (($x122 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x122 $x5)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x82)))))))
 (let (($x126 (and $x101 $x103)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x77 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x77)))
 (let (($x107 (= ?x50 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x123 (= $x107 true)))
 (let ((?x20 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x118 (= (_ bv0 2) ?x20)))
 (let (($x105 (= $x118 true)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x41)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x79)))
 (let (($x44 (= input.spec-%var-opt-0.2 ?x61)))
 (let (($x13 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x92 (=> $x13 $x44)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x26 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x26 (_ bv1 32))))
 (let (($x104 (= $x13 $x99)))
 (let (($x28 (= false false)))
 (let (($x106 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x106 $x28)))
 (let (($x22 (= ?x26 (_ bv0 32))))
 (let (($x24 (= $x106 $x22)))
 (let (($x83 (and $x24 $x91)))
 (let (($x53 (and $x83 $x104)))
 (let (($x45 (and $x53 $x92)))
 (let (($x108 (= $x45 true)))
 (let (($x96 (= $x108 true)))
 (let (($x31 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x95 (=> $x98 (or false (or false (and true (or $x30 $x31)))))))
 (let (($x16 (= $x95 true)))
 (let (($x52 (= $x16 true)))
 (let ((?x58 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x112 ((_ zero_extend 31) ?x58)))
 (let (($x46 (= (_ bv1 32) ?x112)))
 (let (($x86 (= $x46 true)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (= $x74 true)))
 (let (($x90 (= $x47 true)))
 (let (($x80 (= ?x50 ?x61)))
 (let (($x18 (= $x80 true)))
 (let (($x12 (and $x18 $x90)))
 (let (($x97 (and $x12 $x86)))
 (let (($x88 (and $x97 $x52)))
 (let (($x75 (and $x88 $x96)))
 (let (($x21 (and $x75 $x105)))
 (let (($x7 (and $x21 $x123)))
 (let (($x128 (and $x7 $x125)))
 (let (($x9 (and $x13 $x128)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x71 (and $x15 $x9)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x87 (and $x8 $x71)))
 (let (($x57 (and $x28 $x87)))
 (let (($x132 (=> $x57 $x131)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x130 (= false true)))
 (let (($x131 (= $x130 true)))
 (let ((?x14 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x14)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x119 $x27)))
 (let (($x5 (and $x129 $x84)))
 (let (($x122 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x122 $x5)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x82)))))))
 (let (($x126 (and $x101 $x103)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x77 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x77)))
 (let (($x107 (= ?x50 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x123 (= $x107 true)))
 (let ((?x20 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x118 (= (_ bv0 2) ?x20)))
 (let (($x105 (= $x118 true)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x41)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x79)))
 (let (($x44 (= input.spec-%var-opt-0.2 ?x61)))
 (let (($x13 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x92 (=> $x13 $x44)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x26 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x26 (_ bv1 32))))
 (let (($x104 (= $x13 $x99)))
 (let (($x28 (= false false)))
 (let (($x106 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x106 $x28)))
 (let (($x22 (= ?x26 (_ bv0 32))))
 (let (($x24 (= $x106 $x22)))
 (let (($x83 (and $x24 $x91)))
 (let (($x53 (and $x83 $x104)))
 (let (($x45 (and $x53 $x92)))
 (let (($x108 (= $x45 true)))
 (let (($x96 (= $x108 true)))
 (let (($x31 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x95 (=> $x98 (or false (or false (and true (or $x30 $x31)))))))
 (let (($x16 (= $x95 true)))
 (let (($x52 (= $x16 true)))
 (let ((?x58 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x112 ((_ zero_extend 31) ?x58)))
 (let (($x46 (= (_ bv1 32) ?x112)))
 (let (($x86 (= $x46 true)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (= $x74 true)))
 (let (($x90 (= $x47 true)))
 (let (($x80 (= ?x50 ?x61)))
 (let (($x18 (= $x80 true)))
 (let (($x12 (and $x18 $x90)))
 (let (($x97 (and $x12 $x86)))
 (let (($x88 (and $x97 $x52)))
 (let (($x75 (and $x88 $x96)))
 (let (($x21 (and $x75 $x105)))
 (let (($x7 (and $x21 $x123)))
 (let (($x128 (and $x7 $x125)))
 (let (($x9 (and $x13 $x128)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x71 (and $x15 $x9)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x87 (and $x8 $x71)))
 (let (($x57 (and $x28 $x87)))
 (let (($x132 (=> $x57 $x131)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x71 (= true false)))
 (let (($x87 (= $x71 true)))
 (let ((?x55 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x55)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x101 $x122)))
 (let (($x129 (and $x119 $x27)))
 (let (($x123 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x123 $x129)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x39)))))))
 (let (($x84 (and $x94 $x14)))
 (let (($x5 (= $x84 true)))
 (let (($x103 (= $x5 true)))
 (let ((?x110 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x20 (= (_ bv0 2) ?x110)))
 (let (($x118 (= $x20 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x13)))
 (let (($x53 (= input.spec-%var-opt-0.2 ?x104)))
 (let (($x59 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x44 (=> $x59 $x53)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x90 (_ bv1 32))))
 (let (($x112 (= $x59 $x58)))
 (let (($x8 (= false false)))
 (let (($x74 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x100 (=> $x74 $x8)))
 (let (($x12 (= ?x90 (_ bv0 32))))
 (let (($x54 (= $x74 $x12)))
 (let (($x76 (and $x54 $x100)))
 (let (($x46 (and $x76 $x112)))
 (let (($x92 (and $x46 $x44)))
 (let (($x45 (= $x92 true)))
 (let (($x108 (= $x45 true)))
 (let ((?x17 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x17)))
 (let (($x106 (= ?x23 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (= $x106 true)))
 (let ((?x121 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x121) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x85 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x63 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x63) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x85) ?x113))))
 (let (($x116 (= input.spec-%var-opt-0.2 ?x102)))
 (let (($x25 (=> $x59 $x116)))
 (let (($x117 (and $x46 $x25)))
 (let (($x95 (= $x117 true)))
 (let (($x16 (= $x95 true)))
 (let (($x37 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x18 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x38 (=> $x18 (or false (or false (and true (or $x48 $x37)))))))
 (let (($x50 (= $x38 true)))
 (let (($x65 (= $x50 true)))
 (let (($x52 (and $x65 $x16)))
 (let (($x26 (and $x52 $x115)))
 (let (($x96 (and $x26 $x108)))
 (let (($x105 (and $x96 $x118)))
 (let (($x126 (and $x105 $x103)))
 (let (($x127 (and $x59 $x126)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x125 (and $x15 $x127)))
 (let (($x62 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x128 (and $x62 $x125)))
 (let (($x9 (and $x8 $x128)))
 (let (($x57 (=> $x9 $x87)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x71 (= true false)))
 (let (($x87 (= $x71 true)))
 (let ((?x55 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x55)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x101 $x122)))
 (let (($x129 (and $x119 $x27)))
 (let (($x123 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x123 $x129)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x39)))))))
 (let (($x84 (and $x94 $x14)))
 (let (($x5 (= $x84 true)))
 (let (($x103 (= $x5 true)))
 (let ((?x110 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x20 (= (_ bv0 2) ?x110)))
 (let (($x118 (= $x20 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x13)))
 (let (($x53 (= input.spec-%var-opt-0.2 ?x104)))
 (let (($x59 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x44 (=> $x59 $x53)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x90 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x90 (_ bv1 32))))
 (let (($x112 (= $x59 $x58)))
 (let (($x8 (= false false)))
 (let (($x74 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x100 (=> $x74 $x8)))
 (let (($x12 (= ?x90 (_ bv0 32))))
 (let (($x54 (= $x74 $x12)))
 (let (($x76 (and $x54 $x100)))
 (let (($x46 (and $x76 $x112)))
 (let (($x92 (and $x46 $x44)))
 (let (($x45 (= $x92 true)))
 (let (($x108 (= $x45 true)))
 (let ((?x17 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x17)))
 (let (($x106 (= ?x23 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x115 (= $x106 true)))
 (let ((?x121 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x121) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x85 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x63 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x63) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x85) ?x113))))
 (let (($x116 (= input.spec-%var-opt-0.2 ?x102)))
 (let (($x25 (=> $x59 $x116)))
 (let (($x117 (and $x46 $x25)))
 (let (($x95 (= $x117 true)))
 (let (($x16 (= $x95 true)))
 (let (($x37 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x18 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x38 (=> $x18 (or false (or false (and true (or $x48 $x37)))))))
 (let (($x50 (= $x38 true)))
 (let (($x65 (= $x50 true)))
 (let (($x52 (and $x65 $x16)))
 (let (($x26 (and $x52 $x115)))
 (let (($x96 (and $x26 $x108)))
 (let (($x105 (and $x96 $x118)))
 (let (($x126 (and $x105 $x103)))
 (let (($x127 (and $x59 $x126)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x125 (and $x15 $x127)))
 (let (($x62 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x128 (and $x62 $x125)))
 (let (($x9 (and $x8 $x128)))
 (let (($x57 (=> $x9 $x87)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.llvm-%opt #b11010000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L2%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(= input.dst.llvm-mem.Lif.then%2%fcallEnd @fun_12)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b11010000000000000000000000000000) #b00000000)
 (= (@fun_11 #b11010000000000000000000000000001) #b00000000)
 (= (@fun_11 #b11010000000000000000000000000010) #b00000000)
 (= (@fun_11 #b11010000000000000000000000000011) #b00000000)
 (default #b00000001))
(function @fun_12
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8192 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)) (_ bv1073741824 32) (_ bv0 8)) (_ bv1073741825 32) (_ bv0 8)) (_ bv1073741826 32) (_ bv0 8)) (_ bv1073741827 32) (_ bv0 8)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x87 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x140 (=> $x87 true)))
 (let (($x141 (= $x140 true)))
 (let (($x66 (= $x141 true)))
 (let (($x57 (= $x87 true)))
 (let (($x130 (= $x57 true)))
 (let ((?x14 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x14)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x119 $x27)))
 (let (($x5 (and $x129 $x84)))
 (let (($x69 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x69 $x5)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x114)))))))
 (let (($x126 (and $x122 $x103)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x105 (= (_ bv0 2) ?x118)))
 (let (($x7 (= $x105 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x104)))
 (let (($x92 (= input.spec-%var-opt-0.2 ?x44)))
 (let (($x65 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x45 (=> $x65 $x92)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x47 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x47 (_ bv1 32))))
 (let (($x76 (= $x65 $x100)))
 (let (($x21 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x36 $x21)))
 (let (($x90 (= ?x47 (_ bv0 32))))
 (let (($x12 (= $x36 $x90)))
 (let (($x8 (and $x12 $x54)))
 (let (($x59 (and $x8 $x76)))
 (let (($x108 (and $x59 $x45)))
 (let (($x96 (= $x108 true)))
 (let (($x75 (= $x96 true)))
 (let (($x115 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (= $x115 true)))
 (let (($x22 (= $x26 true)))
 (let ((?x95 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x95)))
 (let (($x52 (= ?x16 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x88 (= $x52 true)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x46) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x85 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x56 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x56) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x85) ?x31))))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x97)))
 (let (($x93 (=> $x65 $x113)))
 (let (($x102 (and $x59 $x93)))
 (let (($x116 (= $x102 true)))
 (let (($x25 (= $x116 true)))
 (let (($x17 (and $x25 $x88)))
 (let (($x99 (and $x17 $x22)))
 (let (($x110 (and $x99 $x75)))
 (let (($x124 (and $x110 $x7)))
 (let (($x128 (and $x124 $x125)))
 (let (($x131 (and $x128 $x130)))
 (let (($x132 (and $x65 $x131)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x133 (and $x38 $x132)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x134 (and $x61 $x133)))
 (let (($x135 (and $x21 $x134)))
 (let (($x35 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x37 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x37 (or false (or false (and true (or $x18 $x35)))))))
 (let (($x136 (and $x41 $x135)))
 (let (($x138 (=> $x136 $x66)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x87 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x140 (=> $x87 true)))
 (let (($x141 (= $x140 true)))
 (let (($x66 (= $x141 true)))
 (let (($x57 (= $x87 true)))
 (let (($x130 (= $x57 true)))
 (let ((?x14 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x14)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x119 $x27)))
 (let (($x5 (and $x129 $x84)))
 (let (($x69 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x69 $x5)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x114)))))))
 (let (($x126 (and $x122 $x103)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x105 (= (_ bv0 2) ?x118)))
 (let (($x7 (= $x105 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x104)))
 (let (($x92 (= input.spec-%var-opt-0.2 ?x44)))
 (let (($x65 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x45 (=> $x65 $x92)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x47 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x47 (_ bv1 32))))
 (let (($x76 (= $x65 $x100)))
 (let (($x21 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x36 $x21)))
 (let (($x90 (= ?x47 (_ bv0 32))))
 (let (($x12 (= $x36 $x90)))
 (let (($x8 (and $x12 $x54)))
 (let (($x59 (and $x8 $x76)))
 (let (($x108 (and $x59 $x45)))
 (let (($x96 (= $x108 true)))
 (let (($x75 (= $x96 true)))
 (let (($x115 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (= $x115 true)))
 (let (($x22 (= $x26 true)))
 (let ((?x95 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x95)))
 (let (($x52 (= ?x16 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x88 (= $x52 true)))
 (let ((?x46 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x46) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x85 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x56 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x56) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x85) ?x31))))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x97)))
 (let (($x93 (=> $x65 $x113)))
 (let (($x102 (and $x59 $x93)))
 (let (($x116 (= $x102 true)))
 (let (($x25 (= $x116 true)))
 (let (($x17 (and $x25 $x88)))
 (let (($x99 (and $x17 $x22)))
 (let (($x110 (and $x99 $x75)))
 (let (($x124 (and $x110 $x7)))
 (let (($x128 (and $x124 $x125)))
 (let (($x131 (and $x128 $x130)))
 (let (($x132 (and $x65 $x131)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x133 (and $x38 $x132)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x134 (and $x61 $x133)))
 (let (($x135 (and $x21 $x134)))
 (let (($x35 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x37 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x37 (or false (or false (and true (or $x18 $x35)))))))
 (let (($x136 (and $x41 $x135)))
 (let (($x138 (=> $x136 $x66)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x123 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x73 (=> true $x123)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x83 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge ?x83 (_ bv1 32))))
 (let (($x137 (= true $x91)))
 (let (($x53 (= ?x83 (_ bv0 32))))
 (let (($x72 (= false $x53)))
 (let (($x109 (and $x72 true)))
 (let (($x33 (and $x109 $x137)))
 (let (($x139 (and $x33 $x73)))
 (let (($x142 (= $x139 true)))
 (let (($x143 (= $x142 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x133 (= (_ bv0 2) ?x132)))
 (let (($x134 (= $x133 true)))
 (let (($x87 (= $x123 true)))
 (let (($x57 (= $x87 true)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x129)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x84)))
 (let (($x126 (= input.spec-%var-opt-0.2 ?x103)))
 (let (($x10 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x127 (=> $x10 $x126)))
 (let (($x104 (= $x10 $x91)))
 (let (($x40 (= false false)))
 (let (($x22 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x24 (=> $x22 $x40)))
 (let (($x13 (= $x22 $x53)))
 (let (($x28 (and $x13 $x24)))
 (let (($x44 (and $x28 $x104)))
 (let (($x125 (and $x44 $x127)))
 (let (($x128 (= $x125 true)))
 (let (($x9 (= $x128 true)))
 (let (($x23 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x101 (and $x23 $x123)))
 (let (($x122 (= $x101 true)))
 (let (($x120 (= $x122 true)))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x108) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x20 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x18 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x18) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x20) ?x75))))
 (let (($x39 (= input.spec-%var-opt-0.2 ?x124)))
 (let (($x32 (=> $x10 $x39)))
 (let (($x68 (and $x44 $x32)))
 (let (($x82 (= $x68 true)))
 (let (($x64 (= $x82 true)))
 (let (($x106 (= $x23 true)))
 (let (($x115 (= $x106 true)))
 (let ((?x93 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x93)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x31 $x97)))
 (let (($x116 (and $x113 $x102)))
 (let (($x65 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x65 $x116)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x81)))))))
 (let (($x117 (and $x112 $x25)))
 (let (($x95 (= $x117 true)))
 (let (($x16 (= $x95 true)))
 (let ((?x74 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x74)))
 (let (($x90 (= ?x47 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x12 (= $x90 true)))
 (let (($x52 (and $x12 $x16)))
 (let (($x26 (and $x52 $x115)))
 (let (($x114 (and $x26 $x64)))
 (let (($x69 (and $x114 $x120)))
 (let (($x71 (and $x69 $x9)))
 (let (($x130 (and $x71 $x57)))
 (let (($x135 (and $x130 $x134)))
 (let (($x136 (and $x10 $x135)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x140 (and $x38 $x136)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x141 (and $x61 $x140)))
 (let (($x66 (and $x40 $x141)))
 (let (($x35 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x41 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x41 (or false (or false (and true (or $x60 $x35)))))))
 (let (($x138 (and $x11 $x66)))
 (let (($x144 (=> $x138 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x123 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x73 (=> true $x123)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x83 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge ?x83 (_ bv1 32))))
 (let (($x137 (= true $x91)))
 (let (($x53 (= ?x83 (_ bv0 32))))
 (let (($x72 (= false $x53)))
 (let (($x109 (and $x72 true)))
 (let (($x33 (and $x109 $x137)))
 (let (($x139 (and $x33 $x73)))
 (let (($x142 (= $x139 true)))
 (let (($x143 (= $x142 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x133 (= (_ bv0 2) ?x132)))
 (let (($x134 (= $x133 true)))
 (let (($x87 (= $x123 true)))
 (let (($x57 (= $x87 true)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x129)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x84)))
 (let (($x126 (= input.spec-%var-opt-0.2 ?x103)))
 (let (($x10 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x127 (=> $x10 $x126)))
 (let (($x104 (= $x10 $x91)))
 (let (($x40 (= false false)))
 (let (($x22 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x24 (=> $x22 $x40)))
 (let (($x13 (= $x22 $x53)))
 (let (($x28 (and $x13 $x24)))
 (let (($x44 (and $x28 $x104)))
 (let (($x125 (and $x44 $x127)))
 (let (($x128 (= $x125 true)))
 (let (($x9 (= $x128 true)))
 (let (($x23 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x101 (and $x23 $x123)))
 (let (($x122 (= $x101 true)))
 (let (($x120 (= $x122 true)))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x108) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x20 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x18 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x18) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x20) ?x75))))
 (let (($x39 (= input.spec-%var-opt-0.2 ?x124)))
 (let (($x32 (=> $x10 $x39)))
 (let (($x68 (and $x44 $x32)))
 (let (($x82 (= $x68 true)))
 (let (($x64 (= $x82 true)))
 (let (($x106 (= $x23 true)))
 (let (($x115 (= $x106 true)))
 (let ((?x93 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x93)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x31 $x97)))
 (let (($x116 (and $x113 $x102)))
 (let (($x65 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x65 $x116)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x81)))))))
 (let (($x117 (and $x112 $x25)))
 (let (($x95 (= $x117 true)))
 (let (($x16 (= $x95 true)))
 (let ((?x74 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x74)))
 (let (($x90 (= ?x47 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x12 (= $x90 true)))
 (let (($x52 (and $x12 $x16)))
 (let (($x26 (and $x52 $x115)))
 (let (($x114 (and $x26 $x64)))
 (let (($x69 (and $x114 $x120)))
 (let (($x71 (and $x69 $x9)))
 (let (($x130 (and $x71 $x57)))
 (let (($x135 (and $x130 $x134)))
 (let (($x136 (and $x10 $x135)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x140 (and $x38 $x136)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x141 (and $x61 $x140)))
 (let (($x66 (and $x40 $x141)))
 (let (($x35 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x41 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x41 (or false (or false (and true (or $x60 $x35)))))))
 (let (($x138 (and $x11 $x66)))
 (let (($x144 (=> $x138 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (= $x62 false)))
 (let (($x27 (= $x14 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x94 (concat ?x82 (concat ?x39 ?x105)))))
 (let (($x123 (= ?x107 input.dst.llvm-%opt)))
 (let (($x101 (= $x123 true)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x28)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x44)))
 (let (($x110 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x50 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x20 (=> $x50 $x110)))
 (let ((?x17 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x17 (_ bv1 32))))
 (let (($x99 (= $x50 $x22)))
 (let (($x41 (= false false)))
 (let (($x88 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x115 (=> $x88 $x41)))
 (let (($x23 (= ?x17 (_ bv0 32))))
 (let (($x106 (= $x88 $x23)))
 (let (($x26 (and $x106 $x115)))
 (let (($x83 (and $x26 $x99)))
 (let (($x118 (and $x83 $x20)))
 (let (($x108 (= $x118 true)))
 (let (($x96 (= $x108 true)))
 (let ((?x93 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x93)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x31 $x97)))
 (let (($x116 (and $x113 $x102)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x76 $x116)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x98)))))))
 (let (($x117 (and $x65 $x25)))
 (let (($x95 (= $x117 true)))
 (let (($x16 (= $x95 true)))
 (let (($x45 (and $x16 $x96)))
 (let (($x122 (and $x45 $x101)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x120 (and $x90 $x122)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x69 (and $x74 $x120)))
 (let (($x119 (and $x41 $x69)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x61 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x61 (or false (or false (and true (or $x63 $x48)))))))
 (let (($x15 (not $x62)))
 (let (($x37 (=> (and $x15 $x61) (or false (or false (and true (or $x63 $x48)))))))
 (let (($x5 (and $x37 $x119)))
 (let (($x55 (=> $x5 $x27)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x14 (= $x62 false)))
 (let (($x27 (= $x14 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x94 (concat ?x82 (concat ?x39 ?x105)))))
 (let (($x123 (= ?x107 input.dst.llvm-%opt)))
 (let (($x101 (= $x123 true)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x28)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x44)))
 (let (($x110 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x50 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x20 (=> $x50 $x110)))
 (let ((?x17 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x17 (_ bv1 32))))
 (let (($x99 (= $x50 $x22)))
 (let (($x41 (= false false)))
 (let (($x88 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x115 (=> $x88 $x41)))
 (let (($x23 (= ?x17 (_ bv0 32))))
 (let (($x106 (= $x88 $x23)))
 (let (($x26 (and $x106 $x115)))
 (let (($x83 (and $x26 $x99)))
 (let (($x118 (and $x83 $x20)))
 (let (($x108 (= $x118 true)))
 (let (($x96 (= $x108 true)))
 (let ((?x93 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x93)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x31 $x97)))
 (let (($x116 (and $x113 $x102)))
 (let (($x76 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x76 $x116)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x98)))))))
 (let (($x117 (and $x65 $x25)))
 (let (($x95 (= $x117 true)))
 (let (($x16 (= $x95 true)))
 (let (($x45 (and $x16 $x96)))
 (let (($x122 (and $x45 $x101)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x120 (and $x90 $x122)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x69 (and $x74 $x120)))
 (let (($x119 (and $x41 $x69)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x61 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x61 (or false (or false (and true (or $x63 $x48)))))))
 (let (($x15 (not $x62)))
 (let (($x37 (=> (and $x15 $x61) (or false (or false (and true (or $x63 $x48)))))))
 (let (($x5 (and $x37 $x119)))
 (let (($x55 (=> $x5 $x27)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-val-1.L2%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x43)))
 (let (($x50 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x126 (or $x50 $x29)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x119 (concat ?x122 (concat ?x107 ?x32)))))
 (let (($x14 (= ?x5 input.dst.llvm-%opt)))
 (let (($x27 (= $x14 true)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x7)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x108)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x45)))
 (let (($x10 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x94 (=> $x10 $x114)))
 (let ((?x22 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge ?x22 (_ bv1 32))))
 (let (($x104 (= $x10 $x91)))
 (let (($x62 (= false false)))
 (let (($x53 (=> $x50 $x62)))
 (let (($x99 (= ?x22 (_ bv0 32))))
 (let (($x83 (= $x50 $x99)))
 (let (($x92 (and $x83 $x53)))
 (let (($x40 (and $x92 $x104)))
 (let (($x68 (and $x40 $x94)))
 (let (($x82 (= $x68 true)))
 (let (($x124 (= $x82 true)))
 (let (($x23 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x23 true)))
 (let (($x41 (= $x106 true)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x102)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x121 $x113)))
 (let (($x25 (and $x93 $x116)))
 (let (($x8 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x8 $x25)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x30)))))))
 (let (($x95 (and $x31 $x117)))
 (let (($x16 (= $x95 true)))
 (let (($x52 (= $x16 true)))
 (let (($x115 (and $x52 $x41)))
 (let (($x39 (and $x115 $x124)))
 (let (($x55 (and $x39 $x27)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x129 (and $x90 $x55)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x75 (and $x74 $x129)))
 (let (($x84 (and $x62 $x75)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x80 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x80 (or false (or false (and true (or $x49 $x48)))))))
 (let (($x18 (=> (and $x29 $x80) (or false (or false (and true (or $x49 $x48)))))))
 (let (($x103 (and $x18 $x84)))
 (let (($x128 (=> $x103 $x125)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x29 (not $x43)))
 (let (($x50 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x126 (or $x50 $x29)))
 (let (($x127 (= $x126 true)))
 (let (($x125 (= $x127 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x119 (concat ?x122 (concat ?x107 ?x32)))))
 (let (($x14 (= ?x5 input.dst.llvm-%opt)))
 (let (($x27 (= $x14 true)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x7)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x108)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x45)))
 (let (($x10 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x94 (=> $x10 $x114)))
 (let ((?x22 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge ?x22 (_ bv1 32))))
 (let (($x104 (= $x10 $x91)))
 (let (($x62 (= false false)))
 (let (($x53 (=> $x50 $x62)))
 (let (($x99 (= ?x22 (_ bv0 32))))
 (let (($x83 (= $x50 $x99)))
 (let (($x92 (and $x83 $x53)))
 (let (($x40 (and $x92 $x104)))
 (let (($x68 (and $x40 $x94)))
 (let (($x82 (= $x68 true)))
 (let (($x124 (= $x82 true)))
 (let (($x23 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x106 (= $x23 true)))
 (let (($x41 (= $x106 true)))
 (let ((?x102 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x102)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x121 $x113)))
 (let (($x25 (and $x93 $x116)))
 (let (($x8 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x8 $x25)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x30)))))))
 (let (($x95 (and $x31 $x117)))
 (let (($x16 (= $x95 true)))
 (let (($x52 (= $x16 true)))
 (let (($x115 (and $x52 $x41)))
 (let (($x39 (and $x115 $x124)))
 (let (($x55 (and $x39 $x27)))
 (let (($x90 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x129 (and $x90 $x55)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x75 (and $x74 $x129)))
 (let (($x84 (and $x62 $x75)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x80 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x80 (or false (or false (and true (or $x49 $x48)))))))
 (let (($x18 (=> (and $x29 $x80) (or false (or false (and true (or $x49 $x48)))))))
 (let (($x103 (and $x18 $x84)))
 (let (($x128 (=> $x103 $x125)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x34)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x90)))
 (let (($x88 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x17 (=> $x62 $x88)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x36 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x36 (_ bv1 32))))
 (let (($x60 (= $x62 $x80)))
 (let (($x98 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x81 (=> $x61 $x98)))
 (let (($x74 (= ?x36 (_ bv0 32))))
 (let (($x58 (= $x61 $x74)))
 (let (($x76 (and $x58 $x81)))
 (let (($x67 (and $x76 $x60)))
 (let (($x102 (and $x67 $x17)))
 (let (($x14 (= $x102 true)))
 (let (($x27 (= $x14 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x45 (concat ?x13 (concat ?x118 ?x110)))))
 (let (($x122 (= ?x114 input.dst.llvm-%opt)))
 (let (($x64 (= $x122 true)))
 (let (($x94 (= input.dst.llvm-%opt ?x114)))
 (let ((?x91 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x91)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x97 $x92)))
 (let (($x40 (and $x10 $x104)))
 (let (($x52 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x52 $x40)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x22)))))))
 (let (($x99 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x124 (and (and (and $x99 $x121) $x24) $x94)))
 (let (($x39 (and $x102 $x124)))
 (let (($x69 (= $x39 true)))
 (let (($x119 (= $x69 true)))
 (let (($x79 (= $x77 true)))
 (let (($x37 (= $x79 true)))
 (let (($x83 (= $x99 true)))
 (let (($x11 (= $x83 true)))
 (let (($x18 (and $x11 $x37)))
 (let (($x101 (and $x18 $x119)))
 (let (($x107 (and $x101 $x64)))
 (let (($x32 (and $x61 $x107)))
 (let (($x29 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x123 (and $x29 $x32)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x21 $x123)))
 (let (($x5 (and $x98 $x120)))
 (let (($x55 (=> $x5 $x27)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x34)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x90)))
 (let (($x88 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x17 (=> $x62 $x88)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x36 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x36 (_ bv1 32))))
 (let (($x60 (= $x62 $x80)))
 (let (($x98 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x81 (=> $x61 $x98)))
 (let (($x74 (= ?x36 (_ bv0 32))))
 (let (($x58 (= $x61 $x74)))
 (let (($x76 (and $x58 $x81)))
 (let (($x67 (and $x76 $x60)))
 (let (($x102 (and $x67 $x17)))
 (let (($x14 (= $x102 true)))
 (let (($x27 (= $x14 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x45 (concat ?x13 (concat ?x118 ?x110)))))
 (let (($x122 (= ?x114 input.dst.llvm-%opt)))
 (let (($x64 (= $x122 true)))
 (let (($x94 (= input.dst.llvm-%opt ?x114)))
 (let ((?x91 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x91)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x97 $x92)))
 (let (($x40 (and $x10 $x104)))
 (let (($x52 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x52 $x40)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x22)))))))
 (let (($x99 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x124 (and (and (and $x99 $x121) $x24) $x94)))
 (let (($x39 (and $x102 $x124)))
 (let (($x69 (= $x39 true)))
 (let (($x119 (= $x69 true)))
 (let (($x79 (= $x77 true)))
 (let (($x37 (= $x79 true)))
 (let (($x83 (= $x99 true)))
 (let (($x11 (= $x83 true)))
 (let (($x18 (and $x11 $x37)))
 (let (($x101 (and $x18 $x119)))
 (let (($x107 (and $x101 $x64)))
 (let (($x32 (and $x61 $x107)))
 (let (($x29 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x123 (and $x29 $x32)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x120 (and $x21 $x123)))
 (let (($x5 (and $x98 $x120)))
 (let (($x55 (=> $x5 $x27)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x96 (or $x12 $x21)))
 (let (($x75 (= $x96 true)))
 (let (($x84 (= $x75 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x32 (concat ?x122 (concat ?x69 ?x124)))))
 (let (($x120 (= ?x123 input.dst.llvm-%opt)))
 (let (($x5 (= $x120 true)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x40)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x45)))
 (let (($x20 (= input.spec-%var-opt-0.2 ?x13)))
 (let (($x16 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x16 $x20)))
 (let ((?x59 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x59 (_ bv1 32))))
 (let (($x97 (= $x16 $x52)))
 (let (($x100 (= false false)))
 (let (($x117 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (=> $x117 $x100)))
 (let (($x93 (= ?x59 (_ bv0 32))))
 (let (($x116 (= $x117 $x93)))
 (let (($x68 (and $x116 $x121)))
 (let (($x53 (and $x68 $x97)))
 (let (($x110 (and $x53 $x118)))
 (let (($x28 (= $x110 true)))
 (let (($x7 (= $x28 true)))
 (let ((?x106 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x106)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x25 $x17)))
 (let (($x8 (and $x102 $x23)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x63 $x8)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x30)))))))
 (let (($x115 (and $x90 $x41)))
 (let (($x50 (= $x115 true)))
 (let (($x26 (= $x50 true)))
 (let (($x114 (and $x26 $x7)))
 (let (($x14 (and $x114 $x5)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x27 (and $x80 $x14)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x55 (and $x76 $x27)))
 (let (($x129 (and $x100 $x55)))
 (let (($x18 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x74 (or false (or false (and true (or $x37 $x18)))))))
 (let (($x29 (=> (and $x21 $x74) (or false (or false (and true (or $x37 $x18)))))))
 (let (($x95 (and $x29 $x129)))
 (let (($x103 (=> $x95 $x84)))
 (not $x103)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x96 (or $x12 $x21)))
 (let (($x75 (= $x96 true)))
 (let (($x84 (= $x75 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x32 (concat ?x122 (concat ?x69 ?x124)))))
 (let (($x120 (= ?x123 input.dst.llvm-%opt)))
 (let (($x5 (= $x120 true)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x40)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x45)))
 (let (($x20 (= input.spec-%var-opt-0.2 ?x13)))
 (let (($x16 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x16 $x20)))
 (let ((?x59 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x59 (_ bv1 32))))
 (let (($x97 (= $x16 $x52)))
 (let (($x100 (= false false)))
 (let (($x117 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x121 (=> $x117 $x100)))
 (let (($x93 (= ?x59 (_ bv0 32))))
 (let (($x116 (= $x117 $x93)))
 (let (($x68 (and $x116 $x121)))
 (let (($x53 (and $x68 $x97)))
 (let (($x110 (and $x53 $x118)))
 (let (($x28 (= $x110 true)))
 (let (($x7 (= $x28 true)))
 (let ((?x106 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x106)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x25 $x17)))
 (let (($x8 (and $x102 $x23)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x63 $x8)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x30)))))))
 (let (($x115 (and $x90 $x41)))
 (let (($x50 (= $x115 true)))
 (let (($x26 (= $x50 true)))
 (let (($x114 (and $x26 $x7)))
 (let (($x14 (and $x114 $x5)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x27 (and $x80 $x14)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x55 (and $x76 $x27)))
 (let (($x129 (and $x100 $x55)))
 (let (($x18 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x74 (or false (or false (and true (or $x37 $x18)))))))
 (let (($x29 (=> (and $x21 $x74) (or false (or false (and true (or $x37 $x18)))))))
 (let (($x95 (and $x29 $x129)))
 (let (($x103 (=> $x95 $x84)))
 (not $x103)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x92 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x92 $x32)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x91)))))))
 (let (($x130 (and $x20 $x101)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x14 (concat ?x123 (concat ?x124 ?x39)))))
 (let (($x125 (= ?x27 input.dst.llvm-%opt)))
 (let (($x128 (= $x125 true)))
 (let (($x35 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x84 (= true $x35)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x103 (=> $x21 $x84)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let (($x96 (and (and (and $x35 $x20) $x101) $x55)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x22)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x116)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x34 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x34 $x68)))
 (let ((?x63 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x63 (_ bv1 32))))
 (let (($x23 (= $x34 $x106)))
 (let (($x113 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x67 $x113)))
 (let (($x25 (= ?x63 (_ bv0 32))))
 (let (($x88 (= $x67 $x25)))
 (let (($x102 (and $x88 $x17)))
 (let (($x8 (and $x102 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x75 (and $x52 $x96)))
 (let (($x126 (and $x75 $x103)))
 (let (($x60 (= $x126 true)))
 (let (($x94 (= $x60 true)))
 (let (($x48 (= $x35 true)))
 (let (($x49 (= $x48 true)))
 (let (($x65 (= $x21 true)))
 (let (($x85 (= $x65 true)))
 (let (($x90 (and $x85 $x49)))
 (let (($x127 (and $x90 $x94)))
 (let (($x9 (and $x127 $x128)))
 (let (($x86 (and $x34 $x9)))
 (let (($x46 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x105 (and $x46 $x86)))
 (let (($x62 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x71 (and $x62 $x105)))
 (let (($x87 (and $x113 $x71)))
 (let (($x15 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x98 (=> $x29 (or false (or false (and true (or $x18 $x15)))))))
 (let (($x31 (=> (and $x21 $x29) (or false (or false (and true (or $x18 $x15)))))))
 (let (($x57 (and $x31 $x87)))
 (let (($x133 (=> $x57 $x132)))
 (not $x133)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x92 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x92 $x32)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x91)))))))
 (let (($x130 (and $x20 $x101)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x14 (concat ?x123 (concat ?x124 ?x39)))))
 (let (($x125 (= ?x27 input.dst.llvm-%opt)))
 (let (($x128 (= $x125 true)))
 (let (($x35 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x84 (= true $x35)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x103 (=> $x21 $x84)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let (($x96 (and (and (and $x35 $x20) $x101) $x55)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x22)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x116)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x34 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x34 $x68)))
 (let ((?x63 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x63 (_ bv1 32))))
 (let (($x23 (= $x34 $x106)))
 (let (($x113 (= false false)))
 (let (($x67 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x67 $x113)))
 (let (($x25 (= ?x63 (_ bv0 32))))
 (let (($x88 (= $x67 $x25)))
 (let (($x102 (and $x88 $x17)))
 (let (($x8 (and $x102 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x75 (and $x52 $x96)))
 (let (($x126 (and $x75 $x103)))
 (let (($x60 (= $x126 true)))
 (let (($x94 (= $x60 true)))
 (let (($x48 (= $x35 true)))
 (let (($x49 (= $x48 true)))
 (let (($x65 (= $x21 true)))
 (let (($x85 (= $x65 true)))
 (let (($x90 (and $x85 $x49)))
 (let (($x127 (and $x90 $x94)))
 (let (($x9 (and $x127 $x128)))
 (let (($x86 (and $x34 $x9)))
 (let (($x46 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x105 (and $x46 $x86)))
 (let (($x62 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x71 (and $x62 $x105)))
 (let (($x87 (and $x113 $x71)))
 (let (($x15 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x98 (=> $x29 (or false (or false (and true (or $x18 $x15)))))))
 (let (($x31 (=> (and $x21 $x29) (or false (or false (and true (or $x18 $x15)))))))
 (let (($x57 (and $x31 $x87)))
 (let (($x133 (=> $x57 $x132)))
 (not $x133)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x93)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x30 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x30 $x68)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x88 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x88 (_ bv1 32))))
 (let (($x23 (= $x30 $x106)))
 (let (($x74 (= false false)))
 (let (($x25 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x102 (=> $x25 $x74)))
 (let (($x113 (= ?x88 (_ bv0 32))))
 (let (($x17 (= $x25 $x113)))
 (let (($x34 (and $x17 $x102)))
 (let (($x8 (and $x34 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x132 (= $x52 true)))
 (let (($x133 (= $x132 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x120 (concat ?x124 (concat ?x64 ?x5)))))
 (let (($x9 (= ?x27 input.dst.llvm-%opt)))
 (let (($x86 (= $x9 true)))
 (let (($x48 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x126 (= true $x48)))
 (let (($x21 (not $x12)))
 (let (($x60 (=> $x21 $x126)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x13 $x32)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x10)))))))
 (let (($x84 (and (and (and $x48 $x92) $x101) $x55)))
 (let (($x103 (and $x52 $x84)))
 (let (($x94 (and $x103 $x60)))
 (let (($x127 (= $x94 true)))
 (let (($x125 (= $x127 true)))
 (let (($x112 (= $x21 true)))
 (let (($x67 (= $x112 true)))
 (let (($x49 (= $x48 true)))
 (let (($x90 (= $x49 true)))
 (let (($x63 (and $x90 $x67)))
 (let (($x128 (and $x63 $x125)))
 (let (($x105 (and $x128 $x86)))
 (let (($x71 (and $x30 $x105)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x87 (and $x65 $x71)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x57 (and $x80 $x87)))
 (let (($x130 (and $x74 $x57)))
 (let (($x61 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x31 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x81 (=> $x31 (or false (or false (and true (or $x15 $x61)))))))
 (let (($x99 (=> (and $x21 $x31) (or false (or false (and true (or $x15 $x61)))))))
 (let (($x131 (and $x99 $x130)))
 (let (($x134 (=> $x131 $x133)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x93)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x22)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x30 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x30 $x68)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x88 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x88 (_ bv1 32))))
 (let (($x23 (= $x30 $x106)))
 (let (($x74 (= false false)))
 (let (($x25 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x102 (=> $x25 $x74)))
 (let (($x113 (= ?x88 (_ bv0 32))))
 (let (($x17 (= $x25 $x113)))
 (let (($x34 (and $x17 $x102)))
 (let (($x8 (and $x34 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x132 (= $x52 true)))
 (let (($x133 (= $x132 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x120 (concat ?x124 (concat ?x64 ?x5)))))
 (let (($x9 (= ?x27 input.dst.llvm-%opt)))
 (let (($x86 (= $x9 true)))
 (let (($x48 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x126 (= true $x48)))
 (let (($x21 (not $x12)))
 (let (($x60 (=> $x21 $x126)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x13 $x32)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x10)))))))
 (let (($x84 (and (and (and $x48 $x92) $x101) $x55)))
 (let (($x103 (and $x52 $x84)))
 (let (($x94 (and $x103 $x60)))
 (let (($x127 (= $x94 true)))
 (let (($x125 (= $x127 true)))
 (let (($x112 (= $x21 true)))
 (let (($x67 (= $x112 true)))
 (let (($x49 (= $x48 true)))
 (let (($x90 (= $x49 true)))
 (let (($x63 (and $x90 $x67)))
 (let (($x128 (and $x63 $x125)))
 (let (($x105 (and $x128 $x86)))
 (let (($x71 (and $x30 $x105)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x87 (and $x65 $x71)))
 (let (($x80 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x57 (and $x80 $x87)))
 (let (($x130 (and $x74 $x57)))
 (let (($x61 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x31 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x81 (=> $x31 (or false (or false (and true (or $x15 $x61)))))))
 (let (($x99 (=> (and $x21 $x31) (or false (or false (and true (or $x15 $x61)))))))
 (let (($x131 (and $x99 $x130)))
 (let (($x134 (=> $x131 $x133)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x115)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x93)))
 (let ((?x97 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x97)))
 (let (($x95 (= ?x44 ?x121)))
 (let (($x122 (= $x95 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x39 (concat ?x64 (concat ?x69 ?x119)))))
 (let (($x105 (= ?x27 input.dst.llvm-%opt)))
 (let (($x71 (= $x105 true)))
 (let (($x112 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x94 (= true $x112)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x127 (=> $x21 $x94)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x53 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x53 $x32)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x45)))))))
 (let (($x126 (and (and (and $x112 $x13) $x101) $x55)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x48 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x48 $x68)))
 (let ((?x17 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x17 (_ bv1 32))))
 (let (($x23 (= $x48 $x106)))
 (let (($x29 (= false false)))
 (let (($x113 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x34 (=> $x113 $x29)))
 (let (($x74 (= ?x17 (_ bv0 32))))
 (let (($x102 (= $x113 $x74)))
 (let (($x30 (and $x102 $x34)))
 (let (($x8 (and $x30 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x60 (and $x52 $x126)))
 (let (($x125 (and $x60 $x127)))
 (let (($x128 (= $x125 true)))
 (let (($x9 (= $x128 true)))
 (let (($x85 (= $x21 true)))
 (let (($x25 (= $x85 true)))
 (let (($x67 (= $x112 true)))
 (let (($x63 (= $x67 true)))
 (let (($x88 (and $x63 $x25)))
 (let (($x86 (and $x88 $x9)))
 (let (($x87 (and $x86 $x71)))
 (let (($x57 (and $x48 $x87)))
 (let (($x47 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x130 (and $x47 $x57)))
 (let (($x46 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x131 (and $x46 $x130)))
 (let (($x132 (and $x29 $x131)))
 (let (($x38 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x99 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x76 (=> $x99 (or false (or false (and true (or $x61 $x38)))))))
 (let (($x83 (=> (and $x21 $x99) (or false (or false (and true (or $x61 $x38)))))))
 (let (($x133 (and $x83 $x132)))
 (let (($x135 (=> $x133 $x122)))
 (not $x135))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x115)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x93)))
 (let ((?x97 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x97)))
 (let (($x95 (= ?x44 ?x121)))
 (let (($x122 (= $x95 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x39 (concat ?x64 (concat ?x69 ?x119)))))
 (let (($x105 (= ?x27 input.dst.llvm-%opt)))
 (let (($x71 (= $x105 true)))
 (let (($x112 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x94 (= true $x112)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x127 (=> $x21 $x94)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x53 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x53 $x32)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x45)))))))
 (let (($x126 (and (and (and $x112 $x13) $x101) $x55)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x48 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x48 $x68)))
 (let ((?x17 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x17 (_ bv1 32))))
 (let (($x23 (= $x48 $x106)))
 (let (($x29 (= false false)))
 (let (($x113 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x34 (=> $x113 $x29)))
 (let (($x74 (= ?x17 (_ bv0 32))))
 (let (($x102 (= $x113 $x74)))
 (let (($x30 (and $x102 $x34)))
 (let (($x8 (and $x30 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x60 (and $x52 $x126)))
 (let (($x125 (and $x60 $x127)))
 (let (($x128 (= $x125 true)))
 (let (($x9 (= $x128 true)))
 (let (($x85 (= $x21 true)))
 (let (($x25 (= $x85 true)))
 (let (($x67 (= $x112 true)))
 (let (($x63 (= $x67 true)))
 (let (($x88 (and $x63 $x25)))
 (let (($x86 (and $x88 $x9)))
 (let (($x87 (and $x86 $x71)))
 (let (($x57 (and $x48 $x87)))
 (let (($x47 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x130 (and $x47 $x57)))
 (let (($x46 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x131 (and $x46 $x130)))
 (let (($x132 (and $x29 $x131)))
 (let (($x38 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x99 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x76 (=> $x99 (or false (or false (and true (or $x61 $x38)))))))
 (let (($x83 (=> (and $x21 $x99) (or false (or false (and true (or $x61 $x38)))))))
 (let (($x133 (and $x83 $x132)))
 (let (($x135 (=> $x133 $x122)))
 (not $x135))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let ((?x122 (ite $x21 (_ bv1 1) (_ bv0 1))))
 (let ((?x135 ((_ zero_extend 31) ?x122)))
 (let (($x136 (= (_ bv1 32) ?x135)))
 (let (($x82 (= $x136 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x5 (concat ?x69 (concat ?x14 ?x123)))))
 (let (($x87 (= ?x27 input.dst.llvm-%opt)))
 (let (($x57 (= $x87 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x125 (= true $x85)))
 (let (($x128 (=> $x21 $x125)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x24 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x24 $x32)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x129)))))))
 (let (($x94 (and (and (and $x85 $x53) $x101) $x55)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x100)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x115)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x112 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x112 $x68)))
 (let ((?x102 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x102 (_ bv1 32))))
 (let (($x23 (= $x112 $x106)))
 (let (($x31 (= false false)))
 (let (($x74 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x74 $x31)))
 (let (($x29 (= ?x102 (_ bv0 32))))
 (let (($x34 (= $x74 $x29)))
 (let (($x48 (and $x34 $x30)))
 (let (($x8 (and $x48 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x127 (and $x52 $x94)))
 (let (($x9 (and $x127 $x128)))
 (let (($x86 (= $x9 true)))
 (let (($x105 (= $x86 true)))
 (let (($x35 (= $x21 true)))
 (let (($x113 (= $x35 true)))
 (let (($x25 (= $x85 true)))
 (let (($x88 (= $x25 true)))
 (let (($x17 (and $x88 $x113)))
 (let (($x71 (and $x17 $x105)))
 (let (($x130 (and $x71 $x57)))
 (let (($x131 (and $x112 $x130)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x132 (and $x49 $x131)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x133 (and $x65 $x132)))
 (let (($x134 (and $x31 $x133)))
 (let (($x36 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x83 (or false (or false (and true (or $x38 $x36)))))))
 (let (($x77 (=> (and $x21 $x83) (or false (or false (and true (or $x38 $x36)))))))
 (let (($x97 (and $x77 $x134)))
 (let (($x75 (=> $x97 $x82)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let ((?x122 (ite $x21 (_ bv1 1) (_ bv0 1))))
 (let ((?x135 ((_ zero_extend 31) ?x122)))
 (let (($x136 (= (_ bv1 32) ?x135)))
 (let (($x82 (= $x136 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x5 (concat ?x69 (concat ?x14 ?x123)))))
 (let (($x87 (= ?x27 input.dst.llvm-%opt)))
 (let (($x57 (= $x87 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x125 (= true $x85)))
 (let (($x128 (=> $x21 $x125)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x24 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x24 $x32)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x129)))))))
 (let (($x94 (and (and (and $x85 $x53) $x101) $x55)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x100)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x115)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x112 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x112 $x68)))
 (let ((?x102 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x102 (_ bv1 32))))
 (let (($x23 (= $x112 $x106)))
 (let (($x31 (= false false)))
 (let (($x74 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x30 (=> $x74 $x31)))
 (let (($x29 (= ?x102 (_ bv0 32))))
 (let (($x34 (= $x74 $x29)))
 (let (($x48 (and $x34 $x30)))
 (let (($x8 (and $x48 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x127 (and $x52 $x94)))
 (let (($x9 (and $x127 $x128)))
 (let (($x86 (= $x9 true)))
 (let (($x105 (= $x86 true)))
 (let (($x35 (= $x21 true)))
 (let (($x113 (= $x35 true)))
 (let (($x25 (= $x85 true)))
 (let (($x88 (= $x25 true)))
 (let (($x17 (and $x88 $x113)))
 (let (($x71 (and $x17 $x105)))
 (let (($x130 (and $x71 $x57)))
 (let (($x131 (and $x112 $x130)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x132 (and $x49 $x131)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x133 (and $x65 $x132)))
 (let (($x134 (and $x31 $x133)))
 (let (($x36 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x83 (or false (or false (and true (or $x38 $x36)))))))
 (let (($x77 (=> (and $x21 $x83) (or false (or false (and true (or $x38 $x36)))))))
 (let (($x97 (and $x77 $x134)))
 (let (($x75 (=> $x97 $x82)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x135 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x136 (= (_ bv0 2) ?x135)))
 (let (($x82 (= $x136 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x119 (concat ?x14 (concat ?x120 ?x124)))))
 (let (($x130 (= ?x27 input.dst.llvm-%opt)))
 (let (($x131 (= $x130 true)))
 (let (($x35 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x9 (= true $x35)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x86 (=> $x21 $x9)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x108 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x108 $x32)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x96)))))))
 (let (($x125 (and (and (and $x35 $x24) $x101) $x55)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x100)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x85 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x85 $x68)))
 (let ((?x34 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x34 (_ bv1 32))))
 (let (($x23 (= $x85 $x106)))
 (let (($x99 (= false false)))
 (let (($x29 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x48 (=> $x29 $x99)))
 (let (($x31 (= ?x34 (_ bv0 32))))
 (let (($x30 (= $x29 $x31)))
 (let (($x112 (and $x30 $x48)))
 (let (($x8 (and $x112 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x128 (and $x52 $x125)))
 (let (($x105 (and $x128 $x86)))
 (let (($x71 (= $x105 true)))
 (let (($x87 (= $x71 true)))
 (let (($x90 (= $x21 true)))
 (let (($x74 (= $x90 true)))
 (let (($x113 (= $x35 true)))
 (let (($x17 (= $x113 true)))
 (let (($x102 (and $x17 $x74)))
 (let (($x57 (and $x102 $x87)))
 (let (($x132 (and $x57 $x131)))
 (let (($x133 (and $x85 $x132)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x134 (and $x67 $x133)))
 (let (($x47 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x97 (and $x47 $x134)))
 (let (($x44 (and $x99 $x97)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x77 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x77 (or false (or false (and true (or $x36 $x58)))))))
 (let (($x37 (=> (and $x21 $x77) (or false (or false (and true (or $x36 $x58)))))))
 (let (($x95 (and $x37 $x44)))
 (let (($x75 (=> $x95 $x82)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x135 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x136 (= (_ bv0 2) ?x135)))
 (let (($x82 (= $x136 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x119 (concat ?x14 (concat ?x120 ?x124)))))
 (let (($x130 (= ?x27 input.dst.llvm-%opt)))
 (let (($x131 (= $x130 true)))
 (let (($x35 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x9 (= true $x35)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x86 (=> $x21 $x9)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x108 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x108 $x32)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x96)))))))
 (let (($x125 (and (and (and $x35 $x24) $x101) $x55)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x116)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x100)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x85 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x85 $x68)))
 (let ((?x34 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x34 (_ bv1 32))))
 (let (($x23 (= $x85 $x106)))
 (let (($x99 (= false false)))
 (let (($x29 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x48 (=> $x29 $x99)))
 (let (($x31 (= ?x34 (_ bv0 32))))
 (let (($x30 (= $x29 $x31)))
 (let (($x112 (and $x30 $x48)))
 (let (($x8 (and $x112 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x128 (and $x52 $x125)))
 (let (($x105 (and $x128 $x86)))
 (let (($x71 (= $x105 true)))
 (let (($x87 (= $x71 true)))
 (let (($x90 (= $x21 true)))
 (let (($x74 (= $x90 true)))
 (let (($x113 (= $x35 true)))
 (let (($x17 (= $x113 true)))
 (let (($x102 (and $x17 $x74)))
 (let (($x57 (and $x102 $x87)))
 (let (($x132 (and $x57 $x131)))
 (let (($x133 (and $x85 $x132)))
 (let (($x67 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x134 (and $x67 $x133)))
 (let (($x47 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x97 (and $x47 $x134)))
 (let (($x44 (and $x99 $x97)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x77 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x77 (or false (or false (and true (or $x36 $x58)))))))
 (let (($x37 (=> (and $x21 $x77) (or false (or false (and true (or $x36 $x58)))))))
 (let (($x95 (and $x37 $x44)))
 (let (($x75 (=> $x95 $x82)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x98 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x37 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x46 (=> $x37 (or false (or false (and true (or $x58 $x98)))))))
 (let (($x136 (= $x46 true)))
 (let (($x82 (= $x136 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x123 (concat ?x120 (concat ?x39 ?x64)))))
 (let (($x132 (= ?x27 input.dst.llvm-%opt)))
 (let (($x133 (= $x132 true)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= true $x90)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x71 (=> $x21 $x105)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x104 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x104 $x32)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x84)))))))
 (let (($x9 (and (and (and $x90 $x108) $x101) $x55)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x22)))
 (let ((?x121 (concat (select input.dst.llvm-mem ?x79) ?x116)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x35 $x68)))
 (let ((?x30 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x30 (_ bv1 32))))
 (let (($x23 (= $x35 $x106)))
 (let (($x83 (= false false)))
 (let (($x31 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x31 $x83)))
 (let (($x99 (= ?x30 (_ bv0 32))))
 (let (($x48 (= $x31 $x99)))
 (let (($x85 (and $x48 $x112)))
 (let (($x8 (and $x85 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x86 (and $x52 $x9)))
 (let (($x87 (and $x86 $x71)))
 (let (($x57 (= $x87 true)))
 (let (($x130 (= $x57 true)))
 (let (($x63 (= $x21 true)))
 (let (($x29 (= $x63 true)))
 (let (($x74 (= $x90 true)))
 (let (($x102 (= $x74 true)))
 (let (($x34 (and $x102 $x29)))
 (let (($x131 (and $x34 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x97 (and $x35 $x134)))
 (let (($x25 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x44 (and $x25 $x97)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x95 (and $x49 $x44)))
 (let (($x122 (and $x83 $x95)))
 (let (($x18 (=> (and $x21 $x37) (or false (or false (and true (or $x58 $x98)))))))
 (let (($x135 (and $x18 $x122)))
 (let (($x75 (=> $x135 $x82)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x98 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x37 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x46 (=> $x37 (or false (or false (and true (or $x58 $x98)))))))
 (let (($x136 (= $x46 true)))
 (let (($x82 (= $x136 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x123 (concat ?x120 (concat ?x39 ?x64)))))
 (let (($x132 (= ?x27 input.dst.llvm-%opt)))
 (let (($x133 (= $x132 true)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x105 (= true $x90)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (not $x12)))
 (let (($x71 (=> $x21 $x105)))
 (let (($x55 (= input.dst.llvm-%opt ?x27)))
 (let ((?x114 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x118 $x28)))
 (let (($x32 (and $x7 $x107)))
 (let (($x104 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x104 $x32)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x84)))))))
 (let (($x9 (and (and (and $x90 $x108) $x101) $x55)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x22)))
 (let ((?x121 (concat (select input.dst.llvm-mem ?x79) ?x116)))
 (let (($x68 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x16 (=> $x35 $x68)))
 (let ((?x30 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x30 (_ bv1 32))))
 (let (($x23 (= $x35 $x106)))
 (let (($x83 (= false false)))
 (let (($x31 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x31 $x83)))
 (let (($x99 (= ?x30 (_ bv0 32))))
 (let (($x48 (= $x31 $x99)))
 (let (($x85 (and $x48 $x112)))
 (let (($x8 (and $x85 $x23)))
 (let (($x52 (and $x8 $x16)))
 (let (($x86 (and $x52 $x9)))
 (let (($x87 (and $x86 $x71)))
 (let (($x57 (= $x87 true)))
 (let (($x130 (= $x57 true)))
 (let (($x63 (= $x21 true)))
 (let (($x29 (= $x63 true)))
 (let (($x74 (= $x90 true)))
 (let (($x102 (= $x74 true)))
 (let (($x34 (and $x102 $x29)))
 (let (($x131 (and $x34 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x97 (and $x35 $x134)))
 (let (($x25 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x44 (and $x25 $x97)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x95 (and $x49 $x44)))
 (let (($x122 (and $x83 $x95)))
 (let (($x18 (=> (and $x21 $x37) (or false (or false (and true (or $x58 $x98)))))))
 (let (($x135 (and $x18 $x122)))
 (let (($x75 (=> $x135 $x82)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x84 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x139 (=> true $x84)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x20 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x20 (_ bv1 32))))
 (let (($x33 (= true $x7)))
 (let (($x104 (= ?x20 (_ bv0 32))))
 (let (($x109 (= false $x104)))
 (let (($x137 (and $x109 true)))
 (let (($x73 (and $x137 $x33)))
 (let (($x142 (and $x73 $x139)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let ((?x127 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x10 (= (_ bv0 2) ?x127)))
 (let (($x60 (= $x10 true)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x133)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x97)))
 (let (($x122 (= input.spec-%var-opt-0.2 ?x95)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x135 (=> $x67 $x122)))
 (let (($x114 (= $x67 $x7)))
 (let (($x12 (= false false)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x110 (=> $x108 $x12)))
 (let (($x118 (= $x108 $x104)))
 (let (($x28 (and $x118 $x110)))
 (let (($x107 (and $x28 $x114)))
 (let (($x136 (and $x107 $x135)))
 (let (($x82 (= $x136 true)))
 (let (($x75 (= $x82 true)))
 (let (($x71 (= $x84 true)))
 (let (($x87 (= $x71 true)))
 (let ((?x128 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x128) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x120 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x36 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x36) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x120) ?x123))))
 (let (($x124 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x27 (=> $x67 $x124)))
 (let (($x55 (and $x107 $x27)))
 (let (($x9 (= $x55 true)))
 (let (($x86 (= $x9 true)))
 (let (($x52 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (and $x52 $x84)))
 (let (($x126 (= $x53 true)))
 (let (($x24 (= $x126 true)))
 (let (($x129 (= $x52 true)))
 (let (($x92 (= $x129 true)))
 (let ((?x26 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x26)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x8 $x100)))
 (let (($x117 (and $x50 $x93)))
 (let (($x34 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x34 $x117)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x48)))))))
 (let (($x115 (and $x23 $x59)))
 (let (($x22 (= $x115 true)))
 (let (($x116 (= $x22 true)))
 (let ((?x113 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x113)))
 (let (($x90 (= ?x17 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x74 (= $x90 true)))
 (let (($x121 (and $x74 $x116)))
 (let (($x40 (and $x121 $x92)))
 (let (($x94 (and $x40 $x24)))
 (let (($x105 (and $x94 $x86)))
 (let (($x57 (and $x105 $x87)))
 (let (($x140 (and $x57 $x75)))
 (let (($x91 (and $x140 $x60)))
 (let (($x103 (and $x67 $x91)))
 (let (($x47 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x141 (and $x47 $x103)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x66 (and $x18 $x141)))
 (let (($x138 (and $x12 $x66)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x62 (or false (or false (and true (or $x79 $x58)))))))
 (let (($x72 (and $x80 $x138)))
 (let (($x145 (=> $x72 $x144)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x84 (= input.spec-%tmpvar-3.L2%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x139 (=> true $x84)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x20 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x20 (_ bv1 32))))
 (let (($x33 (= true $x7)))
 (let (($x104 (= ?x20 (_ bv0 32))))
 (let (($x109 (= false $x104)))
 (let (($x137 (and $x109 true)))
 (let (($x73 (and $x137 $x33)))
 (let (($x142 (and $x73 $x139)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let ((?x127 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x10 (= (_ bv0 2) ?x127)))
 (let (($x60 (= $x10 true)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x133)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x97)))
 (let (($x122 (= input.spec-%var-opt-0.2 ?x95)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x135 (=> $x67 $x122)))
 (let (($x114 (= $x67 $x7)))
 (let (($x12 (= false false)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x110 (=> $x108 $x12)))
 (let (($x118 (= $x108 $x104)))
 (let (($x28 (and $x118 $x110)))
 (let (($x107 (and $x28 $x114)))
 (let (($x136 (and $x107 $x135)))
 (let (($x82 (= $x136 true)))
 (let (($x75 (= $x82 true)))
 (let (($x71 (= $x84 true)))
 (let (($x87 (= $x71 true)))
 (let ((?x128 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x128) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x120 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x36 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x36) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x120) ?x123))))
 (let (($x124 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x27 (=> $x67 $x124)))
 (let (($x55 (and $x107 $x27)))
 (let (($x9 (= $x55 true)))
 (let (($x86 (= $x9 true)))
 (let (($x52 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x53 (and $x52 $x84)))
 (let (($x126 (= $x53 true)))
 (let (($x24 (= $x126 true)))
 (let (($x129 (= $x52 true)))
 (let (($x92 (= $x129 true)))
 (let ((?x26 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x26)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x8 $x100)))
 (let (($x117 (and $x50 $x93)))
 (let (($x34 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x34 $x117)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x48)))))))
 (let (($x115 (and $x23 $x59)))
 (let (($x22 (= $x115 true)))
 (let (($x116 (= $x22 true)))
 (let ((?x113 (bvmul input.spec-%var-val-1.L2%5%fcallStart (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x113)))
 (let (($x90 (= ?x17 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x74 (= $x90 true)))
 (let (($x121 (and $x74 $x116)))
 (let (($x40 (and $x121 $x92)))
 (let (($x94 (and $x40 $x24)))
 (let (($x105 (and $x94 $x86)))
 (let (($x57 (and $x105 $x87)))
 (let (($x140 (and $x57 $x75)))
 (let (($x91 (and $x140 $x60)))
 (let (($x103 (and $x67 $x91)))
 (let (($x47 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L2%5%fcallStart)))
 (let (($x141 (and $x47 $x103)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd)))
 (let (($x66 (and $x18 $x141)))
 (let (($x138 (and $x12 $x66)))
 (let (($x58 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x62 (or false (or false (and true (or $x79 $x58)))))))
 (let (($x72 (and $x80 $x138)))
 (let (($x145 (=> $x72 $x144)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x99 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x102 (or (bvugt input.memlabel-mem--arg.0_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x30 $x99)))))))
 (let (($x81 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x37 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= ?x37 (_ bv0 32))))
 (let ((?x43 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x36 $x61)))
 (let (($x98 (and $x77 $x11)))
 (let (($x76 (and $x98 $x81)))
 (and $x76 $x23)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x99 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x102 (or (bvugt input.memlabel-mem--arg.0_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x30 $x99)))))))
 (let (($x81 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x37 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= ?x37 (_ bv0 32))))
 (let ((?x43 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x36 $x61)))
 (let (($x98 (and $x77 $x11)))
 (let (($x76 (and $x98 $x81)))
 (and $x76 $x23)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x126 (= true false)))
 (let (($x24 (= $x126 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x52 (concat ?x121 (concat ?x59 ?x93)))))
 (let (($x92 (= ?x129 input.dst.llvm-%val)))
 (let (($x40 (= $x92 true)))
 (let ((?x21 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x21)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x37 $x106)))
 (let (($x23 (and $x36 $x85)))
 (let (($x34 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x34 $x23)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x58)))))))
 (let (($x15 (and $x79 $x74)))
 (let (($x43 (= $x15 true)))
 (let (($x112 (= $x43 true)))
 (let (($x113 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x65 (= $x113 true)))
 (let (($x41 (= $x65 true)))
 (let (($x100 (and $x41 $x112)))
 (let (($x96 (and $x100 $x40)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x13 (and $x29 $x96)))
 (let ((?x81 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x11 (= ?x81 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x84 (and $x11 $x13)))
 (let (($x80 (= ?x81 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x53 (and $x80 $x84)))
 (let (($x94 (=> $x53 $x24)))
 (not $x94)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x126 (= true false)))
 (let (($x24 (= $x126 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x52 (concat ?x121 (concat ?x59 ?x93)))))
 (let (($x92 (= ?x129 input.dst.llvm-%val)))
 (let (($x40 (= $x92 true)))
 (let ((?x21 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x21)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x37 $x106)))
 (let (($x23 (and $x36 $x85)))
 (let (($x34 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x34 $x23)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x58)))))))
 (let (($x15 (and $x79 $x74)))
 (let (($x43 (= $x15 true)))
 (let (($x112 (= $x43 true)))
 (let (($x113 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x65 (= $x113 true)))
 (let (($x41 (= $x65 true)))
 (let (($x100 (and $x41 $x112)))
 (let (($x96 (and $x100 $x40)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x13 (and $x29 $x96)))
 (let ((?x81 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x11 (= ?x81 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x84 (and $x11 $x13)))
 (let (($x80 (= ?x81 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x53 (and $x80 $x84)))
 (let (($x94 (=> $x53 $x24)))
 (not $x94)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000001010)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111110110)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111110110)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv10 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x81 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x49 (= ?x81 ?x94)))
 (let (($x61 (= $x49 true)))
 (let (($x26 (= $x61 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x59 (concat ?x62 (concat ?x29 ?x48)))))
 (let (($x96 (= ?x93 input.dst.llvm-%val)))
 (let (($x13 (= $x96 true)))
 (let (($x115 (= input.dst.llvm-%val ?x93)))
 (let ((?x23 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x23)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x37 $x31)))
 (let (($x85 (and $x43 $x34)))
 (let (($x16 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x16 $x85)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x47)))))))
 (let (($x21 (and $x17 $x100)))
 (let (($x68 (and $x21 $x115)))
 (let (($x18 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x129 (and $x18 $x68)))
 (let (($x92 (= $x129 true)))
 (let (($x40 (= $x92 true)))
 (let (($x84 (and $x40 $x13)))
 (let (($x98 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x53 (and $x98 $x84)))
 (let (($x80 (= ?x81 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x126 (and $x80 $x53)))
 (let (($x56 (= ?x81 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x24 (and $x56 $x126)))
 (let (($x108 (=> $x24 $x26)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x81 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x49 (= ?x81 ?x94)))
 (let (($x61 (= $x49 true)))
 (let (($x26 (= $x61 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x59 (concat ?x62 (concat ?x29 ?x48)))))
 (let (($x96 (= ?x93 input.dst.llvm-%val)))
 (let (($x13 (= $x96 true)))
 (let (($x115 (= input.dst.llvm-%val ?x93)))
 (let ((?x23 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x23)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x37 $x31)))
 (let (($x85 (and $x43 $x34)))
 (let (($x16 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x16 $x85)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x47)))))))
 (let (($x21 (and $x17 $x100)))
 (let (($x68 (and $x21 $x115)))
 (let (($x18 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x129 (and $x18 $x68)))
 (let (($x92 (= $x129 true)))
 (let (($x40 (= $x92 true)))
 (let (($x84 (and $x40 $x13)))
 (let (($x98 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x53 (and $x98 $x84)))
 (let (($x80 (= ?x81 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x126 (and $x80 $x53)))
 (let (($x56 (= ?x81 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x24 (and $x56 $x126)))
 (let (($x108 (=> $x24 $x26)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462303/query
