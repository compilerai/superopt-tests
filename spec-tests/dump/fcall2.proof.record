==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x19 (not $x10)))
 (let (($x104 (= $x19 false)))
 (let (($x105 (= $x104 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x96 (concat ?x93 (concat ?x90 ?x88)))))
 (let (($x98 (= ?x97 input.dst.llvm-%opt)))
 (let (($x99 (= $x98 true)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x73)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x77)))
 (let (($x80 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x66 $x80)))
 (let ((?x62 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x62 (_ bv1 32))))
 (let (($x68 (= $x66 $x67)))
 (let (($x9 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x61 $x9)))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (let (($x64 (= $x61 $x63)))
 (let (($x84 (and (and (and $x64 $x65) $x68) $x81)))
 (let (($x85 (= $x84 true)))
 (let (($x52 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x57 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x57 (or false (or false (and true (or $x51 $x52)))))))
 (let (($x15 (=> (and $x19 $x57) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x39 (= $x15 true)))
 (let ((?x28 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x28)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x36 $x33)))
 (let (($x14 (and $x38 $x27)))
 (let (($x24 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x24 $x14)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x26)))))))
 (let (($x16 (and $x44 $x30)))
 (let (($x6 (= $x16 true)))
 (let (($x59 (and $x6 $x39)))
 (let (($x86 (and $x59 $x85)))
 (let (($x100 (and $x86 $x99)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x101 (and $x21 $x100)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x102 (and $x7 $x101)))
 (let (($x103 (and $x9 $x102)))
 (let (($x106 (=> $x103 $x105)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x19 (not $x10)))
 (let (($x104 (= $x19 false)))
 (let (($x105 (= $x104 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x96 (concat ?x93 (concat ?x90 ?x88)))))
 (let (($x98 (= ?x97 input.dst.llvm-%opt)))
 (let (($x99 (= $x98 true)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x73)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x77)))
 (let (($x80 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x66 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x66 $x80)))
 (let ((?x62 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x62 (_ bv1 32))))
 (let (($x68 (= $x66 $x67)))
 (let (($x9 (= false false)))
 (let (($x61 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x61 $x9)))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (let (($x64 (= $x61 $x63)))
 (let (($x84 (and (and (and $x64 $x65) $x68) $x81)))
 (let (($x85 (= $x84 true)))
 (let (($x52 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x57 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x57 (or false (or false (and true (or $x51 $x52)))))))
 (let (($x15 (=> (and $x19 $x57) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x39 (= $x15 true)))
 (let ((?x28 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x28)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x36 $x33)))
 (let (($x14 (and $x38 $x27)))
 (let (($x24 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x24 $x14)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x26)))))))
 (let (($x16 (and $x44 $x30)))
 (let (($x6 (= $x16 true)))
 (let (($x59 (and $x6 $x39)))
 (let (($x86 (and $x59 $x85)))
 (let (($x100 (and $x86 $x99)))
 (let (($x21 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x101 (and $x21 $x100)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x102 (and $x7 $x101)))
 (let (($x103 (and $x9 $x102)))
 (let (($x106 (=> $x103 $x105)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfd)
                     #x42f70005
                     #xff)
              #x42f70007
              #x32)
       #x42f70006
       #xde))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x32defffd)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42f70007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2158588 32) (_ bv253 8)) (_ bv2158589 32) (_ bv255 8)) (_ bv2158590 32) (_ bv255 8)) (_ bv2158591 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2158591 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x108 (or $x69 $x21)))
 (let (($x109 (= $x108 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x94 ?x88)))))
 (let (($x104 (= ?x103 input.dst.llvm-%opt)))
 (let (($x105 (= $x104 true)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x70)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x80)))
 (let (($x85 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x86 (=> $x69 $x85)))
 (let ((?x66 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x66 (_ bv1 32))))
 (let (($x74 (= $x69 $x78)))
 (let (($x8 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x83 (=> $x82 $x8)))
 (let (($x67 (= ?x66 (_ bv0 32))))
 (let (($x68 (= $x82 $x67)))
 (let (($x92 (and (and (and $x68 $x83) $x74) $x86)))
 (let (($x93 (= $x92 true)))
 (let (($x63 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x64 (= $x63 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x15 (and $x55 $x58)))
 (let (($x30 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x30 $x15)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x19)))))))
 (let (($x59 (and $x51 $x39)))
 (let (($x60 (= $x59 true)))
 (let (($x9 (and $x60 $x64)))
 (let (($x89 (and $x9 $x93)))
 (let (($x106 (and $x89 $x105)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x107 (and $x28 $x106)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x23 (and $x33 $x107)))
 (let (($x29 (and $x8 $x23)))
 (let (($x43 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x24 (or false (or false (and true (or $x32 $x43)))))))
 (let (($x22 (not $x21)))
 (let (($x17 (=> (and $x22 $x24) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x87 (and $x17 $x29)))
 (let (($x110 (=> $x87 $x109)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x108 (or $x69 $x21)))
 (let (($x109 (= $x108 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x94 ?x88)))))
 (let (($x104 (= ?x103 input.dst.llvm-%opt)))
 (let (($x105 (= $x104 true)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x70)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x80)))
 (let (($x85 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x86 (=> $x69 $x85)))
 (let ((?x66 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x66 (_ bv1 32))))
 (let (($x74 (= $x69 $x78)))
 (let (($x8 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x83 (=> $x82 $x8)))
 (let (($x67 (= ?x66 (_ bv0 32))))
 (let (($x68 (= $x82 $x67)))
 (let (($x92 (and (and (and $x68 $x83) $x74) $x86)))
 (let (($x93 (= $x92 true)))
 (let (($x63 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x64 (= $x63 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x15 (and $x55 $x58)))
 (let (($x30 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x30 $x15)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x19)))))))
 (let (($x59 (and $x51 $x39)))
 (let (($x60 (= $x59 true)))
 (let (($x9 (and $x60 $x64)))
 (let (($x89 (and $x9 $x93)))
 (let (($x106 (and $x89 $x105)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x107 (and $x28 $x106)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x23 (and $x33 $x107)))
 (let (($x29 (and $x8 $x23)))
 (let (($x43 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x24 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x24 (or false (or false (and true (or $x32 $x43)))))))
 (let (($x22 (not $x21)))
 (let (($x17 (=> (and $x22 $x24) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x87 (and $x17 $x29)))
 (let (($x110 (=> $x87 $x109)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x72 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x72)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x73 $x79)))
 (let (($x70 (and $x71 $x76)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x81 $x70)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x6)))))))
 (let (($x27 (and $x36 $x80)))
 (let (($x90 (= $x27 true)))
 (let (($x86 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x7 (not $x18)))
 (let (($x107 (=> $x7 $x86)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x88 (concat ?x99 (concat ?x101 ?x93)))))
 (let (($x100 (= input.dst.llvm-%opt ?x97)))
 (let (($x103 (and $x86 $x100)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x66)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x58 (= input.spec-%var-opt-0.2 ?x28)))
 (let (($x53 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x62 (=> $x53 $x58)))
 (let ((?x40 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x61 (bvuge ?x40 (_ bv1 32))))
 (let (($x59 (= $x53 $x61)))
 (let (($x25 (= false false)))
 (let (($x45 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x9 (=> $x45 $x25)))
 (let (($x55 (= ?x40 (_ bv0 32))))
 (let (($x63 (= $x45 $x55)))
 (let (($x10 (and (and (and $x63 $x9) $x59) $x62)))
 (let (($x106 (and (and (and $x36 $x10) $x80) $x103)))
 (let (($x23 (and $x106 $x107)))
 (let (($x29 (= $x23 true)))
 (let (($x8 (= $x7 true)))
 (let (($x87 (and $x8 $x29)))
 (let (($x108 (and $x53 $x87)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x109 (and $x49 $x108)))
 (let (($x26 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x110 (and $x26 $x109)))
 (let (($x111 (and $x25 $x110)))
 (let (($x83 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x50 (=> $x74 (or false (or false (and true (or $x46 $x83)))))))
 (let (($x13 (=> (and $x7 $x74) (or false (or false (and true (or $x46 $x83)))))))
 (let (($x20 (and $x13 $x111)))
 (let (($x112 (=> $x20 $x90)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x72 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x72)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x73 $x79)))
 (let (($x70 (and $x71 $x76)))
 (let (($x81 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x81 $x70)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x6)))))))
 (let (($x27 (and $x36 $x80)))
 (let (($x90 (= $x27 true)))
 (let (($x86 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x7 (not $x18)))
 (let (($x107 (=> $x7 $x86)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x88 (concat ?x99 (concat ?x101 ?x93)))))
 (let (($x100 (= input.dst.llvm-%opt ?x97)))
 (let (($x103 (and $x86 $x100)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x66)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x58 (= input.spec-%var-opt-0.2 ?x28)))
 (let (($x53 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x62 (=> $x53 $x58)))
 (let ((?x40 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x61 (bvuge ?x40 (_ bv1 32))))
 (let (($x59 (= $x53 $x61)))
 (let (($x25 (= false false)))
 (let (($x45 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x9 (=> $x45 $x25)))
 (let (($x55 (= ?x40 (_ bv0 32))))
 (let (($x63 (= $x45 $x55)))
 (let (($x10 (and (and (and $x63 $x9) $x59) $x62)))
 (let (($x106 (and (and (and $x36 $x10) $x80) $x103)))
 (let (($x23 (and $x106 $x107)))
 (let (($x29 (= $x23 true)))
 (let (($x8 (= $x7 true)))
 (let (($x87 (and $x8 $x29)))
 (let (($x108 (and $x53 $x87)))
 (let (($x49 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x109 (and $x49 $x108)))
 (let (($x26 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x110 (and $x26 $x109)))
 (let (($x111 (and $x25 $x110)))
 (let (($x83 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x50 (=> $x74 (or false (or false (and true (or $x46 $x83)))))))
 (let (($x13 (=> (and $x7 $x74) (or false (or false (and true (or $x46 $x83)))))))
 (let (($x20 (and $x13 $x111)))
 (let (($x112 (=> $x20 $x90)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x22 (= (_ bv0 32) ?x58)))
 (let (($x5 (= $x22 true)))
 (let (($x94 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x7 (not $x18)))
 (let (($x108 (=> $x7 $x94)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x100 (concat ?x102 (concat ?x89 ?x98)))))
 (let (($x106 (= input.dst.llvm-%opt ?x103)))
 (let (($x107 (and $x94 $x106)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x70)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x79 $x72)))
 (let (($x105 (and $x76 $x80)))
 (let (($x77 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x77 $x105)))
 (let (($x62 (= input.spec-%var-opt-0.2 ?x58)))
 (let (($x95 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x95 $x62)))
 (let ((?x34 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x34 (_ bv1 32))))
 (let (($x60 (= $x95 $x37)))
 (let (($x74 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x59 (=> $x78 $x74)))
 (let (($x53 (= ?x34 (_ bv0 32))))
 (let (($x61 (= $x78 $x53)))
 (let (($x81 (and (and (and $x61 $x59) $x60) $x10)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x45)))))))
 (let (($x87 (and (and (and $x16 $x81) $x84) $x107)))
 (let (($x109 (and $x87 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x33 (= $x7 true)))
 (let (($x111 (and $x33 $x110)))
 (let (($x20 (and $x95 $x111)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x27 (and $x11 $x20)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x90 (and $x8 $x27)))
 (let (($x112 (and $x74 $x90)))
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x35 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x26 (=> $x35 (or false (or false (and true (or $x30 $x69)))))))
 (let (($x48 (=> (and $x7 $x35) (or false (or false (and true (or $x30 $x69)))))))
 (let (($x113 (and $x48 $x112)))
 (let (($x43 (=> $x113 $x5)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let (($x22 (= (_ bv0 32) ?x58)))
 (let (($x5 (= $x22 true)))
 (let (($x94 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x7 (not $x18)))
 (let (($x108 (=> $x7 $x94)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x100 (concat ?x102 (concat ?x89 ?x98)))))
 (let (($x106 (= input.dst.llvm-%opt ?x103)))
 (let (($x107 (and $x94 $x106)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x70)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x79 $x72)))
 (let (($x105 (and $x76 $x80)))
 (let (($x77 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x77 $x105)))
 (let (($x62 (= input.spec-%var-opt-0.2 ?x58)))
 (let (($x95 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x10 (=> $x95 $x62)))
 (let ((?x34 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x34 (_ bv1 32))))
 (let (($x60 (= $x95 $x37)))
 (let (($x74 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x59 (=> $x78 $x74)))
 (let (($x53 (= ?x34 (_ bv0 32))))
 (let (($x61 (= $x78 $x53)))
 (let (($x81 (and (and (and $x61 $x59) $x60) $x10)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x45)))))))
 (let (($x87 (and (and (and $x16 $x81) $x84) $x107)))
 (let (($x109 (and $x87 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x33 (= $x7 true)))
 (let (($x111 (and $x33 $x110)))
 (let (($x20 (and $x95 $x111)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x27 (and $x11 $x20)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x90 (and $x8 $x27)))
 (let (($x112 (and $x74 $x90)))
 (let (($x69 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x35 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x26 (=> $x35 (or false (or false (and true (or $x30 $x69)))))))
 (let (($x48 (=> (and $x7 $x35) (or false (or false (and true (or $x30 $x69)))))))
 (let (($x113 (and $x48 $x112)))
 (let (($x43 (=> $x113 $x5)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x007f37fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x007f37fe
                     #x39)
              #x007f37fd
              #x04)
       #x00390402
       #x01))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x007f37ff)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00390400)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x007f37fc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294443000 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294459396 32) (_ bv248 8)) (_ bv4294459397 32) (_ bv255 8)) (_ bv4294459398 32) (_ bv247 8)) (_ bv4294459399 32) (_ bv255 8)) (_ bv4294443000 32) (_ bv1 8)))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294459396 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294459396 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294459399 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x67)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let ((?x21 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x21)))
 (let (($x88 (= ?x6 ?x62)))
 (let (($x114 (= $x88 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x41 (not $x31)))
 (let (($x20 (=> $x41 $x97)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x101 (concat ?x99 ?x93)))))
 (let (($x87 (= input.dst.llvm-%opt ?x107)))
 (let (($x108 (and $x97 $x87)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x105)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x72 $x70)))
 (let (($x29 (and $x80 $x84)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x71 $x29)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x36 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x36 $x10)))
 (let ((?x55 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x55 (_ bv1 32))))
 (let (($x39 (= $x36 $x75)))
 (let (($x44 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x60 (=> $x40 $x44)))
 (let (($x95 (= ?x55 (_ bv0 32))))
 (let (($x37 (= $x40 $x95)))
 (let (($x77 (and (and (and $x37 $x60) $x39) $x81)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x78)))))))
 (let (($x111 (and (and (and $x104 $x77) $x85) $x108)))
 (let (($x27 (and $x111 $x20)))
 (let (($x90 (= $x27 true)))
 (let (($x57 (= $x41 true)))
 (let (($x112 (and $x57 $x90)))
 (let (($x113 (and $x36 $x112)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x22 (and $x32 $x113)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x5 (and $x33 $x22)))
 (let (($x43 (and $x44 $x5)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x96 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x49 (=> $x96 (or false (or false (and true (or $x52 $x50)))))))
 (let (($x42 (=> (and $x41 $x96) (or false (or false (and true (or $x52 $x50)))))))
 (let (($x92 (and $x42 $x43)))
 (let (($x115 (=> $x92 $x114)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x67)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x54)))
 (let ((?x21 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x21)))
 (let (($x88 (= ?x6 ?x62)))
 (let (($x114 (= $x88 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x41 (not $x31)))
 (let (($x20 (=> $x41 $x97)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x101 (concat ?x99 ?x93)))))
 (let (($x87 (= input.dst.llvm-%opt ?x107)))
 (let (($x108 (and $x97 $x87)))
 (let ((?x105 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x105)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x72 $x70)))
 (let (($x29 (and $x80 $x84)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x71 $x29)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x36 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x36 $x10)))
 (let ((?x55 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x55 (_ bv1 32))))
 (let (($x39 (= $x36 $x75)))
 (let (($x44 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x60 (=> $x40 $x44)))
 (let (($x95 (= ?x55 (_ bv0 32))))
 (let (($x37 (= $x40 $x95)))
 (let (($x77 (and (and (and $x37 $x60) $x39) $x81)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x78)))))))
 (let (($x111 (and (and (and $x104 $x77) $x85) $x108)))
 (let (($x27 (and $x111 $x20)))
 (let (($x90 (= $x27 true)))
 (let (($x57 (= $x41 true)))
 (let (($x112 (and $x57 $x90)))
 (let (($x113 (and $x36 $x112)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x22 (and $x32 $x113)))
 (let (($x33 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x5 (and $x33 $x22)))
 (let (($x43 (and $x44 $x5)))
 (let (($x50 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x96 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x49 (=> $x96 (or false (or false (and true (or $x52 $x50)))))))
 (let (($x42 (=> (and $x41 $x96) (or false (or false (and true (or $x52 $x50)))))))
 (let (($x92 (and $x42 $x43)))
 (let (($x115 (=> $x92 $x114)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x7 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x114 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x115 (bvmul (_ bv8 10) ?x114)))
 (let ((?x116 (bvneg ?x115)))
 (let (($x45 (= ?x116 ?x7)))
 (let (($x100 (= $x45 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x56 (not $x18)))
 (let (($x112 (=> $x56 $x97)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x107 (concat ?x93 (concat ?x101 ?x106)))))
 (let (($x108 (= input.dst.llvm-%opt ?x87)))
 (let (($x111 (and $x97 $x108)))
 (let ((?x84 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x84)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x76 $x80)))
 (let (($x85 (and $x105 $x29)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x72 $x85)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x67)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x59 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x59 $x10)))
 (let ((?x34 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x39 (bvuge ?x34 (_ bv1 32))))
 (let (($x73 (= $x59 $x39)))
 (let (($x35 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x78 $x35)))
 (let (($x23 (= ?x34 (_ bv0 32))))
 (let (($x36 (= $x78 $x23)))
 (let (($x79 (and (and (and $x36 $x75) $x73) $x81)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x9)))))))
 (let (($x90 (and (and (and $x60 $x79) $x110) $x111)))
 (let (($x113 (and $x90 $x112)))
 (let (($x22 (= $x113 true)))
 (let (($x16 (= $x56 true)))
 (let (($x5 (and $x16 $x22)))
 (let (($x43 (and $x59 $x5)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x92 (and $x63 $x43)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x12 (and $x32 $x92)))
 (let (($x21 (and $x35 $x12)))
 (let (($x24 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x8 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x8 (or false (or false (and true (or $x13 $x24)))))))
 (let (($x68 (=> (and $x56 $x8) (or false (or false (and true (or $x13 $x24)))))))
 (let (($x6 (and $x68 $x21)))
 (let (($x117 (=> $x6 $x100)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x7 ((_ extract 9 0) input.dst.llvm-%opt)))
 (let ((?x114 ((_ extract 9 0) input.spec-%var-opt-0.2)))
 (let ((?x115 (bvmul (_ bv8 10) ?x114)))
 (let ((?x116 (bvneg ?x115)))
 (let (($x45 (= ?x116 ?x7)))
 (let (($x100 (= $x45 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x56 (not $x18)))
 (let (($x112 (=> $x56 $x97)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x107 (concat ?x93 (concat ?x101 ?x106)))))
 (let (($x108 (= input.dst.llvm-%opt ?x87)))
 (let (($x111 (and $x97 $x108)))
 (let ((?x84 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x84)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x76 $x80)))
 (let (($x85 (and $x105 $x29)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x72 $x85)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x67)))
 (let (($x10 (= input.spec-%var-opt-0.2 ?x62)))
 (let (($x59 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x81 (=> $x59 $x10)))
 (let ((?x34 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x39 (bvuge ?x34 (_ bv1 32))))
 (let (($x73 (= $x59 $x39)))
 (let (($x35 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x75 (=> $x78 $x35)))
 (let (($x23 (= ?x34 (_ bv0 32))))
 (let (($x36 (= $x78 $x23)))
 (let (($x79 (and (and (and $x36 $x75) $x73) $x81)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x9)))))))
 (let (($x90 (and (and (and $x60 $x79) $x110) $x111)))
 (let (($x113 (and $x90 $x112)))
 (let (($x22 (= $x113 true)))
 (let (($x16 (= $x56 true)))
 (let (($x5 (and $x16 $x22)))
 (let (($x43 (and $x59 $x5)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x92 (and $x63 $x43)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x12 (and $x32 $x92)))
 (let (($x21 (and $x35 $x12)))
 (let (($x24 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x8 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x8 (or false (or false (and true (or $x13 $x24)))))))
 (let (($x68 (=> (and $x56 $x8) (or false (or false (and true (or $x13 $x24)))))))
 (let (($x6 (and $x68 $x21)))
 (let (($x117 (=> $x6 $x100)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000001000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000001000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000001000000)
(= input.dst.llvm-mem @fun_20)
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_20 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_20 #b10000000000000000000000000000000) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xfffffffc #x04))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv2147474944 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv79 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147500028 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147500029 32) (_ bv222 8)) (_ bv2147500030 32) (_ bv255 8)) (_ bv2147500031 32) (_ bv127 8)) (_ bv2147474944 32) (_ bv79 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147500028 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147500031 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv79 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv79 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x100 (= (_ bv0 2) ?x45)))
 (let (($x117 (= $x100 true)))
 (let (($x91 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x56 (not $x47)))
 (let (($x43 (=> $x56 $x91)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x108 (concat ?x102 (concat ?x98 ?x99)))))
 (let (($x90 (= input.dst.llvm-%opt ?x111)))
 (let (($x112 (and $x91 $x90)))
 (let ((?x85 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x85)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x80 $x84)))
 (let (($x27 (and $x29 $x110)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x70 $x27)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x51)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x67)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x10)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x79 (=> $x74 $x81)))
 (let ((?x55 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x55 (_ bv1 32))))
 (let (($x28 (= $x74 $x109)))
 (let (($x8 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x73 (=> $x40 $x8)))
 (let (($x59 (= ?x55 (_ bv0 32))))
 (let (($x39 (= $x40 $x59)))
 (let (($x72 (and (and (and $x39 $x73) $x28) $x79)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x78)))))))
 (let (($x5 (and (and (and $x77 $x72) $x86) $x112)))
 (let (($x92 (and $x5 $x43)))
 (let (($x12 (= $x92 true)))
 (let (($x104 (= $x56 true)))
 (let (($x21 (and $x104 $x12)))
 (let (($x6 (and $x74 $x21)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x88 (and $x61 $x6)))
 (let (($x16 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x114 (and $x16 $x88)))
 (let (($x115 (and $x8 $x114)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x19 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x19 (or false (or false (and true (or $x48 $x49)))))))
 (let (($x14 (=> (and $x56 $x19) (or false (or false (and true (or $x48 $x49)))))))
 (let (($x116 (and $x14 $x115)))
 (let (($x118 (=> $x116 $x117)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x100 (= (_ bv0 2) ?x45)))
 (let (($x117 (= $x100 true)))
 (let (($x91 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x56 (not $x47)))
 (let (($x43 (=> $x56 $x91)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x108 (concat ?x102 (concat ?x98 ?x99)))))
 (let (($x90 (= input.dst.llvm-%opt ?x111)))
 (let (($x112 (and $x91 $x90)))
 (let ((?x85 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x85)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x80 $x84)))
 (let (($x27 (and $x29 $x110)))
 (let (($x70 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x70 $x27)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x51)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x67)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x10)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x79 (=> $x74 $x81)))
 (let ((?x55 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x55 (_ bv1 32))))
 (let (($x28 (= $x74 $x109)))
 (let (($x8 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x73 (=> $x40 $x8)))
 (let (($x59 (= ?x55 (_ bv0 32))))
 (let (($x39 (= $x40 $x59)))
 (let (($x72 (and (and (and $x39 $x73) $x28) $x79)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x78)))))))
 (let (($x5 (and (and (and $x77 $x72) $x86) $x112)))
 (let (($x92 (and $x5 $x43)))
 (let (($x12 (= $x92 true)))
 (let (($x104 (= $x56 true)))
 (let (($x21 (and $x104 $x12)))
 (let (($x6 (and $x74 $x21)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x88 (and $x61 $x6)))
 (let (($x16 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x114 (and $x16 $x88)))
 (let (($x115 (and $x8 $x114)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x19 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x19 (or false (or false (and true (or $x48 $x49)))))))
 (let (($x14 (=> (and $x56 $x19) (or false (or false (and true (or $x48 $x49)))))))
 (let (($x116 (and $x14 $x115)))
 (let (($x118 (=> $x116 $x117)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let ((?x31 (ite $x47 (_ bv1 1) (_ bv0 1))))
 (let ((?x41 ((_ zero_extend 31) ?x31)))
 (let (($x9 (= (_ bv1 32) ?x41)))
 (let (($x107 (= $x9 true)))
 (let (($x91 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x21 (=> $x47 $x91)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x111 (concat ?x99 (concat ?x102 ?x108)))))
 (let (($x112 (= input.dst.llvm-%opt ?x90)))
 (let (($x5 (and $x91 $x112)))
 (let ((?x110 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x110)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x105 $x29)))
 (let (($x86 (and $x85 $x27)))
 (let (($x80 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x80 $x86)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x10)))
 (let (($x75 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x79 (=> $x75 $x81)))
 (let ((?x34 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x34 (_ bv1 32))))
 (let (($x71 (= $x75 $x28)))
 (let (($x50 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x109 (=> $x78 $x50)))
 (let (($x20 (= ?x34 (_ bv0 32))))
 (let (($x74 (= $x78 $x20)))
 (let (($x76 (and (and (and $x74 $x109) $x71) $x79)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x44)))))))
 (let (($x12 (and (and (and $x73 $x76) $x22) $x5)))
 (let (($x6 (and $x12 $x21)))
 (let (($x88 (= $x6 true)))
 (let (($x60 (= $x47 true)))
 (let (($x114 (and $x60 $x88)))
 (let (($x115 (and $x75 $x114)))
 (let (($x95 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x95 $x115)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x7 (and $x61 $x116)))
 (let (($x45 (and $x50 $x7)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x57 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x63 (=> $x57 (or false (or false (and true (or $x42 $x11)))))))
 (let (($x30 (=> (and $x47 $x57) (or false (or false (and true (or $x42 $x11)))))))
 (let (($x100 (and $x30 $x45)))
 (let (($x83 (=> $x100 $x107)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let ((?x31 (ite $x47 (_ bv1 1) (_ bv0 1))))
 (let ((?x41 ((_ zero_extend 31) ?x31)))
 (let (($x9 (= (_ bv1 32) ?x41)))
 (let (($x107 (= $x9 true)))
 (let (($x91 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x21 (=> $x47 $x91)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x111 (concat ?x99 (concat ?x102 ?x108)))))
 (let (($x112 (= input.dst.llvm-%opt ?x90)))
 (let (($x5 (and $x91 $x112)))
 (let ((?x110 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x110)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x105 $x29)))
 (let (($x86 (and $x85 $x27)))
 (let (($x80 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x80 $x86)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x10)))
 (let (($x75 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x79 (=> $x75 $x81)))
 (let ((?x34 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x34 (_ bv1 32))))
 (let (($x71 (= $x75 $x28)))
 (let (($x50 (= false false)))
 (let (($x78 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x109 (=> $x78 $x50)))
 (let (($x20 (= ?x34 (_ bv0 32))))
 (let (($x74 (= $x78 $x20)))
 (let (($x76 (and (and (and $x74 $x109) $x71) $x79)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x44)))))))
 (let (($x12 (and (and (and $x73 $x76) $x22) $x5)))
 (let (($x6 (and $x12 $x21)))
 (let (($x88 (= $x6 true)))
 (let (($x60 (= $x47 true)))
 (let (($x114 (and $x60 $x88)))
 (let (($x115 (and $x75 $x114)))
 (let (($x95 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x95 $x115)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x7 (and $x61 $x116)))
 (let (($x45 (and $x50 $x7)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x57 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x63 (=> $x57 (or false (or false (and true (or $x42 $x11)))))))
 (let (($x30 (=> (and $x47 $x57) (or false (or false (and true (or $x42 $x11)))))))
 (let (($x100 (and $x30 $x45)))
 (let (($x83 (=> $x100 $x107)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x53 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x61 (=> $x53 (or false (or false (and true (or $x33 $x32)))))))
 (let (($x9 (= $x61 true)))
 (let (($x89 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x115 (=> $x47 $x89)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x112 (concat ?x93 (concat ?x106 ?x98)))))
 (let (($x12 (= input.dst.llvm-%opt ?x5)))
 (let (($x21 (and $x89 $x12)))
 (let ((?x86 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x86)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x110)))
 (let (($x92 (and $x27 $x22)))
 (let (($x84 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x84 $x92)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x15)))
 (let ((?x81 (concat (select input.dst.llvm-mem ?x68) ?x51)))
 (let (($x79 (= input.spec-%var-opt-0.2 ?x81)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x76 (=> $x35 $x79)))
 (let ((?x55 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x113 (bvuge ?x55 (_ bv1 32))))
 (let (($x54 (= $x35 $x113)))
 (let (($x57 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x40 $x57)))
 (let (($x75 (= ?x55 (_ bv0 32))))
 (let (($x28 (= $x40 $x75)))
 (let (($x80 (and (and (and $x28 $x71) $x54) $x76)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x78)))))))
 (let (($x114 (and (and (and $x72 $x80) $x94) $x21)))
 (let (($x116 (and $x114 $x115)))
 (let (($x7 (= $x116 true)))
 (let (($x77 (= $x47 true)))
 (let (($x45 (and $x77 $x7)))
 (let (($x100 (and $x35 $x45)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x117 (and $x36 $x100)))
 (let (($x60 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x118 (and $x60 $x117)))
 (let (($x31 (and $x57 $x118)))
 (let (($x24 (=> (and $x47 $x53) (or false (or false (and true (or $x33 $x32)))))))
 (let (($x41 (and $x24 $x31)))
 (let (($x107 (=> $x41 $x9)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x32 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x53 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x61 (=> $x53 (or false (or false (and true (or $x33 $x32)))))))
 (let (($x9 (= $x61 true)))
 (let (($x89 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x115 (=> $x47 $x89)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x112 (concat ?x93 (concat ?x106 ?x98)))))
 (let (($x12 (= input.dst.llvm-%opt ?x5)))
 (let (($x21 (and $x89 $x12)))
 (let ((?x86 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x86)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x110)))
 (let (($x92 (and $x27 $x22)))
 (let (($x84 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x84 $x92)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x15)))
 (let ((?x81 (concat (select input.dst.llvm-mem ?x68) ?x51)))
 (let (($x79 (= input.spec-%var-opt-0.2 ?x81)))
 (let (($x35 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x76 (=> $x35 $x79)))
 (let ((?x55 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x113 (bvuge ?x55 (_ bv1 32))))
 (let (($x54 (= $x35 $x113)))
 (let (($x57 (= false false)))
 (let (($x40 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x40 $x57)))
 (let (($x75 (= ?x55 (_ bv0 32))))
 (let (($x28 (= $x40 $x75)))
 (let (($x80 (and (and (and $x28 $x71) $x54) $x76)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x78)))))))
 (let (($x114 (and (and (and $x72 $x80) $x94) $x21)))
 (let (($x116 (and $x114 $x115)))
 (let (($x7 (= $x116 true)))
 (let (($x77 (= $x47 true)))
 (let (($x45 (and $x77 $x7)))
 (let (($x100 (and $x35 $x45)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x117 (and $x36 $x100)))
 (let (($x60 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x118 (and $x60 $x117)))
 (let (($x31 (and $x57 $x118)))
 (let (($x24 (=> (and $x47 $x53) (or false (or false (and true (or $x33 $x32)))))))
 (let (($x41 (and $x24 $x31)))
 (let (($x107 (=> $x41 $x9)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x82)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x87 (= input.spec-%tmpvar-6.E0%0%d.2 ?x79)))
 (let (($x69 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (=> $x69 $x87)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x20 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x20 (_ bv1 32))))
 (let (($x56 (= $x69 $x70)))
 (let (($x53 (= false false)))
 (let (($x44 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x38 (=> $x44 $x53)))
 (let (($x35 (= ?x20 (_ bv0 32))))
 (let (($x111 (= $x44 $x35)))
 (let (($x121 (and (and (and $x111 $x38) $x56) $x103)))
 (let (($x122 (= $x121 true)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x100 (=> $x47 $x90)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x12 (concat ?x102 (concat ?x99 ?x108)))))
 (let (($x114 (= input.dst.llvm-%opt ?x21)))
 (let (($x115 (and $x90 $x114)))
 (let ((?x92 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x92)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x110 $x86)))
 (let (($x88 (and $x22 $x94)))
 (let (($x85 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x85 $x88)))
 (let (($x76 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x73 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x80 (=> $x73 $x76)))
 (let (($x67 (= $x73 $x70)))
 (let (($x34 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x34 $x53)))
 (let (($x113 (= $x34 $x35)))
 (let (($x84 (and (and (and $x113 $x54) $x67) $x80)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x40)))))))
 (let (($x45 (and (and (and $x43 $x84) $x97) $x115)))
 (let (($x117 (and $x45 $x100)))
 (let (($x118 (= $x117 true)))
 (let (($x37 (= $x47 true)))
 (let (($x31 (and $x37 $x118)))
 (let (($x41 (and $x73 $x31)))
 (let (($x39 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x9 (and $x39 $x41)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x107 (and $x77 $x9)))
 (let (($x83 (and $x53 $x107)))
 (let (($x30 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x95 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x95 (or false (or false (and true (or $x63 $x30)))))))
 (let (($x49 (=> (and $x47 $x95) (or false (or false (and true (or $x63 $x30)))))))
 (let (($x13 (and $x49 $x83)))
 (let (($x123 (=> $x13 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x82)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x87 (= input.spec-%tmpvar-6.E0%0%d.2 ?x79)))
 (let (($x69 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (=> $x69 $x87)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x20 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x20 (_ bv1 32))))
 (let (($x56 (= $x69 $x70)))
 (let (($x53 (= false false)))
 (let (($x44 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x38 (=> $x44 $x53)))
 (let (($x35 (= ?x20 (_ bv0 32))))
 (let (($x111 (= $x44 $x35)))
 (let (($x121 (and (and (and $x111 $x38) $x56) $x103)))
 (let (($x122 (= $x121 true)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x100 (=> $x47 $x90)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x12 (concat ?x102 (concat ?x99 ?x108)))))
 (let (($x114 (= input.dst.llvm-%opt ?x21)))
 (let (($x115 (and $x90 $x114)))
 (let ((?x92 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x92)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x110 $x86)))
 (let (($x88 (and $x22 $x94)))
 (let (($x85 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x85 $x88)))
 (let (($x76 (= input.spec-%var-opt-0.2 ?x79)))
 (let (($x73 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x80 (=> $x73 $x76)))
 (let (($x67 (= $x73 $x70)))
 (let (($x34 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x54 (=> $x34 $x53)))
 (let (($x113 (= $x34 $x35)))
 (let (($x84 (and (and (and $x113 $x54) $x67) $x80)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x40)))))))
 (let (($x45 (and (and (and $x43 $x84) $x97) $x115)))
 (let (($x117 (and $x45 $x100)))
 (let (($x118 (= $x117 true)))
 (let (($x37 (= $x47 true)))
 (let (($x31 (and $x37 $x118)))
 (let (($x41 (and $x73 $x31)))
 (let (($x39 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x9 (and $x39 $x41)))
 (let (($x77 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x107 (and $x77 $x9)))
 (let (($x83 (and $x53 $x107)))
 (let (($x30 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x95 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x95 (or false (or false (and true (or $x63 $x30)))))))
 (let (($x49 (=> (and $x47 $x95) (or false (or false (and true (or $x63 $x30)))))))
 (let (($x13 (and $x49 $x83)))
 (let (($x123 (=> $x13 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb7)
                     #xb6800218
                     #x1c)
              #xb680021a
              #xc1)
       #xb6800219
       #xfe))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb680021b)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xb7b7b7b7)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb6800218)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4278059000 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4278849540 32) (_ bv248 8)) (_ bv4278849541 32) (_ bv255 8)) (_ bv4278849542 32) (_ bv253 8)) (_ bv4278849543 32) (_ bv254 8)) (_ bv4278059000 32) (_ bv255 8)) (_ bv4278059001 32) (_ bv255 8)) (_ bv4278059002 32) (_ bv255 8)) (_ bv4278059003 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4278849540 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4278849540 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4278849543 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x62)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x80 (= input.spec-%var-opt-0.2 ?x76)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x84 (=> $x72 $x80)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x75 (_ bv1 32))))
 (let (($x10 (= $x72 $x105)))
 (let (($x95 (= false false)))
 (let (($x55 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x55 $x95)))
 (let (($x73 (= ?x75 (_ bv0 32))))
 (let (($x70 (= $x55 $x73)))
 (let (($x85 (and (and (and $x70 $x67) $x10) $x84)))
 (let (($x119 (= $x85 true)))
 (let (($x5 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x41 (=> $x47 $x5)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x106 (concat ?x93 ?x98)))))
 (let (($x45 (= input.dst.llvm-%opt ?x115)))
 (let (($x100 (and $x5 $x45)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x88)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x86 $x92)))
 (let (($x7 (and $x94 $x97)))
 (let (($x27 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x27 $x7)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x34)))))))
 (let (($x31 (and (and (and $x6 $x85) $x91) $x100)))
 (let (($x9 (and $x31 $x41)))
 (let (($x107 (= $x9 true)))
 (let (($x8 (= $x47 true)))
 (let (($x83 (and $x8 $x107)))
 (let (($x13 (and $x72 $x83)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x96 (and $x50 $x13)))
 (let (($x37 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x44 (and $x37 $x96)))
 (let (($x111 (and $x95 $x44)))
 (let (($x24 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x77 (=> $x36 (or false (or false (and true (or $x61 $x24)))))))
 (let (($x68 (=> (and $x47 $x36) (or false (or false (and true (or $x61 $x24)))))))
 (let (($x38 (and $x68 $x111)))
 (let (($x69 (=> $x38 $x119)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x62)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x80 (= input.spec-%var-opt-0.2 ?x76)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x84 (=> $x72 $x80)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x75 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x75 (_ bv1 32))))
 (let (($x10 (= $x72 $x105)))
 (let (($x95 (= false false)))
 (let (($x55 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x67 (=> $x55 $x95)))
 (let (($x73 (= ?x75 (_ bv0 32))))
 (let (($x70 (= $x55 $x73)))
 (let (($x85 (and (and (and $x70 $x67) $x10) $x84)))
 (let (($x119 (= $x85 true)))
 (let (($x5 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x41 (=> $x47 $x5)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x106 (concat ?x93 ?x98)))))
 (let (($x45 (= input.dst.llvm-%opt ?x115)))
 (let (($x100 (and $x5 $x45)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x88)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x86 $x92)))
 (let (($x7 (and $x94 $x97)))
 (let (($x27 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x27 $x7)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x34)))))))
 (let (($x31 (and (and (and $x6 $x85) $x91) $x100)))
 (let (($x9 (and $x31 $x41)))
 (let (($x107 (= $x9 true)))
 (let (($x8 (= $x47 true)))
 (let (($x83 (and $x8 $x107)))
 (let (($x13 (and $x72 $x83)))
 (let (($x50 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x96 (and $x50 $x13)))
 (let (($x37 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x44 (and $x37 $x96)))
 (let (($x111 (and $x95 $x44)))
 (let (($x24 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x77 (=> $x36 (or false (or false (and true (or $x61 $x24)))))))
 (let (($x68 (=> (and $x47 $x36) (or false (or false (and true (or $x61 $x24)))))))
 (let (($x38 (and $x68 $x111)))
 (let (($x69 (=> $x38 $x119)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x26 (= false true)))
 (let (($x21 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x13 (=> $x47 $x21)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x45 (concat ?x99 (concat ?x102 ?x108)))))
 (let (($x31 (= input.dst.llvm-%opt ?x100)))
 (let (($x41 (and $x21 $x31)))
 (let ((?x7 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x7)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x92 $x88)))
 (let (($x118 (and $x97 $x91)))
 (let (($x22 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x22 $x118)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x66)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x84 (= input.spec-%var-opt-0.2 ?x80)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x85 (=> $x43 $x84)))
 (let ((?x35 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x35 (_ bv1 32))))
 (let (($x81 (= $x43 $x29)))
 (let (($x36 (= false false)))
 (let (($x20 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x10 (=> $x20 $x36)))
 (let (($x72 (= ?x35 (_ bv0 32))))
 (let (($x105 (= $x20 $x72)))
 (let (($x27 (and (and (and $x105 $x10) $x81) $x85)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x55)))))))
 (let (($x83 (and (and (and $x116 $x27) $x89) $x41)))
 (let (($x96 (and $x83 $x13)))
 (let (($x44 (= $x96 true)))
 (let (($x109 (= $x47 true)))
 (let (($x111 (and $x109 $x44)))
 (let (($x38 (and $x43 $x111)))
 (let (($x57 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x119 (and $x57 $x38)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x69 (and $x8 $x119)))
 (let (($x56 (and $x36 $x69)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x39 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x39 (or false (or false (and true (or $x60 $x49)))))))
 (let (($x14 (=> (and $x47 $x39) (or false (or false (and true (or $x60 $x49)))))))
 (let (($x11 (and $x14 $x56)))
 (let (($x40 (=> $x11 $x26)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x26 (= false true)))
 (let (($x21 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x47 (not $x17)))
 (let (($x13 (=> $x47 $x21)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x45 (concat ?x99 (concat ?x102 ?x108)))))
 (let (($x31 (= input.dst.llvm-%opt ?x100)))
 (let (($x41 (and $x21 $x31)))
 (let ((?x7 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x7)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x92 $x88)))
 (let (($x118 (and $x97 $x91)))
 (let (($x22 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x22 $x118)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x66)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x51)))
 (let (($x84 (= input.spec-%var-opt-0.2 ?x80)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x85 (=> $x43 $x84)))
 (let ((?x35 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x35 (_ bv1 32))))
 (let (($x81 (= $x43 $x29)))
 (let (($x36 (= false false)))
 (let (($x20 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x10 (=> $x20 $x36)))
 (let (($x72 (= ?x35 (_ bv0 32))))
 (let (($x105 (= $x20 $x72)))
 (let (($x27 (and (and (and $x105 $x10) $x81) $x85)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x55)))))))
 (let (($x83 (and (and (and $x116 $x27) $x89) $x41)))
 (let (($x96 (and $x83 $x13)))
 (let (($x44 (= $x96 true)))
 (let (($x109 (= $x47 true)))
 (let (($x111 (and $x109 $x44)))
 (let (($x38 (and $x43 $x111)))
 (let (($x57 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x119 (and $x57 $x38)))
 (let (($x8 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x69 (and $x8 $x119)))
 (let (($x56 (and $x36 $x69)))
 (let (($x49 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x39 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x37 (=> $x39 (or false (or false (and true (or $x60 $x49)))))))
 (let (($x14 (=> (and $x47 $x39) (or false (or false (and true (or $x60 $x49)))))))
 (let (($x11 (and $x14 $x56)))
 (let (($x40 (=> $x11 $x26)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x203b68e5
                     #x20)
              #x203b68e7
              #x20)
       #x203b68e6
       #x3b))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4026531836 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4026798084 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4026798084 32) (_ bv252 8)) (_ bv4026798085 32) (_ bv255 8)) (_ bv4026798086 32) (_ bv255 8)) (_ bv4026798087 32) (_ bv239 8)))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4026798084 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4026798087 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x114 (= false true)))
 (let ((?x111 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x111)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x83 $x96)))
 (let (($x119 (and $x44 $x38)))
 (let (($x115 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x115 $x119)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x102)))))))
 (let (($x56 (and $x41 $x69)))
 (let (($x11 (= $x56 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x89 (= (_ bv0 2) ?x118)))
 (let (($x107 (= $x89 true)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x74)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let (($x86 (= input.spec-%var-opt-0.2 ?x67)))
 (let (($x33 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x22 (=> $x33 $x86)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x51 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x51 (_ bv1 32))))
 (let (($x9 (= $x33 $x27)))
 (let (($x48 (= false false)))
 (let (($x65 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x85 (=> $x65 $x48)))
 (let (($x80 (= ?x51 (_ bv0 32))))
 (let (($x84 (= $x65 $x80)))
 (let (($x88 (and (and (and $x84 $x85) $x9) $x22)))
 (let (($x97 (= $x88 true)))
 (let (($x110 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x62 (or false (or false (and true (or $x81 $x110)))))))
 (let (($x105 (= $x58 true)))
 (let ((?x95 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x116 ((_ zero_extend 31) ?x95)))
 (let (($x54 (= (_ bv1 32) ?x116)))
 (let (($x20 (= $x54 true)))
 (let ((?x63 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x63)))
 (let (($x6 (= ?x61 ?x67)))
 (let (($x71 (= $x6 true)))
 (let (($x24 (= ?x61 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x104 (= $x24 true)))
 (let (($x55 (and $x104 $x71)))
 (let (($x35 (and $x55 $x20)))
 (let (($x36 (and $x35 $x105)))
 (let (($x7 (and $x36 $x97)))
 (let (($x90 (and $x7 $x107)))
 (let (($x26 (and $x90 $x11)))
 (let (($x40 (and $x33 $x26)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x12 (and $x30 $x40)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x42 (and $x18 $x12)))
 (let (($x34 (and $x48 $x42)))
 (let (($x120 (=> $x34 $x114)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x114 (= false true)))
 (let ((?x111 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x111)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x83 $x96)))
 (let (($x119 (and $x44 $x38)))
 (let (($x115 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x115 $x119)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x102)))))))
 (let (($x56 (and $x41 $x69)))
 (let (($x11 (= $x56 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x89 (= (_ bv0 2) ?x118)))
 (let (($x107 (= $x89 true)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x74)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x57)))
 (let (($x86 (= input.spec-%var-opt-0.2 ?x67)))
 (let (($x33 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x22 (=> $x33 $x86)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x51 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x51 (_ bv1 32))))
 (let (($x9 (= $x33 $x27)))
 (let (($x48 (= false false)))
 (let (($x65 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x85 (=> $x65 $x48)))
 (let (($x80 (= ?x51 (_ bv0 32))))
 (let (($x84 (= $x65 $x80)))
 (let (($x88 (and (and (and $x84 $x85) $x9) $x22)))
 (let (($x97 (= $x88 true)))
 (let (($x110 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x62 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x58 (=> $x62 (or false (or false (and true (or $x81 $x110)))))))
 (let (($x105 (= $x58 true)))
 (let ((?x95 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x116 ((_ zero_extend 31) ?x95)))
 (let (($x54 (= (_ bv1 32) ?x116)))
 (let (($x20 (= $x54 true)))
 (let ((?x63 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x63)))
 (let (($x6 (= ?x61 ?x67)))
 (let (($x71 (= $x6 true)))
 (let (($x24 (= ?x61 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x104 (= $x24 true)))
 (let (($x55 (and $x104 $x71)))
 (let (($x35 (and $x55 $x20)))
 (let (($x36 (and $x35 $x105)))
 (let (($x7 (and $x36 $x97)))
 (let (($x90 (and $x7 $x107)))
 (let (($x26 (and $x90 $x11)))
 (let (($x40 (and $x33 $x26)))
 (let (($x30 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x12 (and $x30 $x40)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x42 (and $x18 $x12)))
 (let (($x34 (and $x48 $x42)))
 (let (($x120 (=> $x34 $x114)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.llvm-%opt #b11010000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x121 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x122 (= $x121 true)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x84)))
 (let ((?x26 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x26)))
 (let (($x120 (= ?x40 ?x85)))
 (let (($x25 (= $x120 true)))
 (let (($x42 (= ?x40 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x34 (= $x42 true)))
 (let ((?x96 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x96)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x21 $x83)))
 (let (($x111 (and $x13 $x44)))
 (let (($x90 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x90 $x111)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x106)))))))
 (let (($x119 (and $x41 $x38)))
 (let (($x69 (= $x119 true)))
 (let ((?x97 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x7 (= (_ bv0 2) ?x97)))
 (let (($x91 (= $x7 true)))
 (let (($x92 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x37 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x33 (=> $x37 $x92)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x110 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x110 (_ bv1 32))))
 (let (($x58 (= $x37 $x64)))
 (let (($x57 (= false false)))
 (let (($x81 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x15 (=> $x81 $x57)))
 (let (($x79 (= ?x110 (_ bv0 32))))
 (let (($x76 (= $x81 $x79)))
 (let (($x94 (and (and (and $x76 $x15) $x58) $x33)))
 (let (($x86 (= $x94 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x117 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x117 (or false (or false (and true (or $x116 $x54)))))))
 (let (($x60 (= $x62 true)))
 (let ((?x18 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x68 ((_ zero_extend 31) ?x18)))
 (let (($x24 (= (_ bv1 32) ?x68)))
 (let (($x50 (= $x24 true)))
 (let (($x49 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x32 (= $x49 true)))
 (let (($x104 (and $x32 $x50)))
 (let (($x30 (and $x104 $x60)))
 (let (($x22 (and $x30 $x86)))
 (let (($x118 (and $x22 $x91)))
 (let (($x56 (and $x118 $x69)))
 (let (($x114 (and $x56 $x34)))
 (let (($x77 (and $x114 $x25)))
 (let (($x23 (and $x37 $x77)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x5 (and $x109 $x23)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x87 (and $x61 $x5)))
 (let (($x103 (and $x57 $x87)))
 (let (($x123 (=> $x103 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x121 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x122 (= $x121 true)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x65)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x84)))
 (let ((?x26 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x26)))
 (let (($x120 (= ?x40 ?x85)))
 (let (($x25 (= $x120 true)))
 (let (($x42 (= ?x40 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x34 (= $x42 true)))
 (let ((?x96 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x96)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x21 $x83)))
 (let (($x111 (and $x13 $x44)))
 (let (($x90 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x90 $x111)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x106)))))))
 (let (($x119 (and $x41 $x38)))
 (let (($x69 (= $x119 true)))
 (let ((?x97 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x7 (= (_ bv0 2) ?x97)))
 (let (($x91 (= $x7 true)))
 (let (($x92 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x37 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x33 (=> $x37 $x92)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x110 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x110 (_ bv1 32))))
 (let (($x58 (= $x37 $x64)))
 (let (($x57 (= false false)))
 (let (($x81 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x15 (=> $x81 $x57)))
 (let (($x79 (= ?x110 (_ bv0 32))))
 (let (($x76 (= $x81 $x79)))
 (let (($x94 (and (and (and $x76 $x15) $x58) $x33)))
 (let (($x86 (= $x94 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x117 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x117 (or false (or false (and true (or $x116 $x54)))))))
 (let (($x60 (= $x62 true)))
 (let ((?x18 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x68 ((_ zero_extend 31) ?x18)))
 (let (($x24 (= (_ bv1 32) ?x68)))
 (let (($x50 (= $x24 true)))
 (let (($x49 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x32 (= $x49 true)))
 (let (($x104 (and $x32 $x50)))
 (let (($x30 (and $x104 $x60)))
 (let (($x22 (and $x30 $x86)))
 (let (($x118 (and $x22 $x91)))
 (let (($x56 (and $x118 $x69)))
 (let (($x114 (and $x56 $x34)))
 (let (($x77 (and $x114 $x25)))
 (let (($x23 (and $x37 $x77)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x5 (and $x109 $x23)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x87 (and $x61 $x5)))
 (let (($x103 (and $x57 $x87)))
 (let (($x123 (=> $x103 $x122)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x42 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x42)))
 (let (($x124 (= ?x34 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x59 (= $x124 true)))
 (let (($x23 (= ?x34 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x5 (= $x23 true)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x80)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x65)))
 (let (($x114 (= ?x34 ?x85)))
 (let (($x120 (= $x114 true)))
 (let ((?x38 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x38)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x13 $x44)))
 (let (($x69 (and $x111 $x119)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x99 $x69)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x101)))))))
 (let (($x11 (and $x83 $x56)))
 (let (($x26 (= $x11 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x118 (= (_ bv0 2) ?x91)))
 (let (($x45 (= $x118 true)))
 (let (($x92 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x33 (=> $x17 $x92)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x15 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x15 (_ bv1 32))))
 (let (($x9 (= $x17 $x58)))
 (let (($x57 (= false false)))
 (let (($x79 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x64 (=> $x79 $x57)))
 (let (($x27 (= ?x15 (_ bv0 32))))
 (let (($x37 (= $x79 $x27)))
 (let (($x22 (and (and (and $x37 $x64) $x9) $x33)))
 (let (($x88 (= $x22 true)))
 (let (($x62 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x29 (=> $x81 (or false (or false (and true (or $x10 $x62)))))))
 (let (($x70 (= $x29 true)))
 (let ((?x24 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x50 ((_ zero_extend 31) ?x24)))
 (let (($x104 (= (_ bv1 32) ?x50)))
 (let (($x14 (= $x104 true)))
 (let (($x28 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x6 (= $x28 true)))
 (let (($x46 (and $x6 $x14)))
 (let (($x95 (and $x46 $x70)))
 (let (($x97 (and $x95 $x88)))
 (let (($x98 (and $x97 $x45)))
 (let (($x40 (and $x98 $x26)))
 (let (($x25 (and $x40 $x120)))
 (let (($x87 (and $x25 $x5)))
 (let (($x103 (and $x17 $x87)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x121 (and $x109 $x103)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x122 (and $x61 $x121)))
 (let (($x123 (and $x57 $x122)))
 (let (($x8 (=> $x123 $x59)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x42 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x42)))
 (let (($x124 (= ?x34 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x59 (= $x124 true)))
 (let (($x23 (= ?x34 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x5 (= $x23 true)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x80)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x65)))
 (let (($x114 (= ?x34 ?x85)))
 (let (($x120 (= $x114 true)))
 (let ((?x38 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x38)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x13 $x44)))
 (let (($x69 (and $x111 $x119)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x99 $x69)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x101)))))))
 (let (($x11 (and $x83 $x56)))
 (let (($x26 (= $x11 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x118 (= (_ bv0 2) ?x91)))
 (let (($x45 (= $x118 true)))
 (let (($x92 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x33 (=> $x17 $x92)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x15 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x15 (_ bv1 32))))
 (let (($x9 (= $x17 $x58)))
 (let (($x57 (= false false)))
 (let (($x79 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x64 (=> $x79 $x57)))
 (let (($x27 (= ?x15 (_ bv0 32))))
 (let (($x37 (= $x79 $x27)))
 (let (($x22 (and (and (and $x37 $x64) $x9) $x33)))
 (let (($x88 (= $x22 true)))
 (let (($x62 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x29 (=> $x81 (or false (or false (and true (or $x10 $x62)))))))
 (let (($x70 (= $x29 true)))
 (let ((?x24 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x50 ((_ zero_extend 31) ?x24)))
 (let (($x104 (= (_ bv1 32) ?x50)))
 (let (($x14 (= $x104 true)))
 (let (($x28 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x6 (= $x28 true)))
 (let (($x46 (and $x6 $x14)))
 (let (($x95 (and $x46 $x70)))
 (let (($x97 (and $x95 $x88)))
 (let (($x98 (and $x97 $x45)))
 (let (($x40 (and $x98 $x26)))
 (let (($x25 (and $x40 $x120)))
 (let (($x87 (and $x25 $x5)))
 (let (($x103 (and $x17 $x87)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x121 (and $x109 $x103)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x122 (and $x61 $x121)))
 (let (($x123 (and $x57 $x122)))
 (let (($x8 (=> $x123 $x59)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x44)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x112 (= input.spec-%tmpvar-6.E0%0%d.2 ?x11)))
 (let (($x52 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x125 (=> $x52 $x112)))
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x101 (ite $x93 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x101 (_ bv1 32))))
 (let (($x19 (= $x52 $x21)))
 (let (($x57 (= false false)))
 (let (($x75 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x100 (=> $x75 $x57)))
 (let (($x41 (= ?x101 (_ bv0 32))))
 (let (($x55 (= $x75 $x41)))
 (let (($x128 (and (and (and $x55 $x100) $x19) $x125)))
 (let (($x129 (= $x128 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x103 (= (_ bv0 2) ?x87)))
 (let (($x121 (= $x103 true)))
 (let ((?x6 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x6)))
 (let (($x25 (= ?x74 ?x11)))
 (let (($x77 (= $x25 true)))
 (let (($x26 (= input.spec-%var-opt-0.2 ?x11)))
 (let (($x47 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x40 (=> $x47 $x26)))
 (let (($x83 (= $x47 $x21)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x90 (=> $x108 $x57)))
 (let (($x107 (= $x108 $x41)))
 (let (($x34 (and (and (and $x107 $x90) $x83) $x40)))
 (let (($x114 (= $x34 true)))
 (let (($x91 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x102 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x115 (=> $x102 (or false (or false (and true (or $x7 $x91)))))))
 (let (($x92 (= $x115 true)))
 (let (($x51 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x48 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x17)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x15 $x64)))
 (let (($x9 (and $x94 $x58)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x10 $x9)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x29)))))))
 (let (($x105 (and $x76 $x86)))
 (let (($x84 (= $x105 true)))
 (let ((?x14 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x46 ((_ zero_extend 31) ?x14)))
 (let (($x117 (= (_ bv1 32) ?x46)))
 (let (($x116 (= $x117 true)))
 (let (($x18 (= ?x74 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x68 (= $x18 true)))
 (let (($x73 (and $x68 $x116)))
 (let (($x16 (and $x73 $x84)))
 (let (($x80 (and $x16 $x48)))
 (let (($x33 (and $x80 $x92)))
 (let (($x120 (and $x33 $x114)))
 (let (($x23 (and $x120 $x77)))
 (let (($x122 (and $x23 $x121)))
 (let (($x123 (and $x47 $x122)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x124 (and $x109 $x123)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x59 (and $x61 $x124)))
 (let (($x8 (and $x57 $x59)))
 (let (($x130 (=> $x8 $x129)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x44)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x69)))
 (let (($x112 (= input.spec-%tmpvar-6.E0%0%d.2 ?x11)))
 (let (($x52 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x125 (=> $x52 $x112)))
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x101 (ite $x93 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x101 (_ bv1 32))))
 (let (($x19 (= $x52 $x21)))
 (let (($x57 (= false false)))
 (let (($x75 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x100 (=> $x75 $x57)))
 (let (($x41 (= ?x101 (_ bv0 32))))
 (let (($x55 (= $x75 $x41)))
 (let (($x128 (and (and (and $x55 $x100) $x19) $x125)))
 (let (($x129 (= $x128 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x103 (= (_ bv0 2) ?x87)))
 (let (($x121 (= $x103 true)))
 (let ((?x6 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x6)))
 (let (($x25 (= ?x74 ?x11)))
 (let (($x77 (= $x25 true)))
 (let (($x26 (= input.spec-%var-opt-0.2 ?x11)))
 (let (($x47 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x40 (=> $x47 $x26)))
 (let (($x83 (= $x47 $x21)))
 (let (($x108 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x90 (=> $x108 $x57)))
 (let (($x107 (= $x108 $x41)))
 (let (($x34 (and (and (and $x107 $x90) $x83) $x40)))
 (let (($x114 (= $x34 true)))
 (let (($x91 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x102 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x115 (=> $x102 (or false (or false (and true (or $x7 $x91)))))))
 (let (($x92 (= $x115 true)))
 (let (($x51 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x48 (= $x51 true)))
 (let ((?x17 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x17)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x15 $x64)))
 (let (($x9 (and $x94 $x58)))
 (let (($x10 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x10 $x9)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x29)))))))
 (let (($x105 (and $x76 $x86)))
 (let (($x84 (= $x105 true)))
 (let ((?x14 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x46 ((_ zero_extend 31) ?x14)))
 (let (($x117 (= (_ bv1 32) ?x46)))
 (let (($x116 (= $x117 true)))
 (let (($x18 (= ?x74 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x68 (= $x18 true)))
 (let (($x73 (and $x68 $x116)))
 (let (($x16 (and $x73 $x84)))
 (let (($x80 (and $x16 $x48)))
 (let (($x33 (and $x80 $x92)))
 (let (($x120 (and $x33 $x114)))
 (let (($x23 (and $x120 $x77)))
 (let (($x122 (and $x23 $x121)))
 (let (($x123 (and $x47 $x122)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x124 (and $x109 $x123)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x59 (and $x61 $x124)))
 (let (($x8 (and $x57 $x59)))
 (let (($x130 (=> $x8 $x129)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c1fe1f)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c1fe1c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv255 8)) (_ bv1073741825 32) (_ bv255 8)) (_ bv1073741826 32) (_ bv255 8)) (_ bv1073741827 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x100 (= false true)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x87)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x25 $x23)))
 (let (($x121 (and $x5 $x103)))
 (let (($x119 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x119 $x121)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x69)))))))
 (let (($x123 (and $x120 $x122)))
 (let (($x124 (= $x123 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x106)))
 (let ((?x18 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x18)))
 (let (($x42 (= ?x68 ?x92)))
 (let (($x31 (= $x42 true)))
 (let ((?x12 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x47 (= (_ bv0 2) ?x12)))
 (let (($x21 (= $x47 true)))
 (let (($x33 (= input.spec-%var-opt-0.2 ?x92)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x49 (=> $x74 $x33)))
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x66 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x66 (_ bv1 32))))
 (let (($x22 (= $x74 $x65)))
 (let (($x57 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x80 (=> $x82 $x57)))
 (let (($x51 (= ?x66 (_ bv0 32))))
 (let (($x48 (= $x82 $x51)))
 (let (($x101 (and (and (and $x48 $x80) $x22) $x49)))
 (let (($x41 (= $x101 true)))
 (let (($x94 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x105 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x84 (=> $x105 (or false (or false (and true (or $x64 $x94)))))))
 (let (($x67 (= $x84 true)))
 (let ((?x79 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x60 ((_ zero_extend 31) ?x79)))
 (let (($x71 (= (_ bv1 32) ?x60)))
 (let (($x43 (= $x71 true)))
 (let (($x117 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x116 (= $x117 true)))
 (let (($x24 (= ?x68 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x50 (= $x24 true)))
 (let (($x73 (and $x50 $x116)))
 (let (($x30 (and $x73 $x43)))
 (let (($x110 (and $x30 $x67)))
 (let (($x107 (and $x110 $x41)))
 (let (($x83 (and $x107 $x21)))
 (let (($x56 (and $x83 $x31)))
 (let (($x59 (and $x56 $x124)))
 (let (($x8 (and $x74 $x59)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x89 (and $x109 $x8)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x75 (and $x61 $x89)))
 (let (($x55 (and $x57 $x75)))
 (let (($x126 (=> $x55 $x100)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x100 (= false true)))
 (let ((?x87 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x87)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x25 $x23)))
 (let (($x121 (and $x5 $x103)))
 (let (($x119 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x119 $x121)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x69)))))))
 (let (($x123 (and $x120 $x122)))
 (let (($x124 (= $x123 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x91)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x106)))
 (let ((?x18 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x18)))
 (let (($x42 (= ?x68 ?x92)))
 (let (($x31 (= $x42 true)))
 (let ((?x12 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x47 (= (_ bv0 2) ?x12)))
 (let (($x21 (= $x47 true)))
 (let (($x33 (= input.spec-%var-opt-0.2 ?x92)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x49 (=> $x74 $x33)))
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x66 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x66 (_ bv1 32))))
 (let (($x22 (= $x74 $x65)))
 (let (($x57 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x80 (=> $x82 $x57)))
 (let (($x51 (= ?x66 (_ bv0 32))))
 (let (($x48 (= $x82 $x51)))
 (let (($x101 (and (and (and $x48 $x80) $x22) $x49)))
 (let (($x41 (= $x101 true)))
 (let (($x94 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x105 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x84 (=> $x105 (or false (or false (and true (or $x64 $x94)))))))
 (let (($x67 (= $x84 true)))
 (let ((?x79 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x60 ((_ zero_extend 31) ?x79)))
 (let (($x71 (= (_ bv1 32) ?x60)))
 (let (($x43 (= $x71 true)))
 (let (($x117 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x116 (= $x117 true)))
 (let (($x24 (= ?x68 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x50 (= $x24 true)))
 (let (($x73 (and $x50 $x116)))
 (let (($x30 (and $x73 $x43)))
 (let (($x110 (and $x30 $x67)))
 (let (($x107 (and $x110 $x41)))
 (let (($x83 (and $x107 $x21)))
 (let (($x56 (and $x83 $x31)))
 (let (($x59 (and $x56 $x124)))
 (let (($x8 (and $x74 $x59)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x89 (and $x109 $x8)))
 (let (($x61 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x75 (and $x61 $x89)))
 (let (($x55 (and $x57 $x75)))
 (let (($x126 (=> $x55 $x100)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x55 (= false true)))
 (let ((?x5 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x5)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x119 $x77)))
 (let (($x103 (and $x23 $x87)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x13 $x103)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x69)))))))
 (let (($x122 (and $x38 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x107 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x42 (=> $x83 (or false (or false (and true (or $x41 $x107)))))))
 (let (($x91 (= $x42 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x98 (= (_ bv0 2) ?x45)))
 (let (($x97 (= $x98 true)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x48)))
 (let ((?x74 (concat (select input.dst.llvm-mem ?x27) ?x80)))
 (let (($x65 (= input.spec-%var-opt-0.2 ?x74)))
 (let (($x18 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x22 (=> $x18 $x65)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x68 (ite $x6 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x68 (_ bv1 32))))
 (let (($x54 (= $x18 $x46)))
 (let (($x39 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x14 (=> $x24 $x39)))
 (let (($x32 (= ?x68 (_ bv0 32))))
 (let (($x104 (= $x24 $x32)))
 (let (($x58 (and (and $x104 $x14) $x54)))
 (let (($x93 (and $x58 $x22)))
 (let (($x88 (= $x93 true)))
 (let ((?x67 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x67)))
 (let (($x28 (= ?x110 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x16 (= $x28 true)))
 (let ((?x71 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x71) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x76 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x27) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x76) ?x30))))
 (let (($x15 (= input.spec-%var-opt-0.2 ?x64)))
 (let (($x94 (=> $x18 $x15)))
 (let (($x9 (and $x58 $x94)))
 (let (($x86 (= $x9 true)))
 (let (($x82 (and $x86 $x16)))
 (let (($x115 (and $x82 $x88)))
 (let (($x7 (and $x115 $x97)))
 (let (($x106 (and $x7 $x91)))
 (let (($x124 (and $x106 $x123)))
 (let (($x59 (and $x18 $x124)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x8 (and $x109 $x59)))
 (let (($x116 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x89 (and $x116 $x8)))
 (let (($x75 (and $x39 $x89)))
 (let (($x100 (=> $x75 $x55)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x55 (= false true)))
 (let ((?x5 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x5)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x119 $x77)))
 (let (($x103 (and $x23 $x87)))
 (let (($x13 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x13 $x103)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x69)))))))
 (let (($x122 (and $x38 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x107 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x83 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x42 (=> $x83 (or false (or false (and true (or $x41 $x107)))))))
 (let (($x91 (= $x42 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x98 (= (_ bv0 2) ?x45)))
 (let (($x97 (= $x98 true)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x48)))
 (let ((?x74 (concat (select input.dst.llvm-mem ?x27) ?x80)))
 (let (($x65 (= input.spec-%var-opt-0.2 ?x74)))
 (let (($x18 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x22 (=> $x18 $x65)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x68 (ite $x6 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x68 (_ bv1 32))))
 (let (($x54 (= $x18 $x46)))
 (let (($x39 (= false false)))
 (let (($x24 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x14 (=> $x24 $x39)))
 (let (($x32 (= ?x68 (_ bv0 32))))
 (let (($x104 (= $x24 $x32)))
 (let (($x58 (and (and $x104 $x14) $x54)))
 (let (($x93 (and $x58 $x22)))
 (let (($x88 (= $x93 true)))
 (let ((?x67 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x67)))
 (let (($x28 (= ?x110 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x16 (= $x28 true)))
 (let ((?x71 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x71) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x76 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x27) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x76) ?x30))))
 (let (($x15 (= input.spec-%var-opt-0.2 ?x64)))
 (let (($x94 (=> $x18 $x15)))
 (let (($x9 (and $x58 $x94)))
 (let (($x86 (= $x9 true)))
 (let (($x82 (and $x86 $x16)))
 (let (($x115 (and $x82 $x88)))
 (let (($x7 (and $x115 $x97)))
 (let (($x106 (and $x7 $x91)))
 (let (($x124 (and $x106 $x123)))
 (let (($x59 (and $x18 $x124)))
 (let (($x109 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x8 (and $x109 $x59)))
 (let (($x116 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x89 (and $x116 $x8)))
 (let (($x75 (and $x39 $x89)))
 (let (($x100 (=> $x75 $x55)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.llvm-%opt #b11010000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(= input.dst.llvm-mem.Lif.then%2%fcallEnd @fun_12)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b11010000000000000000000000000000) #b00000000)
 (= (@fun_11 #b11010000000000000000000000000001) #b00000000)
 (= (@fun_11 #b11010000000000000000000000000010) #b00000000)
 (= (@fun_11 #b11010000000000000000000000000011) #b00000000)
 (default #b00000001))
(function @fun_12
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8192 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv1 8)) (_ bv1073741824 32) (_ bv0 8)) (_ bv1073741825 32) (_ bv0 8)) (_ bv1073741826 32) (_ bv0 8)) (_ bv1073741827 32) (_ bv0 8)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x62 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x78 (=> $x62 true)))
 (let (($x112 (= $x78 true)))
 (let (($x31 (= $x62 true)))
 (let ((?x123 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x123)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x87 $x121)))
 (let (($x59 (and $x122 $x124)))
 (let (($x11 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x11 $x59)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x56)))))))
 (let (($x89 (and $x5 $x8)))
 (let (($x75 (= $x89 true)))
 (let ((?x96 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x114 (= (_ bv0 2) ?x96)))
 (let (($x120 (= $x114 true)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x101)))
 (let (($x12 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x70 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x47 (=> $x70 $x12)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x43 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x43 (_ bv1 32))))
 (let (($x15 (= $x70 $x64)))
 (let (($x53 (= false false)))
 (let (($x72 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x105 (=> $x72 $x53)))
 (let (($x60 (= ?x43 (_ bv0 32))))
 (let (($x30 (= $x72 $x60)))
 (let (($x48 (and (and $x30 $x105) $x15)))
 (let (($x21 (and $x48 $x47)))
 (let (($x42 (= $x21 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x7 (= $x97 true)))
 (let ((?x22 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x22)))
 (let (($x88 (= ?x93 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x115 (= $x88 true)))
 (let ((?x86 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x86) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x68 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x68) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x28) ?x67))))
 (let (($x57 (= input.spec-%var-opt-0.2 ?x108)))
 (let (($x51 (=> $x70 $x57)))
 (let (($x80 (and $x48 $x51)))
 (let (($x74 (= $x80 true)))
 (let (($x118 (and $x74 $x115)))
 (let (($x102 (and $x118 $x7)))
 (let (($x91 (and $x102 $x42)))
 (let (($x99 (and $x91 $x120)))
 (let (($x55 (and $x99 $x75)))
 (let (($x52 (and $x55 $x31)))
 (let (($x95 (and $x70 $x52)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x29 (and $x27 $x95)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x111 (and $x20 $x29)))
 (let (($x19 (and $x53 $x111)))
 (let (($x104 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x46 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x54 (=> $x46 (or false (or false (and true (or $x32 $x104)))))))
 (let (($x127 (and $x54 $x19)))
 (let (($x125 (=> $x127 $x112)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x62 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x78 (=> $x62 true)))
 (let (($x112 (= $x78 true)))
 (let (($x31 (= $x62 true)))
 (let ((?x123 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x123)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x87 $x121)))
 (let (($x59 (and $x122 $x124)))
 (let (($x11 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x11 $x59)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x56)))))))
 (let (($x89 (and $x5 $x8)))
 (let (($x75 (= $x89 true)))
 (let ((?x96 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x114 (= (_ bv0 2) ?x96)))
 (let (($x120 (= $x114 true)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x49)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x101)))
 (let (($x12 (= input.spec-%var-opt-0.2 ?x90)))
 (let (($x70 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x47 (=> $x70 $x12)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x43 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x43 (_ bv1 32))))
 (let (($x15 (= $x70 $x64)))
 (let (($x53 (= false false)))
 (let (($x72 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x105 (=> $x72 $x53)))
 (let (($x60 (= ?x43 (_ bv0 32))))
 (let (($x30 (= $x72 $x60)))
 (let (($x48 (and (and $x30 $x105) $x15)))
 (let (($x21 (and $x48 $x47)))
 (let (($x42 (= $x21 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x7 (= $x97 true)))
 (let ((?x22 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x22)))
 (let (($x88 (= ?x93 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x115 (= $x88 true)))
 (let ((?x86 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x86) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x68 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x68) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x28) ?x67))))
 (let (($x57 (= input.spec-%var-opt-0.2 ?x108)))
 (let (($x51 (=> $x70 $x57)))
 (let (($x80 (and $x48 $x51)))
 (let (($x74 (= $x80 true)))
 (let (($x118 (and $x74 $x115)))
 (let (($x102 (and $x118 $x7)))
 (let (($x91 (and $x102 $x42)))
 (let (($x99 (and $x91 $x120)))
 (let (($x55 (and $x99 $x75)))
 (let (($x52 (and $x55 $x31)))
 (let (($x95 (and $x70 $x52)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x29 (and $x27 $x95)))
 (let (($x20 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x111 (and $x20 $x29)))
 (let (($x19 (and $x53 $x111)))
 (let (($x104 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x46 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x54 (=> $x46 (or false (or false (and true (or $x32 $x104)))))))
 (let (($x127 (and $x54 $x19)))
 (let (($x125 (=> $x127 $x112)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x5 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x131 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x81 (=> $x131 $x5)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x41 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x41 (_ bv1 32))))
 (let (($x85 (= $x131 $x101)))
 (let (($x73 (= false false)))
 (let (($x44 (= (_ bv1 32) (_ bv0 32))))
 (let (($x130 (=> $x44 $x73)))
 (let (($x83 (= ?x41 (_ bv0 32))))
 (let (($x129 (= $x44 $x83)))
 (let (($x133 (and (and (and $x129 $x130) $x85) $x81)))
 (let (($x134 (= $x133 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x111 (= (_ bv0 2) ?x29)))
 (let (($x19 (= $x111 true)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x59)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x89)))
 (let (($x100 (= input.spec-%var-opt-0.2 ?x55)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x126 (=> $x71 $x100)))
 (let (($x90 (= $x71 $x101)))
 (let (($x92 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x92 $x73)))
 (let (($x33 (= $x92 $x83)))
 (let (($x38 (and (and $x33 $x49) $x90)))
 (let (($x62 (and $x38 $x126)))
 (let (($x31 (= $x62 true)))
 (let (($x103 (= $x5 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x69 (and $x97 $x5)))
 (let (($x11 (= $x69 true)))
 (let ((?x21 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x21) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x96 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x104) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x96) ?x91))))
 (let (($x40 (= input.spec-%var-opt-0.2 ?x26)))
 (let (($x23 (=> $x71 $x40)))
 (let (($x56 (and $x38 $x23)))
 (let (($x13 (= $x56 true)))
 (let (($x7 (= $x97 true)))
 (let ((?x74 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x74)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x108 $x51)))
 (let (($x22 (and $x80 $x65)))
 (let (($x15 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x15 $x22)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x28)))))))
 (let (($x88 (and $x82 $x93)))
 (let (($x115 (= $x88 true)))
 (let ((?x60 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x60)))
 (let (($x53 (= ?x30 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x105 (= $x53 true)))
 (let (($x118 (and $x105 $x115)))
 (let (($x102 (and $x118 $x7)))
 (let (($x119 (and $x102 $x13)))
 (let (($x87 (and $x119 $x11)))
 (let (($x121 (and $x87 $x103)))
 (let (($x52 (and $x121 $x31)))
 (let (($x127 (and $x52 $x19)))
 (let (($x78 (and $x71 $x127)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x112 (and $x76 $x78)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x125 (and $x27 $x112)))
 (let (($x128 (and $x73 $x125)))
 (let (($x14 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x58 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x20 (=> $x58 (or false (or false (and true (or $x39 $x14)))))))
 (let (($x116 (and $x20 $x128)))
 (let (($x135 (=> $x116 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x5 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x131 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x81 (=> $x131 $x5)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x41 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x41 (_ bv1 32))))
 (let (($x85 (= $x131 $x101)))
 (let (($x73 (= false false)))
 (let (($x44 (= (_ bv1 32) (_ bv0 32))))
 (let (($x130 (=> $x44 $x73)))
 (let (($x83 (= ?x41 (_ bv0 32))))
 (let (($x129 (= $x44 $x83)))
 (let (($x133 (and (and (and $x129 $x130) $x85) $x81)))
 (let (($x134 (= $x133 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x111 (= (_ bv0 2) ?x29)))
 (let (($x19 (= $x111 true)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x59)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x89)))
 (let (($x100 (= input.spec-%var-opt-0.2 ?x55)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x126 (=> $x71 $x100)))
 (let (($x90 (= $x71 $x101)))
 (let (($x92 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x92 $x73)))
 (let (($x33 (= $x92 $x83)))
 (let (($x38 (and (and $x33 $x49) $x90)))
 (let (($x62 (and $x38 $x126)))
 (let (($x31 (= $x62 true)))
 (let (($x103 (= $x5 true)))
 (let (($x97 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x69 (and $x97 $x5)))
 (let (($x11 (= $x69 true)))
 (let ((?x21 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x21) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x96 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x104) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x96) ?x91))))
 (let (($x40 (= input.spec-%var-opt-0.2 ?x26)))
 (let (($x23 (=> $x71 $x40)))
 (let (($x56 (and $x38 $x23)))
 (let (($x13 (= $x56 true)))
 (let (($x7 (= $x97 true)))
 (let ((?x74 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x74)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x108 $x51)))
 (let (($x22 (and $x80 $x65)))
 (let (($x15 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x15 $x22)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x28)))))))
 (let (($x88 (and $x82 $x93)))
 (let (($x115 (= $x88 true)))
 (let ((?x60 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x60)))
 (let (($x53 (= ?x30 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x105 (= $x53 true)))
 (let (($x118 (and $x105 $x115)))
 (let (($x102 (and $x118 $x7)))
 (let (($x119 (and $x102 $x13)))
 (let (($x87 (and $x119 $x11)))
 (let (($x121 (and $x87 $x103)))
 (let (($x52 (and $x121 $x31)))
 (let (($x127 (and $x52 $x19)))
 (let (($x78 (and $x71 $x127)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x112 (and $x76 $x78)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x125 (and $x27 $x112)))
 (let (($x128 (and $x73 $x125)))
 (let (($x14 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x58 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x20 (=> $x58 (or false (or false (and true (or $x39 $x14)))))))
 (let (($x116 (and $x20 $x128)))
 (let (($x135 (=> $x116 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x123 (= $x79 false)))
 (let (($x59 (= $x123 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x69 (concat ?x25 (concat ?x56 ?x40)))))
 (let (($x87 (= ?x11 input.dst.llvm-%opt)))
 (let (($x103 (= $x87 true)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x12)))
 (let (($x96 (= input.spec-%var-opt-0.2 ?x106)))
 (let (($x107 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x107 $x96)))
 (let ((?x7 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x7 (_ bv1 32))))
 (let (($x83 (= $x107 $x41)))
 (let (($x6 (= false false)))
 (let (($x97 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x92 (=> $x97 $x6)))
 (let (($x102 (= ?x7 (_ bv0 32))))
 (let (($x72 (= $x97 $x102)))
 (let (($x47 (and (and (and $x72 $x92) $x83) $x114)))
 (let (($x91 (= $x47 true)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x22)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x51 $x74)))
 (let (($x88 (and $x65 $x93)))
 (let (($x36 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x36 $x88)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x84)))))))
 (let (($x118 (and $x57 $x115)))
 (let (($x45 (= $x118 true)))
 (let (($x120 (and $x45 $x91)))
 (let (($x121 (and $x120 $x103)))
 (let (($x48 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x122 (and $x48 $x121)))
 (let (($x53 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x75 (and $x53 $x122)))
 (let (($x8 (and $x6 $x75)))
 (let (($x20 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x76 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x43 (=> $x76 (or false (or false (and true (or $x109 $x20)))))))
 (let (($x46 (not $x79)))
 (let (($x68 (=> (and $x46 $x76) (or false (or false (and true (or $x109 $x20)))))))
 (let (($x124 (and $x68 $x8)))
 (let (($x89 (=> $x124 $x59)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x123 (= $x79 false)))
 (let (($x59 (= $x123 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x69 (concat ?x25 (concat ?x56 ?x40)))))
 (let (($x87 (= ?x11 input.dst.llvm-%opt)))
 (let (($x103 (= $x87 true)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x71)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x12)))
 (let (($x96 (= input.spec-%var-opt-0.2 ?x106)))
 (let (($x107 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x107 $x96)))
 (let ((?x7 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x7 (_ bv1 32))))
 (let (($x83 (= $x107 $x41)))
 (let (($x6 (= false false)))
 (let (($x97 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x92 (=> $x97 $x6)))
 (let (($x102 (= ?x7 (_ bv0 32))))
 (let (($x72 (= $x97 $x102)))
 (let (($x47 (and (and (and $x72 $x92) $x83) $x114)))
 (let (($x91 (= $x47 true)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x22)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x51 $x74)))
 (let (($x88 (and $x65 $x93)))
 (let (($x36 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x36 $x88)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x84)))))))
 (let (($x118 (and $x57 $x115)))
 (let (($x45 (= $x118 true)))
 (let (($x120 (and $x45 $x91)))
 (let (($x121 (and $x120 $x103)))
 (let (($x48 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x122 (and $x48 $x121)))
 (let (($x53 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x75 (and $x53 $x122)))
 (let (($x8 (and $x6 $x75)))
 (let (($x20 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x76 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x43 (=> $x76 (or false (or false (and true (or $x109 $x20)))))))
 (let (($x46 (not $x79)))
 (let (($x68 (=> (and $x46 $x76) (or false (or false (and true (or $x109 $x20)))))))
 (let (($x124 (and $x68 $x8)))
 (let (($x89 (=> $x124 $x59)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x104 (not $x63)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x126 (or $x41 $x104)))
 (let (($x62 (= $x126 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x124 (concat ?x122 (concat ?x87 ?x77)))))
 (let (($x59 (= ?x123 input.dst.llvm-%opt)))
 (let (($x89 (= $x59 true)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x12)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x47)))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x120)))
 (let (($x101 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x69 (=> $x101 $x5)))
 (let ((?x83 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x83 (_ bv1 32))))
 (let (($x38 (= $x101 $x90)))
 (let (($x25 (and (and (= $x41 (= ?x83 (_ bv0 32))) (=> $x41 (= false false))) $x38)))
 (let (($x23 (and $x25 $x69)))
 (let (($x56 (= $x23 true)))
 (let (($x6 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x92 (= $x6 true)))
 (let ((?x115 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x115)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x65 $x93)))
 (let (($x45 (and $x88 $x118)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x86 $x45)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x15)))))))
 (let (($x97 (and $x74 $x98)))
 (let (($x7 (= $x97 true)))
 (let (($x21 (and $x7 $x92)))
 (let (($x40 (and $x21 $x56)))
 (let (($x55 (and $x40 $x89)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x50 (and $x28 $x55)))
 (let (($x48 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x94 (and $x48 $x50)))
 (let (($x117 (= false false)))
 (let (($x26 (and $x117 $x94)))
 (let (($x10 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x60 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x60 (or false (or false (and true (or $x24 $x10)))))))
 (let (($x46 (=> (and $x104 $x60) (or false (or false (and true (or $x24 $x10)))))))
 (let (($x100 (and $x46 $x26)))
 (let (($x31 (=> $x100 $x62)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x104 (not $x63)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x126 (or $x41 $x104)))
 (let (($x62 (= $x126 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x124 (concat ?x122 (concat ?x87 ?x77)))))
 (let (($x59 (= ?x123 input.dst.llvm-%opt)))
 (let (($x89 (= $x59 true)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x12)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x47)))
 (let (($x5 (= input.spec-%var-opt-0.2 ?x120)))
 (let (($x101 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x69 (=> $x101 $x5)))
 (let ((?x83 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x83 (_ bv1 32))))
 (let (($x38 (= $x101 $x90)))
 (let (($x25 (and (and (= $x41 (= ?x83 (_ bv0 32))) (=> $x41 (= false false))) $x38)))
 (let (($x23 (and $x25 $x69)))
 (let (($x56 (= $x23 true)))
 (let (($x6 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x92 (= $x6 true)))
 (let ((?x115 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x115)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x65 $x93)))
 (let (($x45 (and $x88 $x118)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x86 $x45)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x15)))))))
 (let (($x97 (and $x74 $x98)))
 (let (($x7 (= $x97 true)))
 (let (($x21 (and $x7 $x92)))
 (let (($x40 (and $x21 $x56)))
 (let (($x55 (and $x40 $x89)))
 (let (($x28 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x50 (and $x28 $x55)))
 (let (($x48 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x94 (and $x48 $x50)))
 (let (($x117 (= false false)))
 (let (($x26 (and $x117 $x94)))
 (let (($x10 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x60 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x60 (or false (or false (and true (or $x24 $x10)))))))
 (let (($x46 (=> (and $x104 $x60) (or false (or false (and true (or $x24 $x10)))))))
 (let (($x100 (and $x46 $x26)))
 (let (($x31 (=> $x100 $x62)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x118)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x7)))
 (let (($x21 (= input.spec-%var-opt-0.2 ?x92)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x107 (=> $x74 $x21)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x30 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x30 (_ bv1 32))))
 (let (($x86 (= $x74 $x16)))
 (let (($x117 (= false false)))
 (let (($x18 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x51 (=> $x18 $x117)))
 (let (($x46 (= ?x30 (_ bv0 32))))
 (let (($x36 (= $x18 $x46)))
 (let (($x42 (and (and (and $x36 $x51) $x86) $x107)))
 (let (($x55 (= $x42 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x69 (concat ?x47 (concat ?x71 ?x114)))))
 (let (($x87 (= ?x23 input.dst.llvm-%opt)))
 (let (($x77 (= $x87 true)))
 (let (($x56 (= input.dst.llvm-%opt ?x23)))
 (let (($x20 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x40 (and $x20 $x56)))
 (let ((?x25 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x25)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x119 $x90)))
 (let (($x91 (and $x38 $x49)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x99 $x91)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x9)))))))
 (let (($x121 (and (and (and $x67 $x42) $x106) $x40)))
 (let (($x122 (= $x121 true)))
 (let (($x10 (= $x109 true)))
 (let (($x24 (= $x20 true)))
 (let (($x27 (and $x24 $x10)))
 (let (($x11 (and $x27 $x122)))
 (let (($x103 (and $x11 $x77)))
 (let (($x75 (and $x18 $x103)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x123 (and $x32 $x75)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x59 (and $x63 $x123)))
 (let (($x89 (and $x117 $x59)))
 (let (($x50 (=> $x89 $x55)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x118)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x7)))
 (let (($x21 (= input.spec-%var-opt-0.2 ?x92)))
 (let (($x74 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x107 (=> $x74 $x21)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x30 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x30 (_ bv1 32))))
 (let (($x86 (= $x74 $x16)))
 (let (($x117 (= false false)))
 (let (($x18 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x51 (=> $x18 $x117)))
 (let (($x46 (= ?x30 (_ bv0 32))))
 (let (($x36 (= $x18 $x46)))
 (let (($x42 (and (and (and $x36 $x51) $x86) $x107)))
 (let (($x55 (= $x42 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x69 (concat ?x47 (concat ?x71 ?x114)))))
 (let (($x87 (= ?x23 input.dst.llvm-%opt)))
 (let (($x77 (= $x87 true)))
 (let (($x56 (= input.dst.llvm-%opt ?x23)))
 (let (($x20 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x40 (and $x20 $x56)))
 (let ((?x25 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x25)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x119 $x90)))
 (let (($x91 (and $x38 $x49)))
 (let (($x99 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x99 $x91)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x9)))))))
 (let (($x121 (and (and (and $x67 $x42) $x106) $x40)))
 (let (($x122 (= $x121 true)))
 (let (($x10 (= $x109 true)))
 (let (($x24 (= $x20 true)))
 (let (($x27 (and $x24 $x10)))
 (let (($x11 (and $x27 $x122)))
 (let (($x103 (and $x11 $x77)))
 (let (($x75 (and $x18 $x103)))
 (let (($x32 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x123 (and $x32 $x75)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x59 (and $x63 $x123)))
 (let (($x89 (and $x117 $x59)))
 (let (($x50 (=> $x89 $x55)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x100 (or $x58 $x63)))
 (let (($x126 (= $x100 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x89 (concat ?x75 (concat ?x87 ?x122)))))
 (let (($x50 (= ?x55 input.dst.llvm-%opt)))
 (let (($x94 (= $x50 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x12)))
 (let (($x71 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x119 $x71)))
 (let ((?x42 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x42 (_ bv1 32))))
 (let (($x90 (= $x119 $x101)))
 (let (($x17 (= false false)))
 (let (($x107 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x99 (=> $x107 $x17)))
 (let (($x8 (= ?x42 (_ bv0 32))))
 (let (($x33 (= $x107 $x8)))
 (let (($x23 (and (and (and $x33 $x99) $x90) $x114)))
 (let (($x56 (= $x23 true)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x88)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x6 $x98)))
 (let (($x93 (and $x97 $x115)))
 (let (($x46 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x46 $x93)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x74)))))))
 (let (($x7 (and $x72 $x118)))
 (let (($x92 (= $x7 true)))
 (let (($x40 (and $x92 $x56)))
 (let (($x22 (and $x40 $x94)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x37 (and $x76 $x22)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x68 (and $x15 $x37)))
 (let (($x96 (and $x17 $x68)))
 (let (($x57 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x9 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x9 (or false (or false (and true (or $x105 $x57)))))))
 (let (($x54 (=> (and $x63 $x9) (or false (or false (and true (or $x105 $x57)))))))
 (let (($x26 (and $x54 $x96)))
 (let (($x62 (=> $x26 $x126)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x100 (or $x58 $x63)))
 (let (($x126 (= $x100 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x89 (concat ?x75 (concat ?x87 ?x122)))))
 (let (($x50 (= ?x55 input.dst.llvm-%opt)))
 (let (($x94 (= $x50 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x12)))
 (let (($x71 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x119 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x119 $x71)))
 (let ((?x42 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x42 (_ bv1 32))))
 (let (($x90 (= $x119 $x101)))
 (let (($x17 (= false false)))
 (let (($x107 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x99 (=> $x107 $x17)))
 (let (($x8 (= ?x42 (_ bv0 32))))
 (let (($x33 (= $x107 $x8)))
 (let (($x23 (and (and (and $x33 $x99) $x90) $x114)))
 (let (($x56 (= $x23 true)))
 (let ((?x88 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x88)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x6 $x98)))
 (let (($x93 (and $x97 $x115)))
 (let (($x46 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x46 $x93)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x74)))))))
 (let (($x7 (and $x72 $x118)))
 (let (($x92 (= $x7 true)))
 (let (($x40 (and $x92 $x56)))
 (let (($x22 (and $x40 $x94)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x37 (and $x76 $x22)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x68 (and $x15 $x37)))
 (let (($x96 (and $x17 $x68)))
 (let (($x57 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x9 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x9 (or false (or false (and true (or $x105 $x57)))))))
 (let (($x54 (=> (and $x63 $x9) (or false (or false (and true (or $x105 $x57)))))))
 (let (($x26 (and $x54 $x96)))
 (let (($x62 (=> $x26 $x126)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x89)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x23 $x40)))
 (let (($x75 (and $x59 $x103)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x114 $x75)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x115)))))))
 (let (($x19 (and $x107 $x11)))
 (let (($x127 (= $x19 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x68 (concat ?x94 (concat ?x123 ?x122)))))
 (let (($x52 (= ?x96 input.dst.llvm-%opt)))
 (let (($x79 (= $x52 true)))
 (let (($x83 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x60 (=> $x63 $x83)))
 (let (($x26 (= input.dst.llvm-%opt ?x96)))
 (let (($x100 (and $x83 $x26)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x120)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x91 (= input.spec-%var-opt-0.2 ?x49)))
 (let (($x41 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x25 (=> $x41 $x91)))
 (let ((?x6 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x6 (_ bv1 32))))
 (let (($x99 (= $x41 $x17)))
 (let (($x9 (= false false)))
 (let (($x46 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x46 $x9)))
 (let (($x42 (= ?x6 (_ bv0 32))))
 (let (($x8 (= $x46 $x42)))
 (let (($x73 (and (and (and $x8 $x33) $x99) $x25)))
 (let (($x31 (and (and (and $x107 $x73) $x11) $x100)))
 (let (($x104 (and $x31 $x60)))
 (let (($x18 (= $x104 true)))
 (let (($x65 (= $x83 true)))
 (let (($x74 (= $x63 true)))
 (let (($x72 (and $x74 $x65)))
 (let (($x121 (and $x72 $x18)))
 (let (($x39 (and $x121 $x79)))
 (let (($x108 (and $x41 $x39)))
 (let (($x102 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x13 (and $x102 $x108)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x95 (and $x36 $x13)))
 (let (($x29 (and $x9 $x95)))
 (let (($x84 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x64 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x15 (=> $x64 (or false (or false (and true (or $x28 $x84)))))))
 (let (($x109 (=> (and $x63 $x64) (or false (or false (and true (or $x28 $x84)))))))
 (let (($x111 (and $x109 $x29)))
 (let (($x78 (=> $x111 $x127)))
 (not $x78))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x89 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x89)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x23 $x40)))
 (let (($x75 (and $x59 $x103)))
 (let (($x114 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x114 $x75)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x115)))))))
 (let (($x19 (and $x107 $x11)))
 (let (($x127 (= $x19 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x68 (concat ?x94 (concat ?x123 ?x122)))))
 (let (($x52 (= ?x96 input.dst.llvm-%opt)))
 (let (($x79 (= $x52 true)))
 (let (($x83 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x60 (=> $x63 $x83)))
 (let (($x26 (= input.dst.llvm-%opt ?x96)))
 (let (($x100 (and $x83 $x26)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x120)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x91 (= input.spec-%var-opt-0.2 ?x49)))
 (let (($x41 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x25 (=> $x41 $x91)))
 (let ((?x6 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x6 (_ bv1 32))))
 (let (($x99 (= $x41 $x17)))
 (let (($x9 (= false false)))
 (let (($x46 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x33 (=> $x46 $x9)))
 (let (($x42 (= ?x6 (_ bv0 32))))
 (let (($x8 (= $x46 $x42)))
 (let (($x73 (and (and (and $x8 $x33) $x99) $x25)))
 (let (($x31 (and (and (and $x107 $x73) $x11) $x100)))
 (let (($x104 (and $x31 $x60)))
 (let (($x18 (= $x104 true)))
 (let (($x65 (= $x83 true)))
 (let (($x74 (= $x63 true)))
 (let (($x72 (and $x74 $x65)))
 (let (($x121 (and $x72 $x18)))
 (let (($x39 (and $x121 $x79)))
 (let (($x108 (and $x41 $x39)))
 (let (($x102 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x13 (and $x102 $x108)))
 (let (($x36 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x95 (and $x36 $x13)))
 (let (($x29 (and $x9 $x95)))
 (let (($x84 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x64 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x15 (=> $x64 (or false (or false (and true (or $x28 $x84)))))))
 (let (($x109 (=> (and $x63 $x64) (or false (or false (and true (or $x28 $x84)))))))
 (let (($x111 (and $x109 $x29)))
 (let (($x78 (=> $x111 $x127)))
 (not $x78))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let ((?x30 (ite $x63 (_ bv1 1) (_ bv0 1))))
 (let ((?x87 ((_ zero_extend 31) ?x30)))
 (let (($x125 (= (_ bv1 32) ?x87)))
 (let (($x128 (= $x125 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x26 (concat ?x55 (concat ?x77 ?x50)))))
 (let (($x13 (= ?x100 input.dst.llvm-%opt)))
 (let (($x95 (= $x13 true)))
 (let (($x98 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x52 (=> $x63 $x98)))
 (let (($x31 (= input.dst.llvm-%opt ?x100)))
 (let (($x60 (and $x98 $x31)))
 (let ((?x75 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x75)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x40 $x89)))
 (let (($x62 (and $x103 $x11)))
 (let (($x56 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x56 $x62)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x101)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x25 (= input.spec-%var-opt-0.2 ?x91)))
 (let (($x65 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x73 (=> $x65 $x25)))
 (let ((?x118 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x118 (_ bv1 32))))
 (let (($x34 (= $x65 $x12)))
 (let (($x64 (= false false)))
 (let (($x93 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x99 (=> $x93 $x64)))
 (let (($x41 (= ?x118 (_ bv0 32))))
 (let (($x17 (= $x93 $x41)))
 (let (($x114 (and (and (and $x17 $x99) $x34) $x73)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x46)))))))
 (let (($x121 (and (and (and $x106 $x114) $x37) $x60)))
 (let (($x79 (and $x121 $x52)))
 (let (($x39 (= $x79 true)))
 (let (($x97 (= $x63 true)))
 (let (($x21 (= $x98 true)))
 (let (($x88 (and $x21 $x97)))
 (let (($x108 (and $x88 $x39)))
 (let (($x29 (and $x108 $x95)))
 (let (($x111 (and $x65 $x29)))
 (let (($x86 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x19 (and $x86 $x111)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x127 (and $x74 $x19)))
 (let (($x78 (and $x64 $x127)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x76 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x76 (or false (or false (and true (or $x80 $x54)))))))
 (let (($x53 (=> (and $x63 $x76) (or false (or false (and true (or $x80 $x54)))))))
 (let (($x112 (and $x53 $x78)))
 (let (($x116 (=> $x112 $x128)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let ((?x30 (ite $x63 (_ bv1 1) (_ bv0 1))))
 (let ((?x87 ((_ zero_extend 31) ?x30)))
 (let (($x125 (= (_ bv1 32) ?x87)))
 (let (($x128 (= $x125 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x26 (concat ?x55 (concat ?x77 ?x50)))))
 (let (($x13 (= ?x100 input.dst.llvm-%opt)))
 (let (($x95 (= $x13 true)))
 (let (($x98 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x52 (=> $x63 $x98)))
 (let (($x31 (= input.dst.llvm-%opt ?x100)))
 (let (($x60 (and $x98 $x31)))
 (let ((?x75 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x75)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x40 $x89)))
 (let (($x62 (and $x103 $x11)))
 (let (($x56 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x56 $x62)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x101)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x25 (= input.spec-%var-opt-0.2 ?x91)))
 (let (($x65 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x73 (=> $x65 $x25)))
 (let ((?x118 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x118 (_ bv1 32))))
 (let (($x34 (= $x65 $x12)))
 (let (($x64 (= false false)))
 (let (($x93 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x99 (=> $x93 $x64)))
 (let (($x41 (= ?x118 (_ bv0 32))))
 (let (($x17 (= $x93 $x41)))
 (let (($x114 (and (and (and $x17 $x99) $x34) $x73)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x46)))))))
 (let (($x121 (and (and (and $x106 $x114) $x37) $x60)))
 (let (($x79 (and $x121 $x52)))
 (let (($x39 (= $x79 true)))
 (let (($x97 (= $x63 true)))
 (let (($x21 (= $x98 true)))
 (let (($x88 (and $x21 $x97)))
 (let (($x108 (and $x88 $x39)))
 (let (($x29 (and $x108 $x95)))
 (let (($x111 (and $x65 $x29)))
 (let (($x86 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x19 (and $x86 $x111)))
 (let (($x74 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x127 (and $x74 $x19)))
 (let (($x78 (and $x64 $x127)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x76 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x76 (or false (or false (and true (or $x80 $x54)))))))
 (let (($x53 (=> (and $x63 $x76) (or false (or false (and true (or $x80 $x54)))))))
 (let (($x112 (and $x53 $x78)))
 (let (($x116 (=> $x112 $x128)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x47)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let ((?x128 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x128)))
 (let (($x44 (= ?x116 ?x25)))
 (let (($x43 (= $x44 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x31 (concat ?x123 (concat ?x94 ?x122)))))
 (let (($x19 (= ?x60 input.dst.llvm-%opt)))
 (let (($x127 (= $x19 true)))
 (let (($x92 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x13 (=> $x63 $x92)))
 (let (($x121 (= input.dst.llvm-%opt ?x60)))
 (let (($x52 (and $x92 $x121)))
 (let ((?x62 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x62)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x89 $x75)))
 (let (($x18 (and $x11 $x37)))
 (let (($x59 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x59 $x18)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x97 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x97 $x73)))
 (let ((?x42 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x42 (_ bv1 32))))
 (let (($x69 (= $x97 $x71)))
 (let (($x76 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x34 (=> $x6 $x76)))
 (let (($x65 (= ?x42 (_ bv0 32))))
 (let (($x12 (= $x6 $x65)))
 (let (($x56 (and (and (and $x12 $x34) $x69) $x114)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x93)))))))
 (let (($x108 (and (and (and $x126 $x56) $x96) $x52)))
 (let (($x95 (and $x108 $x13)))
 (let (($x29 (= $x95 true)))
 (let (($x107 (= $x63 true)))
 (let (($x33 (= $x92 true)))
 (let (($x51 (and $x33 $x107)))
 (let (($x111 (and $x51 $x29)))
 (let (($x78 (and $x111 $x127)))
 (let (($x112 (and $x97 $x78)))
 (let (($x98 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x24 (and $x98 $x112)))
 (let (($x72 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x32 (and $x72 $x24)))
 (let (($x30 (and $x76 $x32)))
 (let (($x109 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x102 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x74 (=> $x102 (or false (or false (and true (or $x15 $x109)))))))
 (let (($x48 (=> (and $x63 $x102) (or false (or false (and true (or $x15 $x109)))))))
 (let (($x87 (and $x48 $x30)))
 (let (($x20 (=> $x87 $x43)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x47)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let ((?x128 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x128)))
 (let (($x44 (= ?x116 ?x25)))
 (let (($x43 (= $x44 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x31 (concat ?x123 (concat ?x94 ?x122)))))
 (let (($x19 (= ?x60 input.dst.llvm-%opt)))
 (let (($x127 (= $x19 true)))
 (let (($x92 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x13 (=> $x63 $x92)))
 (let (($x121 (= input.dst.llvm-%opt ?x60)))
 (let (($x52 (and $x92 $x121)))
 (let ((?x62 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x62)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x89 $x75)))
 (let (($x18 (and $x11 $x37)))
 (let (($x59 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x59 $x18)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x97 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x97 $x73)))
 (let ((?x42 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x42 (_ bv1 32))))
 (let (($x69 (= $x97 $x71)))
 (let (($x76 (= false false)))
 (let (($x6 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x34 (=> $x6 $x76)))
 (let (($x65 (= ?x42 (_ bv0 32))))
 (let (($x12 (= $x6 $x65)))
 (let (($x56 (and (and (and $x12 $x34) $x69) $x114)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x93)))))))
 (let (($x108 (and (and (and $x126 $x56) $x96) $x52)))
 (let (($x95 (and $x108 $x13)))
 (let (($x29 (= $x95 true)))
 (let (($x107 (= $x63 true)))
 (let (($x33 (= $x92 true)))
 (let (($x51 (and $x33 $x107)))
 (let (($x111 (and $x51 $x29)))
 (let (($x78 (and $x111 $x127)))
 (let (($x112 (and $x97 $x78)))
 (let (($x98 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x24 (and $x98 $x112)))
 (let (($x72 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x32 (and $x72 $x24)))
 (let (($x30 (and $x76 $x32)))
 (let (($x109 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x102 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x74 (=> $x102 (or false (or false (and true (or $x15 $x109)))))))
 (let (($x48 (=> (and $x63 $x102) (or false (or false (and true (or $x15 $x109)))))))
 (let (($x87 (and $x48 $x30)))
 (let (($x20 (=> $x87 $x43)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x20 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x115 (= (_ bv0 2) ?x20)))
 (let (($x57 (= $x115 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x121 (concat ?x77 (concat ?x55 ?x50)))))
 (let (($x24 (= ?x52 input.dst.llvm-%opt)))
 (let (($x32 (= $x24 true)))
 (let (($x9 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x19 (=> $x63 $x9)))
 (let (($x108 (= input.dst.llvm-%opt ?x52)))
 (let (($x13 (and $x9 $x108)))
 (let ((?x18 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x18)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x75 $x62)))
 (let (($x39 (and $x37 $x96)))
 (let (($x103 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x103 $x39)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x119)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x107 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x107 $x114)))
 (let ((?x41 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x41 (_ bv1 32))))
 (let (($x49 (= $x107 $x23)))
 (let (($x102 (= false false)))
 (let (($x118 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x69 (=> $x118 $x102)))
 (let (($x97 (= ?x41 (_ bv0 32))))
 (let (($x71 (= $x118 $x97)))
 (let (($x59 (and (and (and $x71 $x69) $x49) $x56)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x6)))))))
 (let (($x111 (and (and (and $x104 $x59) $x100) $x13)))
 (let (($x127 (and $x111 $x19)))
 (let (($x78 (= $x127 true)))
 (let (($x106 (= $x63 true)))
 (let (($x99 (= $x9 true)))
 (let (($x83 (and $x99 $x106)))
 (let (($x112 (and $x83 $x78)))
 (let (($x30 (and $x112 $x32)))
 (let (($x87 (and $x107 $x30)))
 (let (($x92 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x125 (and $x92 $x87)))
 (let (($x88 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x128 (and $x88 $x125)))
 (let (($x116 (and $x102 $x128)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x72 (=> $x86 (or false (or false (and true (or $x36 $x53)))))))
 (let (($x110 (=> (and $x63 $x86) (or false (or false (and true (or $x36 $x53)))))))
 (let (($x44 (and $x110 $x116)))
 (let (($x10 (=> $x44 $x57)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x20 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x115 (= (_ bv0 2) ?x20)))
 (let (($x57 (= $x115 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x121 (concat ?x77 (concat ?x55 ?x50)))))
 (let (($x24 (= ?x52 input.dst.llvm-%opt)))
 (let (($x32 (= $x24 true)))
 (let (($x9 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x19 (=> $x63 $x9)))
 (let (($x108 (= input.dst.llvm-%opt ?x52)))
 (let (($x13 (and $x9 $x108)))
 (let ((?x18 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x18)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x75 $x62)))
 (let (($x39 (and $x37 $x96)))
 (let (($x103 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x103 $x39)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x119)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x73)))
 (let (($x107 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x56 (=> $x107 $x114)))
 (let ((?x41 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x41 (_ bv1 32))))
 (let (($x49 (= $x107 $x23)))
 (let (($x102 (= false false)))
 (let (($x118 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x69 (=> $x118 $x102)))
 (let (($x97 (= ?x41 (_ bv0 32))))
 (let (($x71 (= $x118 $x97)))
 (let (($x59 (and (and (and $x71 $x69) $x49) $x56)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x6)))))))
 (let (($x111 (and (and (and $x104 $x59) $x100) $x13)))
 (let (($x127 (and $x111 $x19)))
 (let (($x78 (= $x127 true)))
 (let (($x106 (= $x63 true)))
 (let (($x99 (= $x9 true)))
 (let (($x83 (and $x99 $x106)))
 (let (($x112 (and $x83 $x78)))
 (let (($x30 (and $x112 $x32)))
 (let (($x87 (and $x107 $x30)))
 (let (($x92 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x125 (and $x92 $x87)))
 (let (($x88 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x128 (and $x88 $x125)))
 (let (($x116 (and $x102 $x128)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x86 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x72 (=> $x86 (or false (or false (and true (or $x36 $x53)))))))
 (let (($x110 (=> (and $x63 $x86) (or false (or false (and true (or $x36 $x53)))))))
 (let (($x44 (and $x110 $x116)))
 (let (($x10 (=> $x44 $x57)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x88 (=> $x98 (or false (or false (and true (or $x74 $x48)))))))
 (let (($x10 (= $x88 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x108 (concat ?x94 (concat ?x123 ?x122)))))
 (let (($x125 (= ?x13 input.dst.llvm-%opt)))
 (let (($x128 (= $x125 true)))
 (let (($x64 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x24 (=> $x63 $x64)))
 (let (($x111 (= input.dst.llvm-%opt ?x13)))
 (let (($x19 (and $x64 $x111)))
 (let ((?x39 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x39)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x62 $x18)))
 (let (($x29 (and $x96 $x100)))
 (let (($x11 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x11 $x29)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x38)))
 (let ((?x114 (concat (select input.dst.llvm-mem ?x117) ?x5)))
 (let (($x56 (= input.spec-%var-opt-0.2 ?x114)))
 (let (($x106 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x59 (=> $x106 $x56)))
 (let ((?x65 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x65 (_ bv1 32))))
 (let (($x91 (= $x106 $x40)))
 (let (($x86 (= false false)))
 (let (($x42 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x42 $x86)))
 (let (($x107 (= ?x65 (_ bv0 32))))
 (let (($x23 (= $x42 $x107)))
 (let (($x103 (and (and (and $x23 $x49) $x91) $x59)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x118)))))))
 (let (($x112 (and (and (and $x79 $x103) $x60) $x19)))
 (let (($x32 (and $x112 $x24)))
 (let (($x30 (= $x32 true)))
 (let (($x126 (= $x63 true)))
 (let (($x34 (= $x64 true)))
 (let (($x21 (and $x34 $x126)))
 (let (($x87 (and $x21 $x30)))
 (let (($x116 (and $x87 $x128)))
 (let (($x44 (and $x106 $x116)))
 (let (($x9 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x43 (and $x9 $x44)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x20 (and $x51 $x43)))
 (let (($x115 (and $x86 $x20)))
 (let (($x82 (=> (and $x63 $x98) (or false (or false (and true (or $x74 $x48)))))))
 (let (($x57 (and $x82 $x115)))
 (let (($x46 (=> $x57 $x10)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x88 (=> $x98 (or false (or false (and true (or $x74 $x48)))))))
 (let (($x10 (= $x88 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x108 (concat ?x94 (concat ?x123 ?x122)))))
 (let (($x125 (= ?x13 input.dst.llvm-%opt)))
 (let (($x128 (= $x125 true)))
 (let (($x64 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x24 (=> $x63 $x64)))
 (let (($x111 (= input.dst.llvm-%opt ?x13)))
 (let (($x19 (and $x64 $x111)))
 (let ((?x39 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x39)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x62 $x18)))
 (let (($x29 (and $x96 $x100)))
 (let (($x11 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x11 $x29)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x38)))
 (let ((?x114 (concat (select input.dst.llvm-mem ?x117) ?x5)))
 (let (($x56 (= input.spec-%var-opt-0.2 ?x114)))
 (let (($x106 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x59 (=> $x106 $x56)))
 (let ((?x65 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x65 (_ bv1 32))))
 (let (($x91 (= $x106 $x40)))
 (let (($x86 (= false false)))
 (let (($x42 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x49 (=> $x42 $x86)))
 (let (($x107 (= ?x65 (_ bv0 32))))
 (let (($x23 (= $x42 $x107)))
 (let (($x103 (and (and (and $x23 $x49) $x91) $x59)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x118)))))))
 (let (($x112 (and (and (and $x79 $x103) $x60) $x19)))
 (let (($x32 (and $x112 $x24)))
 (let (($x30 (= $x32 true)))
 (let (($x126 (= $x63 true)))
 (let (($x34 (= $x64 true)))
 (let (($x21 (and $x34 $x126)))
 (let (($x87 (and $x21 $x30)))
 (let (($x116 (and $x87 $x128)))
 (let (($x44 (and $x106 $x116)))
 (let (($x9 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x43 (and $x9 $x44)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x20 (and $x51 $x43)))
 (let (($x115 (and $x86 $x20)))
 (let (($x82 (=> (and $x63 $x98) (or false (or false (and true (or $x74 $x48)))))))
 (let (($x57 (and $x82 $x115)))
 (let (($x46 (=> $x57 $x10)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x90)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x59 (= input.spec-%var-opt-0.2 ?x56)))
 (let (($x126 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x103 (=> $x126 $x59)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x97 (_ bv1 32))))
 (let (($x25 (= $x126 $x89)))
 (let (($x98 (= false false)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x41 $x98)))
 (let (($x106 (= ?x97 (_ bv0 32))))
 (let (($x40 (= $x41 $x106)))
 (let (($x11 (and (and (and $x40 $x91) $x25) $x103)))
 (let (($x28 (= $x11 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x111 (concat ?x55 (concat ?x77 ?x50)))))
 (let (($x43 (= ?x19 input.dst.llvm-%opt)))
 (let (($x20 (= $x43 true)))
 (let (($x76 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x125 (=> $x63 $x76)))
 (let (($x112 (= input.dst.llvm-%opt ?x19)))
 (let (($x24 (and $x76 $x112)))
 (let ((?x29 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x29)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x18 $x39)))
 (let (($x78 (and $x100 $x60)))
 (let (($x37 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x37 $x78)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x42)))))))
 (let (($x87 (and (and (and $x95 $x11) $x52) $x24)))
 (let (($x128 (and $x87 $x125)))
 (let (($x116 (= $x128 true)))
 (let (($x104 (= $x63 true)))
 (let (($x69 (= $x76 true)))
 (let (($x33 (and $x69 $x104)))
 (let (($x44 (and $x33 $x116)))
 (let (($x115 (and $x44 $x20)))
 (let (($x57 (and $x126 $x115)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x10 (and $x64 $x57)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x46 (and $x83 $x10)))
 (let (($x84 (and $x98 $x46)))
 (let (($x110 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x92 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x51 (=> $x92 (or false (or false (and true (or $x72 $x110)))))))
 (let (($x67 (=> (and $x63 $x92) (or false (or false (and true (or $x72 $x110)))))))
 (let (($x54 (and $x67 $x84)))
 (let (($x6 (=> $x54 $x28)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x90)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x5)))
 (let (($x59 (= input.spec-%var-opt-0.2 ?x56)))
 (let (($x126 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x103 (=> $x126 $x59)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x97 (_ bv1 32))))
 (let (($x25 (= $x126 $x89)))
 (let (($x98 (= false false)))
 (let (($x41 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x41 $x98)))
 (let (($x106 (= ?x97 (_ bv0 32))))
 (let (($x40 (= $x41 $x106)))
 (let (($x11 (and (and (and $x40 $x91) $x25) $x103)))
 (let (($x28 (= $x11 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x111 (concat ?x55 (concat ?x77 ?x50)))))
 (let (($x43 (= ?x19 input.dst.llvm-%opt)))
 (let (($x20 (= $x43 true)))
 (let (($x76 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x63 (not $x58)))
 (let (($x125 (=> $x63 $x76)))
 (let (($x112 (= input.dst.llvm-%opt ?x19)))
 (let (($x24 (and $x76 $x112)))
 (let ((?x29 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x29)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x18 $x39)))
 (let (($x78 (and $x100 $x60)))
 (let (($x37 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x37 $x78)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x42)))))))
 (let (($x87 (and (and (and $x95 $x11) $x52) $x24)))
 (let (($x128 (and $x87 $x125)))
 (let (($x116 (= $x128 true)))
 (let (($x104 (= $x63 true)))
 (let (($x69 (= $x76 true)))
 (let (($x33 (and $x69 $x104)))
 (let (($x44 (and $x33 $x116)))
 (let (($x115 (and $x44 $x20)))
 (let (($x57 (and $x126 $x115)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x10 (and $x64 $x57)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x46 (and $x83 $x10)))
 (let (($x84 (and $x98 $x46)))
 (let (($x110 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x92 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x51 (=> $x92 (or false (or false (and true (or $x72 $x110)))))))
 (let (($x67 (=> (and $x63 $x92) (or false (or false (and true (or $x72 $x110)))))))
 (let (($x54 (and $x67 $x84)))
 (let (($x6 (=> $x54 $x28)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x20)))
 (let (($x108 (= ?x115 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x105 (= $x108 true)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x54 (= ?x115 ?x124)))
 (let (($x28 (= $x54 true)))
 (let (($x10 (= ?x115 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x46 (= $x10 true)))
 (let ((?x112 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x112)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x50 $x22)))
 (let (($x87 (and $x19 $x24)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x100 $x87)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x30)))))))
 (let (($x128 (and $x77 $x125)))
 (let (($x116 (= $x128 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x62 (= (_ bv0 2) ?x32)))
 (let (($x37 (= $x62 true)))
 (let (($x119 (= input.spec-%var-opt-0.2 ?x124)))
 (let (($x117 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x101 (=> $x117 $x119)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x34 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x34 (_ bv1 32))))
 (let (($x91 (= $x117 $x40)))
 (let (($x98 (= false false)))
 (let (($x86 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x86 $x98)))
 (let (($x41 (= ?x34 (_ bv0 32))))
 (let (($x97 (= $x86 $x41)))
 (let (($x56 (and (and (and $x97 $x106) $x91) $x101)))
 (let (($x59 (= $x56 true)))
 (let (($x102 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x107 (=> $x65 (or false (or false (and true (or $x71 $x102)))))))
 (let (($x17 (= $x107 true)))
 (let ((?x88 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x82 ((_ zero_extend 31) ?x88)))
 (let (($x7 (= (_ bv1 32) ?x82)))
 (let (($x51 (= $x7 true)))
 (let (($x16 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x72 (= $x16 true)))
 (let (($x67 (and $x72 $x51)))
 (let (($x64 (and $x67 $x17)))
 (let (($x103 (and $x64 $x59)))
 (let (($x18 (and $x103 $x37)))
 (let (($x44 (and $x18 $x116)))
 (let (($x84 (and $x44 $x46)))
 (let (($x6 (and $x84 $x28)))
 (let (($x121 (and $x117 $x6)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x109 (and $x15 $x121)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x80 (and $x58 $x109)))
 (let (($x118 (and $x98 $x80)))
 (let (($x93 (=> $x118 $x105)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x20)))
 (let (($x108 (= ?x115 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x105 (= $x108 true)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x75)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x120)))
 (let (($x54 (= ?x115 ?x124)))
 (let (($x28 (= $x54 true)))
 (let (($x10 (= ?x115 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x46 (= $x10 true)))
 (let ((?x112 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x112)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x50 $x22)))
 (let (($x87 (and $x19 $x24)))
 (let (($x100 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x100 $x87)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x30)))))))
 (let (($x128 (and $x77 $x125)))
 (let (($x116 (= $x128 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x62 (= (_ bv0 2) ?x32)))
 (let (($x37 (= $x62 true)))
 (let (($x119 (= input.spec-%var-opt-0.2 ?x124)))
 (let (($x117 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x101 (=> $x117 $x119)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x34 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x34 (_ bv1 32))))
 (let (($x91 (= $x117 $x40)))
 (let (($x98 (= false false)))
 (let (($x86 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x86 $x98)))
 (let (($x41 (= ?x34 (_ bv0 32))))
 (let (($x97 (= $x86 $x41)))
 (let (($x56 (and (and (and $x97 $x106) $x91) $x101)))
 (let (($x59 (= $x56 true)))
 (let (($x102 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x65 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x107 (=> $x65 (or false (or false (and true (or $x71 $x102)))))))
 (let (($x17 (= $x107 true)))
 (let ((?x88 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x82 ((_ zero_extend 31) ?x88)))
 (let (($x7 (= (_ bv1 32) ?x82)))
 (let (($x51 (= $x7 true)))
 (let (($x16 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x72 (= $x16 true)))
 (let (($x67 (and $x72 $x51)))
 (let (($x64 (and $x67 $x17)))
 (let (($x103 (and $x64 $x59)))
 (let (($x18 (and $x103 $x37)))
 (let (($x44 (and $x18 $x116)))
 (let (($x84 (and $x44 $x46)))
 (let (($x6 (and $x84 $x28)))
 (let (($x121 (and $x117 $x6)))
 (let (($x15 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x109 (and $x15 $x121)))
 (let (($x58 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x80 (and $x58 $x109)))
 (let (($x118 (and $x98 $x80)))
 (let (($x93 (=> $x118 $x105)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x125 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x132 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x133 (=> $x132 $x125)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x103 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x103 (_ bv1 32))))
 (let (($x81 (= $x132 $x37)))
 (let (($x15 (= false false)))
 (let (($x35 (= (_ bv1 32) (_ bv0 32))))
 (let (($x85 (=> $x35 $x15)))
 (let (($x11 (= ?x103 (_ bv0 32))))
 (let (($x131 (= $x35 $x11)))
 (let (($x136 (and (and (and $x131 $x85) $x81) $x133)))
 (let (($x61 (= $x136 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x31 (= (_ bv0 2) ?x93)))
 (let (($x83 (= $x31 true)))
 (let (($x124 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x80 (and $x124 $x125)))
 (let (($x118 (= $x80 true)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x115)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x10)))
 (let (($x54 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x28 (=> $x71 $x54)))
 (let (($x18 (= $x71 $x37)))
 (let (($x56 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x62 (=> $x56 $x15)))
 (let (($x32 (= $x56 $x11)))
 (let (($x123 (and (and $x32 $x62) $x18)))
 (let (($x6 (and $x123 $x28)))
 (let (($x121 (= $x6 true)))
 (let (($x128 (= $x125 true)))
 (let ((?x94 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x94) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x13 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x110 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x110) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x13) ?x52))))
 (let (($x39 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x100 (=> $x71 $x39)))
 (let (($x22 (and $x123 $x100)))
 (let (($x19 (= $x22 true)))
 (let (($x119 (= $x124 true)))
 (let ((?x38 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x38)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x40 $x5)))
 (let (($x114 (and $x127 $x73)))
 (let (($x64 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x64 $x114)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x34)))))))
 (let (($x89 (and $x117 $x47)))
 (let (($x25 (= $x89 true)))
 (let ((?x102 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x102)))
 (let (($x79 (= ?x49 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x99 (= $x79 true)))
 (let (($x126 (and $x99 $x25)))
 (let (($x101 (and $x126 $x119)))
 (let (($x112 (and $x101 $x19)))
 (let (($x116 (and $x112 $x128)))
 (let (($x109 (and $x116 $x121)))
 (let (($x108 (and $x109 $x118)))
 (let (($x8 (and $x108 $x83)))
 (let (($x96 (and $x71 $x8)))
 (let (($x104 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x26 (and $x104 $x96)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x68 (and $x65 $x26)))
 (let (($x129 (and $x15 $x68)))
 (let (($x88 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x9 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x21 (=> $x9 (or false (or false (and true (or $x45 $x88)))))))
 (let (($x130 (and $x21 $x129)))
 (let (($x113 (=> $x130 $x61)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x125 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x132 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x133 (=> $x132 $x125)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x103 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x103 (_ bv1 32))))
 (let (($x81 (= $x132 $x37)))
 (let (($x15 (= false false)))
 (let (($x35 (= (_ bv1 32) (_ bv0 32))))
 (let (($x85 (=> $x35 $x15)))
 (let (($x11 (= ?x103 (_ bv0 32))))
 (let (($x131 (= $x35 $x11)))
 (let (($x136 (and (and (and $x131 $x85) $x81) $x133)))
 (let (($x61 (= $x136 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x31 (= (_ bv0 2) ?x93)))
 (let (($x83 (= $x31 true)))
 (let (($x124 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x80 (and $x124 $x125)))
 (let (($x118 (= $x80 true)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x115)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x10)))
 (let (($x54 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x71 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x28 (=> $x71 $x54)))
 (let (($x18 (= $x71 $x37)))
 (let (($x56 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x62 (=> $x56 $x15)))
 (let (($x32 (= $x56 $x11)))
 (let (($x123 (and (and $x32 $x62) $x18)))
 (let (($x6 (and $x123 $x28)))
 (let (($x121 (= $x6 true)))
 (let (($x128 (= $x125 true)))
 (let ((?x94 (bvadd input.dst.llvm-%opt (_ bv1 32))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x94) (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x13 (bvadd input.dst.llvm-%opt (_ bv2 32))))
 (let ((?x110 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x110) (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x13) ?x52))))
 (let (($x39 (= input.spec-%var-opt-0.2 ?x77)))
 (let (($x100 (=> $x71 $x39)))
 (let (($x22 (and $x123 $x100)))
 (let (($x19 (= $x22 true)))
 (let (($x119 (= $x124 true)))
 (let ((?x38 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x38)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x40 $x5)))
 (let (($x114 (and $x127 $x73)))
 (let (($x64 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x64 $x114)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x34)))))))
 (let (($x89 (and $x117 $x47)))
 (let (($x25 (= $x89 true)))
 (let ((?x102 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x102)))
 (let (($x79 (= ?x49 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x99 (= $x79 true)))
 (let (($x126 (and $x99 $x25)))
 (let (($x101 (and $x126 $x119)))
 (let (($x112 (and $x101 $x19)))
 (let (($x116 (and $x112 $x128)))
 (let (($x109 (and $x116 $x121)))
 (let (($x108 (and $x109 $x118)))
 (let (($x8 (and $x108 $x83)))
 (let (($x96 (and $x71 $x8)))
 (let (($x104 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x26 (and $x104 $x96)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x68 (and $x65 $x26)))
 (let (($x129 (and $x15 $x68)))
 (let (($x88 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x9 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x21 (=> $x9 (or false (or false (and true (or $x45 $x88)))))))
 (let (($x130 (and $x21 $x129)))
 (let (($x113 (=> $x130 $x61)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x34 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x36 (or (bvugt input.memlabel-mem--arg.0_begin ?x79) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x36) (or $x95 $x34)))))))
 (let (($x51 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x53 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= ?x53 (_ bv0 32))))
 (let ((?x58 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x110 $x72)))
 (let (($x7 (and $x16 $x82)))
 (let (($x67 (and $x7 $x51)))
 (and $x67 $x17)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x34 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x36 (or (bvugt input.memlabel-mem--arg.0_begin ?x79) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x36) (or $x95 $x34)))))))
 (let (($x51 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x53 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= ?x53 (_ bv0 32))))
 (let ((?x58 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x110 $x72)))
 (let (($x7 (and $x16 $x82)))
 (let (($x67 (and $x7 $x51)))
 (and $x67 $x17)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x32 (= false true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x124 (concat ?x126 (concat ?x114 ?x38)))))
 (let (($x101 (= ?x119 input.dst.llvm-%val)))
 (let (($x33 (= $x101 true)))
 (let (($x49 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (= $x49 true)))
 (let ((?x88 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x88)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x97 $x9)))
 (let (($x66 (and $x53 $x7)))
 (let (($x90 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x90 $x66)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x42)))))))
 (let (($x34 (and $x48 $x16)))
 (let (($x79 (= $x34 true)))
 (let (($x91 (and $x79 $x104)))
 (let (($x56 (and $x91 $x33)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x59 (and $x23 $x56)))
 (let ((?x63 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x74 (= ?x63 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x103 (and $x74 $x59)))
 (let (($x51 (= ?x63 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x11 (and $x51 $x103)))
 (let (($x15 (=> $x11 $x32)))
 (not $x15))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x32 (= false true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x124 (concat ?x126 (concat ?x114 ?x38)))))
 (let (($x101 (= ?x119 input.dst.llvm-%val)))
 (let (($x33 (= $x101 true)))
 (let (($x49 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (= $x49 true)))
 (let ((?x88 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x88)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x97 $x9)))
 (let (($x66 (and $x53 $x7)))
 (let (($x90 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x90 $x66)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x42)))))))
 (let (($x34 (and $x48 $x16)))
 (let (($x79 (= $x34 true)))
 (let (($x91 (and $x79 $x104)))
 (let (($x56 (and $x91 $x33)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x59 (and $x23 $x56)))
 (let ((?x63 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x74 (= ?x63 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x103 (and $x74 $x59)))
 (let (($x51 (= ?x63 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x11 (and $x51 $x103)))
 (let (($x15 (=> $x11 $x32)))
 (not $x15))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000001010)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111110110)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111110110)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv10 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x82 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x127 (= ?x82 ?x40)))
 (let (($x50 (= $x127 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x47 (concat ?x91 (concat ?x69 ?x25)))))
 (let (($x103 (= ?x75 input.dst.llvm-%val)))
 (let (($x11 (= $x103 true)))
 (let (($x119 (= input.dst.llvm-%val ?x75)))
 (let ((?x97 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x97)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x16 $x90)))
 (let (($x53 (and $x117 $x86)))
 (let (($x34 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x34 $x53)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x106)))))))
 (let (($x56 (and (and (and $x64 $x74) $x104) $x119)))
 (let (($x59 (= $x56 true)))
 (let (($x32 (and $x59 $x11)))
 (let (($x110 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x15 (and $x110 $x32)))
 (let (($x51 (= ?x82 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x62 (and $x51 $x15)))
 (let (($x99 (= ?x82 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x72 (and $x99 $x62)))
 (let (($x71 (=> $x72 $x50)))
 (not $x71)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x82 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x127 (= ?x82 ?x40)))
 (let (($x50 (= $x127 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x47 (concat ?x91 (concat ?x69 ?x25)))))
 (let (($x103 (= ?x75 input.dst.llvm-%val)))
 (let (($x11 (= $x103 true)))
 (let (($x119 (= input.dst.llvm-%val ?x75)))
 (let ((?x97 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x97)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x16 $x90)))
 (let (($x53 (and $x117 $x86)))
 (let (($x34 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x34 $x53)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x106)))))))
 (let (($x56 (and (and (and $x64 $x74) $x104) $x119)))
 (let (($x59 (= $x56 true)))
 (let (($x32 (and $x59 $x11)))
 (let (($x110 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x15 (and $x110 $x32)))
 (let (($x51 (= ?x82 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x62 (and $x51 $x15)))
 (let (($x99 (= ?x82 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x72 (and $x99 $x62)))
 (let (($x71 (=> $x72 $x50)))
 (not $x71)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087496/query
