argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=loop7.proof
argv[9] = --spec-iospecs=loop7.iospecs
argv[10] = loop7.spec
argv[11] = loop7.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.2676020
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/loop7.c
argv[10] = -o
argv[11] = par_tmpdir/loop7.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/loop7.spec.etfg
argv[11] = par_tmpdir/loop7.c.bc
argv[12] = -o
argv[13] = par_tmpdir/loop7.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 66 time spent: 0:0:0 [0.000124s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 87 time spent: 0:0:0 [0.000147s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 757 time spent: 0:0:0 [0.004890s total; 0.000006 per start]
expr_simplify_solver: num_starts 146 time spent: 0:0:0 [0.016426s total; 0.000113 per start]
expr_simplify_syntactic: num_starts 146 time spent: 0:0:0 [0.079790s total; 0.000547 per start]
expr_simplify_store_on_store: num_starts 32 time spent: 0:0:0 [0.002494s total; 0.000078 per start]
expr_simplify_using_lhs_set_helper: num_starts 96 time spent: 0:0:0 [0.102547s total; 0.001068 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 507 time spent: 0:0:0 [0.102064s total; 0.000201 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 83 time spent: 0:0:0 [0.000405s total; 0.000005 per start]
expr_simplify_eq: num_starts 6 time spent: 0:0:0 [0.000085s total; 0.000014 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000008s total; 0.000004 per start]
expr_simplify_ite: num_starts 2 time spent: 0:0:0 [0.000288s total; 0.000144 per start]
canonicalize_expr_tree: num_starts 68 time spent: 0:0:0 [0.001577s total; 0.000023 per start]
expr_simplify_memalloc_using_memlabel: num_starts 39 time spent: 0:0:0 [0.000111s total; 0.000003 per start]
memlabels_are_independent: num_starts 27 time spent: 0:0:0 [0.000053s total; 0.000002 per start]
get_arithmetic_addsub_atoms: num_starts 74 time spent: 0:0:0 [0.000061s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 125 time spent: 0:0:0 [0.001530s total; 0.000012 per start]
expr_is_consts_struct_constant: num_starts 223 time spent: 0:0:0 [0.000191s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1786 time spent: 0:0:0 [0.104582s total; 0.000059 per start]
expr_do_simplify_helper_cache: num_starts 1786 time spent: 0:0:0 [0.001344s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 18 time spent: 0:0:0 [0.000006s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 18 time spent: 0:0:0 [0.000104s total; 0.000006 per start]
array_constant_equals: num_starts 77 time spent: 0:0:0 [0.000156s total; 0.000002 per start]
sort_dfa_canonical: num_starts 143260 time spent: 0:0:1 [1.208561s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 8 time spent: 0:0:0 [0.001534s total; 0.000192 per start]
combo_dfa_xfer_and_meet: num_starts 67 time spent: 0:0:0 [0.116605s total; 0.001740 per start]
alias_val_xfer_and_meet: num_starts 67 time spent: 0:0:0 [0.076161s total; 0.001137 per start]
get_sprel_map_from_avail_exprs: num_starts 86 time spent: 0:0:0 [0.005947s total; 0.000069 per start]
update_memlabels_for_memslot_locs: num_starts 18 time spent: 0:0:0 [0.000093s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 134 time spent: 0:0:0 [0.007479s total; 0.000056 per start]
compute_simplified_loc_exprs_for_edge: num_starts 384 time spent: 0:0:0 [0.100488s total; 0.000262 per start]
compute_locs_definitely_written_on_edge: num_starts 134 time spent: 0:0:0 [0.000067s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 36 time spent: 0:0:0 [0.017133s total; 0.000476 per start]
edge_update_memlabel_map_for_mlvars: num_starts 67 time spent: 0:0:0 [0.001076s total; 0.000016 per start]
add_new_locs_based_on_edge: num_starts 67 time spent: 0:0:0 [0.021238s total; 0.000317 per start]
expand_locset_to_include_slots_for_memmask: num_starts 53 time spent: 0:0:0 [0.000153s total; 0.000003 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 5e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 8e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 1.8e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 2.2e-05s (num_starts 6; 0.0000s/start)
add_assumes_to_start_edge.: 2.6e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 2.8e-05s (num_starts 1; 0.0000s/start)
lr_status_meet.: 4e-05s (num_starts 38; 0.0000s/start)
context_constructor.solver.: 4.2e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 4.4e-05s (num_starts 49; 0.0000s/start)
context_constructor.: 5.2e-05s (num_starts 1; 0.0001s/start)
expr_is_callee_save_const.: 5.7e-05s (num_starts 53; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 6.4e-05s (num_starts 2; 0.0000s/start)
compute_sprel_relations.: 8.2e-05s (num_starts 1; 0.0001s/start)
propagate_sprels.: 9e-05s (num_starts 1; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.0001s (num_starts 4; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000103s (num_starts 10; 0.0000s/start)
main.3.: 0.000104s (num_starts 1; 0.0001s/start)
determinize_value_expr_map.: 0.000112s (num_starts 136; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000112s (num_starts 1; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000113s (num_starts 1; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.00012s (num_starts 32; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000142s (num_starts 1; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000181s (num_starts 32; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000189s (num_starts 3; 0.0001s/start)
graph_locs_add_all_local_vars.: 0.000207s (num_starts 1; 0.0002s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000207s (num_starts 2; 0.0001s/start)
populate_locid2expr_map.: 0.000241s (num_starts 2; 0.0001s/start)
expr_represents_llvm_undef.: 0.000291s (num_starts 55; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000339s (num_starts 67; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000377s (num_starts 1; 0.0004s/start)
graph_locs_add_all_llvmvars.: 0.000414s (num_starts 1; 0.0004s/start)
canonicalize_llvm_nextpcs.: 0.000467s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000471s (num_starts 1; 0.0005s/start)
def_analysis::xfer_and_meet.: 0.000489s (num_starts 64; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000496s (num_starts 853; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00052s (num_starts 1; 0.0005s/start)
expr_substitute_using_available_exprs_submap.: 0.000529s (num_starts 52; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.00083s (num_starts 1; 0.0008s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000866s (num_starts 67; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000983s (num_starts 67; 0.0000s/start)
populate_transitive_closure.: 0.000983s (num_starts 1; 0.0010s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.001138s (num_starts 539; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.001173s (num_starts 55; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001197s (num_starts 87; 0.0000s/start)
graph_with_locs_constructor.src.spec.foo.: 0.001319s (num_starts 1; 0.0013s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001521s (num_starts 51; 0.0000s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.001558s (num_starts 1; 0.0016s/start)
create_closure_matrix.: 0.001839s (num_starts 85; 0.0000s/start)
graph_visit_exprs.: 0.002091s (num_starts 4; 0.0005s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002119s (num_starts 1; 0.0021s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.002491s (num_starts 1; 0.0025s/start)
populate_dominator_and_postdominator_relations.: 0.00266s (num_starts 2; 0.0013s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.002907s (num_starts 1; 0.0029s/start)
query:convert_from_z3.: 0.002977s (num_starts 66; 0.0000s/start)
compute_z3_expr.: 0.003143s (num_starts 66; 0.0000s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.003154s (num_starts 1; 0.0032s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.003908s (num_starts 67; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.004429s (num_starts 2; 0.0022s/start)
graph_identify_back_edges.: 0.004501s (num_starts 6; 0.0008s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.004646s (num_starts 1; 0.0046s/start)
graph_identify_natural_loops.: 0.004759s (num_starts 6; 0.0008s/start)
tfg::populate_loc_definedness.before_initialize.: 0.004821s (num_starts 2; 0.0024s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.004854s (num_starts 1; 0.0049s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.005029s (num_starts 1; 0.0050s/start)
tfg::populate_loc_definedness.: 0.005064s (num_starts 2; 0.0025s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.005225s (num_starts 1; 0.0052s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.00523s (num_starts 1; 0.0052s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.005234s (num_starts 1; 0.0052s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.005239s (num_starts 1; 0.0052s/start)
tfg_constructor.src.spec.foo.: 0.005245s (num_starts 1; 0.0052s/start)
query:convert_to_z3.: 0.005734s (num_starts 66; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.00606s (num_starts 67; 0.0001s/start)
populate_branch_affecting_locs.: 0.006322s (num_starts 2; 0.0032s/start)
graph_to_stream.: 0.006354s (num_starts 1; 0.0064s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.006609s (num_starts 67; 0.0001s/start)
find_dominators.: 0.006649s (num_starts 10; 0.0007s/start)
populate_simplified_to_state.: 0.007553s (num_starts 3; 0.0025s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.007822s (num_starts 757; 0.0000s/start)
compute_regions.: 0.007982s (num_starts 6; 0.0013s/start)
avail_exprs_create_submap.: 0.008967s (num_starts 201; 0.0000s/start)
query:simplify-z3.: 0.01093s (num_starts 133; 0.0001s/start)
populate_simplified_assets.: 0.011121s (num_starts 6; 0.0019s/start)
create_sp_version_relations_lattice_at_pc.: 0.011531s (num_starts 85; 0.0001s/start)
tfg_preprocess.dst.llvm.foo.: 0.011999s (num_starts 1; 0.0120s/start)
tfg::tfg_preprocess.: 0.012001s (num_starts 1; 0.0120s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.015155s (num_starts 67; 0.0002s/start)
get_tfg.: 0.016378s (num_starts 1; 0.0164s/start)
get_function_tfg_map.foo.: 0.016427s (num_starts 1; 0.0164s/start)
get_function_tfg_map.: 0.01643s (num_starts 1; 0.0164s/start)
main.2.: 0.017957s (num_starts 1; 0.0180s/start)
compute_lr_status_for_expr.: 0.019229s (num_starts 45; 0.0004s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.019231s (num_starts 38; 0.0005s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.019311s (num_starts 38; 0.0005s/start)
populate_locs_potentially_modified_on_edge.: 0.02321s (num_starts 3; 0.0077s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.032586s (num_starts 757; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.033758s (num_starts 757; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.034345s (num_starts 3; 0.0114s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.039834s (num_starts 757; 0.0001s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.052263s (num_starts 96; 0.0005s/start)
compute_new_lr_status_on_locs.: 0.05312s (num_starts 67; 0.0008s/start)
populate_loc_liveness.: 0.062827s (num_starts 2; 0.0314s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.076298s (num_starts 67; 0.0011s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.102664s (num_starts 96; 0.0011s/start)
tfg_postprocess_after_pointsto_analysis.: 0.111526s (num_starts 1; 0.1115s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.116718s (num_starts 67; 0.0017s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.121281s (num_starts 1; 0.1213s/start)
ftmap_run_pointsto_analysis.: 0.250299s (num_starts 1; 0.2503s/start)
parse_consts_db.: 6.84831s (num_starts 1; 6.8483s/start)
main.: 7.16016s (num_starts 1; 7.1602s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:13 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:20 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:20 : Reading in SPEC-LLVM I/O specification from file loop7.iospecs...</MSG>
<MSG>0:21 : Computing equivalence for function: foo...</MSG>
<MSG>0:21 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:21 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:21 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:21 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:21 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG foo: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG foo created 3 possibilities in group foo.A...</MSG>
<MSG>0:21 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:21 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:21 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:21 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:21 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:21 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:21 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:21 : foo.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : foo.A2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:21 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:21 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:21 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.dst.llvm-%m
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    7 preds:
      0.: eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      2.: eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      3.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      4.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      5.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:21 : Added correlation to the product-TFG foo.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 2 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.dst.llvm-%m
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    7 preds:
      0.: eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      2.: eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      3.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      4.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      5.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:21 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:21 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:21 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:23 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:23 : foo.A2 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:23 : foo.A2 (d:1, s:0, sp: 6): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:23 : Chosen product-TFG foo.A2 will be explored later...</MSG>
<MSG>0:23 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A3...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A3...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%9%bbentry ending at L3%9%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%9%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Computing loop hoisting select expressions at toPC L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Computing loop hoisting non-linear expressions at toPC L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Adding node L3%9%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Adding edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%9%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
142804 : not(140275) : BOOL                        : false
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 0
140457 : bvuge(140276, 140273) : BOOL              : true
142772 : not(140457) : BOOL                        : false
142805 : or(142804, 142772) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 1db38312fab577cdf3c645b3a34c834
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 319025935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 319025936; 319025939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 319025940; 468053627 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 468053628; 468053631 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 468053632; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 319025936 { 0x1303f310 +1.3085517e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 468053628 { 0x1be5ee7c +1.79634046e184 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda34 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda35 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 468053628 { 0x1be5ee7c +1.79634046e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 468053631 { 0x1be5ee7f +1.79634082e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 319025936 { 0x1303f310 +1.3085517e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 319025939 { 0x1303f313 +1.3085553e167 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2494662331
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-1))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-1 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>0:23 : foo.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%9%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Failed correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%9%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
142804 : not(140275) : BOOL                        : false
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 0
140457 : bvuge(140276, 140273) : BOOL              : true
142772 : not(140457) : BOOL                        : false
142805 : or(142804, 142772) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 1db38312fab577cdf3c645b3a34c834
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 319025935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 319025936; 319025939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 319025940; 468053627 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 468053628; 468053631 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 468053632; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 319025936 { 0x1303f310 +1.3085517e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 468053628 { 0x1be5ee7c +1.79634046e184 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : Lambda34 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda35 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 468053628 { 0x1be5ee7c +1.79634046e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 468053631 { 0x1be5ee7f +1.79634082e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 319025936 { 0x1303f310 +1.3085517e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 319025939 { 0x1303f313 +1.3085553e167 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-8.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2494662331
=counter_example_end


</MSG>
<MSG>0:23 : Discovered that the correlation was useless for the product-TFG foo.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A1: Added the 2 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%m ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.dst.llvm-%m
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:23 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 2 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%m ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.dst.llvm-%m
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:23 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial1-prove4...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%m ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce272      2.:z3.ce271      3.:z3.ce289
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307      3.:z3.ce325
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307      3.:z3.ce325
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:24 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:24 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%m ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce272      2.:z3.ce271      3.:z3.ce289
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307      3.:z3.ce325
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307      3.:z3.ce325
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:24 : foo.A1 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : foo.A1 (d:1, s:0, sp: 2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A1 created 1 possibilities in group foo.A1.B...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 2) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 2 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A1.B1: Propagated 6 out of 8 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : foo.A1.B1: Added the 6 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:24 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : foo.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%m ; 4-->input.dst.llvm-%n ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      1.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce3      1.:z3.ce390      2.:z3v487.ce272      3.:z3.ce271      4.:z3.ce289
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307      3.:z3.ce325
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307      3.:z3.ce325
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce390      2.:z3.ce436
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce271      2.:z3v487.ce307
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:24 : Added correlation to the product-TFG foo.A1.B1 (d:2, s:0, sp: 2) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo.A2 (d:1, s:0, sp: 6) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 2 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:24 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:24 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:24 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:24 : foo.A2 (d:1, s:0, sp: 6): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : foo.A2 (d:1, s:0, sp: 6): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : product-TFG foo.A2: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2: Found 2 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2 created 2 possibilities in group foo.A2.B...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A2.B2 (d:1, s:0, sp: 6) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 2 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A2.B2: Propagated 6 out of 8 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : foo.A2.B2: Added the 6 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:25 : foo.A2.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:25 : foo.A2.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:25 : foo.A2.B2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A2.B2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : Done adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce571
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce571
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:25 : Added correlation to the product-TFG foo.A2.B2 (d:1, s:0, sp: 6) and created a correlation entry...</MSG>
<MSG>0:25 : Chose (after CE propagation) product-TFG foo.A2.B2 (d:1, s:0, sp: 6) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 2 at column 26) => A (line 2 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 2 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce571
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce571
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:25 : foo.A2.B2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:25 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:25 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:26 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:26 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:26 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:26 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:27 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:27 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:27 : foo.A2.B2 (d:1, s:0, sp: 6): checked newly added edge and inferred invariants...</MSG>
<MSG>0:27 : foo.A2.B2 (d:1, s:0, sp: 6): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:27 : product-TFG foo.A2.B2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : product-TFG foo.A2.B2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : product-TFG foo.A2.B2 created 1 possibilities in group foo.A2.B2.C...</MSG>
<MSG>0:27 : Chose (for CE propagation) product-TFG foo.A2.B2.C1 (d:1, s:0, sp: 6) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 2 at column 26) => A (line 2 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 2 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:27 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:27 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:27 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:27 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:27 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:27 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:27 : Adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:27 : foo.A2.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Propagated 5 out of 21 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:27 : foo.A2.B2.C1: Added the 5 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:27 : foo.A2.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : Done adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:27 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:27 : Added correlation to the product-TFG foo.A2.B2.C1 (d:1, s:0, sp: 6) and created a correlation entry...</MSG>
<MSG>0:27 : Chose (after CE propagation) product-TFG foo.A2.B2.C1 (d:1, s:0, sp: 6) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 2 at column 26) => A (line 2 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 2 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 2 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:27 : foo.A2.B2.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:27 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:27 : foo.A2.B2.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:27 : foo.A2.B2.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:28 : foo.A2.B2.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:28 : foo.A2.B2.C1 (d:1, s:0, sp: 6): checked newly added edge and inferred invariants...</MSG>
<MSG>0:28 : foo.A2.B2.C1 (d:1, s:0, sp: 6): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:28 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:28 : Checking equivalence proof...</MSG>
<MSG>0:29 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%m ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: 0                     ==  bvextract(input.dst.llvm-%m, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3v487.ce26      3.:z3.ce47      4.:z3.ce510      5.:z3.ce571
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69      3.:z3.ce91
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce571      2.:z3.ce697      3.:z3.ce750
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce25      2.:z3.ce69
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 17-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%m))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 18-->eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 19-->eq(input.spec-%tmpvar-10.E0%0%d, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false)))) ; 20-->eq(spec-%tmpvar-8.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 21-->eq(spec-%var-m-0.L3%6%bbentry, map_init(SORT2EXPR.VAR)) ; 
    1 preds:
      0.: eq(input.spec-%var-m-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%m), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 2 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 2 at column 26) => A (line 2 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 2 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 2 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 8.37s, query:smt.: 3.75814s (num_starts 81; 0.0464s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 7.18447s (num_starts 122; 0.0589s/start)ftmap_run_pointsto_analysis.: 0.211919s (num_starts 2; 0.1060s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 5e-06s (num_starts 4; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 7e-06s (num_starts 5; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.1e-05s (num_starts 3; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.1e-05s (num_starts 6; 0.0000s/start)
prune_dst_memslots.: 1.3e-05s (num_starts 3; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 1.5e-05s (num_starts 6; 0.0000s/start)
get_paths_with_matching_to_pc.: 2e-05s (num_starts 6; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 2.6e-05s (num_starts 20; 0.0000s/start)
get_intersected_lr_status.: 3e-05s (num_starts 2; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 3.1e-05s (num_starts 24; 0.0000s/start)
remove_complex_bv_exprs.: 4.4e-05s (num_starts 3; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 4.4e-05s (num_starts 3; 0.0000s/start)
determinize_value_expr_map.: 4.9e-05s (num_starts 18; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 5.4e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 5.7e-05s (num_starts 3; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 6.1e-05s (num_starts 1; 0.0001s/start)
corr_graph::get_simplified_non_mem_assumes.: 6.2e-05s (num_starts 2; 0.0000s/start)
ce_perform_memory_fuzzing.: 6.7e-05s (num_starts 44; 0.0000s/start)
prove_trivial.: 6.8e-05s (num_starts 42; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 7e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 7.5e-05s (num_starts 3; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.6e-05s (num_starts 1; 0.0001s/start)
get_lr_status_for_loc_ids.: 0.000103s (num_starts 24; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000109s (num_starts 227; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000116s (num_starts 3; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000117s (num_starts 25; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000131s (num_starts 7; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000141s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000144s (num_starts 12; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000152s (num_starts 3; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000155s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000161s (num_starts 2; 0.0001s/start)
lr_status_meet.: 0.000168s (num_starts 166; 0.0000s/start)
propagate_sprels.: 0.000172s (num_starts 2; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000177s (num_starts 7; 0.0000s/start)
expr_is_hidden_reg.: 0.000178s (num_starts 173; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000194s (num_starts 12; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.000203s (num_starts 49; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000205s (num_starts 20; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000208s (num_starts 2; 0.0001s/start)
expr_is_callee_save_const.: 0.000235s (num_starts 185; 0.0000s/start)
populate_locid2expr_map.: 0.000257s (num_starts 2; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000265s (num_starts 18; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000269s (num_starts 52; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.00027s (num_starts 3; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000276s (num_starts 122; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000293s (num_starts 9; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000298s (num_starts 1; 0.0003s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.0003s (num_starts 49; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.00033s (num_starts 2; 0.0002s/start)
collect_dst_to_src_submap_preds.: 0.000337s (num_starts 122; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.000347s (num_starts 2; 0.0002s/start)
get_sprel_map_pair.: 0.000356s (num_starts 30; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000402s (num_starts 3; 0.0001s/start)
tfg::collect_assumes_around_edge.: 0.000418s (num_starts 30; 0.0000s/start)
compute_bv_bool_eqclass.: 0.00043s (num_starts 3; 0.0001s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000453s (num_starts 44; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000454s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.00046s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000464s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000464s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000466s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000466s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000468s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000472s (num_starts 1; 0.0005s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.000489s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000491s (num_starts 1; 0.0005s/start)
proof_query_is_trivial_helper.: 0.000546s (num_starts 134; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000579s (num_starts 80; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000579s (num_starts 24; 0.0000s/start)
tfg_suffixpath_get_expr_helper.: 0.000579s (num_starts 12; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000594s (num_starts 80; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.00061s (num_starts 1; 0.0006s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000621s (num_starts 46; 0.0000s/start)
identify_address_taken_local_variables.: 0.00063s (num_starts 1; 0.0006s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000635s (num_starts 5; 0.0001s/start)
create_closure_matrix.: 0.000642s (num_starts 58; 0.0000s/start)
graph_locs_add_all_specvars.: 0.000699s (num_starts 2; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000717s (num_starts 1; 0.0007s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.000749s (num_starts 4; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000749s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.00075s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.000754s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.000757s (num_starts 1; 0.0008s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000767s (num_starts 5; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000771s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.000773s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000776s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000781s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.000784s (num_starts 1; 0.0008s/start)
interesting_wp_exprs_apply_trans_funs.: 0.00079s (num_starts 5; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000792s (num_starts 1; 0.0008s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00081s (num_starts 18; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000817s (num_starts 264; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.000843s (num_starts 5; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.00087s (num_starts 49; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000917s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.000922s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000925s (num_starts 1; 0.0009s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000939s (num_starts 3; 0.0003s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.000953s (num_starts 3; 0.0003s/start)
tfg::populate_loc_definedness.before_solve.: 0.000992s (num_starts 3; 0.0003s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001029s (num_starts 2; 0.0005s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.001045s (num_starts 157; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.001045s (num_starts 157; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.001066s (num_starts 48; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.001077s (num_starts 4; 0.0003s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.001183s (num_starts 10; 0.0001s/start)
expr_represents_llvm_undef.: 0.001217s (num_starts 189; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001224s (num_starts 5; 0.0002s/start)
removeMostPromising.: 0.001241s (num_starts 17; 0.0001s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.001254s (num_starts 7; 0.0002s/start)
pth_collect_preds_using_atom_func.: 0.001259s (num_starts 43; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001345s (num_starts 3; 0.0004s/start)
tfg::populate_loc_definedness.: 0.001424s (num_starts 3; 0.0005s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.001457s (num_starts 18; 0.0001s/start)
set_result_and_counter_example.: 0.001468s (num_starts 81; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.001482s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.001487s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.00149s (num_starts 1; 0.0015s/start)
tfg_edge_composition_get_assumes.: 0.001603s (num_starts 43; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.001609s (num_starts 2; 0.0008s/start)
corr_graph_enumerate_correlations.: 0.001761s (num_starts 6; 0.0003s/start)
parse_yices_model.: 0.001822s (num_starts 1; 0.0018s/start)
proof_query_is_trivial.: 0.001929s (num_starts 122; 0.0000s/start)
graph_visit_exprs_and_keys.: 0.001939s (num_starts 2; 0.0010s/start)
populate_branch_affecting_locs.: 0.001996s (num_starts 3; 0.0007s/start)
find_dominators.: 0.00203s (num_starts 31; 0.0001s/start)
graph_with_guessing_sync_preds.: 0.002064s (num_starts 122; 0.0000s/start)
graph_visit_exprs.: 0.002086s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.002164s (num_starts 1; 0.0022s/start)
graph_identify_back_edges.: 0.002164s (num_starts 27; 0.0001s/start)
compute_vars_reaching_definitions.: 0.002173s (num_starts 2; 0.0011s/start)
construct_linear_combination_exprs.: 0.002173s (num_starts 63; 0.0000s/start)
collect_assumes_around_edge.: 0.002184s (num_starts 6; 0.0004s/start)
graph_identify_natural_loops.: 0.002396s (num_starts 27; 0.0001s/start)
aliasing_constraints.convert_to_expr.: 0.002434s (num_starts 80; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.002466s (num_starts 24; 0.0001s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.002622s (num_starts 58; 0.0000s/start)
bv_const_ref_map2expr_map.: 0.002764s (num_starts 63; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.002779s (num_starts 24; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.002819s (num_starts 55; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.002885s (num_starts 3; 0.0010s/start)
ldr_decomposition.: 0.002947s (num_starts 52; 0.0001s/start)
generate_aliasing_constraints_from_expr.: 0.003049s (num_starts 500; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.003083s (num_starts 3; 0.0010s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.003118s (num_starts 80; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.003134s (num_starts 24; 0.0001s/start)
parse_cvc4_model.: 0.003248s (num_starts 1; 0.0032s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.003417s (num_starts 46; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;lb-signed;-trivial.: 0.003678s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003685s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.0037s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;ub-unsigned;-trivial.: 0.003889s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.003894s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003899s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.003915s (num_starts 2; 0.0020s/start)
populate_transitive_closure.: 0.004059s (num_starts 37; 0.0001s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.004251s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004688s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004691s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.004695s (num_starts 1; 0.0047s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004875s (num_starts 58; 0.0001s/start)
expr_linear_relation_holds::visit.var.: 0.005381s (num_starts 199; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.005609s (num_starts 46; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.006034s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed;-trivial.: 0.00606s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.006069s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.006093s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-trivial.: 0.006104s (num_starts 4; 0.0015s/start)
compute_regions.: 0.006109s (num_starts 27; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed.: 0.006113s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.006114s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.00615s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-trivial.: 0.006393s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.006404s (num_starts 4; 0.0016s/start)
expr_substitute_using_available_exprs_submap.: 0.006596s (num_starts 176; 0.0000s/start)
get_sprel_map_pair_at_pc.: 0.006601s (num_starts 80; 0.0001s/start)
get_next_potential_correlations.: 0.006649s (num_starts 4; 0.0017s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.006818s (num_starts 5; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-trivial.: 0.006822s (num_starts 4; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.006834s (num_starts 4; 0.0017s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.006919s (num_starts 5; 0.0014s/start)
create_sp_version_relations_lattice_at_pc.: 0.007323s (num_starts 58; 0.0001s/start)
predicate_canonicalized.: 0.007425s (num_starts 63; 0.0001s/start)
do_ssa_transformation.: 0.007776s (num_starts 2; 0.0039s/start)
gen_pred_from_coeff_row.simplify.: 0.007898s (num_starts 63; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.008472s (num_starts 3; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.008945s (num_starts 5; 0.0018s/start)
tfg::get_aliasing_constraints_for_edge.: 0.008964s (num_starts 129; 0.0001s/start)
populate_simplified_to_state.: 0.009113s (num_starts 3; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.009754s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.010248s (num_starts 6; 0.0017s/start)
populate_simplified_assets.: 0.010344s (num_starts 6; 0.0017s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.01052s (num_starts 7; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-trivial.: 0.010616s (num_starts 4; 0.0027s/start)
check_node_stability_after_CE_addition.: 0.010686s (num_starts 77; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.011185s (num_starts 7; 0.0016s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.011612s (num_starts 46; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012143s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012143s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012159s (num_starts 3; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess.: 0.01218s (num_starts 3; 0.0041s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.012197s (num_starts 3; 0.0041s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.012209s (num_starts 5; 0.0024s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.013243s (num_starts 3; 0.0044s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.013569s (num_starts 46; 0.0003s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.014528s (num_starts 3; 0.0048s/start)
ldr_decompose_and_linear_solve.: 0.015555s (num_starts 52; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.01563s (num_starts 46; 0.0003s/start)
bv_linear_solve.: 0.016643s (num_starts 52; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016807s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016815s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01693s (num_starts 4; 0.0042s/start)
query:bv_solve.: 0.017018s (num_starts 52; 0.0003s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.017938s (num_starts 80; 0.0002s/start)
graph_to_stream.: 0.01807s (num_starts 4; 0.0045s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.01841s (num_starts 889; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.01856s (num_starts 227; 0.0001s/start)
counter_example_falsifies_preds.: 0.019478s (num_starts 68; 0.0003s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.019942s (num_starts 80; 0.0002s/start)
compute_expr_eqclasses_at_pc.: 0.020111s (num_starts 3; 0.0067s/start)
avail_exprs_create_submap.: 0.020415s (num_starts 138; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.020751s (num_starts 126; 0.0002s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.021012s (num_starts 169; 0.0001s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.021243s (num_starts 5; 0.0042s/start)
bv_solve_returning_intermediate_structures.: 0.021467s (num_starts 52; 0.0004s/start)
cg_add_node.: 0.021644s (num_starts 5; 0.0043s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.021903s (num_starts 22; 0.0010s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.022006s (num_starts 22; 0.0010s/start)
gen_pred_from_coeff_row.: 0.022742s (num_starts 63; 0.0004s/start)
compute_preds_for_bv_points.: 0.023189s (num_starts 15; 0.0015s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.023297s (num_starts 21; 0.0011s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.02469s (num_starts 21; 0.0012s/start)
bvsolve_cache_query.miss1.: 0.024864s (num_starts 52; 0.0005s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.024978s (num_starts 344; 0.0001s/start)
bvsolve_cache_query.: 0.025652s (num_starts 52; 0.0005s/start)
collect_aliasing_constraints_around_path_helper.: 0.025861s (num_starts 120; 0.0002s/start)
create_new_corr_graph_edge.new_node.: 0.025929s (num_starts 4; 0.0065s/start)
create_new_corr_graph_edge.: 0.02628s (num_starts 6; 0.0044s/start)
collect_aliasing_constraints_around_path.: 0.026775s (num_starts 76; 0.0004s/start)
collect_assumes_around_path_helper.: 0.027018s (num_starts 157; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-trivial.: 0.027688s (num_starts 9; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.027719s (num_starts 9; 0.0031s/start)
graph_with_paths::collect_assumes_around_path.: 0.027794s (num_starts 157; 0.0002s/start)
get_unrolled_paths_from.: 0.027848s (num_starts 20; 0.0014s/start)
solve_for_bv_points.: 0.032109s (num_starts 52; 0.0006s/start)
counter_example_satisfies_preds.: 0.034693s (num_starts 438; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.034916s (num_starts 21; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.036076s (num_starts 12; 0.0030s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.036778s (num_starts 23; 0.0016s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.039345s (num_starts 938; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.040315s (num_starts 46; 0.0009s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.040486s (num_starts 52; 0.0008s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.040994s (num_starts 889; 0.0000s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.041055s (num_starts 955; 0.0000s/start)
populate_loc_liveness.: 0.042421s (num_starts 3; 0.0141s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.043893s (num_starts 1; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.043907s (num_starts 1; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.043913s (num_starts 1; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.043921s (num_starts 1; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.043926s (num_starts 1; 0.0439s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.043936s (num_starts 1; 0.0439s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044009s (num_starts 1; 0.0440s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044018s (num_starts 1; 0.0440s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044024s (num_starts 1; 0.0440s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.044032s (num_starts 1; 0.0440s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.044037s (num_starts 1; 0.0440s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.044047s (num_starts 1; 0.0440s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.046558s (num_starts 18; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.050588s (num_starts 1; 0.0506s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.050601s (num_starts 1; 0.0506s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.05238s (num_starts 1; 0.0524s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.052397s (num_starts 1; 0.0524s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.052408s (num_starts 1; 0.0524s/start)
counter_example_evaluate_preds.: 0.052515s (num_starts 506; 0.0001s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.052825s (num_starts 16; 0.0033s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.05371s (num_starts 889; 0.0001s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.054098s (num_starts 151; 0.0004s/start)
lhs_set_sort.: 0.054319s (num_starts 80; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.05656s (num_starts 1; 0.0566s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.056569s (num_starts 1; 0.0566s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess.: 0.057127s (num_starts 2; 0.0286s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.057547s (num_starts 151; 0.0004s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.059733s (num_starts 1; 0.0597s/start)
tfg_postprocess_after_pointsto_analysis.: 0.061091s (num_starts 2; 0.0305s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.063126s (num_starts 8; 0.0079s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06323s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063239s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063253s (num_starts 1; 0.0633s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063261s (num_starts 1; 0.0633s/start)
collect_inductive_preds_around_path.: 0.063264s (num_starts 122; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.063271s (num_starts 1; 0.0633s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.063287s (num_starts 1; 0.0633s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities..: 0.063756s (num_starts 2; 0.0319s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.063766s (num_starts 2; 0.0319s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.066387s (num_starts 6; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067537s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.067549s (num_starts 1; 0.0675s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.067921s (num_starts 396; 0.0002s/start)
query:convert_from_z3.: 0.071369s (num_starts 1576; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.072432s (num_starts 49; 0.0015s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.073196s (num_starts 74; 0.0010s/start)
propagate_nodece_across_edge.: 0.076911s (num_starts 16; 0.0048s/start)
query:convert_to_z3.: 0.078812s (num_starts 1576; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081607s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085215s (num_starts 2; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085226s (num_starts 2; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.08524s (num_starts 2; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst-ineq-houdini-guess.: 0.085252s (num_starts 2; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.090114s (num_starts 4; 0.0225s/start)
decide_hoare_triple_helper;-trivial.: 0.095263s (num_starts 42; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098842s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098846s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09885s (num_starts 1; 0.0988s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.103733s (num_starts 114; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104019s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104025s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104031s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.105287s (num_starts 5; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned.: 0.105315s (num_starts 5; 0.0211s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107822s (num_starts 1; 0.1078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107824s (num_starts 1; 0.1078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10783s (num_starts 1; 0.1078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107835s (num_starts 1; 0.1078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.107847s (num_starts 1; 0.1078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.107851s (num_starts 1; 0.1079s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.107862s (num_starts 1; 0.1079s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 0.107867s (num_starts 1; 0.1079s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.108824s (num_starts 166; 0.0007s/start)
compute_lr_status_for_expr.: 0.108963s (num_starts 180; 0.0006s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.109175s (num_starts 166; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.109334s (num_starts 7; 0.0156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.110183s (num_starts 5; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed.: 0.110209s (num_starts 5; 0.0220s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110522s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110526s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110529s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.11054s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.110546s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.110557s (num_starts 1; 0.1106s/start)
tfg_relax_pointsto_vals_on_edge.: 0.110759s (num_starts 22; 0.0050s/start)
graph_ec_apply_trans_funs_helper.0.: 0.111162s (num_starts 379; 0.0003s/start)
graph_ec_apply_trans_funs_helper.: 0.113706s (num_starts 384; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113771s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113783s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.113797s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess.: 0.113807s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.114006s (num_starts 7; 0.0163s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.115143s (num_starts 384; 0.0003s/start)
put_smtlib_string_in_file.: 0.116099s (num_starts 162; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11616s (num_starts 1; 0.1162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116165s (num_starts 1; 0.1162s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116168s (num_starts 1; 0.1162s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.116179s (num_starts 379; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.117109s (num_starts 2; 0.0586s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.117119s (num_starts 2; 0.0586s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.117138s (num_starts 2; 0.0586s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.117575s (num_starts 24; 0.0049s/start)
computeWP_for_pred_across_ec.: 0.117894s (num_starts 379; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118101s (num_starts 2; 0.0591s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;dst-ineq-houdini-guess.: 0.118171s (num_starts 2; 0.0591s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.119567s (num_starts 1; 0.1196s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.119572s (num_starts 1; 0.1196s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.119575s (num_starts 1; 0.1196s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.119587s (num_starts 1; 0.1196s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate.: 0.119592s (num_starts 1; 0.1196s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.119604s (num_starts 1; 0.1196s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12707s (num_starts 1; 0.1271s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127072s (num_starts 1; 0.1271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127076s (num_starts 1; 0.1271s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127078s (num_starts 1; 0.1271s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.127086s (num_starts 1; 0.1271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.127089s (num_starts 1; 0.1271s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.127094s (num_starts 1; 0.1271s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.127595s (num_starts 2; 0.0638s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.129847s (num_starts 3; 0.0433s/start)
compute_z3_expr.: 0.130273s (num_starts 1657; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131114s (num_starts 1; 0.1311s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131119s (num_starts 1; 0.1311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131121s (num_starts 1; 0.1311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.131896s (num_starts 2; 0.0659s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.131904s (num_starts 2; 0.0660s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.13192s (num_starts 2; 0.0660s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13488s (num_starts 1; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134883s (num_starts 1; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134883s (num_starts 1; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.134895s (num_starts 1; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 0.134904s (num_starts 1; 0.1349s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.134917s (num_starts 1; 0.1349s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135743s (num_starts 3; 0.0452s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.1359s (num_starts 3; 0.0453s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137786s (num_starts 2; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137795s (num_starts 2; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.137822s (num_starts 2; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond.: 0.137836s (num_starts 2; 0.0689s/start)
edge_composition_apply_trans_funs_on_pred.: 0.141933s (num_starts 122; 0.0012s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.142753s (num_starts 24; 0.0059s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.143302s (num_starts 151; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144797s (num_starts 1; 0.1448s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.144809s (num_starts 1; 0.1448s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146562s (num_starts 3; 0.0489s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.14876s (num_starts 4; 0.0372s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149162s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149169s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.149186s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;lb-signed.: 0.152918s (num_starts 4; 0.0382s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.15439s (num_starts 34; 0.0045s/start)
compute_new_lr_status_on_locs.: 0.158401s (num_starts 46; 0.0034s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.159243s (num_starts 3; 0.0531s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161069s (num_starts 1; 0.1611s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161072s (num_starts 1; 0.1611s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.161087s (num_starts 1; 0.1611s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false.: 0.161093s (num_starts 1; 0.1611s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161194s (num_starts 2; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161203s (num_starts 2; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.161225s (num_starts 2; 0.0806s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.161819s (num_starts 88; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163292s (num_starts 1; 0.1633s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163295s (num_starts 1; 0.1633s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.163309s (num_starts 1; 0.1633s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false.: 0.163314s (num_starts 1; 0.1633s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;ub-unsigned.: 0.165169s (num_starts 4; 0.0413s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166097s (num_starts 3; 0.0554s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.166262s (num_starts 3; 0.0554s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.171567s (num_starts 80; 0.0021s/start)
apply_mask_and_overlay_array_constant.: 0.172322s (num_starts 88; 0.0020s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.18362s (num_starts 80; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.18493s (num_starts 3; 0.0616s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.184943s (num_starts 3; 0.0616s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.184972s (num_starts 3; 0.0617s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond.: 0.184988s (num_starts 3; 0.0617s/start)
counter_example_translate_on_edge_composition_helper.: 0.185434s (num_starts 444; 0.0004s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202378s (num_starts 2; 0.1012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202392s (num_starts 2; 0.1012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202429s (num_starts 2; 0.1012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.202454s (num_starts 2; 0.1012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.202493s (num_starts 2; 0.1012s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.202507s (num_starts 2; 0.1013s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.205104s (num_starts 3; 0.0684s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210124s (num_starts 4; 0.0525s/start)
ftmap_run_pointsto_analysis.: 0.211919s (num_starts 2; 0.1060s/start)
tfg_run_pointsto_analysis.: 0.212181s (num_starts 2; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.216843s (num_starts 3; 0.0723s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.216868s (num_starts 3; 0.0723s/start)
tfg_populate_structs_after_ssa_construction.: 0.217685s (num_starts 2; 0.1088s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.218244s (num_starts 44; 0.0050s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.218973s (num_starts 91; 0.0024s/start)
query:simplify-z3.: 0.220778s (num_starts 3170; 0.0001s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.227183s (num_starts 2; 0.1136s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.227199s (num_starts 8; 0.0284s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228136s (num_starts 4; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229861s (num_starts 3; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229882s (num_starts 3; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.229922s (num_starts 3; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst-ineq-houdini-guess.: 0.229948s (num_starts 3; 0.0766s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.230092s (num_starts 2; 0.1150s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.230151s (num_starts 2; 0.1151s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.231084s (num_starts 3; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear.: 0.238924s (num_starts 8; 0.0299s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.244697s (num_starts 12; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear.: 0.244759s (num_starts 12; 0.0204s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.247417s (num_starts 3; 0.0825s/start)
corr_graph::add_edge().: 0.267026s (num_starts 6; 0.0445s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.295114s (num_starts 6; 0.0492s/start)
corr_graph_add_correlation.: 0.295362s (num_starts 6; 0.0492s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.297342s (num_starts 4; 0.0743s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.297569s (num_starts 4; 0.0744s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.298369s (num_starts 4; 0.0746s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.307687s (num_starts 6; 0.0513s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310972s (num_starts 4; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.311009s (num_starts 4; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.311026s (num_starts 4; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.312568s (num_starts 5; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 0.312591s (num_starts 5; 0.0625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.31264s (num_starts 5; 0.0625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.322671s (num_starts 5; 0.0645s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.322688s (num_starts 5; 0.0645s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.322854s (num_starts 5; 0.0646s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.322882s (num_starts 5; 0.0646s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.324348s (num_starts 2; 0.1622s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.324427s (num_starts 2; 0.1622s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.335048s (num_starts 16; 0.0209s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.335882s (num_starts 2; 0.1679s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.403761s (num_starts 4; 0.1009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown.: 0.403869s (num_starts 4; 0.1010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.419575s (num_starts 3; 0.1399s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.419589s (num_starts 3; 0.1399s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.41962s (num_starts 3; 0.1399s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;pred-type-unknown.: 0.419642s (num_starts 3; 0.1399s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.421422s (num_starts 3; 0.1405s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.477022s (num_starts 8; 0.0596s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 0.477355s (num_starts 8; 0.0597s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.487038s (num_starts 8; 0.0609s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.487074s (num_starts 8; 0.0609s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.494002s (num_starts 12; 0.0412s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear.: 0.49405s (num_starts 12; 0.0412s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.497893s (num_starts 5; 0.0996s/start)
parse_z3_model.: 0.50927s (num_starts 45; 0.0113s/start)
read_counter_examples_from_channel.: 0.518954s (num_starts 23; 0.0226s/start)
check_wfconds_on_edge.: 0.541497s (num_starts 9; 0.0602s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.54701s (num_starts 6; 0.0912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.547049s (num_starts 6; 0.0912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.547128s (num_starts 6; 0.0912s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed.: 0.547178s (num_starts 6; 0.0912s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.556236s (num_starts 3; 0.1854s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.559254s (num_starts 4; 0.1398s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.55937s (num_starts 4; 0.1398s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.564333s (num_starts 4; 0.1411s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.564516s (num_starts 4; 0.1411s/start)
dst_edge_composition_proves_false.: 0.613859s (num_starts 4; 0.1535s/start)
decide_hoare_triple.: 0.630649s (num_starts 6; 0.1051s/start)
get_next_dst_edge_composition_to_correlate.: 0.632458s (num_starts 5; 0.1265s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.633444s (num_starts 11; 0.0576s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.642977s (num_starts 16; 0.0402s/start)
ce_reconcile_sorts_and_values.: 0.661405s (num_starts 47; 0.0141s/start)
guarded_predicate_set_and.: 0.663665s (num_starts 80; 0.0083s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.696042s (num_starts 8; 0.0870s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.696485s (num_starts 8; 0.0871s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.710203s (num_starts 8; 0.0888s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 0.710652s (num_starts 8; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.785723s (num_starts 7; 0.1122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.785748s (num_starts 7; 0.1122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.785824s (num_starts 7; 0.1123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown.: 0.785852s (num_starts 7; 0.1123s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.842207s (num_starts 8; 0.1053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.842499s (num_starts 8; 0.1053s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.856338s (num_starts 3; 0.2854s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.89151s (num_starts 10; 0.0892s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 0.896032s (num_starts 14; 0.0640s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.920451s (num_starts 8; 0.1151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.920501s (num_starts 8; 0.1151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.920611s (num_starts 8; 0.1151s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;ub-unsigned.: 0.920663s (num_starts 8; 0.1151s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.931256s (num_starts 10; 0.0931s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.941604s (num_starts 504; 0.0019s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 0.94231s (num_starts 17; 0.0554s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.977743s (num_starts 6; 0.1630s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08152s (num_starts 10; 0.1082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.08201s (num_starts 10; 0.1082s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 1.23223s (num_starts 3; 0.4107s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2429s (num_starts 19; 0.0654s/start)
check_equivalence_proof.: 1.2472s (num_starts 1; 1.2472s/start)
decide_hoare_triple_helper;per-query-type;linear.: 1.2905s (num_starts 37; 0.0349s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29659s (num_starts 12; 0.1080s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 1.30837s (num_starts 19; 0.0689s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 1.46667s (num_starts 29; 0.0506s/start)
check_preds_on_edge_compositions.: 1.49281s (num_starts 12; 0.1244s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.74387s (num_starts 15; 0.1163s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 1.74435s (num_starts 15; 0.1163s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.09977s (num_starts 28; 0.0750s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 2.13698s (num_starts 49; 0.0436s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.9374s (num_starts 30; 0.0979s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry).: 2.99286s (num_starts 46; 0.0651s/start)
query:smt.: 3.75814s (num_starts 81; 0.0464s/start)
spawn_smt_query.: 4.27812s (num_starts 81; 0.0528s/start)
solver_provable.: 5.41293s (num_starts 80; 0.0677s/start)
expr_is_provable.: 5.45272s (num_starts 80; 0.0682s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 5.45464s (num_starts 80; 0.0682s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 5.46095s (num_starts 80; 0.0683s/start)
solver_satisfiable-cache-miss.: 5.46178s (num_starts 81; 0.0674s/start)
solver_satisfiable.: 5.46241s (num_starts 81; 0.0674s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 5.46623s (num_starts 80; 0.0683s/start)
update_invariant_state_for_edges.: 5.75844s (num_starts 5; 1.1517s/start)
cg_check_new_cg_ec.: 5.77876s (num_starts 5; 1.1558s/start)
correl_entry_apply.: 5.77919s (num_starts 5; 1.1558s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 6.1388s (num_starts 80; 0.0767s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 6.15411s (num_starts 80; 0.0769s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 6.15625s (num_starts 80; 0.0770s/start)
expandProductCFG.: 6.41915s (num_starts 6; 1.0699s/start)
is_expr_equal_using_lhs_set_and_precond.: 6.50247s (num_starts 80; 0.0813s/start)
prove.: 6.5035s (num_starts 80; 0.0813s/start)
prove_spawn_and_join_helper.: 6.50416s (num_starts 80; 0.0813s/start)
bestFirstSearch.: 6.79935s (num_starts 1; 6.7994s/start)
prove_spawn_and_join.: 6.83862s (num_starts 80; 0.0855s/start)
prove_wrapper.proof_query_not_trivial.: 6.85353s (num_starts 80; 0.0857s/start)
prove_wrapper.: 6.90932s (num_starts 122; 0.0566s/start)
decide_hoare_triple_check_ub.: 7.06416s (num_starts 122; 0.0579s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.08159s (num_starts 80; 0.0885s/start)
decide_hoare_triple_helper.: 7.18447s (num_starts 122; 0.0589s/start)
decide_hoare_triple_with_alias_cons.: 7.40489s (num_starts 122; 0.0607s/start)
Time taken for equivalence check.: 8.05225s (num_starts 1; 8.0523s/start)

counters:
# of Paths Prunned through CE propagation.: 1
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 1
# of paths enumerated.: 16
# of paths expanded.: 5
# of queries to linear solver.: 52
# of smt-solver-queries.: 81
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 2
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 12
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 10
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 10
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 8
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 45
total-correlation-possibilities.: 8
total-correlation-possibilities-mod-lsprels.: 8
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 6
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 8
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 21
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 3
final-CG-edges.: 3
final-CG-nodes.: 3
final-CG-num-invariants.: 11
final-CG-super-edges.: 0
src-edges.: 6
src-nodes.: 6
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 5.00
final-CG-time-to-total-time-ratio.: 0.74
query-time-to-total-time-ratio.: 0.45

Context stats:
exprs: count: 149554
sorts: count: 150
num_proof_queries: 80
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	7182
	        hit ratio:	0.952102
m_simplify_solver:
	----------- total:	2811
	        hit ratio:	0.432586
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	28
	        hit ratio:	0.285714
m_z3_solver_substitution:
	----------- total:	1594
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1595
	        hit ratio:	0
m_expr_size:
	----------- total:	6730
	        hit ratio:	0.745171
m_contains_only_constants_or_sp_versions:
	----------- total:	6
	        hit ratio:	0.666667
m_expr_evaluates_to_constant_visitor:
	----------- total:	15050
	        hit ratio:	0.515747
m_sort_dfa_canonicalize:
	----------- total:	95460
	        hit ratio:	0.999843
m_expr_convert_to_iexpr:
	----------- total:	399
	        hit ratio:	0.711779

z3_solver expr_query_cache entry size: 81
	----------- total:	81
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[ 27.2810,  31.2493) (avg.  29.9307)     : 12
[ 31.2493,  35.7947) (avg.  33.8651)     : 14
[ 35.7947,  41.0014) (avg.  38.1312)     : 13
[ 41.0014,  46.9654) (avg.  44.7228)     : 11
[ 46.9654,  53.7969) (avg.  50.1242)     : 9
[ 53.7969,  61.6221) (avg.  57.2948)     : 12
[ 61.6221,  70.5856) (avg.  63.9032)     : 4
[ 70.5856,  80.8528) (avg.  76.8955)     : 2
[ 80.8528,  92.6136) (avg.  84.7480)     : 1
[ 92.6136, 106.0850) (avg. 101.0787)     : 3
histogram (number of quantifiers in query)
[0, 2) (avg. 0)                          : 1
[2, 4) (avg. 2)                          : 31
[4, 5) (avg. 4)                          : 43
[5, 7) (avg. 6)                          : 6
[7, 8) (avg. 0)                          : 0
[8, 10) (avg. 0)                         : 0
[10, 12) (avg. 0)                        : 0
[12, 13) (avg. 0)                        : 0
[13, 15) (avg. 0)                        : 0
[15, 16) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 85, 104) (avg.  85)                    : 1
[104, 122) (avg.   0)                    : 0
[122, 140) (avg. 132)                    : 32
[140, 158) (avg. 152)                    : 6
[158, 176) (avg. 159)                    : 2
[176, 194) (avg. 190)                    : 2
[194, 212) (avg. 201)                    : 8
[212, 230) (avg. 228)                    : 23
[230, 248) (avg. 237)                    : 3
[248, 266) (avg. 256)                    : 4
Top 10 highest time taking queries:
1. [0.105s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.3
2. [0.104s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.2
3. [0.094s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.0
4. [0.085s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.0
5. [0.079s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1
6. [0.075s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1
7. [0.066s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.2
8. [0.064s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.pointer-implements-variable-sized-map.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1
9. [0.063s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%6%bbentry_Lfor.cond%1%bbentry.dstToPC.E0%0%d.from_pcL3%6%bbentry_Lfor.cond%.0
10. [0.063s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.pointer-implements-variable-sized-map.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.0

<MSG>0:29 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 87 time spent: 0:0:0 [0.002167s total; 0.000025 per start]
tfg_computeWP: num_starts 482 time spent: 0:0:0 [0.096229s total; 0.000200 per start]
tfg_get_simplified_to_state_for_edge: num_starts 1304 time spent: 0:0:0 [0.003603s total; 0.000003 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 1124 time spent: 0:0:0 [0.002940s total; 0.000003 per start]
tfg_get_simplified_assumes_for_edge: num_starts 513 time spent: 0:0:0 [0.001334s total; 0.000003 per start]
add_nodeces_at_pc_and_propagate: num_starts 49 time spent: 0:0:0 [0.306025s total; 0.006245 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 12 time spent: 0:0:0 [0.255154s total; 0.021263 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 333 time spent: 0:0:0 [0.162981s total; 0.000489 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 124 time spent: 0:0:0 [0.043739s total; 0.000353 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 293 time spent: 0:0:0 [0.115290s total; 0.000393 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1682 time spent: 0:0:0 [0.137926s total; 0.000082 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 293 time spent: 0:0:0 [0.029014s total; 0.000099 per start]
tfg_graph_get_vars_written_on_edge: num_starts 293 time spent: 0:0:0 [0.011905s total; 0.000041 per start]
cg_with_rank_add_CE_at_pc: num_starts 77 time spent: 0:0:0 [0.227993s total; 0.002961 per start]
graph_with_ce_add_CE_at_pc: num_starts 41 time spent: 0:0:0 [0.001186s total; 0.000029 per start]
graph_with_guessing_add_CE_at_pc: num_starts 77 time spent: 0:0:0 [0.226317s total; 0.002939 per start]
point_set_add_point_using_CE: num_starts 344 time spent: 0:0:0 [0.106483s total; 0.000310 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 344 time spent: 0:0:0 [0.107699s total; 0.000313 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 54 time spent: 0:0:0 [0.213868s total; 0.003961 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 54 time spent: 0:0:0 [0.104164s total; 0.001929 per start]
expr_label_memlabels_using_memlabel_map: num_starts 3440 time spent: 0:0:0 [0.101088s total; 0.000029 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 740 time spent: 0:0:0 [0.060265s total; 0.000081 per start]
expr_simplify_solver: num_starts 2886 time spent: 0:0:0 [0.435882s total; 0.000151 per start]
expr_simplify_syntactic: num_starts 2930 time spent: 0:0:0 [0.418344s total; 0.000143 per start]
expr_simplify_select_on_store: num_starts 76 time spent: 0:0:0 [0.285335s total; 0.003754 per start]
expr_simplify_store_on_store: num_starts 35 time spent: 0:0:0 [0.002959s total; 0.000085 per start]
expr_simplify_using_lhs_set_helper: num_starts 559 time spent: 0:0:0 [0.984679s total; 0.001762 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 5168 time spent: 0:0:0 [0.977457s total; 0.000189 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 3786 time spent: 0:0:0 [0.020213s total; 0.000005 per start]
expr_simplify_eq: num_starts 647 time spent: 0:0:0 [0.008333s total; 0.000013 per start]
expr_simplify_or: num_starts 14 time spent: 0:0:0 [0.000032s total; 0.000002 per start]
expr_simplify_and: num_starts 300 time spent: 0:0:0 [0.002923s total; 0.000010 per start]
expr_simplify_andnot1: num_starts 18 time spent: 0:0:0 [0.000279s total; 0.000016 per start]
expr_simplify_not: num_starts 40 time spent: 0:0:0 [0.000175s total; 0.000004 per start]
expr_simplify_implies: num_starts 124 time spent: 0:0:0 [0.001547s total; 0.000012 per start]
expr_simplify_ite: num_starts 6 time spent: 0:0:0 [0.000744s total; 0.000124 per start]
canonicalize_expr_tree: num_starts 1634 time spent: 0:0:0 [0.065523s total; 0.000040 per start]
expr_simplify_memalloc_using_memlabel: num_starts 109 time spent: 0:0:0 [0.000411s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 83 time spent: 0:0:0 [0.282992s total; 0.003410 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 5 time spent: 0:0:0 [0.017060s total; 0.003412 per start]
memlabels_are_independent: num_starts 33 time spent: 0:0:0 [0.000075s total; 0.000002 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 5 time spent: 0:0:0 [0.005185s total; 0.001037 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 5 time spent: 0:0:0 [0.004883s total; 0.000977 per start]
is_overlapping_atoms_pair_syntactic: num_starts 5 time spent: 0:0:0 [0.002103s total; 0.000421 per start]
is_overlapping_considering_type_constraints: num_starts 5 time spent: 0:0:0 [0.000299s total; 0.000060 per start]
find_offset_wrt_typed_variable_pointer: num_starts 5 time spent: 0:0:0 [0.000298s total; 0.000060 per start]
is_gep_inbounds_offset: num_starts 5 time spent: 0:0:0 [0.000265s total; 0.000053 per start]
get_arithmetic_addsub_atoms: num_starts 4490 time spent: 0:0:0 [0.003086s total; 0.000001 per start]
expr_is_variable_start: num_starts 5 time spent: 0:0:0 [0.000008s total; 0.000002 per start]
expr_linear_relation_holds_visit: num_starts 542 time spent: 0:0:0 [0.007325s total; 0.000014 per start]
expr_is_consts_struct_constant: num_starts 396 time spent: 0:0:0 [0.000300s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 7430 time spent: 0:0:0 [0.907180s total; 0.000122 per start]
expr_do_simplify_helper_cache: num_starts 7430 time spent: 0:0:0 [0.010441s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000007s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000243s total; 0.000007 per start]
evaluate_expr_and_check_bounds: num_starts 1606 time spent: 0:0:0 [0.197738s total; 0.000123 per start]
array_constant_equals: num_starts 4079 time spent: 0:0:0 [0.007010s total; 0.000002 per start]
sort_dfa_canonical: num_starts 237913 time spent: 0:0:1 [1.256674s total; 0.000005 per start]
expr_convert_to_iexpr: num_starts 407 time spent: 0:0:0 [0.266788s total; 0.000655 per start]
combo_dfa_xfer_and_meet: num_starts 24 time spent: 0:0:0 [0.142709s total; 0.005946 per start]
alias_val_xfer_and_meet: num_starts 24 time spent: 0:0:0 [0.117515s total; 0.004896 per start]
get_sprel_map_from_avail_exprs: num_starts 38 time spent: 0:0:0 [0.002773s total; 0.000073 per start]
update_memlabels_for_memslot_locs: num_starts 12 time spent: 0:0:0 [0.000049s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 92 time spent: 0:0:0 [0.019870s total; 0.000216 per start]
compute_simplified_loc_exprs_for_edge: num_starts 234 time spent: 0:0:0 [0.126781s total; 0.000542 per start]
compute_locs_definitely_written_on_edge: num_starts 92 time spent: 0:0:0 [0.000220s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 31 time spent: 0:0:0 [0.019676s total; 0.000635 per start]
edge_update_memlabel_map_for_mlvars: num_starts 46 time spent: 0:0:0 [0.005722s total; 0.000124 per start]
add_new_locs_based_on_edge: num_starts 24 time spent: 0:0:0 [0.023314s total; 0.000971 per start]
expand_locset_to_include_slots_for_memmask: num_starts 53 time spent: 0:0:0 [0.000152s total; 0.000003 per start]
total: num_starts 1 time spent: 0:0:36 [36.405517s total; 36.405517 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 8.38s.
ftmap_run_pointsto_analysis.: 0.211919s (num_starts 2; 0.1060s/start)s.
EQ Time after pointsto analysis: 8.16802s.
EQ Time after pointsto analysis and smt_query: 1.25871s.
EQ Time after pointsto analysis and smt_query and bv-solve: 1.23305s.
Equivalence proof found. The programs are equivalent.
