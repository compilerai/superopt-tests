=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : bvsub(3, 5) : BV:32
=spec-%tmpvar-1.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : bvsub(3, 5) : BV:32
=spec-%tmpvar-2.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : bvsub(3, 5) : BV:32
=spec-%var-f-0.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=spec-%var-s-0.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((func_head*match_prod_0)*match_prod_1)*((intrinsic_app_bvsub*match_prod_final)*func_ret))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-0
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
=Loc 7 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 8 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 9 in src.spec.foo.
REGMEM
spec-%tmpvar-0.E0%0%d
1 : input.spec-%tmpvar-0.E0%0%d : BV:32
=Loc 10 in src.spec.foo.
REGMEM
spec-%tmpvar-1.E0%0%d
1 : input.spec-%tmpvar-1.E0%0%d : BV:32
=Loc 11 in src.spec.foo.
REGMEM
spec-%tmpvar-2.E0%0%d
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
=Loc 12 in src.spec.foo.
REGMEM
spec-%var-f-0.E0%0%d
1 : input.spec-%var-f-0.E0%0%d : BV:32
=Loc 13 in src.spec.foo.
REGMEM
spec-%var-s-0.E0%0%d
1 : input.spec-%var-s-0.E0%0%d : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at E0%0%d
11[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 7, 8
=loc definedness at E0%0%d
1, 7, 8, 9, 10, 11, 12, 13

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 9 {input.spec-%tmpvar-0.E0%0%d }
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 10 {input.spec-%tmpvar-1.E0%0%d }
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 11 {input.spec-%tmpvar-2.E0%0%d }
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 12 {input.spec-%var-f-0.E0%0%d }
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 13 {input.spec-%var-s-0.E0%0%d }
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 9
=loc_expr
140297 : input.spec-%tmpvar-0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=avail_exprs_val.end
=loc 10
=loc_expr
140298 : input.spec-%tmpvar-1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=avail_exprs_val.end
=loc 11
=loc_expr
140296 : input.spec-%tmpvar-2.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=avail_exprs_val.end
=loc 12
=loc_expr
140299 : input.spec-%var-f-0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=avail_exprs_val.end
=loc 13
=loc_expr
140300 : input.spec-%var-s-0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 7 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 8 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 9 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 10 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 11 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 12 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 13 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=spec-%tmpvar-0.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=spec-%tmpvar-1.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=spec-%tmpvar-2.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : prod_get(1, 4) : BV:32
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(3, 7) : BV:32
=spec-%var-f-0.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=spec-%var-s-0.E0%0%d
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : prod_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%y
1 : input.dst.llvm-%y : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%y : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 4 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%y : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%x : BV:32
2 : input.dst.llvm-%y : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%x : BV:32
2 : input.dst.llvm-%y : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((start_pc_edge*  %sub = sub nsw i32 %x, %y, !dbg !16)*  ret i32 %sub, !dbg !17)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%y : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100003 in dst.llvm.foo.
REGMEM
dst.llvm-%y
1 : input.dst.llvm-%y : BV:32
=Loc 100004 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100007 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100008 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100009 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100016 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100017 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100018 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100019 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100020 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100023 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100025 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.E0%0%d
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100003, 100019, 
=live locs at E0%0%d
100019, 100023[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100003, 100013, 100014, 100016, 100017, 100018, 100019, 100020
=loc definedness at E0%0%d
100002, 100003, 100013, 100014, 100016, 100017, 100018, 100019, 100020, 100021, 100022, 100023, 100024, 100025, 100026

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100021 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100022 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%x : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%y : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100023 {input.dst.llvm-%sub.E0%0%d }
1 : input.dst.llvm-%x : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%y : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100024 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100025 {input.dst.local_alloc_count.E0%0%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100026 {input.dst.cur_rounding_mode.E0%0%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140311 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100003
=loc_expr
140312 : input.dst.llvm-%y : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100004
=loc_expr
140323 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100006
=loc_expr
140324 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140326 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140328 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140330 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140321 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140315 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140316 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140360 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100022
=loc_expr
140361 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%x : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%y : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100023
=loc_expr
140359 : input.dst.llvm-%sub.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%x : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%y : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100024
=loc_expr
140362 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100025
=loc_expr
140363 : input.dst.local_alloc_count.E0%0%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100026
=loc_expr
140364 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100024 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100024 spreled-expr
140267 : retaddr_const : BV:32
=loc 100025 expr
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=loc 100025 spreled-expr
140321 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100026 expr
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=loc 100026 spreled-expr
140320 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100003 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100004 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100007 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100009 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100018 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100024 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100026 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%x : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%y : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%x : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%y : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 1
=pc
Lentry%2%d
=linename
line 1
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 34
=pc
Lentry%2%d
=column_name
 at column 25
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 1 at column 34)
=pc
Lentry%2%d
=line_and_column
(line 1 at column 25)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : (x' - y')
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%y : L0%0%d : y'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%sub : L0%0%d : (x' - y')
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%sub.E0%0%d : L0%0%d : (x' - y')
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.local_alloc_count.E0%0%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.E0%0%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
1 : 11111111111111111111111111111111b
2 : input.dst.llvm-%y : BV32
3 : scev_op_mul(1, 2) : loop L0%0%d : 
4 : input.dst.llvm-%x : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
1 : 11111111111111111111111111111111b
2 : input.dst.llvm-%y : BV32
3 : scev_op_mul(1, 2) : loop L0%0%d : 
4 : input.dst.llvm-%x : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%y : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%y : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%y
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%sub.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.E0%0%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple2.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
seperate-args-implement-prod
=LhsExpr
1 : $spec-arg-0 : PROD[BV:32,BV:32]
2 : $llvm-arg-0 : BV:32
3 : $llvm-arg-1 : BV:32
4 : prod(2, 3) : PROD[BV:32,BV:32]
5 : eq(1, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%y : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 4 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%y : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
seperate-args-implement-prod
=LhsExpr
1 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
2 : input.dst.llvm-%x : BV:32
3 : input.dst.llvm-%y : BV:32
4 : prod(2, 3) : PROD[BV:32,BV:32]
5 : eq(1, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%y : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce3.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce3 55c149bd73f2758af72b396cd5bd4a8b
=input.spec-%var-x-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : prod(1, 1) : PROD[BV:32,BV:32]
3 : sym_const(2) : PROD[BV:32,BV:32]
=input.spec-%tmpvar-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%y
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3707502595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3707502596; 3707502599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3707502600; 3707518975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3707518976; 3707518979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3707518980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3707502596 { 0xdcfc0004 -587464700 -1.96875047e58 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3707518976 { 0xdcfc4000 -587448320 -1.97070312e58 } : BV:32
=input.spec-%tmpvar-2.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-f-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-s-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3707502596 { 0xdcfc0004 -587464700 -1.96875047e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3707502599 { 0xdcfc0007 -587464697 -1.96875083e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3707518976 { 0xdcfc4000 -587448320 -1.97070312e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3707518979 { 0xdcfc4003 -587448317 -1.97070348e58 } : BV:32
=counter_example.random_seed
1655087171
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 18bb91cc79cd898d21d5a995853a4cce
=input.spec-%var-x-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : prod(1, 1) : PROD[BV:32,BV:32]
3 : sym_const(2) : PROD[BV:32,BV:32]
=input.spec-%tmpvar-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%y
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1642270719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1642270720; 1642270723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1642270724; 1843617675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1843617676; 1843617679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1843617680; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1843617676 { 0x6de35f8c +1.77635335e92 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1642270720 { 0x61e31000 +1.77392578e68 } : BV:32
=input.spec-%tmpvar-2.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-f-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-s-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1843617676 { 0x6de35f8c +1.77635335e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1843617679 { 0x6de35f8f +1.77635371e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1642270720 { 0x61e31000 +1.77392578e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1642270723 { 0x61e31003 +1.77392613e68 } : BV:32
=counter_example.random_seed
928181921
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce5.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce5 1dff8a49ff9ec67e5187f9c83f953
=input.spec-%var-x-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : prod(1, 1) : PROD[BV:32,BV:32]
3 : sym_const(2) : PROD[BV:32,BV:32]
=input.spec-%tmpvar-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%y
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1342177279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1342177280; 1342177283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1342177284; 2684354563 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2684354564; 2684354567 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2684354568; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1342177280 { 0x50000000 +1.0e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2684354564 { 0xa0000004 -1610612732 -1.47e193 } : BV:32
=input.spec-%tmpvar-2.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-f-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-s-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1342177280 { 0x50000000 +1.0e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1342177283 { 0x50000003 +1.35e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2684354564 { 0xa0000004 -1610612732 -1.47e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2684354567 { 0xa0000007 -1610612729 -1.83e193 } : BV:32
=counter_example.random_seed
1873257935
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140313 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140314 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140332 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140316 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140333 : 4 { 0x4 +1.0e1025 } : INT
140334 : 0 { 0x0 } : BOOL
140335 : select(140313, 140314, 140332, 140316, 140333, 140334) : BV:32
=RhsExpr
140312 : input.dst.llvm-%y : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140313 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140314 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140336 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140315 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140333 : 4 { 0x4 +1.0e1025 } : INT
140334 : 0 { 0x0 } : BOOL
140337 : select(140313, 140314, 140336, 140315, 140333, 140334) : BV:32
=RhsExpr
140311 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140374 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140375 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140376 : bvule(140374, 140375) : BOOL
140365 : 4 { 0x4 +1.47e129 } : BV:32
140290 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140377 : bvadd(140365, 140290) : BV:32
140378 : bvadd(140374, 140377) : BV:32
140379 : eq(140375, 140378) : BOOL
140380 : and(140376, 140379) : BOOL
140381 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140382 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140383 : bvule(140381, 140382) : BOOL
140384 : and(140380, 140383) : BOOL
140385 : bvadd(140381, 140377) : BV:32
140386 : eq(140382, 140385) : BOOL
140387 : and(140384, 140386) : BOOL
140388 : bvuge(140374, 140381) : BOOL
140389 : bvule(140374, 140382) : BOOL
140390 : and(140388, 140389) : BOOL
140392 : bvuge(140375, 140381) : BOOL
140393 : bvule(140375, 140382) : BOOL
140394 : and(140392, 140393) : BOOL
140395 : not(140394) : BOOL
140396 : andnot1(140390, 140395) : BOOL
140391 : bvuge(140381, 140374) : BOOL
140397 : bvule(140381, 140375) : BOOL
140398 : and(140391, 140397) : BOOL
140400 : bvuge(140382, 140374) : BOOL
140401 : bvule(140382, 140375) : BOOL
140402 : and(140400, 140401) : BOOL
140403 : not(140402) : BOOL
140404 : andnot1(140398, 140403) : BOOL
140399 : and(140396, 140404) : BOOL
140405 : and(140387, 140399) : BOOL
140315 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140406 : 3 { 0x3 +1.35e129 } : BV:32
140407 : bvand(140315, 140406) : BV:32
140285 : 0 { 0x0 +1.0e129 } : BV:32
140408 : eq(140407, 140285) : BOOL
140316 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140409 : bvand(140316, 140406) : BV:32
140410 : eq(140409, 140285) : BOOL
140411 : and(140408, 140410) : BOOL
140412 : and(140405, 140411) : BOOL
140413 : eq(140315, 140374) : BOOL
140414 : eq(140316, 140381) : BOOL
140415 : and(140413, 140414) : BOOL
140416 : and(140412, 140415) : BOOL
140314 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140357 : 1 { 0x1 +1.11e129 } : BV:32
140317 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140417 : region_agrees_with_memlabel(140314, 140285, 140357, 140317) : BOOL
140418 : and(140416, 140417) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.pred
=Comment
seperate-args-implement-prod
=LhsExpr
140273 : input.spec-%var-x-0 : PROD[BV:32,BV:32]
140311 : input.dst.llvm-%x : BV:32
140312 : input.dst.llvm-%y : BV:32
140419 : prod(140311, 140312) : PROD[BV:32,BV:32]
140420 : eq(140273, 140419) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
