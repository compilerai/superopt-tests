==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x249 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x250 (not $x249)))
 (let (($x251 (or $x249 $x250)))
 (let (($x252 (= $x251 false)))
 (let (($x253 (= $x252 true)))
 (let ((?x213 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x223 (concat ?x222 (concat ?x219 (concat ?x215 ?x213)))))
 (let (($x224 (= ?x223 input.dst.llvm-%x)))
 (let (($x225 (= $x224 true)))
 (let (($x208 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x209 (= $x208 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x196 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x182 $x203)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x189)))))))
 (let (($x205 (and $x195 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x210 (and $x206 $x209)))
 (let (($x226 (and $x210 $x225)))
 (let (($x177 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x178 (= input.spec-%tmpvar-10.L2%13%d $x177)))
 (let (($x227 (and $x178 $x226)))
 (let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x15 (ite $x11 ?x35 (_ bv0 32))))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x5 ?x34 ?x15)))
 (let (($x171 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x167 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x172 (=> $x167 $x171)))
 (let (($x162 (or $x11 $x5)))
 (let ((?x163 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x163 (_ bv1 32))))
 (let (($x169 (= $x167 $x168)))
 (let (($x47 (= false false)))
 (let (($x161 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x166 (=> $x161 $x47)))
 (let (($x164 (= ?x163 (_ bv0 32))))
 (let (($x165 (= $x161 $x164)))
 (let (($x175 (and (and (and $x165 $x166) $x169) $x172)))
 (let (($x228 (and $x175 $x227)))
 (let (($x26 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x32 (ite $x26 ?x35 (_ bv0 32))))
 (let (($x24 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x43 (ite $x24 ?x34 ?x32)))
 (let (($x155 (= input.spec-%tmpvar-12.L2%17%d.2 ?x43)))
 (let (($x151 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x156 (=> $x151 $x155)))
 (let (($x146 (or $x26 $x24)))
 (let ((?x147 (ite $x146 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x147 (_ bv1 32))))
 (let (($x153 (= $x151 $x152)))
 (let (($x145 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x150 (=> $x145 $x47)))
 (let (($x148 (= ?x147 (_ bv0 32))))
 (let (($x149 (= $x145 $x148)))
 (let (($x159 (and (and (and $x149 $x150) $x153) $x156)))
 (let (($x229 (and $x159 $x228)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x230 (and $x143 $x229)))
 (let (($x140 (forall ((input.ind-%var351X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= input.ind-%var351X (_ bv0 32))))
 (let ((?x57 (ite $x8 ?x35 (_ bv0 32))))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x6 (= input.ind-%var351X (_ bv1 32))))
 (let ((?x58 (ite $x6 ?x34 ?x57)))
 (let ((?x130 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var351X)))
 (let (($x119 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var351X)))
 (=> $x119 (= ?x130 ?x58)))))))))))
 ))
 (let (($x126 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x6 (= input.ind-%var350X (_ bv1 32))))
 (let (($x8 (= input.ind-%var350X (_ bv0 32))))
 (let (($x36 (or $x8 $x6)))
 (let (($x119 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var350X)))
 (= $x119 $x36))))))
 ))
 (let (($x141 (and $x126 $x140)))
 (let (($x231 (and $x141 $x230)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x232 (and $x116 $x231)))
 (let (($x113 (forall ((input.ind-%var367X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var367X)))
 (=> $x99 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var367X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var366X)))
 (= $x99 false)))
 ))
 (let (($x114 (and $x103 $x113)))
 (let (($x233 (and $x114 $x232)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x234 (and $x96 $x233)))
 (let (($x94 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x235 (and $x94 $x234)))
 (let (($x91 (= ?x35 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x236 (and $x91 $x235)))
 (let (($x88 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= input.ind-%var383X (_ bv0 32))))
 (let ((?x57 (ite $x8 ?x35 (_ bv0 32))))
 (let ((?x80 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var383X)))
 (let (($x71 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var383X)))
 (=> $x71 (= ?x80 ?x57))))))))
 ))
 (let (($x76 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x8 (= input.ind-%var382X (_ bv0 32))))
 (let (($x71 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var382X)))
 (= $x71 $x8))))
 ))
 (let (($x89 (and $x76 $x88)))
 (let (($x237 (and $x89 $x236)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x238 (and $x68 $x237)))
 (let (($x66 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x239 (and $x66 $x238)))
 (let (($x64 (= ?x34 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x240 (and $x64 $x239)))
 (let (($x61 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= input.ind-%var403X (_ bv0 32))))
 (let ((?x57 (ite $x8 ?x35 (_ bv0 32))))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x6 (= input.ind-%var403X (_ bv1 32))))
 (let ((?x58 (ite $x6 ?x34 ?x57)))
 (let ((?x49 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var403X)))
 (let (($x28 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var403X)))
 (=> $x28 (= ?x49 ?x58)))))))))))
 ))
 (let (($x9 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x6 (= input.ind-%var402X (_ bv1 32))))
 (let (($x8 (= input.ind-%var402X (_ bv0 32))))
 (let (($x36 (or $x8 $x6)))
 (let (($x28 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var402X)))
 (= $x28 $x36))))))
 ))
 (let (($x62 (and $x9 $x61)))
 (let (($x241 (and $x62 $x240)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x242 (and $x42 $x241)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x243 (and $x44 $x242)))
 (let (($x244 (and $x47 $x243)))
 (let (($x45 (= input.spec-%var-y-0.L2%23%bbentry ?x43)))
 (let (($x245 (and $x45 $x244)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x246 (and $x30 $x245)))
 (let (($x247 (and $x47 $x246)))
 (let (($x46 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x248 (and $x46 $x247)))
 (let (($x254 (=> $x248 $x253)))
 (not $x254)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x249 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x250 (not $x249)))
 (let (($x251 (or $x249 $x250)))
 (let (($x252 (= $x251 false)))
 (let (($x253 (= $x252 true)))
 (let ((?x213 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x223 (concat ?x222 (concat ?x219 (concat ?x215 ?x213)))))
 (let (($x224 (= ?x223 input.dst.llvm-%x)))
 (let (($x225 (= $x224 true)))
 (let (($x208 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x209 (= $x208 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x196 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x182 $x203)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x189)))))))
 (let (($x205 (and $x195 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x210 (and $x206 $x209)))
 (let (($x226 (and $x210 $x225)))
 (let (($x177 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x178 (= input.spec-%tmpvar-10.L2%13%d $x177)))
 (let (($x227 (and $x178 $x226)))
 (let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x15 (ite $x11 ?x35 (_ bv0 32))))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x5 ?x34 ?x15)))
 (let (($x171 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x167 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x172 (=> $x167 $x171)))
 (let (($x162 (or $x11 $x5)))
 (let ((?x163 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x163 (_ bv1 32))))
 (let (($x169 (= $x167 $x168)))
 (let (($x47 (= false false)))
 (let (($x161 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x166 (=> $x161 $x47)))
 (let (($x164 (= ?x163 (_ bv0 32))))
 (let (($x165 (= $x161 $x164)))
 (let (($x175 (and (and (and $x165 $x166) $x169) $x172)))
 (let (($x228 (and $x175 $x227)))
 (let (($x26 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x32 (ite $x26 ?x35 (_ bv0 32))))
 (let (($x24 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x43 (ite $x24 ?x34 ?x32)))
 (let (($x155 (= input.spec-%tmpvar-12.L2%17%d.2 ?x43)))
 (let (($x151 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x156 (=> $x151 $x155)))
 (let (($x146 (or $x26 $x24)))
 (let ((?x147 (ite $x146 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x147 (_ bv1 32))))
 (let (($x153 (= $x151 $x152)))
 (let (($x145 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x150 (=> $x145 $x47)))
 (let (($x148 (= ?x147 (_ bv0 32))))
 (let (($x149 (= $x145 $x148)))
 (let (($x159 (and (and (and $x149 $x150) $x153) $x156)))
 (let (($x229 (and $x159 $x228)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x230 (and $x143 $x229)))
 (let (($x140 (forall ((input.ind-%var351X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= input.ind-%var351X (_ bv0 32))))
 (let ((?x57 (ite $x8 ?x35 (_ bv0 32))))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x6 (= input.ind-%var351X (_ bv1 32))))
 (let ((?x58 (ite $x6 ?x34 ?x57)))
 (let ((?x130 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var351X)))
 (let (($x119 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var351X)))
 (=> $x119 (= ?x130 ?x58)))))))))))
 ))
 (let (($x126 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x6 (= input.ind-%var350X (_ bv1 32))))
 (let (($x8 (= input.ind-%var350X (_ bv0 32))))
 (let (($x36 (or $x8 $x6)))
 (let (($x119 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var350X)))
 (= $x119 $x36))))))
 ))
 (let (($x141 (and $x126 $x140)))
 (let (($x231 (and $x141 $x230)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x232 (and $x116 $x231)))
 (let (($x113 (forall ((input.ind-%var367X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var367X)))
 (=> $x99 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var367X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var366X)))
 (= $x99 false)))
 ))
 (let (($x114 (and $x103 $x113)))
 (let (($x233 (and $x114 $x232)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x234 (and $x96 $x233)))
 (let (($x94 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x235 (and $x94 $x234)))
 (let (($x91 (= ?x35 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x236 (and $x91 $x235)))
 (let (($x88 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= input.ind-%var383X (_ bv0 32))))
 (let ((?x57 (ite $x8 ?x35 (_ bv0 32))))
 (let ((?x80 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var383X)))
 (let (($x71 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var383X)))
 (=> $x71 (= ?x80 ?x57))))))))
 ))
 (let (($x76 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x8 (= input.ind-%var382X (_ bv0 32))))
 (let (($x71 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var382X)))
 (= $x71 $x8))))
 ))
 (let (($x89 (and $x76 $x88)))
 (let (($x237 (and $x89 $x236)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x238 (and $x68 $x237)))
 (let (($x66 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x239 (and $x66 $x238)))
 (let (($x64 (= ?x34 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x240 (and $x64 $x239)))
 (let (($x61 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= input.ind-%var403X (_ bv0 32))))
 (let ((?x57 (ite $x8 ?x35 (_ bv0 32))))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x6 (= input.ind-%var403X (_ bv1 32))))
 (let ((?x58 (ite $x6 ?x34 ?x57)))
 (let ((?x49 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var403X)))
 (let (($x28 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var403X)))
 (=> $x28 (= ?x49 ?x58)))))))))))
 ))
 (let (($x9 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x6 (= input.ind-%var402X (_ bv1 32))))
 (let (($x8 (= input.ind-%var402X (_ bv0 32))))
 (let (($x36 (or $x8 $x6)))
 (let (($x28 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var402X)))
 (= $x28 $x36))))))
 ))
 (let (($x62 (and $x9 $x61)))
 (let (($x241 (and $x62 $x240)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x242 (and $x42 $x241)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x243 (and $x44 $x242)))
 (let (($x244 (and $x47 $x243)))
 (let (($x45 (= input.spec-%var-y-0.L2%23%bbentry ?x43)))
 (let (($x245 (and $x45 $x244)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x246 (and $x30 $x245)))
 (let (($x247 (and $x47 $x246)))
 (let (($x46 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x248 (and $x46 $x247)))
 (let (($x254 (=> $x248 $x253)))
 (not $x254)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3c000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!51))
  (define-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32)
    #x0000001b)
  (define-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32)
    #x0000002c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3c000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3c000004)
  (define-fun input.spec-%tmpvar-10.L2%13%d () Bool
    false)
  (define-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32)
    #x0000002c)
  (define-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32)
    #x0000001b)
  (define-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32)
    #x0000001b)
  (define-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32)
    #x0000002c)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!53 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1!56 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L2%13%d.0.1!56 (k!52 x!0)))
  (define-fun k!55 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1!61 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L2%13%d.0.1!61 (k!55 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1!58 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%13%d.0.1!58 (k!53 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1!59 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x0000001b
      #x00000007))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3c000004) #x20
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1!60 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x0000001b
    (ite (= x!0 #x00000001) #x0000002c
      #x00000008)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L2%13%d.1.1!60 (k!52 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1!57 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x0000001b
    (ite (= x!0 #x00000001) #x0000002c
      #x00000006)))
  (define-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%13%d.1.1!59 (k!53 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L2%13%d.1.1!57 (k!55 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%tmpvar-10.L2%13%d () Bool
    false)
  (define-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7288154)
  (define-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32)
    #x00000011)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7288157)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7288154)
  (define-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32)
    #x00000011)
  (define-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32)
    #x00000011)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1!43 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000011
      #x00000008)))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L2%13%d.1.1!43 (k!35 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1!41 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000007))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1!39 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1!42 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%13%d.0.1!44 (k!36 x!0)))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf7288154) #x05
      #x00))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1!40 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000011
      #x00000006)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%13%d.1.1!41 (k!36 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L2%13%d.1.1!40 (k!38 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L2%13%d.0.1!42 (k!35 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L2%13%d.0.1!39 (k!38 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x55 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x41 (not $x55)))
 (let (($x56 (or $x55 $x41)))
 (let (($x12 (not $x56)))
 (let (($x236 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x53 (and true $x236)))
 (let (($x52 (not $x236)))
 (let (($x54 (or $x52 $x53)))
 (let (($x256 (or $x54 $x12)))
 (let (($x257 (= $x256 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x136 (concat ?x133 (concat ?x123 ?x98)))))
 (let (($x137 (= ?x128 input.dst.llvm-%x)))
 (let (($x105 (= $x137 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x132 (= $x122 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x100)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x255 $x131)))
 (let (($x72 (and $x212 $x108)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x241 $x72)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x248)))))))
 (let (($x104 (and $x254 $x81)))
 (let (($x129 (= $x104 true)))
 (let (($x106 (and $x129 $x132)))
 (let (($x110 (and $x106 $x105)))
 (let (($x237 (= input.spec-%tmpvar-10.L2%13%d $x236)))
 (let (($x16 (and $x237 $x110)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x18 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x35 (ite $x18 ?x25 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x34 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x15 (ite $x34 ?x21 ?x35)))
 (let (($x230 (= input.spec-%tmpvar-16.L2%25%d.2 ?x15)))
 (let (($x226 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x231 (=> $x226 $x230)))
 (let (($x216 (or $x18 $x34)))
 (let ((?x220 (ite $x216 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x220 (_ bv1 32))))
 (let (($x228 (= $x226 $x227)))
 (let (($x46 (= false false)))
 (let (($x213 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x225 (=> $x213 $x46)))
 (let (($x223 (= ?x220 (_ bv0 32))))
 (let (($x224 (= $x213 $x223)))
 (let (($x234 (and (and (and $x224 $x225) $x228) $x231)))
 (let (($x50 (and $x234 $x16)))
 (let (($x26 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x32 (ite $x26 ?x25 (_ bv0 32))))
 (let (($x24 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x43 (ite $x24 ?x21 ?x32)))
 (let (($x222 (= input.spec-%tmpvar-12.L2%17%d.2 ?x43)))
 (let (($x209 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x217 (=> $x209 $x222)))
 (let (($x204 (or $x26 $x24)))
 (let ((?x205 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x205 (_ bv1 32))))
 (let (($x211 (= $x209 $x210)))
 (let (($x203 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x208 (=> $x203 $x46)))
 (let (($x206 (= ?x205 (_ bv0 32))))
 (let (($x207 (= $x203 $x206)))
 (let (($x214 (and (and (and $x207 $x208) $x211) $x217)))
 (let (($x77 (and $x214 $x50)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x79 (and $x201 $x77)))
 (let (($x198 (forall ((input.ind-%var889X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x59 (= input.ind-%var889X (_ bv0 32))))
 (let ((?x87 (ite $x59 ?x25 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x58 (= input.ind-%var889X (_ bv1 32))))
 (let ((?x88 (ite $x58 ?x21 ?x87)))
 (let ((?x189 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var889X)))
 (let (($x175 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var889X)))
 (=> $x175 (= ?x189 ?x88)))))))))))
 ))
 (let (($x185 (forall ((input.ind-%var888X (_ BitVec 32)) )(let (($x58 (= input.ind-%var888X (_ bv1 32))))
 (let (($x59 (= input.ind-%var888X (_ bv0 32))))
 (let (($x60 (or $x59 $x58)))
 (let (($x175 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var888X)))
 (= $x175 $x60))))))
 ))
 (let (($x199 (and $x185 $x198)))
 (let (($x69 (and $x199 $x79)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x73 (and $x170 $x69)))
 (let (($x168 (forall ((input.ind-%var899X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var899X)))
 (=> $x158 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var899X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var898X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var898X)))
 (= $x158 false)))
 ))
 (let (($x169 (and $x159 $x168)))
 (let (($x82 (and $x169 $x73)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x83 (and $x151 $x82)))
 (let (($x150 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x70 (and $x150 $x83)))
 (let (($x148 (= ?x25 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x74 (and $x148 $x70)))
 (let (($x145 (forall ((input.ind-%var913X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x59 (= input.ind-%var913X (_ bv0 32))))
 (let ((?x87 (ite $x59 ?x25 (_ bv0 32))))
 (let ((?x130 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var913X)))
 (let (($x111 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var913X)))
 (=> $x111 (= ?x130 ?x87))))))))
 ))
 (let (($x116 (forall ((input.ind-%var912X (_ BitVec 32)) )(let (($x59 (= input.ind-%var912X (_ bv0 32))))
 (let (($x111 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var912X)))
 (= $x111 $x59))))
 ))
 (let (($x146 (and $x116 $x145)))
 (let (($x84 (and $x146 $x74)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x78 (and $x102 $x84)))
 (let (($x96 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x85 (and $x96 $x78)))
 (let (($x94 (= ?x21 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x39 (and $x94 $x85)))
 (let (($x91 (forall ((input.ind-%var931X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x59 (= input.ind-%var931X (_ bv0 32))))
 (let ((?x87 (ite $x59 ?x25 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x58 (= input.ind-%var931X (_ bv1 32))))
 (let ((?x88 (ite $x58 ?x21 ?x87)))
 (let ((?x66 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var931X)))
 (let (($x6 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var931X)))
 (=> $x6 (= ?x66 ?x88)))))))))))
 ))
 (let (($x62 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x58 (= input.ind-%var930X (_ bv1 32))))
 (let (($x59 (= input.ind-%var930X (_ bv0 32))))
 (let (($x60 (or $x59 $x58)))
 (let (($x6 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var930X)))
 (= $x6 $x60))))))
 ))
 (let (($x92 (and $x62 $x91)))
 (let (($x48 (and $x92 $x39)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x40 (and $x42 $x48)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x19 (and $x44 $x40)))
 (let (($x51 (and $x46 $x19)))
 (let (($x45 (= input.spec-%var-y-0.L2%23%bbentry ?x43)))
 (let (($x14 (and $x45 $x51)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x7 (and $x30 $x14)))
 (let (($x33 (and $x46 $x7)))
 (let (($x13 (= input.spec-%var-y-1.L2%31%bbentry ?x15)))
 (let (($x17 (and $x13 $x33)))
 (let (($x258 (=> $x17 $x257)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x55 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x41 (not $x55)))
 (let (($x56 (or $x55 $x41)))
 (let (($x12 (not $x56)))
 (let (($x236 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x53 (and true $x236)))
 (let (($x52 (not $x236)))
 (let (($x54 (or $x52 $x53)))
 (let (($x256 (or $x54 $x12)))
 (let (($x257 (= $x256 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x136 (concat ?x133 (concat ?x123 ?x98)))))
 (let (($x137 (= ?x128 input.dst.llvm-%x)))
 (let (($x105 (= $x137 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x132 (= $x122 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x100)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x255 $x131)))
 (let (($x72 (and $x212 $x108)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x241 $x72)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x248)))))))
 (let (($x104 (and $x254 $x81)))
 (let (($x129 (= $x104 true)))
 (let (($x106 (and $x129 $x132)))
 (let (($x110 (and $x106 $x105)))
 (let (($x237 (= input.spec-%tmpvar-10.L2%13%d $x236)))
 (let (($x16 (and $x237 $x110)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x18 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x35 (ite $x18 ?x25 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x34 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x15 (ite $x34 ?x21 ?x35)))
 (let (($x230 (= input.spec-%tmpvar-16.L2%25%d.2 ?x15)))
 (let (($x226 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x231 (=> $x226 $x230)))
 (let (($x216 (or $x18 $x34)))
 (let ((?x220 (ite $x216 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x220 (_ bv1 32))))
 (let (($x228 (= $x226 $x227)))
 (let (($x46 (= false false)))
 (let (($x213 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x225 (=> $x213 $x46)))
 (let (($x223 (= ?x220 (_ bv0 32))))
 (let (($x224 (= $x213 $x223)))
 (let (($x234 (and (and (and $x224 $x225) $x228) $x231)))
 (let (($x50 (and $x234 $x16)))
 (let (($x26 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x32 (ite $x26 ?x25 (_ bv0 32))))
 (let (($x24 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x43 (ite $x24 ?x21 ?x32)))
 (let (($x222 (= input.spec-%tmpvar-12.L2%17%d.2 ?x43)))
 (let (($x209 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x217 (=> $x209 $x222)))
 (let (($x204 (or $x26 $x24)))
 (let ((?x205 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x205 (_ bv1 32))))
 (let (($x211 (= $x209 $x210)))
 (let (($x203 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x208 (=> $x203 $x46)))
 (let (($x206 (= ?x205 (_ bv0 32))))
 (let (($x207 (= $x203 $x206)))
 (let (($x214 (and (and (and $x207 $x208) $x211) $x217)))
 (let (($x77 (and $x214 $x50)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x79 (and $x201 $x77)))
 (let (($x198 (forall ((input.ind-%var889X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x59 (= input.ind-%var889X (_ bv0 32))))
 (let ((?x87 (ite $x59 ?x25 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x58 (= input.ind-%var889X (_ bv1 32))))
 (let ((?x88 (ite $x58 ?x21 ?x87)))
 (let ((?x189 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var889X)))
 (let (($x175 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var889X)))
 (=> $x175 (= ?x189 ?x88)))))))))))
 ))
 (let (($x185 (forall ((input.ind-%var888X (_ BitVec 32)) )(let (($x58 (= input.ind-%var888X (_ bv1 32))))
 (let (($x59 (= input.ind-%var888X (_ bv0 32))))
 (let (($x60 (or $x59 $x58)))
 (let (($x175 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var888X)))
 (= $x175 $x60))))))
 ))
 (let (($x199 (and $x185 $x198)))
 (let (($x69 (and $x199 $x79)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x73 (and $x170 $x69)))
 (let (($x168 (forall ((input.ind-%var899X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var899X)))
 (=> $x158 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var899X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var898X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var898X)))
 (= $x158 false)))
 ))
 (let (($x169 (and $x159 $x168)))
 (let (($x82 (and $x169 $x73)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x83 (and $x151 $x82)))
 (let (($x150 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x70 (and $x150 $x83)))
 (let (($x148 (= ?x25 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x74 (and $x148 $x70)))
 (let (($x145 (forall ((input.ind-%var913X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x59 (= input.ind-%var913X (_ bv0 32))))
 (let ((?x87 (ite $x59 ?x25 (_ bv0 32))))
 (let ((?x130 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var913X)))
 (let (($x111 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var913X)))
 (=> $x111 (= ?x130 ?x87))))))))
 ))
 (let (($x116 (forall ((input.ind-%var912X (_ BitVec 32)) )(let (($x59 (= input.ind-%var912X (_ bv0 32))))
 (let (($x111 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var912X)))
 (= $x111 $x59))))
 ))
 (let (($x146 (and $x116 $x145)))
 (let (($x84 (and $x146 $x74)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x78 (and $x102 $x84)))
 (let (($x96 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x85 (and $x96 $x78)))
 (let (($x94 (= ?x21 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x39 (and $x94 $x85)))
 (let (($x91 (forall ((input.ind-%var931X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x59 (= input.ind-%var931X (_ bv0 32))))
 (let ((?x87 (ite $x59 ?x25 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x58 (= input.ind-%var931X (_ bv1 32))))
 (let ((?x88 (ite $x58 ?x21 ?x87)))
 (let ((?x66 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var931X)))
 (let (($x6 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var931X)))
 (=> $x6 (= ?x66 ?x88)))))))))))
 ))
 (let (($x62 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x58 (= input.ind-%var930X (_ bv1 32))))
 (let (($x59 (= input.ind-%var930X (_ bv0 32))))
 (let (($x60 (or $x59 $x58)))
 (let (($x6 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var930X)))
 (= $x6 $x60))))))
 ))
 (let (($x92 (and $x62 $x91)))
 (let (($x48 (and $x92 $x39)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x40 (and $x42 $x48)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x19 (and $x44 $x40)))
 (let (($x51 (and $x46 $x19)))
 (let (($x45 (= input.spec-%var-y-0.L2%23%bbentry ?x43)))
 (let (($x14 (and $x45 $x51)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x7 (and $x30 $x14)))
 (let (($x33 (and $x46 $x7)))
 (let (($x13 (= input.spec-%var-y-1.L2%31%bbentry ?x15)))
 (let (($x17 (and $x13 $x33)))
 (let (($x258 (=> $x17 $x257)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x64 (= (_ bv0 32) ?x127)))
 (let (($x86 (= $x64 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x183 (concat ?x166 (concat ?x191 (concat ?x165 ?x153)))))
 (let (($x181 (= ?x183 input.dst.llvm-%x)))
 (let (($x126 (= $x181 true)))
 (let (($x172 (= input.dst.llvm-%x ?x183)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x138)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x190 $x164)))
 (let (($x67 (and $x112 $x36)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x176 $x67)))
 (let (($x33 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x12)))))))
 (let (($x192 (and (and (and $x239 $x33) $x160) $x172)))
 (let (($x193 (= $x192 true)))
 (let (($x19 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x51 (= $x19 true)))
 (let (($x195 (and $x51 $x193)))
 (let (($x103 (and $x195 $x126)))
 (let (($x39 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x48 (or false $x39)))
 (let (($x113 (and $x48 $x103)))
 (let (($x84 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x78 (= input.spec-%tmpvar-10.L2%13%d $x84)))
 (let (($x188 (and $x78 $x113)))
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x34 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x23 ?x20 ?x60)))
 (let (($x69 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x16 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x73 (=> $x16 $x69)))
 (let (($x134 (or $x34 $x23)))
 (let ((?x128 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x128 (_ bv1 32))))
 (let (($x77 (= $x16 $x50)))
 (let (($x92 (= false false)))
 (let (($x118 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x110 (=> $x118 $x92)))
 (let (($x137 (= ?x128 (_ bv0 32))))
 (let (($x105 (= $x118 $x137)))
 (let (($x70 (and (and (and $x105 $x110) $x77) $x73)))
 (let (($x182 (and $x70 $x188)))
 (let (($x58 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x116 (ite $x58 ?x42 (_ bv0 32))))
 (let (($x11 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x130 (ite $x11 ?x20 ?x116)))
 (let (($x124 (= input.spec-%tmpvar-12.L2%17%d.2 ?x130)))
 (let (($x106 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x109 (=> $x106 $x124)))
 (let (($x104 (or $x58 $x11)))
 (let ((?x129 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x129 (_ bv1 32))))
 (let (($x135 (= $x106 $x121)))
 (let (($x81 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x132 (=> $x81 $x92)))
 (let (($x117 (= ?x129 (_ bv0 32))))
 (let (($x122 (= $x81 $x117)))
 (let (($x123 (and (and (and $x122 $x132) $x135) $x109)))
 (let (($x139 (and $x123 $x182)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x140 (and $x108 $x139)))
 (let (($x131 (forall ((input.ind-%var1021X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x111 (= input.ind-%var1021X (_ bv0 32))))
 (let ((?x145 (ite $x111 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x94 (= input.ind-%var1021X (_ bv1 32))))
 (let ((?x146 (ite $x94 ?x20 ?x145)))
 (let ((?x249 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1021X)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1021X)))
 (=> $x235 (= ?x249 ?x146)))))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1020X (_ BitVec 32)) )(let (($x94 (= input.ind-%var1020X (_ bv1 32))))
 (let (($x111 (= input.ind-%var1020X (_ bv0 32))))
 (let (($x99 (or $x111 $x94)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1020X)))
 (= $x235 $x99))))))
 ))
 (let (($x212 (and $x246 $x131)))
 (let (($x107 (and $x212 $x140)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x114 (and $x230 $x107)))
 (let (($x228 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1031X)))
 (=> $x221 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x215 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1030X)))
 (= $x221 false)))
 ))
 (let (($x233 (and $x215 $x228)))
 (let (($x141 (and $x233 $x114)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x125 (and $x210 $x141)))
 (let (($x218 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x142 (and $x218 $x125)))
 (let (($x207 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x63 (and $x207 $x142)))
 (let (($x204 (forall ((input.ind-%var1045X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x111 (= input.ind-%var1045X (_ bv0 32))))
 (let ((?x145 (ite $x111 ?x42 (_ bv0 32))))
 (let ((?x196 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1045X)))
 (let (($x167 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1045X)))
 (=> $x167 (= ?x196 ?x145))))))))
 ))
 (let (($x175 (forall ((input.ind-%var1044X (_ BitVec 32)) )(let (($x111 (= input.ind-%var1044X (_ bv0 32))))
 (let (($x167 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1044X)))
 (= $x167 $x111))))
 ))
 (let (($x205 (and $x175 $x204)))
 (let (($x65 (and $x205 $x63)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x38 (and $x159 $x65)))
 (let (($x158 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x9 (and $x158 $x38)))
 (let (($x157 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x68 (and $x157 $x9)))
 (let (($x149 (forall ((input.ind-%var1063X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x111 (= input.ind-%var1063X (_ bv0 32))))
 (let ((?x145 (ite $x111 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x94 (= input.ind-%var1063X (_ bv1 32))))
 (let ((?x146 (ite $x94 ?x20 ?x145)))
 (let ((?x90 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1063X)))
 (let (($x96 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1063X)))
 (=> $x96 (= ?x90 ?x146)))))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1062X (_ BitVec 32)) )(let (($x94 (= input.ind-%var1062X (_ bv1 32))))
 (let (($x111 (= input.ind-%var1062X (_ bv0 32))))
 (let (($x99 (or $x111 $x94)))
 (let (($x96 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1062X)))
 (= $x96 $x99))))))
 ))
 (let (($x47 (and $x8 $x149)))
 (let (($x37 (and $x47 $x68)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x49 (and $x43 $x37)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x28 (and $x26 $x49)))
 (let (($x57 (and $x92 $x28)))
 (let (($x29 (= input.spec-%var-y-0.L2%23%bbentry ?x130)))
 (let (($x71 (and $x29 $x57)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x75 (and $x59 $x71)))
 (let (($x76 (and $x92 $x75)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x80 (and $x27 $x76)))
 (let (($x260 (=> $x80 $x86)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x64 (= (_ bv0 32) ?x127)))
 (let (($x86 (= $x64 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x183 (concat ?x166 (concat ?x191 (concat ?x165 ?x153)))))
 (let (($x181 (= ?x183 input.dst.llvm-%x)))
 (let (($x126 (= $x181 true)))
 (let (($x172 (= input.dst.llvm-%x ?x183)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x138)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x190 $x164)))
 (let (($x67 (and $x112 $x36)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x176 $x67)))
 (let (($x33 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x12)))))))
 (let (($x192 (and (and (and $x239 $x33) $x160) $x172)))
 (let (($x193 (= $x192 true)))
 (let (($x19 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x51 (= $x19 true)))
 (let (($x195 (and $x51 $x193)))
 (let (($x103 (and $x195 $x126)))
 (let (($x39 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x48 (or false $x39)))
 (let (($x113 (and $x48 $x103)))
 (let (($x84 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x78 (= input.spec-%tmpvar-10.L2%13%d $x84)))
 (let (($x188 (and $x78 $x113)))
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x34 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x23 ?x20 ?x60)))
 (let (($x69 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x16 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x73 (=> $x16 $x69)))
 (let (($x134 (or $x34 $x23)))
 (let ((?x128 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x128 (_ bv1 32))))
 (let (($x77 (= $x16 $x50)))
 (let (($x92 (= false false)))
 (let (($x118 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x110 (=> $x118 $x92)))
 (let (($x137 (= ?x128 (_ bv0 32))))
 (let (($x105 (= $x118 $x137)))
 (let (($x70 (and (and (and $x105 $x110) $x77) $x73)))
 (let (($x182 (and $x70 $x188)))
 (let (($x58 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x116 (ite $x58 ?x42 (_ bv0 32))))
 (let (($x11 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x130 (ite $x11 ?x20 ?x116)))
 (let (($x124 (= input.spec-%tmpvar-12.L2%17%d.2 ?x130)))
 (let (($x106 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x109 (=> $x106 $x124)))
 (let (($x104 (or $x58 $x11)))
 (let ((?x129 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x129 (_ bv1 32))))
 (let (($x135 (= $x106 $x121)))
 (let (($x81 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x132 (=> $x81 $x92)))
 (let (($x117 (= ?x129 (_ bv0 32))))
 (let (($x122 (= $x81 $x117)))
 (let (($x123 (and (and (and $x122 $x132) $x135) $x109)))
 (let (($x139 (and $x123 $x182)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x140 (and $x108 $x139)))
 (let (($x131 (forall ((input.ind-%var1021X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x111 (= input.ind-%var1021X (_ bv0 32))))
 (let ((?x145 (ite $x111 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x94 (= input.ind-%var1021X (_ bv1 32))))
 (let ((?x146 (ite $x94 ?x20 ?x145)))
 (let ((?x249 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1021X)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1021X)))
 (=> $x235 (= ?x249 ?x146)))))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1020X (_ BitVec 32)) )(let (($x94 (= input.ind-%var1020X (_ bv1 32))))
 (let (($x111 (= input.ind-%var1020X (_ bv0 32))))
 (let (($x99 (or $x111 $x94)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1020X)))
 (= $x235 $x99))))))
 ))
 (let (($x212 (and $x246 $x131)))
 (let (($x107 (and $x212 $x140)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x114 (and $x230 $x107)))
 (let (($x228 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1031X)))
 (=> $x221 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x215 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1030X)))
 (= $x221 false)))
 ))
 (let (($x233 (and $x215 $x228)))
 (let (($x141 (and $x233 $x114)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x125 (and $x210 $x141)))
 (let (($x218 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x142 (and $x218 $x125)))
 (let (($x207 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x63 (and $x207 $x142)))
 (let (($x204 (forall ((input.ind-%var1045X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x111 (= input.ind-%var1045X (_ bv0 32))))
 (let ((?x145 (ite $x111 ?x42 (_ bv0 32))))
 (let ((?x196 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1045X)))
 (let (($x167 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1045X)))
 (=> $x167 (= ?x196 ?x145))))))))
 ))
 (let (($x175 (forall ((input.ind-%var1044X (_ BitVec 32)) )(let (($x111 (= input.ind-%var1044X (_ bv0 32))))
 (let (($x167 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1044X)))
 (= $x167 $x111))))
 ))
 (let (($x205 (and $x175 $x204)))
 (let (($x65 (and $x205 $x63)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x38 (and $x159 $x65)))
 (let (($x158 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x9 (and $x158 $x38)))
 (let (($x157 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x68 (and $x157 $x9)))
 (let (($x149 (forall ((input.ind-%var1063X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x111 (= input.ind-%var1063X (_ bv0 32))))
 (let ((?x145 (ite $x111 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x94 (= input.ind-%var1063X (_ bv1 32))))
 (let ((?x146 (ite $x94 ?x20 ?x145)))
 (let ((?x90 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1063X)))
 (let (($x96 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1063X)))
 (=> $x96 (= ?x90 ?x146)))))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1062X (_ BitVec 32)) )(let (($x94 (= input.ind-%var1062X (_ bv1 32))))
 (let (($x111 (= input.ind-%var1062X (_ bv0 32))))
 (let (($x99 (or $x111 $x94)))
 (let (($x96 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1062X)))
 (= $x96 $x99))))))
 ))
 (let (($x47 (and $x8 $x149)))
 (let (($x37 (and $x47 $x68)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x49 (and $x43 $x37)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x28 (and $x26 $x49)))
 (let (($x57 (and $x92 $x28)))
 (let (($x29 (= input.spec-%var-y-0.L2%23%bbentry ?x130)))
 (let (($x71 (and $x29 $x57)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x75 (and $x59 $x71)))
 (let (($x76 (and $x92 $x75)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x80 (and $x27 $x76)))
 (let (($x260 (=> $x80 $x86)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x61 (= (_ bv0 32) ?x44)))
 (let (($x144 (= $x61 true)))
 (let ((?x211 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x232 (concat ?x237 (concat ?x242 (concat ?x217 ?x211)))))
 (let (($x240 (= ?x232 input.dst.llvm-%x)))
 (let (($x241 (= $x240 true)))
 (let (($x243 (= input.dst.llvm-%x ?x232)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x168)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x236 $x222)))
 (let (($x102 (and $x224 $x197)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x7 $x102)))
 (let (($x68 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x80)))))))
 (let (($x194 (and (and (and $x14 $x68) $x30) $x243)))
 (let (($x252 (= $x194 true)))
 (let (($x142 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x63 (not $x142)))
 (let (($x65 (= $x63 true)))
 (let (($x254 (and $x65 $x252)))
 (let (($x189 (and $x254 $x241)))
 (let (($x114 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x141 (or false $x114)))
 (let (($x163 (and $x141 $x189)))
 (let (($x139 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x140 (= input.spec-%tmpvar-10.L2%13%d $x139)))
 (let (($x169 (and $x140 $x163)))
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x34 ?x42 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x179 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x179 ?x23 ?x60)))
 (let (($x181 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x172 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x126 (=> $x172 $x181)))
 (let (($x165 (or $x34 $x179)))
 (let ((?x153 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x153 (_ bv1 32))))
 (let (($x193 (= $x172 $x192)))
 (let (($x6 (= false false)))
 (let (($x155 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x183 (=> $x155 $x6)))
 (let (($x186 (= ?x153 (_ bv0 32))))
 (let (($x161 (= $x155 $x186)))
 (let (($x188 (and (and (and $x161 $x183) $x193) $x126)))
 (let (($x245 (and $x188 $x169)))
 (let (($x116 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x130 (ite $x116 ?x42 (_ bv0 32))))
 (let (($x58 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x29 (ite $x58 ?x23 ?x130)))
 (let (($x162 (= input.spec-%tmpvar-12.L2%17%d.2 ?x29)))
 (let (($x36 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x177 (=> $x36 $x162)))
 (let (($x97 (or $x116 $x58)))
 (let ((?x154 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x154 (_ bv1 32))))
 (let (($x160 (= $x36 $x67)))
 (let (($x190 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x138 (=> $x190 $x6)))
 (let (($x164 (= ?x154 (_ bv0 32))))
 (let (($x112 (= $x190 $x164)))
 (let (($x178 (and (and (and $x112 $x138) $x160) $x177)))
 (let (($x255 (and $x178 $x245)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x198 (and $x17 $x255)))
 (let (($x239 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x148 (= input.ind-%var1153X (_ bv0 32))))
 (let ((?x204 (ite $x148 ?x42 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x147 (= input.ind-%var1153X (_ bv1 32))))
 (let ((?x205 (ite $x147 ?x23 ?x204)))
 (let ((?x238 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1153X)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1153X)))
 (=> $x74 (= ?x238 ?x205)))))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x147 (= input.ind-%var1152X (_ bv1 32))))
 (let (($x148 (= input.ind-%var1152X (_ bv0 32))))
 (let (($x149 (or $x148 $x147)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1152X)))
 (= $x74 $x149))))))
 ))
 (let (($x33 (and $x19 $x239)))
 (let (($x199 (and $x33 $x198)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x173 (and $x69 $x199)))
 (let (($x77 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1163X)))
 (=> $x136 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1163X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1162X)))
 (= $x136 false)))
 ))
 (let (($x83 (and $x98 $x77)))
 (let (($x174 (and $x83 $x173)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x200 (and $x121 $x174)))
 (let (($x133 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x185 (and $x133 $x200)))
 (let (($x122 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x201 (and $x122 $x185)))
 (let (($x104 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x148 (= input.ind-%var1177X (_ bv0 32))))
 (let ((?x204 (ite $x148 ?x42 (_ bv0 32))))
 (let ((?x180 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1177X)))
 (let (($x227 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1177X)))
 (=> $x227 (= ?x180 ?x204))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x148 (= input.ind-%var1176X (_ bv0 32))))
 (let (($x227 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1176X)))
 (= $x227 $x148))))
 ))
 (let (($x129 (and $x235 $x104)))
 (let (($x88 (and $x129 $x201)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x66 (and $x215 $x88)))
 (let (($x221 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x143 (and $x221 $x66)))
 (let (($x209 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x91 (and $x209 $x143)))
 (let (($x46 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x148 (= input.ind-%var1195X (_ bv0 32))))
 (let ((?x204 (ite $x148 ?x42 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x147 (= input.ind-%var1195X (_ bv1 32))))
 (let ((?x205 (ite $x147 ?x23 ?x204)))
 (let ((?x156 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1195X)))
 (let (($x99 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1195X)))
 (=> $x99 (= ?x156 ?x205)))))))))))
 ))
 (let (($x150 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x147 (= input.ind-%var1194X (_ bv1 32))))
 (let (($x148 (= input.ind-%var1194X (_ bv0 32))))
 (let (($x149 (or $x148 $x147)))
 (let (($x99 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1194X)))
 (= $x99 $x149))))))
 ))
 (let (($x208 (and $x150 $x46)))
 (let (($x93 (and $x208 $x91)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x62 (and $x15 $x93)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x87 (and $x32 $x62)))
 (let (($x35 (and $x6 $x87)))
 (let (($x24 (= input.spec-%var-y-0.L2%23%bbentry ?x29)))
 (let (($x95 (and $x24 $x35)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x89 (and $x18 $x95)))
 (let (($x45 (and $x6 $x89)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x31 (and $x27 $x45)))
 (let (($x187 (=> $x31 $x144)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x61 (= (_ bv0 32) ?x44)))
 (let (($x144 (= $x61 true)))
 (let ((?x211 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x232 (concat ?x237 (concat ?x242 (concat ?x217 ?x211)))))
 (let (($x240 (= ?x232 input.dst.llvm-%x)))
 (let (($x241 (= $x240 true)))
 (let (($x243 (= input.dst.llvm-%x ?x232)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x168)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x236 $x222)))
 (let (($x102 (and $x224 $x197)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x7 $x102)))
 (let (($x68 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x80)))))))
 (let (($x194 (and (and (and $x14 $x68) $x30) $x243)))
 (let (($x252 (= $x194 true)))
 (let (($x142 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x63 (not $x142)))
 (let (($x65 (= $x63 true)))
 (let (($x254 (and $x65 $x252)))
 (let (($x189 (and $x254 $x241)))
 (let (($x114 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x141 (or false $x114)))
 (let (($x163 (and $x141 $x189)))
 (let (($x139 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x140 (= input.spec-%tmpvar-10.L2%13%d $x139)))
 (let (($x169 (and $x140 $x163)))
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x34 ?x42 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x179 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x179 ?x23 ?x60)))
 (let (($x181 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x172 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x126 (=> $x172 $x181)))
 (let (($x165 (or $x34 $x179)))
 (let ((?x153 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x153 (_ bv1 32))))
 (let (($x193 (= $x172 $x192)))
 (let (($x6 (= false false)))
 (let (($x155 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x183 (=> $x155 $x6)))
 (let (($x186 (= ?x153 (_ bv0 32))))
 (let (($x161 (= $x155 $x186)))
 (let (($x188 (and (and (and $x161 $x183) $x193) $x126)))
 (let (($x245 (and $x188 $x169)))
 (let (($x116 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x130 (ite $x116 ?x42 (_ bv0 32))))
 (let (($x58 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x29 (ite $x58 ?x23 ?x130)))
 (let (($x162 (= input.spec-%tmpvar-12.L2%17%d.2 ?x29)))
 (let (($x36 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x177 (=> $x36 $x162)))
 (let (($x97 (or $x116 $x58)))
 (let ((?x154 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x154 (_ bv1 32))))
 (let (($x160 (= $x36 $x67)))
 (let (($x190 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x138 (=> $x190 $x6)))
 (let (($x164 (= ?x154 (_ bv0 32))))
 (let (($x112 (= $x190 $x164)))
 (let (($x178 (and (and (and $x112 $x138) $x160) $x177)))
 (let (($x255 (and $x178 $x245)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x198 (and $x17 $x255)))
 (let (($x239 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x148 (= input.ind-%var1153X (_ bv0 32))))
 (let ((?x204 (ite $x148 ?x42 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x147 (= input.ind-%var1153X (_ bv1 32))))
 (let ((?x205 (ite $x147 ?x23 ?x204)))
 (let ((?x238 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1153X)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1153X)))
 (=> $x74 (= ?x238 ?x205)))))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x147 (= input.ind-%var1152X (_ bv1 32))))
 (let (($x148 (= input.ind-%var1152X (_ bv0 32))))
 (let (($x149 (or $x148 $x147)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1152X)))
 (= $x74 $x149))))))
 ))
 (let (($x33 (and $x19 $x239)))
 (let (($x199 (and $x33 $x198)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x173 (and $x69 $x199)))
 (let (($x77 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1163X)))
 (=> $x136 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1163X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1162X)))
 (= $x136 false)))
 ))
 (let (($x83 (and $x98 $x77)))
 (let (($x174 (and $x83 $x173)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x200 (and $x121 $x174)))
 (let (($x133 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x185 (and $x133 $x200)))
 (let (($x122 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x201 (and $x122 $x185)))
 (let (($x104 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x148 (= input.ind-%var1177X (_ bv0 32))))
 (let ((?x204 (ite $x148 ?x42 (_ bv0 32))))
 (let ((?x180 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1177X)))
 (let (($x227 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1177X)))
 (=> $x227 (= ?x180 ?x204))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x148 (= input.ind-%var1176X (_ bv0 32))))
 (let (($x227 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1176X)))
 (= $x227 $x148))))
 ))
 (let (($x129 (and $x235 $x104)))
 (let (($x88 (and $x129 $x201)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x66 (and $x215 $x88)))
 (let (($x221 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x143 (and $x221 $x66)))
 (let (($x209 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x91 (and $x209 $x143)))
 (let (($x46 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x148 (= input.ind-%var1195X (_ bv0 32))))
 (let ((?x204 (ite $x148 ?x42 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x147 (= input.ind-%var1195X (_ bv1 32))))
 (let ((?x205 (ite $x147 ?x23 ?x204)))
 (let ((?x156 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1195X)))
 (let (($x99 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1195X)))
 (=> $x99 (= ?x156 ?x205)))))))))))
 ))
 (let (($x150 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x147 (= input.ind-%var1194X (_ bv1 32))))
 (let (($x148 (= input.ind-%var1194X (_ bv0 32))))
 (let (($x149 (or $x148 $x147)))
 (let (($x99 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1194X)))
 (= $x99 $x149))))))
 ))
 (let (($x208 (and $x150 $x46)))
 (let (($x93 (and $x208 $x91)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x62 (and $x15 $x93)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x87 (and $x32 $x62)))
 (let (($x35 (and $x6 $x87)))
 (let (($x24 (= input.spec-%var-y-0.L2%23%bbentry ?x29)))
 (let (($x95 (and $x24 $x35)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x89 (and $x18 $x95)))
 (let (($x45 (and $x6 $x89)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x31 (and $x27 $x45)))
 (let (($x187 (=> $x31 $x144)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x20 ?x42 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x25 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x25 ?x22 ?x60)))
 (let ((?x146 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x170 (= ?x146 ?x13)))
 (let (($x175 (= $x170 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x53 (concat ?x101 (concat ?x159 ?x120)))))
 (let (($x70 (= ?x73 input.dst.llvm-%x)))
 (let (($x48 (= $x70 true)))
 (let (($x85 (= input.dst.llvm-%x ?x73)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x84)))
 (let ((?x262 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x262)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x144 $x38)))
 (let (($x220 (and $x9 $x54)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x61 $x220)))
 (let (($x185 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x87)))))))
 (let (($x78 (and (and (and $x44 $x185) $x124) $x85)))
 (let (($x82 (= $x78 true)))
 (let (($x199 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x173 (= $x199 true)))
 (let (($x39 (and $x173 $x82)))
 (let (($x244 (and $x39 $x48)))
 (let (($x55 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x244)))
 (let (($x245 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x255 (= input.spec-%tmpvar-10.L2%13%d $x245)))
 (let (($x12 (and $x255 $x55)))
 (let (($x254 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x232 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x240 (=> $x232 $x254)))
 (let (($x219 (or $x20 $x25)))
 (let ((?x217 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x217 (_ bv1 32))))
 (let (($x194 (= $x232 $x243)))
 (let (($x59 (= false false)))
 (let (($x242 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x251 (=> $x242 $x59)))
 (let (($x211 (= ?x217 (_ bv0 32))))
 (let (($x225 (= $x242 $x211)))
 (let (($x163 (and (and (and $x225 $x251) $x194) $x240)))
 (let (($x256 (and $x163 $x12)))
 (let (($x130 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x29 (ite $x130 ?x42 (_ bv0 32))))
 (let (($x116 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x24 (ite $x116 ?x22 ?x29)))
 (let (($x253 (= input.spec-%tmpvar-12.L2%17%d.2 ?x24)))
 (let (($x168 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x213 (=> $x168 $x253)))
 (let (($x236 (or $x130 $x116)))
 (let ((?x250 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x250 (_ bv1 32))))
 (let (($x102 (= $x168 $x197)))
 (let (($x7 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x224 (=> $x7 $x59)))
 (let (($x152 (= ?x250 (_ bv0 32))))
 (let (($x222 (= $x7 $x152)))
 (let (($x248 (and (and (and $x222 $x224) $x102) $x213)))
 (let (($x249 (and $x248 $x256)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x223 (and $x234 $x249)))
 (let (($x260 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x207 (= input.ind-%var1285X (_ bv0 32))))
 (let ((?x104 (ite $x207 ?x42 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1285X (_ bv1 32))))
 (let ((?x129 (ite $x206 ?x22 ?x104)))
 (let ((?x28 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1285X)))
 (let (($x182 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1285X)))
 (=> $x182 (= ?x28 ?x129)))))))))))
 ))
 (let (($x142 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1284X (_ bv1 32))))
 (let (($x207 (= input.ind-%var1284X (_ bv0 32))))
 (let (($x46 (or $x207 $x206)))
 (let (($x182 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1284X)))
 (= $x182 $x46))))))
 ))
 (let (($x14 (and $x142 $x260)))
 (let (($x233 (and $x14 $x223)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x52 (and $x181 $x233)))
 (let (($x193 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1295X)))
 (=> $x119 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1295X) (_ bv0 32)))))
 ))
 (let (($x191 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1294X)))
 (= $x119 false)))
 ))
 (let (($x113 (and $x191 $x193)))
 (let (($x257 (and $x113 $x52)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x131 (and $x67 $x257)))
 (let (($x166 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x212 (and $x166 $x131)))
 (let (($x112 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x226 (and $x112 $x212)))
 (let (($x97 (forall ((input.ind-%var1309X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x207 (= input.ind-%var1309X (_ bv0 32))))
 (let ((?x104 (ite $x207 ?x42 (_ bv0 32))))
 (let ((?x258 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1309X)))
 (let (($x50 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1309X)))
 (=> $x50 (= ?x258 ?x104))))))))
 ))
 (let (($x74 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let (($x207 (= input.ind-%var1308X (_ bv0 32))))
 (let (($x50 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1308X)))
 (= $x50 $x207))))
 ))
 (let (($x154 (and $x74 $x97)))
 (let (($x229 (and $x154 $x226)))
 (let (($x98 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x100 (and $x98 $x229)))
 (let (($x136 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x246 (and $x136 $x100)))
 (let (($x106 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x108 (and $x106 $x246)))
 (let (($x92 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x207 (= input.ind-%var1327X (_ bv0 32))))
 (let ((?x104 (ite $x207 ?x42 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1327X (_ bv1 32))))
 (let ((?x129 (ite $x206 ?x22 ?x104)))
 (let ((?x214 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1327X)))
 (let (($x149 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1327X)))
 (=> $x149 (= ?x214 ?x129)))))))))))
 ))
 (let (($x218 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1326X (_ bv1 32))))
 (let (($x207 (= input.ind-%var1326X (_ bv0 32))))
 (let (($x46 (or $x207 $x206)))
 (let (($x149 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1326X)))
 (= $x149 $x46))))))
 ))
 (let (($x132 (and $x218 $x92)))
 (let (($x157 (and $x132 $x108)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x158 (and $x94 $x157)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x96 (and $x43 $x158)))
 (let (($x90 (and $x59 $x96)))
 (let (($x26 (= input.spec-%var-y-0.L2%23%bbentry ?x24)))
 (let (($x167 (and $x26 $x90)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x8 (and $x11 $x167)))
 (let (($x145 (and $x59 $x8)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x111 (and $x27 $x145)))
 (let (($x196 (=> $x111 $x175)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x20 ?x42 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x25 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x25 ?x22 ?x60)))
 (let ((?x146 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x170 (= ?x146 ?x13)))
 (let (($x175 (= $x170 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x53 (concat ?x101 (concat ?x159 ?x120)))))
 (let (($x70 (= ?x73 input.dst.llvm-%x)))
 (let (($x48 (= $x70 true)))
 (let (($x85 (= input.dst.llvm-%x ?x73)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x84)))
 (let ((?x262 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x262)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x144 $x38)))
 (let (($x220 (and $x9 $x54)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x61 $x220)))
 (let (($x185 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x87)))))))
 (let (($x78 (and (and (and $x44 $x185) $x124) $x85)))
 (let (($x82 (= $x78 true)))
 (let (($x199 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x173 (= $x199 true)))
 (let (($x39 (and $x173 $x82)))
 (let (($x244 (and $x39 $x48)))
 (let (($x55 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x244)))
 (let (($x245 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x255 (= input.spec-%tmpvar-10.L2%13%d $x245)))
 (let (($x12 (and $x255 $x55)))
 (let (($x254 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x232 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x240 (=> $x232 $x254)))
 (let (($x219 (or $x20 $x25)))
 (let ((?x217 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x217 (_ bv1 32))))
 (let (($x194 (= $x232 $x243)))
 (let (($x59 (= false false)))
 (let (($x242 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x251 (=> $x242 $x59)))
 (let (($x211 (= ?x217 (_ bv0 32))))
 (let (($x225 (= $x242 $x211)))
 (let (($x163 (and (and (and $x225 $x251) $x194) $x240)))
 (let (($x256 (and $x163 $x12)))
 (let (($x130 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x29 (ite $x130 ?x42 (_ bv0 32))))
 (let (($x116 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x24 (ite $x116 ?x22 ?x29)))
 (let (($x253 (= input.spec-%tmpvar-12.L2%17%d.2 ?x24)))
 (let (($x168 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x213 (=> $x168 $x253)))
 (let (($x236 (or $x130 $x116)))
 (let ((?x250 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x250 (_ bv1 32))))
 (let (($x102 (= $x168 $x197)))
 (let (($x7 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x224 (=> $x7 $x59)))
 (let (($x152 (= ?x250 (_ bv0 32))))
 (let (($x222 (= $x7 $x152)))
 (let (($x248 (and (and (and $x222 $x224) $x102) $x213)))
 (let (($x249 (and $x248 $x256)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x223 (and $x234 $x249)))
 (let (($x260 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x207 (= input.ind-%var1285X (_ bv0 32))))
 (let ((?x104 (ite $x207 ?x42 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1285X (_ bv1 32))))
 (let ((?x129 (ite $x206 ?x22 ?x104)))
 (let ((?x28 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1285X)))
 (let (($x182 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1285X)))
 (=> $x182 (= ?x28 ?x129)))))))))))
 ))
 (let (($x142 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1284X (_ bv1 32))))
 (let (($x207 (= input.ind-%var1284X (_ bv0 32))))
 (let (($x46 (or $x207 $x206)))
 (let (($x182 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1284X)))
 (= $x182 $x46))))))
 ))
 (let (($x14 (and $x142 $x260)))
 (let (($x233 (and $x14 $x223)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x52 (and $x181 $x233)))
 (let (($x193 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1295X)))
 (=> $x119 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1295X) (_ bv0 32)))))
 ))
 (let (($x191 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1294X)))
 (= $x119 false)))
 ))
 (let (($x113 (and $x191 $x193)))
 (let (($x257 (and $x113 $x52)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x131 (and $x67 $x257)))
 (let (($x166 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x212 (and $x166 $x131)))
 (let (($x112 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x226 (and $x112 $x212)))
 (let (($x97 (forall ((input.ind-%var1309X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x207 (= input.ind-%var1309X (_ bv0 32))))
 (let ((?x104 (ite $x207 ?x42 (_ bv0 32))))
 (let ((?x258 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1309X)))
 (let (($x50 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1309X)))
 (=> $x50 (= ?x258 ?x104))))))))
 ))
 (let (($x74 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let (($x207 (= input.ind-%var1308X (_ bv0 32))))
 (let (($x50 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1308X)))
 (= $x50 $x207))))
 ))
 (let (($x154 (and $x74 $x97)))
 (let (($x229 (and $x154 $x226)))
 (let (($x98 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x100 (and $x98 $x229)))
 (let (($x136 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x246 (and $x136 $x100)))
 (let (($x106 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x108 (and $x106 $x246)))
 (let (($x92 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x207 (= input.ind-%var1327X (_ bv0 32))))
 (let ((?x104 (ite $x207 ?x42 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1327X (_ bv1 32))))
 (let ((?x129 (ite $x206 ?x22 ?x104)))
 (let ((?x214 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1327X)))
 (let (($x149 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1327X)))
 (=> $x149 (= ?x214 ?x129)))))))))))
 ))
 (let (($x218 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1326X (_ bv1 32))))
 (let (($x207 (= input.ind-%var1326X (_ bv0 32))))
 (let (($x46 (or $x207 $x206)))
 (let (($x149 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1326X)))
 (= $x149 $x46))))))
 ))
 (let (($x132 (and $x218 $x92)))
 (let (($x157 (and $x132 $x108)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x158 (and $x94 $x157)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x96 (and $x43 $x158)))
 (let (($x90 (and $x59 $x96)))
 (let (($x26 (= input.spec-%var-y-0.L2%23%bbentry ?x24)))
 (let (($x167 (and $x26 $x90)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x8 (and $x11 $x167)))
 (let (($x145 (and $x59 $x8)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x111 (and $x27 $x145)))
 (let (($x196 (=> $x111 $x175)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x179 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x179 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x22 ?x20 ?x60)))
 (let ((?x72 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x210 (= ?x72 ?x13)))
 (let (($x81 (= $x210 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x165 (concat ?x126 (concat ?x171 ?x153)))))
 (let (($x76 (= ?x140 input.dst.llvm-%x)))
 (let (($x71 (= $x76 true)))
 (let (($x103 (= input.dst.llvm-%x ?x140)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x161)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x200 $x228)))
 (let (($x259 (and $x162 $x77)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x174 $x259)))
 (let (($x246 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x145)))))))
 (let (($x141 (and (and (and $x202 $x246) $x47) $x103)))
 (let (($x40 (= $x141 true)))
 (let (($x131 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x212 (not $x131)))
 (let (($x226 (= $x212 true)))
 (let (($x75 (and $x226 $x40)))
 (let (($x80 (and $x75 $x71)))
 (let (($x137 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x80)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x52 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x83 (and $x52 $x137)))
 (let (($x244 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x82 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x55 (=> $x82 $x244)))
 (let (($x118 (or $x179 $x22)))
 (let ((?x109 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x109 (_ bv1 32))))
 (let (($x70 (= $x82 $x39)))
 (let (($x18 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x78 (=> $x120 $x18)))
 (let (($x73 (= ?x109 (_ bv0 32))))
 (let (($x85 (= $x120 $x73)))
 (let (($x249 (and (and (and $x85 $x78) $x70) $x55)))
 (let (($x65 (and $x249 $x83)))
 (let (($x29 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x24 (ite $x29 ?x42 (_ bv0 32))))
 (let (($x130 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (ite $x130 ?x20 ?x24)))
 (let (($x53 (= input.spec-%tmpvar-12.L2%17%d.2 ?x26)))
 (let (($x124 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x128 (=> $x124 $x53)))
 (let (($x38 (or $x29 $x130)))
 (let ((?x9 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x9 (_ bv1 32))))
 (let (($x105 (= $x124 $x134)))
 (let (($x262 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x220 (=> $x262 $x18)))
 (let (($x84 (= ?x9 (_ bv0 32))))
 (let (($x54 (= $x262 $x84)))
 (let (($x115 (and (and (and $x54 $x220) $x105) $x128)))
 (let (($x127 (and $x115 $x65)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x239 (and $x144 $x127)))
 (let (($x41 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x122 (= input.ind-%var1417X (_ bv0 32))))
 (let ((?x97 (ite $x122 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x117 (= input.ind-%var1417X (_ bv1 32))))
 (let ((?x154 (ite $x117 ?x20 ?x97)))
 (let ((?x93 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1417X)))
 (let (($x169 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1417X)))
 (=> $x169 (= ?x93 ?x154)))))))))))
 ))
 (let (($x88 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x117 (= input.ind-%var1416X (_ bv1 32))))
 (let (($x122 (= input.ind-%var1416X (_ bv0 32))))
 (let (($x92 (or $x122 $x117)))
 (let (($x169 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1416X)))
 (= $x169 $x92))))))
 ))
 (let (($x201 (and $x88 $x41)))
 (let (($x33 (and $x201 $x239)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x16 (and $x254 $x33)))
 (let (($x194 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1427X)))
 (=> $x30 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1427X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1426X)))
 (= $x30 false)))
 ))
 (let (($x189 (and $x231 $x194)))
 (let (($x79 (and $x189 $x16)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x184 (and $x197 $x79)))
 (let (($x216 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x19 (and $x216 $x184)))
 (let (($x222 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x17 (and $x222 $x19)))
 (let (($x236 (forall ((input.ind-%var1441X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x122 (= input.ind-%var1441X (_ bv0 32))))
 (let ((?x97 (ite $x122 ?x42 (_ bv0 32))))
 (let ((?x64 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1441X)))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1441X)))
 (=> $x192 (= ?x64 ?x97))))))))
 ))
 (let (($x182 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let (($x122 (= input.ind-%var1440X (_ bv0 32))))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1440X)))
 (= $x192 $x122))))
 ))
 (let (($x250 (and $x182 $x236)))
 (let (($x209 (and $x250 $x17)))
 (let (($x191 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x221 (and $x191 $x209)))
 (let (($x119 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x99 (and $x119 $x221)))
 (let (($x36 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x156 (and $x36 $x99)))
 (let (($x6 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x122 (= input.ind-%var1459X (_ bv0 32))))
 (let ((?x97 (ite $x122 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x117 (= input.ind-%var1459X (_ bv1 32))))
 (let ((?x154 (ite $x117 ?x20 ?x97)))
 (let ((?x123 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1459X)))
 (let (($x46 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1459X)))
 (=> $x46 (= ?x123 ?x154)))))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x117 (= input.ind-%var1458X (_ bv1 32))))
 (let (($x122 (= input.ind-%var1458X (_ bv0 32))))
 (let (($x92 (or $x122 $x117)))
 (let (($x46 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1458X)))
 (= $x46 $x92))))))
 ))
 (let (($x138 (and $x133 $x6)))
 (let (($x227 (and $x138 $x156)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x150 (and $x147 $x227)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x204 (and $x15 $x150)))
 (let (($x148 (and $x18 $x204)))
 (let (($x32 (= input.spec-%var-y-0.L2%23%bbentry ?x26)))
 (let (($x205 (and $x32 $x148)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x230 (and $x58 $x205)))
 (let (($x235 (and $x18 $x230)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x180 (and $x27 $x235)))
 (let (($x51 (=> $x180 $x81)))
 (not $x51)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x179 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x60 (ite $x179 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x13 (ite $x22 ?x20 ?x60)))
 (let ((?x72 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x210 (= ?x72 ?x13)))
 (let (($x81 (= $x210 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x165 (concat ?x126 (concat ?x171 ?x153)))))
 (let (($x76 (= ?x140 input.dst.llvm-%x)))
 (let (($x71 (= $x76 true)))
 (let (($x103 (= input.dst.llvm-%x ?x140)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x161)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x200 $x228)))
 (let (($x259 (and $x162 $x77)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x174 $x259)))
 (let (($x246 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x145)))))))
 (let (($x141 (and (and (and $x202 $x246) $x47) $x103)))
 (let (($x40 (= $x141 true)))
 (let (($x131 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x212 (not $x131)))
 (let (($x226 (= $x212 true)))
 (let (($x75 (and $x226 $x40)))
 (let (($x80 (and $x75 $x71)))
 (let (($x137 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x80)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x52 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x83 (and $x52 $x137)))
 (let (($x244 (= input.spec-%tmpvar-16.L2%25%d.2 ?x13)))
 (let (($x82 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x55 (=> $x82 $x244)))
 (let (($x118 (or $x179 $x22)))
 (let ((?x109 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x109 (_ bv1 32))))
 (let (($x70 (= $x82 $x39)))
 (let (($x18 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x78 (=> $x120 $x18)))
 (let (($x73 (= ?x109 (_ bv0 32))))
 (let (($x85 (= $x120 $x73)))
 (let (($x249 (and (and (and $x85 $x78) $x70) $x55)))
 (let (($x65 (and $x249 $x83)))
 (let (($x29 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x24 (ite $x29 ?x42 (_ bv0 32))))
 (let (($x130 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (ite $x130 ?x20 ?x24)))
 (let (($x53 (= input.spec-%tmpvar-12.L2%17%d.2 ?x26)))
 (let (($x124 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x128 (=> $x124 $x53)))
 (let (($x38 (or $x29 $x130)))
 (let ((?x9 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x9 (_ bv1 32))))
 (let (($x105 (= $x124 $x134)))
 (let (($x262 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x220 (=> $x262 $x18)))
 (let (($x84 (= ?x9 (_ bv0 32))))
 (let (($x54 (= $x262 $x84)))
 (let (($x115 (and (and (and $x54 $x220) $x105) $x128)))
 (let (($x127 (and $x115 $x65)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x239 (and $x144 $x127)))
 (let (($x41 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x122 (= input.ind-%var1417X (_ bv0 32))))
 (let ((?x97 (ite $x122 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x117 (= input.ind-%var1417X (_ bv1 32))))
 (let ((?x154 (ite $x117 ?x20 ?x97)))
 (let ((?x93 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1417X)))
 (let (($x169 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1417X)))
 (=> $x169 (= ?x93 ?x154)))))))))))
 ))
 (let (($x88 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x117 (= input.ind-%var1416X (_ bv1 32))))
 (let (($x122 (= input.ind-%var1416X (_ bv0 32))))
 (let (($x92 (or $x122 $x117)))
 (let (($x169 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1416X)))
 (= $x169 $x92))))))
 ))
 (let (($x201 (and $x88 $x41)))
 (let (($x33 (and $x201 $x239)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x16 (and $x254 $x33)))
 (let (($x194 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1427X)))
 (=> $x30 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1427X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1426X)))
 (= $x30 false)))
 ))
 (let (($x189 (and $x231 $x194)))
 (let (($x79 (and $x189 $x16)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x184 (and $x197 $x79)))
 (let (($x216 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x19 (and $x216 $x184)))
 (let (($x222 (= ?x42 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x17 (and $x222 $x19)))
 (let (($x236 (forall ((input.ind-%var1441X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x122 (= input.ind-%var1441X (_ bv0 32))))
 (let ((?x97 (ite $x122 ?x42 (_ bv0 32))))
 (let ((?x64 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1441X)))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1441X)))
 (=> $x192 (= ?x64 ?x97))))))))
 ))
 (let (($x182 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let (($x122 (= input.ind-%var1440X (_ bv0 32))))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1440X)))
 (= $x192 $x122))))
 ))
 (let (($x250 (and $x182 $x236)))
 (let (($x209 (and $x250 $x17)))
 (let (($x191 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x221 (and $x191 $x209)))
 (let (($x119 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x99 (and $x119 $x221)))
 (let (($x36 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x156 (and $x36 $x99)))
 (let (($x6 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let ((?x42 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x122 (= input.ind-%var1459X (_ bv0 32))))
 (let ((?x97 (ite $x122 ?x42 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x117 (= input.ind-%var1459X (_ bv1 32))))
 (let ((?x154 (ite $x117 ?x20 ?x97)))
 (let ((?x123 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1459X)))
 (let (($x46 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1459X)))
 (=> $x46 (= ?x123 ?x154)))))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x117 (= input.ind-%var1458X (_ bv1 32))))
 (let (($x122 (= input.ind-%var1458X (_ bv0 32))))
 (let (($x92 (or $x122 $x117)))
 (let (($x46 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1458X)))
 (= $x46 $x92))))))
 ))
 (let (($x138 (and $x133 $x6)))
 (let (($x227 (and $x138 $x156)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x150 (and $x147 $x227)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x204 (and $x15 $x150)))
 (let (($x148 (and $x18 $x204)))
 (let (($x32 (= input.spec-%var-y-0.L2%23%bbentry ?x26)))
 (let (($x205 (and $x32 $x148)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x230 (and $x58 $x205)))
 (let (($x235 (and $x18 $x230)))
 (let (($x27 (= input.spec-%var-y-1.L2%31%bbentry ?x13)))
 (let (($x180 (and $x27 $x235)))
 (let (($x51 (=> $x180 $x81)))
 (not $x51)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x74 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x29 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x24 (ite $x29 ?x34 (_ bv0 32))))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x130 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (ite $x130 ?x25 ?x24)))
 (let (($x258 (= ?x26 ?x74)))
 (let (($x176 (= $x258 true)))
 (let ((?x242 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x91 (concat ?x143 (concat ?x102 ?x242)))))
 (let (($x87 (= ?x219 input.dst.llvm-%x)))
 (let (($x35 (= $x87 true)))
 (let (($x255 (= input.dst.llvm-%x ?x219)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x253)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x151 $x62)))
 (let (($x193 (and $x155 $x225)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x51 $x193)))
 (let (($x209 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x205)))))))
 (let (($x163 (and (and (and $x81 $x209) $x86) $x255)))
 (let (($x199 (= $x163 true)))
 (let (($x79 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x184 (= $x79 true)))
 (let (($x125 (and $x184 $x199)))
 (let (($x95 (and $x125 $x35)))
 (let (($x127 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x33 (and true $x127)))
 (let (($x89 (and $x33 $x95)))
 (let (($x239 (= input.spec-%tmpvar-10.L2%13%d $x127)))
 (let (($x28 (and $x239 $x89)))
 (let (($x10 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x10 ?x34 (_ bv0 32))))
 (let (($x229 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x60 (ite $x229 ?x25 ?x42)))
 (let (($x76 (= input.spec-%tmpvar-16.L2%25%d.2 ?x60)))
 (let (($x103 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x71 (=> $x103 $x76)))
 (let (($x171 (or $x10 $x229)))
 (let ((?x153 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x153 (_ bv1 32))))
 (let (($x40 (= $x103 $x141)))
 (let (($x27 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x140 (=> $x160 $x27)))
 (let (($x177 (= ?x153 (_ bv0 32))))
 (let (($x107 (= $x160 $x177)))
 (let (($x83 (and (and (and $x107 $x140) $x40) $x71)))
 (let (($x186 (and $x83 $x28)))
 (let (($x215 (= input.spec-%tmpvar-12.L2%17%d.2 ?x26)))
 (let (($x77 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x57 (=> $x77 $x215)))
 (let (($x139 (or $x29 $x130)))
 (let ((?x261 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x261 (_ bv1 32))))
 (let (($x47 (= $x77 $x259)))
 (let (($x200 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x161 (=> $x200 $x27)))
 (let (($x228 (= ?x261 (_ bv0 32))))
 (let (($x162 (= $x200 $x228)))
 (let (($x49 (and (and (and $x162 $x161) $x47) $x57)))
 (let (($x113 (and $x49 $x186)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x31 (and $x108 $x113)))
 (let (($x202 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= input.ind-%var1549X (_ bv0 32))))
 (let ((?x7 (ite $x164 ?x34 (_ bv0 32))))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1549X (_ bv1 32))))
 (let ((?x236 (ite $x154 ?x25 ?x7)))
 (let ((?x196 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1549X)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1549X)))
 (=> $x249 (= ?x196 ?x236)))))))))))
 ))
 (let (($x212 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1548X (_ bv1 32))))
 (let (($x164 (= input.ind-%var1548X (_ bv0 32))))
 (let (($x112 (or $x164 $x154)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1548X)))
 (= $x249 $x112))))))
 ))
 (let (($x246 (and $x212 $x202)))
 (let (($x45 (and $x246 $x31)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x260 (and $x48 $x45)))
 (let (($x39 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1559X)))
 (=> $x101 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1558X)))
 (= $x101 false)))
 ))
 (let (($x70 (and $x115 $x39)))
 (let (($x14 (and $x70 $x260)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x172 (and $x124 $x14)))
 (let (($x220 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x195 (and $x220 $x172)))
 (let (($x84 (= ?x34 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x68 (and $x84 $x195)))
 (let (($x262 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= input.ind-%var1573X (_ bv0 32))))
 (let ((?x7 (ite $x164 ?x34 (_ bv0 32))))
 (let ((?x93 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1573X)))
 (let (($x232 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1573X)))
 (=> $x232 (= ?x93 ?x7))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x164 (= input.ind-%var1572X (_ bv0 32))))
 (let (($x232 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1572X)))
 (= $x232 $x164))))
 ))
 (let (($x38 (and $x254 $x262)))
 (let (($x142 (and $x38 $x68)))
 (let (($x248 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x234 (and $x248 $x142)))
 (let (($x197 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x106 (and $x197 $x234)))
 (let (($x216 (= ?x25 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x136 (and $x216 $x106)))
 (let (($x222 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= input.ind-%var1591X (_ bv0 32))))
 (let ((?x7 (ite $x164 ?x34 (_ bv0 32))))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1591X (_ bv1 32))))
 (let ((?x236 (ite $x154 ?x25 ?x7)))
 (let ((?x119 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1591X)))
 (let (($x117 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1591X)))
 (=> $x117 (= ?x119 ?x236)))))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1590X (_ bv1 32))))
 (let (($x164 (= input.ind-%var1590X (_ bv0 32))))
 (let (($x112 (or $x164 $x154)))
 (let (($x117 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1590X)))
 (= $x117 $x112))))))
 ))
 (let (($x59 (and $x138 $x222)))
 (let (($x149 (and $x59 $x136)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x214 (and $x147 $x149)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x50 (and $x15 $x214)))
 (let (($x218 (and $x27 $x50)))
 (let (($x32 (= input.spec-%var-y-0.L2%23%bbentry ?x26)))
 (let (($x104 (and $x32 $x218)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x207 (and $x58 $x104)))
 (let (($x129 (and $x27 $x207)))
 (let (($x13 (= input.spec-%var-y-1.L2%31%bbentry ?x60)))
 (let (($x69 (and $x13 $x129)))
 (let (($x121 (=> $x69 $x176)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x74 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x29 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x24 (ite $x29 ?x34 (_ bv0 32))))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x130 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (ite $x130 ?x25 ?x24)))
 (let (($x258 (= ?x26 ?x74)))
 (let (($x176 (= $x258 true)))
 (let ((?x242 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x91 (concat ?x143 (concat ?x102 ?x242)))))
 (let (($x87 (= ?x219 input.dst.llvm-%x)))
 (let (($x35 (= $x87 true)))
 (let (($x255 (= input.dst.llvm-%x ?x219)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x253)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x151 $x62)))
 (let (($x193 (and $x155 $x225)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x51 $x193)))
 (let (($x209 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x205)))))))
 (let (($x163 (and (and (and $x81 $x209) $x86) $x255)))
 (let (($x199 (= $x163 true)))
 (let (($x79 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x184 (= $x79 true)))
 (let (($x125 (and $x184 $x199)))
 (let (($x95 (and $x125 $x35)))
 (let (($x127 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x33 (and true $x127)))
 (let (($x89 (and $x33 $x95)))
 (let (($x239 (= input.spec-%tmpvar-10.L2%13%d $x127)))
 (let (($x28 (and $x239 $x89)))
 (let (($x10 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x10 ?x34 (_ bv0 32))))
 (let (($x229 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x60 (ite $x229 ?x25 ?x42)))
 (let (($x76 (= input.spec-%tmpvar-16.L2%25%d.2 ?x60)))
 (let (($x103 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x71 (=> $x103 $x76)))
 (let (($x171 (or $x10 $x229)))
 (let ((?x153 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x153 (_ bv1 32))))
 (let (($x40 (= $x103 $x141)))
 (let (($x27 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x140 (=> $x160 $x27)))
 (let (($x177 (= ?x153 (_ bv0 32))))
 (let (($x107 (= $x160 $x177)))
 (let (($x83 (and (and (and $x107 $x140) $x40) $x71)))
 (let (($x186 (and $x83 $x28)))
 (let (($x215 (= input.spec-%tmpvar-12.L2%17%d.2 ?x26)))
 (let (($x77 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x57 (=> $x77 $x215)))
 (let (($x139 (or $x29 $x130)))
 (let ((?x261 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x261 (_ bv1 32))))
 (let (($x47 (= $x77 $x259)))
 (let (($x200 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x161 (=> $x200 $x27)))
 (let (($x228 (= ?x261 (_ bv0 32))))
 (let (($x162 (= $x200 $x228)))
 (let (($x49 (and (and (and $x162 $x161) $x47) $x57)))
 (let (($x113 (and $x49 $x186)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x31 (and $x108 $x113)))
 (let (($x202 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= input.ind-%var1549X (_ bv0 32))))
 (let ((?x7 (ite $x164 ?x34 (_ bv0 32))))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1549X (_ bv1 32))))
 (let ((?x236 (ite $x154 ?x25 ?x7)))
 (let ((?x196 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1549X)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1549X)))
 (=> $x249 (= ?x196 ?x236)))))))))))
 ))
 (let (($x212 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1548X (_ bv1 32))))
 (let (($x164 (= input.ind-%var1548X (_ bv0 32))))
 (let (($x112 (or $x164 $x154)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1548X)))
 (= $x249 $x112))))))
 ))
 (let (($x246 (and $x212 $x202)))
 (let (($x45 (and $x246 $x31)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x260 (and $x48 $x45)))
 (let (($x39 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1559X)))
 (=> $x101 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1558X)))
 (= $x101 false)))
 ))
 (let (($x70 (and $x115 $x39)))
 (let (($x14 (and $x70 $x260)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x172 (and $x124 $x14)))
 (let (($x220 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x195 (and $x220 $x172)))
 (let (($x84 (= ?x34 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x68 (and $x84 $x195)))
 (let (($x262 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= input.ind-%var1573X (_ bv0 32))))
 (let ((?x7 (ite $x164 ?x34 (_ bv0 32))))
 (let ((?x93 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1573X)))
 (let (($x232 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1573X)))
 (=> $x232 (= ?x93 ?x7))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x164 (= input.ind-%var1572X (_ bv0 32))))
 (let (($x232 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1572X)))
 (= $x232 $x164))))
 ))
 (let (($x38 (and $x254 $x262)))
 (let (($x142 (and $x38 $x68)))
 (let (($x248 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x234 (and $x248 $x142)))
 (let (($x197 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x106 (and $x197 $x234)))
 (let (($x216 (= ?x25 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x136 (and $x216 $x106)))
 (let (($x222 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= input.ind-%var1591X (_ bv0 32))))
 (let ((?x7 (ite $x164 ?x34 (_ bv0 32))))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1591X (_ bv1 32))))
 (let ((?x236 (ite $x154 ?x25 ?x7)))
 (let ((?x119 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1591X)))
 (let (($x117 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1591X)))
 (=> $x117 (= ?x119 ?x236)))))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1590X (_ bv1 32))))
 (let (($x164 (= input.ind-%var1590X (_ bv0 32))))
 (let (($x112 (or $x164 $x154)))
 (let (($x117 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1590X)))
 (= $x117 $x112))))))
 ))
 (let (($x59 (and $x138 $x222)))
 (let (($x149 (and $x59 $x136)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x214 (and $x147 $x149)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x50 (and $x15 $x214)))
 (let (($x218 (and $x27 $x50)))
 (let (($x32 (= input.spec-%var-y-0.L2%23%bbentry ?x26)))
 (let (($x104 (and $x32 $x218)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x207 (and $x58 $x104)))
 (let (($x129 (and $x27 $x207)))
 (let (($x13 (= input.spec-%var-y-1.L2%31%bbentry ?x60)))
 (let (($x69 (and $x13 $x129)))
 (let (($x121 (=> $x69 $x176)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x29 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x24 (ite $x29 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x130 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (ite $x130 ?x23 ?x24)))
 (let (($x36 (= ?x26 ?x64)))
 (let (($x37 (= $x36 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x233 (concat ?x52 (concat ?x53 ?x134)))))
 (let (($x145 (= ?x78 input.dst.llvm-%x)))
 (let (($x111 (= $x145 true)))
 (let (($x238 (= input.dst.llvm-%x ?x78)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x243)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x223 $x110)))
 (let (($x92 (and $x73 $x44)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x17 $x92)))
 (let (($x106 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x129)))))))
 (let (($x169 (and (and (and $x190 $x106) $x178) $x238)))
 (let (($x8 (= $x169 true)))
 (let (($x172 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x195 (not $x172)))
 (let (($x68 (= $x195 true)))
 (let (($x90 (and $x68 $x8)))
 (let (($x88 (and $x90 $x111)))
 (let (($x31 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x260 (and true $x31)))
 (let (($x231 (and $x260 $x88)))
 (let (($x45 (= input.spec-%tmpvar-10.L2%13%d $x31)))
 (let (($x194 (and $x45 $x231)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x35 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x163 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x95 (=> $x163 $x35)))
 (let (($x242 (or $x20 $x5)))
 (let ((?x237 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x237 (_ bv1 32))))
 (let (($x125 (= $x163 $x199)))
 (let (($x13 (= false false)))
 (let (($x102 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x255 (=> $x102 $x13)))
 (let (($x240 (= ?x237 (_ bv0 32))))
 (let (($x219 (= $x102 $x240)))
 (let (($x186 (and (and (and $x219 $x255) $x125) $x95)))
 (let (($x157 (and $x186 $x194)))
 (let (($x56 (= input.spec-%tmpvar-12.L2%17%d.2 ?x26)))
 (let (($x193 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x91 (=> $x193 $x56)))
 (let (($x245 (or $x29 $x130)))
 (let ((?x62 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x62 (_ bv1 32))))
 (let (($x198 (= $x193 $x86)))
 (let (($x100 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x225 (=> $x100 $x13)))
 (let (($x155 (= ?x62 (_ bv0 32))))
 (let (($x253 (= $x100 $x155)))
 (let (($x143 (and (and (and $x253 $x225) $x198) $x91)))
 (let (($x146 (and $x143 $x157)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x185 (and $x51 $x146)))
 (let (($x209 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x250 (= input.ind-%var1681X (_ bv0 32))))
 (let ((?x187 (ite $x250 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x236 (= input.ind-%var1681X (_ bv1 32))))
 (let ((?x262 (ite $x236 ?x23 ?x187)))
 (let ((?x227 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1681X)))
 (let (($x83 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1681X)))
 (=> $x83 (= ?x227 ?x262)))))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x236 (= input.ind-%var1680X (_ bv1 32))))
 (let (($x250 (= input.ind-%var1680X (_ bv0 32))))
 (let (($x152 (or $x250 $x236)))
 (let (($x83 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1680X)))
 (= $x83 $x152))))))
 ))
 (let (($x241 (and $x184 $x209)))
 (let (($x41 (and $x241 $x185)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x211 (and $x75 $x41)))
 (let (($x141 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1691X)))
 (=> $x183 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1691X) (_ bv0 32)))))
 ))
 (let (($x49 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1690X)))
 (= $x183 false)))
 ))
 (let (($x40 (and $x49 $x141)))
 (let (($x189 (and $x40 $x211)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x201 (and $x77 $x189)))
 (let (($x161 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x173 (and $x161 $x201)))
 (let (($x228 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x61 (and $x228 $x173)))
 (let (($x200 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x250 (= input.ind-%var1705X (_ bv0 32))))
 (let ((?x187 (ite $x250 ?x179 (_ bv0 32))))
 (let ((?x196 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1705X)))
 (let (($x12 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1705X)))
 (=> $x12 (= ?x196 ?x187))))))))
 ))
 (let (($x48 (forall ((input.ind-%var1704X (_ BitVec 32)) )(let (($x250 (= input.ind-%var1704X (_ bv0 32))))
 (let (($x12 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1704X)))
 (= $x12 $x250))))
 ))
 (let (($x139 (and $x48 $x200)))
 (let (($x166 (and $x139 $x61)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x67 (and $x128 $x166)))
 (let (($x124 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x206 (and $x124 $x67)))
 (let (($x220 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x133 (and $x220 $x206)))
 (let (($x84 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x250 (= input.ind-%var1723X (_ bv0 32))))
 (let ((?x187 (ite $x250 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x236 (= input.ind-%var1723X (_ bv1 32))))
 (let ((?x262 (ite $x236 ?x23 ?x187)))
 (let ((?x197 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1723X)))
 (let (($x154 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1723X)))
 (=> $x154 (= ?x197 ?x262)))))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x236 (= input.ind-%var1722X (_ bv1 32))))
 (let (($x250 (= input.ind-%var1722X (_ bv0 32))))
 (let (($x152 (or $x250 $x236)))
 (let (($x154 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1722X)))
 (= $x154 $x152))))))
 ))
 (let (($x54 (and $x59 $x84)))
 (let (($x191 (and $x54 $x133)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x132 (and $x147 $x191)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x123 (and $x15 $x132)))
 (let (($x46 (and $x13 $x123)))
 (let (($x32 (= input.spec-%var-y-0.L2%23%bbentry ?x26)))
 (let (($x97 (and $x32 $x46)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x192 (and $x58 $x97)))
 (let (($x181 (and $x13 $x192)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x182 (and $x60 $x181)))
 (let (($x66 (=> $x182 $x37)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x29 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x24 (ite $x29 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x130 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (ite $x130 ?x23 ?x24)))
 (let (($x36 (= ?x26 ?x64)))
 (let (($x37 (= $x36 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x233 (concat ?x52 (concat ?x53 ?x134)))))
 (let (($x145 (= ?x78 input.dst.llvm-%x)))
 (let (($x111 (= $x145 true)))
 (let (($x238 (= input.dst.llvm-%x ?x78)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x243)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x223 $x110)))
 (let (($x92 (and $x73 $x44)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x17 $x92)))
 (let (($x106 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x129)))))))
 (let (($x169 (and (and (and $x190 $x106) $x178) $x238)))
 (let (($x8 (= $x169 true)))
 (let (($x172 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x195 (not $x172)))
 (let (($x68 (= $x195 true)))
 (let (($x90 (and $x68 $x8)))
 (let (($x88 (and $x90 $x111)))
 (let (($x31 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x260 (and true $x31)))
 (let (($x231 (and $x260 $x88)))
 (let (($x45 (= input.spec-%tmpvar-10.L2%13%d $x31)))
 (let (($x194 (and $x45 $x231)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x35 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x163 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x95 (=> $x163 $x35)))
 (let (($x242 (or $x20 $x5)))
 (let ((?x237 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x237 (_ bv1 32))))
 (let (($x125 (= $x163 $x199)))
 (let (($x13 (= false false)))
 (let (($x102 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x255 (=> $x102 $x13)))
 (let (($x240 (= ?x237 (_ bv0 32))))
 (let (($x219 (= $x102 $x240)))
 (let (($x186 (and (and (and $x219 $x255) $x125) $x95)))
 (let (($x157 (and $x186 $x194)))
 (let (($x56 (= input.spec-%tmpvar-12.L2%17%d.2 ?x26)))
 (let (($x193 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x91 (=> $x193 $x56)))
 (let (($x245 (or $x29 $x130)))
 (let ((?x62 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x62 (_ bv1 32))))
 (let (($x198 (= $x193 $x86)))
 (let (($x100 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x225 (=> $x100 $x13)))
 (let (($x155 (= ?x62 (_ bv0 32))))
 (let (($x253 (= $x100 $x155)))
 (let (($x143 (and (and (and $x253 $x225) $x198) $x91)))
 (let (($x146 (and $x143 $x157)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x185 (and $x51 $x146)))
 (let (($x209 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x250 (= input.ind-%var1681X (_ bv0 32))))
 (let ((?x187 (ite $x250 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x236 (= input.ind-%var1681X (_ bv1 32))))
 (let ((?x262 (ite $x236 ?x23 ?x187)))
 (let ((?x227 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1681X)))
 (let (($x83 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1681X)))
 (=> $x83 (= ?x227 ?x262)))))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x236 (= input.ind-%var1680X (_ bv1 32))))
 (let (($x250 (= input.ind-%var1680X (_ bv0 32))))
 (let (($x152 (or $x250 $x236)))
 (let (($x83 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1680X)))
 (= $x83 $x152))))))
 ))
 (let (($x241 (and $x184 $x209)))
 (let (($x41 (and $x241 $x185)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x211 (and $x75 $x41)))
 (let (($x141 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1691X)))
 (=> $x183 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1691X) (_ bv0 32)))))
 ))
 (let (($x49 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1690X)))
 (= $x183 false)))
 ))
 (let (($x40 (and $x49 $x141)))
 (let (($x189 (and $x40 $x211)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x201 (and $x77 $x189)))
 (let (($x161 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x173 (and $x161 $x201)))
 (let (($x228 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x61 (and $x228 $x173)))
 (let (($x200 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x250 (= input.ind-%var1705X (_ bv0 32))))
 (let ((?x187 (ite $x250 ?x179 (_ bv0 32))))
 (let ((?x196 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1705X)))
 (let (($x12 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1705X)))
 (=> $x12 (= ?x196 ?x187))))))))
 ))
 (let (($x48 (forall ((input.ind-%var1704X (_ BitVec 32)) )(let (($x250 (= input.ind-%var1704X (_ bv0 32))))
 (let (($x12 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1704X)))
 (= $x12 $x250))))
 ))
 (let (($x139 (and $x48 $x200)))
 (let (($x166 (and $x139 $x61)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x67 (and $x128 $x166)))
 (let (($x124 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x206 (and $x124 $x67)))
 (let (($x220 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x133 (and $x220 $x206)))
 (let (($x84 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x250 (= input.ind-%var1723X (_ bv0 32))))
 (let ((?x187 (ite $x250 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x236 (= input.ind-%var1723X (_ bv1 32))))
 (let ((?x262 (ite $x236 ?x23 ?x187)))
 (let ((?x197 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1723X)))
 (let (($x154 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1723X)))
 (=> $x154 (= ?x197 ?x262)))))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x236 (= input.ind-%var1722X (_ bv1 32))))
 (let (($x250 (= input.ind-%var1722X (_ bv0 32))))
 (let (($x152 (or $x250 $x236)))
 (let (($x154 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1722X)))
 (= $x154 $x152))))))
 ))
 (let (($x54 (and $x59 $x84)))
 (let (($x191 (and $x54 $x133)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x132 (and $x147 $x191)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x123 (and $x15 $x132)))
 (let (($x46 (and $x13 $x123)))
 (let (($x32 (= input.spec-%var-y-0.L2%23%bbentry ?x26)))
 (let (($x97 (and $x32 $x46)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x192 (and $x58 $x97)))
 (let (($x181 (and $x13 $x192)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x182 (and $x60 $x181)))
 (let (($x66 (=> $x182 $x37)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x248 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x6 (not $x248)))
 (let (($x119 (or $x248 $x6)))
 (let (($x117 (= $x119 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x160 (concat ?x76 (concat ?x47 ?x171)))))
 (let (($x140 (= ?x127 input.dst.llvm-%x)))
 (let (($x33 (= $x140 true)))
 (let (($x82 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x170 (= $x82 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x142)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x64 $x66)))
 (let (($x65 (and $x63 $x234)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x173 $x65)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x132)))))))
 (let (($x118 (and $x182 $x204)))
 (let (($x188 (= $x118 true)))
 (let (($x112 (and $x188 $x170)))
 (let (($x71 (and $x112 $x33)))
 (let (($x185 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x41 (= input.spec-%tmpvar-10.L2%13%d $x185)))
 (let (($x16 (and $x41 $x71)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x111 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x169 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x88 (=> $x169 $x111)))
 (let (($x134 (or $x20 $x5)))
 (let ((?x85 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x85 (_ bv1 32))))
 (let (($x90 (= $x169 $x8)))
 (let (($x11 (= false false)))
 (let (($x53 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x238 (=> $x53 $x11)))
 (let (($x167 (= ?x85 (_ bv0 32))))
 (let (($x78 (= $x53 $x167)))
 (let (($x157 (and (and (and $x78 $x238) $x90) $x88)))
 (let (($x249 (and $x157 $x16)))
 (let (($x24 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x26 (ite $x24 ?x179 (_ bv0 32))))
 (let (($x29 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x32 (ite $x29 ?x23 ?x26)))
 (let (($x120 (= input.spec-%tmpvar-12.L2%17%d.2 ?x32)))
 (let (($x92 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x233 (=> $x92 $x120)))
 (let (($x98 (or $x24 $x29)))
 (let ((?x110 (ite $x98 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x110 (_ bv1 32))))
 (let (($x257 (= $x92 $x178)))
 (let (($x96 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x44 (=> $x96 $x11)))
 (let (($x73 (= ?x110 (_ bv0 32))))
 (let (($x243 (= $x96 $x73)))
 (let (($x52 (and (and (and $x243 $x44) $x257) $x233)))
 (let (($x150 (and $x52 $x249)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x205 (and $x17 $x150)))
 (let (($x106 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x9 (= input.ind-%var1813X (_ bv0 32))))
 (let ((?x200 (ite $x9 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x38 (= input.ind-%var1813X (_ bv1 32))))
 (let ((?x139 (ite $x38 ?x23 ?x200)))
 (let ((?x50 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1813X)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1813X)))
 (=> $x113 (= ?x50 ?x139)))))))))))
 ))
 (let (($x68 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x38 (= input.ind-%var1812X (_ bv1 32))))
 (let (($x9 (= input.ind-%var1812X (_ bv0 32))))
 (let (($x84 (or $x9 $x38)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1812X)))
 (= $x113 $x84))))))
 ))
 (let (($x55 (and $x68 $x106)))
 (let (($x230 (and $x55 $x205)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x235 (and $x35 $x230)))
 (let (($x125 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1823X)))
 (=> $x208 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1822X)))
 (= $x208 false)))
 ))
 (let (($x28 (and $x217 $x125)))
 (let (($x212 (and $x28 $x235)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x115 (and $x86 $x212)))
 (let (($x213 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x39 (and $x213 $x115)))
 (let (($x253 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x156 (and $x253 $x39)))
 (let (($x245 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x9 (= input.ind-%var1837X (_ bv0 32))))
 (let ((?x200 (ite $x9 ?x179 (_ bv0 32))))
 (let ((?x72 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1837X)))
 (let (($x103 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1837X)))
 (=> $x103 (= ?x72 ?x200))))))))
 ))
 (let (($x83 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x9 (= input.ind-%var1836X (_ bv0 32))))
 (let (($x103 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1836X)))
 (= $x103 $x9))))
 ))
 (let (($x62 (and $x83 $x245)))
 (let (($x180 (and $x62 $x156)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x175 (and $x49 $x180)))
 (let (($x183 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x202 (and $x183 $x175)))
 (let (($x165 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x109 (and $x165 $x202)))
 (let (($x162 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x9 (= input.ind-%var1855X (_ bv0 32))))
 (let ((?x200 (ite $x9 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x38 (= input.ind-%var1855X (_ bv1 32))))
 (let ((?x139 (ite $x38 ?x23 ?x200)))
 (let ((?x101 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1855X)))
 (let (($x152 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1855X)))
 (=> $x152 (= ?x101 ?x139)))))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1854X (_ BitVec 32)) )(let (($x38 (= input.ind-%var1854X (_ bv1 32))))
 (let (($x9 (= input.ind-%var1854X (_ bv0 32))))
 (let (($x84 (or $x9 $x38)))
 (let (($x152 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1854X)))
 (= $x152 $x84))))))
 ))
 (let (($x27 (and $x18 $x162)))
 (let (($x70 (and $x27 $x109)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x246 (and $x164 $x70)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x131 (and $x94 $x246)))
 (let (($x114 (and $x11 $x131)))
 (let (($x43 (= input.spec-%var-y-0.L2%23%bbentry ?x32)))
 (let (($x224 (and $x43 $x114)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x168 (and $x116 $x224)))
 (let (($x122 (and $x11 $x168)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x138 (and $x60 $x122)))
 (let (($x7 (=> $x138 $x117)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x248 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x6 (not $x248)))
 (let (($x119 (or $x248 $x6)))
 (let (($x117 (= $x119 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x160 (concat ?x76 (concat ?x47 ?x171)))))
 (let (($x140 (= ?x127 input.dst.llvm-%x)))
 (let (($x33 (= $x140 true)))
 (let (($x82 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x170 (= $x82 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x142)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x64 $x66)))
 (let (($x65 (and $x63 $x234)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x173 $x65)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x132)))))))
 (let (($x118 (and $x182 $x204)))
 (let (($x188 (= $x118 true)))
 (let (($x112 (and $x188 $x170)))
 (let (($x71 (and $x112 $x33)))
 (let (($x185 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x41 (= input.spec-%tmpvar-10.L2%13%d $x185)))
 (let (($x16 (and $x41 $x71)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x111 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x169 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x88 (=> $x169 $x111)))
 (let (($x134 (or $x20 $x5)))
 (let ((?x85 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x85 (_ bv1 32))))
 (let (($x90 (= $x169 $x8)))
 (let (($x11 (= false false)))
 (let (($x53 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x238 (=> $x53 $x11)))
 (let (($x167 (= ?x85 (_ bv0 32))))
 (let (($x78 (= $x53 $x167)))
 (let (($x157 (and (and (and $x78 $x238) $x90) $x88)))
 (let (($x249 (and $x157 $x16)))
 (let (($x24 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x26 (ite $x24 ?x179 (_ bv0 32))))
 (let (($x29 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x32 (ite $x29 ?x23 ?x26)))
 (let (($x120 (= input.spec-%tmpvar-12.L2%17%d.2 ?x32)))
 (let (($x92 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x233 (=> $x92 $x120)))
 (let (($x98 (or $x24 $x29)))
 (let ((?x110 (ite $x98 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x110 (_ bv1 32))))
 (let (($x257 (= $x92 $x178)))
 (let (($x96 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x44 (=> $x96 $x11)))
 (let (($x73 (= ?x110 (_ bv0 32))))
 (let (($x243 (= $x96 $x73)))
 (let (($x52 (and (and (and $x243 $x44) $x257) $x233)))
 (let (($x150 (and $x52 $x249)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x205 (and $x17 $x150)))
 (let (($x106 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x9 (= input.ind-%var1813X (_ bv0 32))))
 (let ((?x200 (ite $x9 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x38 (= input.ind-%var1813X (_ bv1 32))))
 (let ((?x139 (ite $x38 ?x23 ?x200)))
 (let ((?x50 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1813X)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1813X)))
 (=> $x113 (= ?x50 ?x139)))))))))))
 ))
 (let (($x68 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x38 (= input.ind-%var1812X (_ bv1 32))))
 (let (($x9 (= input.ind-%var1812X (_ bv0 32))))
 (let (($x84 (or $x9 $x38)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1812X)))
 (= $x113 $x84))))))
 ))
 (let (($x55 (and $x68 $x106)))
 (let (($x230 (and $x55 $x205)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x235 (and $x35 $x230)))
 (let (($x125 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1823X)))
 (=> $x208 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1822X)))
 (= $x208 false)))
 ))
 (let (($x28 (and $x217 $x125)))
 (let (($x212 (and $x28 $x235)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x115 (and $x86 $x212)))
 (let (($x213 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x39 (and $x213 $x115)))
 (let (($x253 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x156 (and $x253 $x39)))
 (let (($x245 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x9 (= input.ind-%var1837X (_ bv0 32))))
 (let ((?x200 (ite $x9 ?x179 (_ bv0 32))))
 (let ((?x72 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1837X)))
 (let (($x103 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1837X)))
 (=> $x103 (= ?x72 ?x200))))))))
 ))
 (let (($x83 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x9 (= input.ind-%var1836X (_ bv0 32))))
 (let (($x103 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1836X)))
 (= $x103 $x9))))
 ))
 (let (($x62 (and $x83 $x245)))
 (let (($x180 (and $x62 $x156)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x175 (and $x49 $x180)))
 (let (($x183 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x202 (and $x183 $x175)))
 (let (($x165 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x109 (and $x165 $x202)))
 (let (($x162 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x9 (= input.ind-%var1855X (_ bv0 32))))
 (let ((?x200 (ite $x9 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x38 (= input.ind-%var1855X (_ bv1 32))))
 (let ((?x139 (ite $x38 ?x23 ?x200)))
 (let ((?x101 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1855X)))
 (let (($x152 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1855X)))
 (=> $x152 (= ?x101 ?x139)))))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1854X (_ BitVec 32)) )(let (($x38 (= input.ind-%var1854X (_ bv1 32))))
 (let (($x9 (= input.ind-%var1854X (_ bv0 32))))
 (let (($x84 (or $x9 $x38)))
 (let (($x152 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1854X)))
 (= $x152 $x84))))))
 ))
 (let (($x27 (and $x18 $x162)))
 (let (($x70 (and $x27 $x109)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x246 (and $x164 $x70)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x131 (and $x94 $x246)))
 (let (($x114 (and $x11 $x131)))
 (let (($x43 (= input.spec-%var-y-0.L2%23%bbentry ?x32)))
 (let (($x224 (and $x43 $x114)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x168 (and $x116 $x224)))
 (let (($x122 (and $x11 $x168)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x138 (and $x60 $x122)))
 (let (($x7 (=> $x138 $x117)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x135 (not $x99)))
 (let (($x174 (or $x99 $x135)))
 (let (($x252 (not $x174)))
 (let (($x180 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x196 (and true $x180)))
 (let (($x48 (not $x180)))
 (let (($x108 (or $x48 $x196)))
 (let (($x254 (or $x108 $x252)))
 (let (($x93 (= $x254 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x79 (concat ?x14 (concat ?x207 ?x95)))))
 (let (($x129 (= ?x218 input.dst.llvm-%x)))
 (let (($x69 (= $x129 true)))
 (let (($x198 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x251 (= $x198 true)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x219)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x189 $x126)))
 (let (($x81 (and $x56 $x141)))
 (let (($x246 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x246 $x81)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x248)))))))
 (let (($x128 (and $x211 $x222)))
 (let (($x102 (= $x128 true)))
 (let (($x91 (and $x102 $x251)))
 (let (($x74 (and $x91 $x69)))
 (let (($x175 (= input.spec-%tmpvar-10.L2%13%d $x180)))
 (let (($x227 (and $x175 $x74)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x230 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x16 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x235 (=> $x16 $x230)))
 (let (($x239 (or $x20 $x5)))
 (let ((?x127 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x127 (_ bv1 32))))
 (let (($x150 (= $x16 $x249)))
 (let (($x58 (= false false)))
 (let (($x215 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x71 (=> $x215 $x58)))
 (let (($x140 (= ?x127 (_ bv0 32))))
 (let (($x33 (= $x215 $x140)))
 (let (($x39 (and (and (and $x33 $x71) $x150) $x235)))
 (let (($x153 (and $x39 $x227)))
 (let (($x26 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x32 (ite $x26 ?x179 (_ bv0 32))))
 (let (($x24 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x43 (ite $x24 ?x23 ?x32)))
 (let (($x107 (= input.spec-%tmpvar-12.L2%17%d.2 ?x43)))
 (let (($x112 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x210 (=> $x112 $x107)))
 (let (($x118 (or $x26 $x24)))
 (let ((?x188 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x188 (_ bv1 32))))
 (let (($x148 (= $x112 $x30)))
 (let (($x204 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x170 (=> $x204 $x58)))
 (let (($x177 (= ?x188 (_ bv0 32))))
 (let (($x82 (= $x204 $x177)))
 (let (($x47 (and (and (and $x82 $x170) $x148) $x210)))
 (let (($x40 (and $x47 $x153)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x214 (and $x234 $x40)))
 (let (($x66 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x228 (= input.ind-%var1945X (_ bv0 32))))
 (let ((?x245 (ite $x228 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x261 (= input.ind-%var1945X (_ bv1 32))))
 (let ((?x62 (ite $x261 ?x23 ?x245)))
 (let ((?x123 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1945X)))
 (let (($x146 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1945X)))
 (=> $x146 (= ?x123 ?x62)))))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x261 (= input.ind-%var1944X (_ bv1 32))))
 (let (($x228 (= input.ind-%var1944X (_ bv0 32))))
 (let (($x162 (or $x228 $x261)))
 (let (($x146 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1944X)))
 (= $x146 $x162))))))
 ))
 (let (($x63 (and $x133 $x66)))
 (let (($x258 (and $x63 $x214)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x209 (and $x111 $x258)))
 (let (($x90 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1955X)))
 (=> $x159 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1955X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1954X)))
 (= $x159 false)))
 ))
 (let (($x194 (and $x105 $x90)))
 (let (($x241 (and $x194 $x209)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x80 (and $x178 $x241)))
 (let (($x158 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x137 (and $x158 $x80)))
 (let (($x243 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x221 (and $x243 $x137)))
 (let (($x98 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x228 (= input.ind-%var1969X (_ bv0 32))))
 (let ((?x245 (ite $x228 ?x179 (_ bv0 32))))
 (let ((?x176 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1969X)))
 (let (($x199 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1969X)))
 (=> $x199 (= ?x176 ?x245))))))))
 ))
 (let (($x113 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x228 (= input.ind-%var1968X (_ bv0 32))))
 (let (($x199 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1968X)))
 (= $x199 $x228))))
 ))
 (let (($x110 (and $x113 $x98)))
 (let (($x184 (and $x110 $x221)))
 (let (($x217 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x51 (and $x217 $x184)))
 (let (($x208 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x220 (and $x208 $x51)))
 (let (($x193 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x124 (and $x193 $x220)))
 (let (($x13 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x228 (= input.ind-%var1987X (_ bv0 32))))
 (let ((?x245 (ite $x228 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x261 (= input.ind-%var1987X (_ bv1 32))))
 (let ((?x62 (ite $x261 ?x23 ?x245)))
 (let ((?x57 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1987X)))
 (let (($x84 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1987X)))
 (=> $x84 (= ?x57 ?x62)))))))))))
 ))
 (let (($x161 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x261 (= input.ind-%var1986X (_ bv1 32))))
 (let (($x228 (= input.ind-%var1986X (_ bv0 32))))
 (let (($x162 (or $x228 $x261)))
 (let (($x84 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1986X)))
 (= $x84 $x162))))))
 ))
 (let (($x225 (and $x161 $x13)))
 (let (($x154 (and $x225 $x124)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x197 (and $x236 $x154)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x12 (and $x147 $x197)))
 (let (($x59 (and $x58 $x12)))
 (let (($x15 (= input.spec-%var-y-0.L2%23%bbentry ?x43)))
 (let (($x187 (and $x15 $x59)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x250 (and $x130 $x187)))
 (let (($x262 (and $x58 $x250)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x256 (and $x60 $x262)))
 (let (($x216 (=> $x256 $x93)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x135 (not $x99)))
 (let (($x174 (or $x99 $x135)))
 (let (($x252 (not $x174)))
 (let (($x180 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x196 (and true $x180)))
 (let (($x48 (not $x180)))
 (let (($x108 (or $x48 $x196)))
 (let (($x254 (or $x108 $x252)))
 (let (($x93 (= $x254 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x79 (concat ?x14 (concat ?x207 ?x95)))))
 (let (($x129 (= ?x218 input.dst.llvm-%x)))
 (let (($x69 (= $x129 true)))
 (let (($x198 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x251 (= $x198 true)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x219)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x189 $x126)))
 (let (($x81 (and $x56 $x141)))
 (let (($x246 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x246 $x81)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x248)))))))
 (let (($x128 (and $x211 $x222)))
 (let (($x102 (= $x128 true)))
 (let (($x91 (and $x102 $x251)))
 (let (($x74 (and $x91 $x69)))
 (let (($x175 (= input.spec-%tmpvar-10.L2%13%d $x180)))
 (let (($x227 (and $x175 $x74)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x230 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x16 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x235 (=> $x16 $x230)))
 (let (($x239 (or $x20 $x5)))
 (let ((?x127 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x127 (_ bv1 32))))
 (let (($x150 (= $x16 $x249)))
 (let (($x58 (= false false)))
 (let (($x215 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x71 (=> $x215 $x58)))
 (let (($x140 (= ?x127 (_ bv0 32))))
 (let (($x33 (= $x215 $x140)))
 (let (($x39 (and (and (and $x33 $x71) $x150) $x235)))
 (let (($x153 (and $x39 $x227)))
 (let (($x26 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x32 (ite $x26 ?x179 (_ bv0 32))))
 (let (($x24 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x43 (ite $x24 ?x23 ?x32)))
 (let (($x107 (= input.spec-%tmpvar-12.L2%17%d.2 ?x43)))
 (let (($x112 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x210 (=> $x112 $x107)))
 (let (($x118 (or $x26 $x24)))
 (let ((?x188 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x188 (_ bv1 32))))
 (let (($x148 (= $x112 $x30)))
 (let (($x204 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x170 (=> $x204 $x58)))
 (let (($x177 (= ?x188 (_ bv0 32))))
 (let (($x82 (= $x204 $x177)))
 (let (($x47 (and (and (and $x82 $x170) $x148) $x210)))
 (let (($x40 (and $x47 $x153)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x214 (and $x234 $x40)))
 (let (($x66 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x228 (= input.ind-%var1945X (_ bv0 32))))
 (let ((?x245 (ite $x228 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x261 (= input.ind-%var1945X (_ bv1 32))))
 (let ((?x62 (ite $x261 ?x23 ?x245)))
 (let ((?x123 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1945X)))
 (let (($x146 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1945X)))
 (=> $x146 (= ?x123 ?x62)))))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x261 (= input.ind-%var1944X (_ bv1 32))))
 (let (($x228 (= input.ind-%var1944X (_ bv0 32))))
 (let (($x162 (or $x228 $x261)))
 (let (($x146 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1944X)))
 (= $x146 $x162))))))
 ))
 (let (($x63 (and $x133 $x66)))
 (let (($x258 (and $x63 $x214)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x209 (and $x111 $x258)))
 (let (($x90 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1955X)))
 (=> $x159 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1955X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1954X)))
 (= $x159 false)))
 ))
 (let (($x194 (and $x105 $x90)))
 (let (($x241 (and $x194 $x209)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x80 (and $x178 $x241)))
 (let (($x158 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x137 (and $x158 $x80)))
 (let (($x243 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x221 (and $x243 $x137)))
 (let (($x98 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x228 (= input.ind-%var1969X (_ bv0 32))))
 (let ((?x245 (ite $x228 ?x179 (_ bv0 32))))
 (let ((?x176 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1969X)))
 (let (($x199 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1969X)))
 (=> $x199 (= ?x176 ?x245))))))))
 ))
 (let (($x113 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x228 (= input.ind-%var1968X (_ bv0 32))))
 (let (($x199 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1968X)))
 (= $x199 $x228))))
 ))
 (let (($x110 (and $x113 $x98)))
 (let (($x184 (and $x110 $x221)))
 (let (($x217 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x51 (and $x217 $x184)))
 (let (($x208 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x220 (and $x208 $x51)))
 (let (($x193 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x124 (and $x193 $x220)))
 (let (($x13 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x228 (= input.ind-%var1987X (_ bv0 32))))
 (let ((?x245 (ite $x228 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x261 (= input.ind-%var1987X (_ bv1 32))))
 (let ((?x62 (ite $x261 ?x23 ?x245)))
 (let ((?x57 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1987X)))
 (let (($x84 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1987X)))
 (=> $x84 (= ?x57 ?x62)))))))))))
 ))
 (let (($x161 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x261 (= input.ind-%var1986X (_ bv1 32))))
 (let (($x228 (= input.ind-%var1986X (_ bv0 32))))
 (let (($x162 (or $x228 $x261)))
 (let (($x84 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1986X)))
 (= $x84 $x162))))))
 ))
 (let (($x225 (and $x161 $x13)))
 (let (($x154 (and $x225 $x124)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x197 (and $x236 $x154)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x12 (and $x147 $x197)))
 (let (($x59 (and $x58 $x12)))
 (let (($x15 (= input.spec-%var-y-0.L2%23%bbentry ?x43)))
 (let (($x187 (and $x15 $x59)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x250 (and $x130 $x187)))
 (let (($x262 (and $x58 $x250)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x256 (and $x60 $x262)))
 (let (($x216 (=> $x256 $x93)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x149 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x77 (= (_ bv0 32) ?x149)))
 (let (($x100 (= $x77 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x231 (concat ?x97 (concat ?x238 ?x244)))))
 (let (($x173 (= ?x166 input.dst.llvm-%x)))
 (let (($x50 (= $x173 true)))
 (let (($x157 (= input.dst.llvm-%x ?x166)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x190)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x46 $x78)))
 (let (($x49 (and $x125 $x54)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x185 $x49)))
 (let (($x262 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x174 $x252)))))))
 (let (($x192 (and (and (and $x109 $x262) $x53) $x157)))
 (let (($x182 (= $x192 true)))
 (let (($x12 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x59 (= $x12 true)))
 (let (($x201 (and $x59 $x182)))
 (let (($x240 (and $x201 $x50)))
 (let (($x124 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x154 (or false $x124)))
 (let (($x28 (and $x154 $x240)))
 (let (($x184 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x51 (= input.spec-%tmpvar-10.L2%13%d $x184)))
 (let (($x206 (and $x51 $x28)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x258 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x227 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x209 (=> $x227 $x258)))
 (let (($x186 (or $x20 $x5)))
 (let ((?x218 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x218 (_ bv1 32))))
 (let (($x40 (= $x227 $x153)))
 (let (($x116 (= false false)))
 (let (($x242 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x74 (=> $x242 $x116)))
 (let (($x129 (= ?x218 (_ bv0 32))))
 (let (($x69 (= $x242 $x129)))
 (let (($x137 (and (and (and $x69 $x74) $x40) $x209)))
 (let (($x64 (and $x137 $x206)))
 (let (($x32 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x43 (ite $x32 ?x179 (_ bv0 32))))
 (let (($x26 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x15 (ite $x26 ?x23 ?x43)))
 (let (($x45 (= input.spec-%tmpvar-12.L2%17%d.2 ?x15)))
 (let (($x91 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x89 (=> $x91 $x45)))
 (let (($x128 (or $x32 $x26)))
 (let ((?x102 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x102 (_ bv1 32))))
 (let (($x172 (= $x91 $x255)))
 (let (($x222 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x251 (=> $x222 $x116)))
 (let (($x237 (= ?x102 (_ bv0 32))))
 (let (($x198 (= $x222 $x237)))
 (let (($x207 (and (and (and $x198 $x251) $x172) $x89)))
 (let (($x106 (and $x207 $x64)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x55 (and $x141 $x106)))
 (let (($x126 (forall ((input.ind-%var2077X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= input.ind-%var2077X (_ bv0 32))))
 (let ((?x98 (ite $x253 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x155 (= input.ind-%var2077X (_ bv1 32))))
 (let ((?x110 (ite $x155 ?x23 ?x98)))
 (let ((?x6 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2077X)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2077X)))
 (=> $x156 (= ?x6 ?x110)))))))))))
 ))
 (let (($x122 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let (($x155 (= input.ind-%var2076X (_ bv1 32))))
 (let (($x253 (= input.ind-%var2076X (_ bv0 32))))
 (let (($x13 (or $x253 $x155)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2076X)))
 (= $x156 $x13))))))
 ))
 (let (($x56 (and $x122 $x126)))
 (let (($x163 (and $x56 $x55)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x87 (and $x230 $x163)))
 (let (($x150 (forall ((input.ind-%var2087X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2087X)))
 (=> $x160 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2087X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var2086X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2086X)))
 (= $x160 false)))
 ))
 (let (($x115 (and $x171 $x150)))
 (let (($x136 (and $x115 $x87)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x68 (and $x30 $x136)))
 (let (($x76 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x17 (and $x76 $x68)))
 (let (($x82 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x82 $x17)))
 (let (($x118 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= input.ind-%var2101X (_ bv0 32))))
 (let ((?x98 (ite $x253 ?x179 (_ bv0 32))))
 (let ((?x36 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2101X)))
 (let (($x8 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2101X)))
 (=> $x8 (= ?x36 ?x98))))))))
 ))
 (let (($x146 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x253 (= input.ind-%var2100X (_ bv0 32))))
 (let (($x8 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2100X)))
 (= $x8 $x253))))
 ))
 (let (($x188 (and $x146 $x118)))
 (let (($x183 (and $x188 $x165)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x152 (and $x105 $x183)))
 (let (($x159 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x101 (and $x159 $x152)))
 (let (($x92 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x103 (and $x92 $x101)))
 (let (($x11 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= input.ind-%var2119X (_ bv0 32))))
 (let ((?x98 (ite $x253 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x155 (= input.ind-%var2119X (_ bv1 32))))
 (let ((?x110 (ite $x155 ?x23 ?x98)))
 (let ((?x143 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2119X)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2119X)))
 (=> $x162 (= ?x143 ?x110)))))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x155 (= input.ind-%var2118X (_ bv1 32))))
 (let (($x253 (= input.ind-%var2118X (_ bv0 32))))
 (let (($x13 (or $x253 $x155)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2118X)))
 (= $x162 $x13))))))
 ))
 (let (($x44 (and $x213 $x11)))
 (let (($x18 (and $x44 $x103)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x200 (and $x38 $x18)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x9 (and $x164 $x200)))
 (let (($x139 (and $x116 $x9)))
 (let (($x94 (= input.spec-%var-y-0.L2%23%bbentry ?x15)))
 (let (($x75 (and $x94 $x139)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x83 (and $x29 $x75)))
 (let (($x72 (and $x116 $x83)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x151 (and $x60 $x72)))
 (let (($x226 (=> $x151 $x100)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x149 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x77 (= (_ bv0 32) ?x149)))
 (let (($x100 (= $x77 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x231 (concat ?x97 (concat ?x238 ?x244)))))
 (let (($x173 (= ?x166 input.dst.llvm-%x)))
 (let (($x50 (= $x173 true)))
 (let (($x157 (= input.dst.llvm-%x ?x166)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x190)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x46 $x78)))
 (let (($x49 (and $x125 $x54)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x185 $x49)))
 (let (($x262 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x174 $x252)))))))
 (let (($x192 (and (and (and $x109 $x262) $x53) $x157)))
 (let (($x182 (= $x192 true)))
 (let (($x12 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x59 (= $x12 true)))
 (let (($x201 (and $x59 $x182)))
 (let (($x240 (and $x201 $x50)))
 (let (($x124 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x154 (or false $x124)))
 (let (($x28 (and $x154 $x240)))
 (let (($x184 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x51 (= input.spec-%tmpvar-10.L2%13%d $x184)))
 (let (($x206 (and $x51 $x28)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x258 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x227 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x209 (=> $x227 $x258)))
 (let (($x186 (or $x20 $x5)))
 (let ((?x218 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x218 (_ bv1 32))))
 (let (($x40 (= $x227 $x153)))
 (let (($x116 (= false false)))
 (let (($x242 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x74 (=> $x242 $x116)))
 (let (($x129 (= ?x218 (_ bv0 32))))
 (let (($x69 (= $x242 $x129)))
 (let (($x137 (and (and (and $x69 $x74) $x40) $x209)))
 (let (($x64 (and $x137 $x206)))
 (let (($x32 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x43 (ite $x32 ?x179 (_ bv0 32))))
 (let (($x26 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x15 (ite $x26 ?x23 ?x43)))
 (let (($x45 (= input.spec-%tmpvar-12.L2%17%d.2 ?x15)))
 (let (($x91 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x89 (=> $x91 $x45)))
 (let (($x128 (or $x32 $x26)))
 (let ((?x102 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x102 (_ bv1 32))))
 (let (($x172 (= $x91 $x255)))
 (let (($x222 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x251 (=> $x222 $x116)))
 (let (($x237 (= ?x102 (_ bv0 32))))
 (let (($x198 (= $x222 $x237)))
 (let (($x207 (and (and (and $x198 $x251) $x172) $x89)))
 (let (($x106 (and $x207 $x64)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x55 (and $x141 $x106)))
 (let (($x126 (forall ((input.ind-%var2077X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= input.ind-%var2077X (_ bv0 32))))
 (let ((?x98 (ite $x253 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x155 (= input.ind-%var2077X (_ bv1 32))))
 (let ((?x110 (ite $x155 ?x23 ?x98)))
 (let ((?x6 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2077X)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2077X)))
 (=> $x156 (= ?x6 ?x110)))))))))))
 ))
 (let (($x122 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let (($x155 (= input.ind-%var2076X (_ bv1 32))))
 (let (($x253 (= input.ind-%var2076X (_ bv0 32))))
 (let (($x13 (or $x253 $x155)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2076X)))
 (= $x156 $x13))))))
 ))
 (let (($x56 (and $x122 $x126)))
 (let (($x163 (and $x56 $x55)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x87 (and $x230 $x163)))
 (let (($x150 (forall ((input.ind-%var2087X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2087X)))
 (=> $x160 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2087X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var2086X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2086X)))
 (= $x160 false)))
 ))
 (let (($x115 (and $x171 $x150)))
 (let (($x136 (and $x115 $x87)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x68 (and $x30 $x136)))
 (let (($x76 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x17 (and $x76 $x68)))
 (let (($x82 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x82 $x17)))
 (let (($x118 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= input.ind-%var2101X (_ bv0 32))))
 (let ((?x98 (ite $x253 ?x179 (_ bv0 32))))
 (let ((?x36 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2101X)))
 (let (($x8 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2101X)))
 (=> $x8 (= ?x36 ?x98))))))))
 ))
 (let (($x146 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x253 (= input.ind-%var2100X (_ bv0 32))))
 (let (($x8 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2100X)))
 (= $x8 $x253))))
 ))
 (let (($x188 (and $x146 $x118)))
 (let (($x183 (and $x188 $x165)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x152 (and $x105 $x183)))
 (let (($x159 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x101 (and $x159 $x152)))
 (let (($x92 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x103 (and $x92 $x101)))
 (let (($x11 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= input.ind-%var2119X (_ bv0 32))))
 (let ((?x98 (ite $x253 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x155 (= input.ind-%var2119X (_ bv1 32))))
 (let ((?x110 (ite $x155 ?x23 ?x98)))
 (let ((?x143 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2119X)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2119X)))
 (=> $x162 (= ?x143 ?x110)))))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x155 (= input.ind-%var2118X (_ bv1 32))))
 (let (($x253 (= input.ind-%var2118X (_ bv0 32))))
 (let (($x13 (or $x253 $x155)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2118X)))
 (= $x162 $x13))))))
 ))
 (let (($x44 (and $x213 $x11)))
 (let (($x18 (and $x44 $x103)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x200 (and $x38 $x18)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x9 (and $x164 $x200)))
 (let (($x139 (and $x116 $x9)))
 (let (($x94 (= input.spec-%var-y-0.L2%23%bbentry ?x15)))
 (let (($x75 (and $x94 $x139)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x83 (and $x29 $x75)))
 (let (($x72 (and $x116 $x83)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x151 (and $x60 $x72)))
 (let (($x226 (=> $x151 $x100)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x191 (= (_ bv0 32) ?x223)))
 (let (($x86 (= $x191 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x175 (concat ?x131 (concat ?x210 ?x148)))))
 (let (($x70 (= ?x212 input.dst.llvm-%x)))
 (let (($x246 (= $x70 true)))
 (let (($x114 (= input.dst.llvm-%x ?x212)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x90)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x180 $x107)))
 (let (($x27 (and $x33 $x37)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x250 $x27)))
 (let (($x103 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x151)))))))
 (let (($x67 (and (and (and $x187 $x103) $x217) $x114)))
 (let (($x7 (= $x67 true)))
 (let (($x17 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x165 (not $x17)))
 (let (($x183 (= $x165 true)))
 (let (($x211 (and $x183 $x7)))
 (let (($x123 (and $x211 $x246)))
 (let (($x87 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x136 (or false $x87)))
 (let (($x167 (and $x136 $x123)))
 (let (($x106 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= input.spec-%tmpvar-10.L2%13%d $x106)))
 (let (($x194 (and $x55 $x167)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x157 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x50 (=> $x157 $x173)))
 (let (($x238 (or $x20 $x5)))
 (let ((?x244 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x244 (_ bv1 32))))
 (let (($x182 (= $x157 $x192)))
 (let (($x130 (= false false)))
 (let (($x233 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x166 (=> $x233 $x130)))
 (let (($x132 (= ?x244 (_ bv0 32))))
 (let (($x134 (= $x233 $x132)))
 (let (($x206 (and (and (and $x134 $x166) $x182) $x50)))
 (let (($x168 (and $x206 $x194)))
 (let (($x43 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x15 (ite $x43 ?x179 (_ bv0 32))))
 (let (($x32 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x94 (ite $x32 ?x23 ?x15)))
 (let (($x85 (= input.spec-%tmpvar-12.L2%17%d.2 ?x94)))
 (let (($x54 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x41 (=> $x54 $x85)))
 (let (($x121 (or $x43 $x32)))
 (let ((?x120 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x120 (_ bv1 32))))
 (let (($x53 (= $x54 $x49)))
 (let (($x46 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x190 (=> $x46 $x130)))
 (let (($x78 (= ?x120 (_ bv0 32))))
 (let (($x125 (= $x46 $x78)))
 (let (($x61 (and (and (and $x125 $x190) $x53) $x41)))
 (let (($x189 (and $x61 $x168)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x66 (and $x256 $x189)))
 (let (($x109 (forall ((input.ind-%var2209X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x243 (= input.ind-%var2209X (_ bv0 32))))
 (let ((?x118 (ite $x243 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var2209X (_ bv1 32))))
 (let ((?x188 (ite $x73 ?x23 ?x118)))
 (let ((?x202 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2209X)))
 (let (($x221 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2209X)))
 (=> $x221 (= ?x202 ?x188)))))))))))
 ))
 (let (($x12 (forall ((input.ind-%var2208X (_ BitVec 32)) )(let (($x73 (= input.ind-%var2208X (_ bv1 32))))
 (let (($x243 (= input.ind-%var2208X (_ bv0 32))))
 (let (($x11 (or $x243 $x73)))
 (let (($x221 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2208X)))
 (= $x221 $x11))))))
 ))
 (let (($x262 (and $x12 $x109)))
 (let (($x63 (and $x262 $x66)))
 (let (($x258 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x169 (and $x258 $x63)))
 (let (($x40 (forall ((input.ind-%var2219X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2219X)))
 (=> $x79 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2219X) (_ bv0 32)))))
 ))
 (let (($x95 (forall ((input.ind-%var2218X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2218X)))
 (= $x79 false)))
 ))
 (let (($x80 (and $x95 $x40)))
 (let (($x145 (and $x80 $x169)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x142 (and $x255 $x145)))
 (let (($x14 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x133 (and $x14 $x142)))
 (let (($x198 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x234 (and $x198 $x133)))
 (let (($x128 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x243 (= input.ind-%var2233X (_ bv0 32))))
 (let ((?x118 (ite $x243 ?x179 (_ bv0 32))))
 (let ((?x31 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2233X)))
 (let (($x249 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2233X)))
 (=> $x249 (= ?x31 ?x118))))))))
 ))
 (let (($x156 (forall ((input.ind-%var2232X (_ BitVec 32)) )(let (($x243 (= input.ind-%var2232X (_ bv0 32))))
 (let (($x249 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2232X)))
 (= $x249 $x243))))
 ))
 (let (($x102 (and $x156 $x128)))
 (let (($x193 (and $x102 $x234)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x208 (and $x171 $x193)))
 (let (($x160 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x84 (and $x160 $x208)))
 (let (($x112 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x57 (and $x112 $x84)))
 (let (($x58 (forall ((input.ind-%var2251X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x243 (= input.ind-%var2251X (_ bv0 32))))
 (let ((?x118 (ite $x243 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var2251X (_ bv1 32))))
 (let ((?x188 (ite $x73 ?x23 ?x118)))
 (let ((?x52 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2251X)))
 (let (($x13 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2251X)))
 (=> $x13 (= ?x52 ?x188)))))))))))
 ))
 (let (($x158 (forall ((input.ind-%var2250X (_ BitVec 32)) )(let (($x73 (= input.ind-%var2250X (_ bv1 32))))
 (let (($x243 (= input.ind-%var2250X (_ bv0 32))))
 (let (($x11 (or $x243 $x73)))
 (let (($x13 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2250X)))
 (= $x13 $x11))))))
 ))
 (let (($x170 (and $x158 $x58)))
 (let (($x199 (and $x170 $x57)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x161 (and $x261 $x199)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x245 (and $x236 $x161)))
 (let (($x228 (and $x130 $x245)))
 (let (($x147 (= input.spec-%var-y-0.L2%23%bbentry ?x94)))
 (let (($x62 (and $x147 $x228)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x35 (and $x24 $x62)))
 (let (($x113 (and $x130 $x35)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x176 (and $x60 $x113)))
 (let (($x96 (=> $x176 $x86)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x191 (= (_ bv0 32) ?x223)))
 (let (($x86 (= $x191 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x175 (concat ?x131 (concat ?x210 ?x148)))))
 (let (($x70 (= ?x212 input.dst.llvm-%x)))
 (let (($x246 (= $x70 true)))
 (let (($x114 (= input.dst.llvm-%x ?x212)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x90)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x180 $x107)))
 (let (($x27 (and $x33 $x37)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x250 $x27)))
 (let (($x103 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x151)))))))
 (let (($x67 (and (and (and $x187 $x103) $x217) $x114)))
 (let (($x7 (= $x67 true)))
 (let (($x17 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x165 (not $x17)))
 (let (($x183 (= $x165 true)))
 (let (($x211 (and $x183 $x7)))
 (let (($x123 (and $x211 $x246)))
 (let (($x87 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x136 (or false $x87)))
 (let (($x167 (and $x136 $x123)))
 (let (($x106 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x55 (= input.spec-%tmpvar-10.L2%13%d $x106)))
 (let (($x194 (and $x55 $x167)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x157 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x50 (=> $x157 $x173)))
 (let (($x238 (or $x20 $x5)))
 (let ((?x244 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x244 (_ bv1 32))))
 (let (($x182 (= $x157 $x192)))
 (let (($x130 (= false false)))
 (let (($x233 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x166 (=> $x233 $x130)))
 (let (($x132 (= ?x244 (_ bv0 32))))
 (let (($x134 (= $x233 $x132)))
 (let (($x206 (and (and (and $x134 $x166) $x182) $x50)))
 (let (($x168 (and $x206 $x194)))
 (let (($x43 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x15 (ite $x43 ?x179 (_ bv0 32))))
 (let (($x32 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x94 (ite $x32 ?x23 ?x15)))
 (let (($x85 (= input.spec-%tmpvar-12.L2%17%d.2 ?x94)))
 (let (($x54 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x41 (=> $x54 $x85)))
 (let (($x121 (or $x43 $x32)))
 (let ((?x120 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x120 (_ bv1 32))))
 (let (($x53 (= $x54 $x49)))
 (let (($x46 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x190 (=> $x46 $x130)))
 (let (($x78 (= ?x120 (_ bv0 32))))
 (let (($x125 (= $x46 $x78)))
 (let (($x61 (and (and (and $x125 $x190) $x53) $x41)))
 (let (($x189 (and $x61 $x168)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x66 (and $x256 $x189)))
 (let (($x109 (forall ((input.ind-%var2209X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x243 (= input.ind-%var2209X (_ bv0 32))))
 (let ((?x118 (ite $x243 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var2209X (_ bv1 32))))
 (let ((?x188 (ite $x73 ?x23 ?x118)))
 (let ((?x202 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2209X)))
 (let (($x221 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2209X)))
 (=> $x221 (= ?x202 ?x188)))))))))))
 ))
 (let (($x12 (forall ((input.ind-%var2208X (_ BitVec 32)) )(let (($x73 (= input.ind-%var2208X (_ bv1 32))))
 (let (($x243 (= input.ind-%var2208X (_ bv0 32))))
 (let (($x11 (or $x243 $x73)))
 (let (($x221 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2208X)))
 (= $x221 $x11))))))
 ))
 (let (($x262 (and $x12 $x109)))
 (let (($x63 (and $x262 $x66)))
 (let (($x258 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x169 (and $x258 $x63)))
 (let (($x40 (forall ((input.ind-%var2219X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2219X)))
 (=> $x79 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2219X) (_ bv0 32)))))
 ))
 (let (($x95 (forall ((input.ind-%var2218X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2218X)))
 (= $x79 false)))
 ))
 (let (($x80 (and $x95 $x40)))
 (let (($x145 (and $x80 $x169)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x142 (and $x255 $x145)))
 (let (($x14 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x133 (and $x14 $x142)))
 (let (($x198 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x234 (and $x198 $x133)))
 (let (($x128 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x243 (= input.ind-%var2233X (_ bv0 32))))
 (let ((?x118 (ite $x243 ?x179 (_ bv0 32))))
 (let ((?x31 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2233X)))
 (let (($x249 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2233X)))
 (=> $x249 (= ?x31 ?x118))))))))
 ))
 (let (($x156 (forall ((input.ind-%var2232X (_ BitVec 32)) )(let (($x243 (= input.ind-%var2232X (_ bv0 32))))
 (let (($x249 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2232X)))
 (= $x249 $x243))))
 ))
 (let (($x102 (and $x156 $x128)))
 (let (($x193 (and $x102 $x234)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x208 (and $x171 $x193)))
 (let (($x160 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x84 (and $x160 $x208)))
 (let (($x112 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x57 (and $x112 $x84)))
 (let (($x58 (forall ((input.ind-%var2251X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x243 (= input.ind-%var2251X (_ bv0 32))))
 (let ((?x118 (ite $x243 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var2251X (_ bv1 32))))
 (let ((?x188 (ite $x73 ?x23 ?x118)))
 (let ((?x52 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2251X)))
 (let (($x13 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2251X)))
 (=> $x13 (= ?x52 ?x188)))))))))))
 ))
 (let (($x158 (forall ((input.ind-%var2250X (_ BitVec 32)) )(let (($x73 (= input.ind-%var2250X (_ bv1 32))))
 (let (($x243 (= input.ind-%var2250X (_ bv0 32))))
 (let (($x11 (or $x243 $x73)))
 (let (($x13 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2250X)))
 (= $x13 $x11))))))
 ))
 (let (($x170 (and $x158 $x58)))
 (let (($x199 (and $x170 $x57)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x161 (and $x261 $x199)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x245 (and $x236 $x161)))
 (let (($x228 (and $x130 $x245)))
 (let (($x147 (= input.spec-%var-y-0.L2%23%bbentry ?x94)))
 (let (($x62 (and $x147 $x228)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x35 (and $x24 $x62)))
 (let (($x113 (and $x130 $x35)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x176 (and $x60 $x113)))
 (let (($x96 (=> $x176 $x86)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let ((?x110 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x111 (= ?x110 ?x42)))
 (let (($x146 (= $x111 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x196 (concat ?x260 (concat ?x105 ?x104)))))
 (let (($x137 (= ?x209 input.dst.llvm-%x)))
 (let (($x154 (= $x137 true)))
 (let (($x220 (= input.dst.llvm-%x ?x209)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x184)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x86 $x152)))
 (let (($x127 (and $x101 $x108)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x191 $x127)))
 (let (($x133 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x223 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x245)))))))
 (let (($x51 (and (and (and $x223 $x133) $x45) $x220)))
 (let (($x241 (= $x51 true)))
 (let (($x63 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x169 (= $x63 true)))
 (let (($x124 (and $x169 $x241)))
 (let (($x224 (and $x124 $x154)))
 (let (($x99 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x224)))
 (let (($x168 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x189 (= input.spec-%tmpvar-10.L2%13%d $x168)))
 (let (($x252 (and $x189 $x99)))
 (let (($x211 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x212 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x70 (=> $x212 $x211)))
 (let (($x259 (or $x20 $x5)))
 (let ((?x210 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x210 (_ bv1 32))))
 (let (($x67 (= $x212 $x114)))
 (let (($x29 (= false false)))
 (let (($x131 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x117 (=> $x131 $x29)))
 (let (($x148 (= ?x210 (_ bv0 32))))
 (let (($x71 (= $x131 $x148)))
 (let (($x167 (and (and (and $x71 $x117) $x67) $x70)))
 (let (($x254 (and $x167 $x252)))
 (let (($x15 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x94 (ite $x15 ?x179 (_ bv0 32))))
 (let (($x43 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x147 (ite $x43 ?x23 ?x94)))
 (let (($x232 (= input.spec-%tmpvar-12.L2%17%d.2 ?x147)))
 (let (($x90 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x215 (=> $x90 $x232)))
 (let (($x180 (or $x15 $x43)))
 (let ((?x119 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x119 (_ bv1 32))))
 (let (($x27 (= $x90 $x37)))
 (let (($x250 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x33 (=> $x250 $x29)))
 (let (($x257 (= ?x119 (_ bv0 32))))
 (let (($x107 (= $x250 $x257)))
 (let (($x248 (and (and (and $x107 $x33) $x27) $x215)))
 (let (($x6 (and $x248 $x254)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x140 (and $x39 $x6)))
 (let (($x226 (forall ((input.ind-%var2341X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= input.ind-%var2341X (_ bv0 32))))
 (let ((?x128 (ite $x82 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x177 (= input.ind-%var2341X (_ bv1 32))))
 (let ((?x102 (ite $x177 ?x23 ?x128)))
 (let ((?x9 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2341X)))
 (let (($x64 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2341X)))
 (=> $x64 (= ?x9 ?x102)))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x177 (= input.ind-%var2340X (_ bv1 32))))
 (let (($x82 (= input.ind-%var2340X (_ bv0 32))))
 (let (($x58 (or $x82 $x177)))
 (let (($x64 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2340X)))
 (= $x64 $x58))))))
 ))
 (let (($x187 (and $x17 $x226)))
 (let (($x115 (and $x187 $x140)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x48 (and $x173 $x115)))
 (let (($x182 (forall ((input.ind-%var2351X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2351X)))
 (=> $x195 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2351X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var2350X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2350X)))
 (= $x195 false)))
 ))
 (let (($x28 (and $x97 $x182)))
 (let (($x93 (and $x28 $x48)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x126 (and $x49 $x93)))
 (let (($x231 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x56 (and $x231 $x126)))
 (let (($x125 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x16 (and $x125 $x56)))
 (let (($x121 (forall ((input.ind-%var2365X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= input.ind-%var2365X (_ bv0 32))))
 (let ((?x128 (ite $x82 ?x179 (_ bv0 32))))
 (let ((?x216 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2365X)))
 (let (($x153 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2365X)))
 (=> $x153 (= ?x216 ?x128))))))))
 ))
 (let (($x221 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let (($x82 (= input.ind-%var2364X (_ bv0 32))))
 (let (($x153 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2364X)))
 (= $x153 $x82))))
 ))
 (let (($x120 (and $x221 $x121)))
 (let (($x205 (and $x120 $x16)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x219 (and $x95 $x205)))
 (let (($x79 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x122 (and $x79 $x219)))
 (let (($x91 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x141 (and $x91 $x122)))
 (let (($x116 (forall ((input.ind-%var2383X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= input.ind-%var2383X (_ bv0 32))))
 (let ((?x128 (ite $x82 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x177 (= input.ind-%var2383X (_ bv1 32))))
 (let ((?x102 (ite $x177 ?x23 ?x128)))
 (let ((?x47 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2383X)))
 (let (($x11 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2383X)))
 (=> $x11 (= ?x47 ?x102)))))))))))
 ))
 (let (($x76 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x177 (= input.ind-%var2382X (_ bv1 32))))
 (let (($x82 (= input.ind-%var2382X (_ bv0 32))))
 (let (($x58 (or $x82 $x177)))
 (let (($x11 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2382X)))
 (= $x11 $x58))))))
 ))
 (let (($x251 (and $x76 $x116)))
 (let (($x92 (and $x251 $x141)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x159 (and $x155 $x92)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x162 (and $x38 $x159)))
 (let (($x143 (and $x29 $x162)))
 (let (($x164 (= input.spec-%var-y-0.L2%23%bbentry ?x147)))
 (let (($x8 (and $x164 $x143)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x213 (and $x26 $x8)))
 (let (($x98 (and $x29 $x213)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x253 (and $x60 $x98)))
 (let (($x36 (=> $x253 $x146)))
 (not $x36))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let ((?x110 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x111 (= ?x110 ?x42)))
 (let (($x146 (= $x111 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x196 (concat ?x260 (concat ?x105 ?x104)))))
 (let (($x137 (= ?x209 input.dst.llvm-%x)))
 (let (($x154 (= $x137 true)))
 (let (($x220 (= input.dst.llvm-%x ?x209)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x184)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x86 $x152)))
 (let (($x127 (and $x101 $x108)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x191 $x127)))
 (let (($x133 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x223 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x245)))))))
 (let (($x51 (and (and (and $x223 $x133) $x45) $x220)))
 (let (($x241 (= $x51 true)))
 (let (($x63 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x169 (= $x63 true)))
 (let (($x124 (and $x169 $x241)))
 (let (($x224 (and $x124 $x154)))
 (let (($x99 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x224)))
 (let (($x168 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x189 (= input.spec-%tmpvar-10.L2%13%d $x168)))
 (let (($x252 (and $x189 $x99)))
 (let (($x211 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x212 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x70 (=> $x212 $x211)))
 (let (($x259 (or $x20 $x5)))
 (let ((?x210 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x210 (_ bv1 32))))
 (let (($x67 (= $x212 $x114)))
 (let (($x29 (= false false)))
 (let (($x131 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x117 (=> $x131 $x29)))
 (let (($x148 (= ?x210 (_ bv0 32))))
 (let (($x71 (= $x131 $x148)))
 (let (($x167 (and (and (and $x71 $x117) $x67) $x70)))
 (let (($x254 (and $x167 $x252)))
 (let (($x15 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x94 (ite $x15 ?x179 (_ bv0 32))))
 (let (($x43 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x147 (ite $x43 ?x23 ?x94)))
 (let (($x232 (= input.spec-%tmpvar-12.L2%17%d.2 ?x147)))
 (let (($x90 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x215 (=> $x90 $x232)))
 (let (($x180 (or $x15 $x43)))
 (let ((?x119 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x119 (_ bv1 32))))
 (let (($x27 (= $x90 $x37)))
 (let (($x250 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x33 (=> $x250 $x29)))
 (let (($x257 (= ?x119 (_ bv0 32))))
 (let (($x107 (= $x250 $x257)))
 (let (($x248 (and (and (and $x107 $x33) $x27) $x215)))
 (let (($x6 (and $x248 $x254)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x140 (and $x39 $x6)))
 (let (($x226 (forall ((input.ind-%var2341X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= input.ind-%var2341X (_ bv0 32))))
 (let ((?x128 (ite $x82 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x177 (= input.ind-%var2341X (_ bv1 32))))
 (let ((?x102 (ite $x177 ?x23 ?x128)))
 (let ((?x9 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2341X)))
 (let (($x64 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2341X)))
 (=> $x64 (= ?x9 ?x102)))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x177 (= input.ind-%var2340X (_ bv1 32))))
 (let (($x82 (= input.ind-%var2340X (_ bv0 32))))
 (let (($x58 (or $x82 $x177)))
 (let (($x64 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2340X)))
 (= $x64 $x58))))))
 ))
 (let (($x187 (and $x17 $x226)))
 (let (($x115 (and $x187 $x140)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x48 (and $x173 $x115)))
 (let (($x182 (forall ((input.ind-%var2351X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2351X)))
 (=> $x195 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2351X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var2350X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2350X)))
 (= $x195 false)))
 ))
 (let (($x28 (and $x97 $x182)))
 (let (($x93 (and $x28 $x48)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x126 (and $x49 $x93)))
 (let (($x231 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x56 (and $x231 $x126)))
 (let (($x125 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x16 (and $x125 $x56)))
 (let (($x121 (forall ((input.ind-%var2365X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= input.ind-%var2365X (_ bv0 32))))
 (let ((?x128 (ite $x82 ?x179 (_ bv0 32))))
 (let ((?x216 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2365X)))
 (let (($x153 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2365X)))
 (=> $x153 (= ?x216 ?x128))))))))
 ))
 (let (($x221 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let (($x82 (= input.ind-%var2364X (_ bv0 32))))
 (let (($x153 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2364X)))
 (= $x153 $x82))))
 ))
 (let (($x120 (and $x221 $x121)))
 (let (($x205 (and $x120 $x16)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x219 (and $x95 $x205)))
 (let (($x79 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x122 (and $x79 $x219)))
 (let (($x91 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x141 (and $x91 $x122)))
 (let (($x116 (forall ((input.ind-%var2383X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= input.ind-%var2383X (_ bv0 32))))
 (let ((?x128 (ite $x82 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x177 (= input.ind-%var2383X (_ bv1 32))))
 (let ((?x102 (ite $x177 ?x23 ?x128)))
 (let ((?x47 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2383X)))
 (let (($x11 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2383X)))
 (=> $x11 (= ?x47 ?x102)))))))))))
 ))
 (let (($x76 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x177 (= input.ind-%var2382X (_ bv1 32))))
 (let (($x82 (= input.ind-%var2382X (_ bv0 32))))
 (let (($x58 (or $x82 $x177)))
 (let (($x11 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2382X)))
 (= $x11 $x58))))))
 ))
 (let (($x251 (and $x76 $x116)))
 (let (($x92 (and $x251 $x141)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x159 (and $x155 $x92)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x162 (and $x38 $x159)))
 (let (($x143 (and $x29 $x162)))
 (let (($x164 (= input.spec-%var-y-0.L2%23%bbentry ?x147)))
 (let (($x8 (and $x164 $x143)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x213 (and $x26 $x8)))
 (let (($x98 (and $x29 $x213)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x253 (and $x60 $x98)))
 (let (($x36 (=> $x253 $x146)))
 (not $x36))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let ((?x81 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x59 (= ?x81 ?x42)))
 (let (($x30 (= $x59 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x238 (concat ?x50 (concat ?x88 ?x244)))))
 (let (($x72 (= ?x55 input.dst.llvm-%x)))
 (let (($x75 (= $x72 true)))
 (let (($x240 (= input.dst.llvm-%x ?x55)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x134)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x142 $x150)))
 (let (($x144 (and $x85 $x40)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x145 $x144)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x213 $x98)))))))
 (let (($x136 (and (and (and $x65 $x122) $x44) $x240)))
 (let (($x197 (= $x136 true)))
 (let (($x126 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x56 (not $x126)))
 (let (($x16 (= $x56 true)))
 (let (($x83 (and $x16 $x197)))
 (let (($x151 (and $x83 $x75)))
 (let (($x129 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x151)))
 (let (($x115 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= input.spec-%tmpvar-10.L2%13%d $x115)))
 (let (($x80 (and $x48 $x129)))
 (let (($x224 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x241 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x99 (=> $x241 $x224)))
 (let (($x242 (or $x20 $x5)))
 (let ((?x89 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x89 (_ bv1 32))))
 (let (($x137 (= $x241 $x124)))
 (let (($x24 (= false false)))
 (let (($x104 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x51 (=> $x104 $x24)))
 (let (($x209 (= ?x89 (_ bv0 32))))
 (let (($x220 (= $x104 $x209)))
 (let (($x6 (and (and (and $x220 $x51) $x137) $x99)))
 (let (($x183 (and $x6 $x80)))
 (let (($x94 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x147 (ite $x94 ?x179 (_ bv0 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x164 (ite $x15 ?x23 ?x147)))
 (let (($x196 (= input.spec-%tmpvar-12.L2%17%d.2 ?x164)))
 (let (($x45 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x218 (=> $x45 $x196)))
 (let (($x152 (or $x94 $x15)))
 (let ((?x101 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x101 (_ bv1 32))))
 (let (($x69 (= $x45 $x186)))
 (let (($x247 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x127 (=> $x247 $x24)))
 (let (($x184 (= ?x101 (_ bv0 32))))
 (let (($x108 (= $x247 $x184)))
 (let (($x225 (and (and (and $x108 $x127) $x69) $x218)))
 (let (($x149 (and $x225 $x183)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x109 (and $x86 $x149)))
 (let (($x135 (forall ((input.ind-%var2473X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x198 (= input.ind-%var2473X (_ bv0 32))))
 (let ((?x121 (ite $x198 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x237 (= input.ind-%var2473X (_ bv1 32))))
 (let ((?x120 (ite $x237 ?x23 ?x121)))
 (let ((?x199 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2473X)))
 (let (($x194 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2473X)))
 (=> $x194 (= ?x199 ?x120)))))))))))
 ))
 (let (($x193 (forall ((input.ind-%var2472X (_ BitVec 32)) )(let (($x237 (= input.ind-%var2472X (_ bv1 32))))
 (let (($x198 (= input.ind-%var2472X (_ bv0 32))))
 (let (($x116 (or $x198 $x237)))
 (let (($x194 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2472X)))
 (= $x194 $x116))))))
 ))
 (let (($x234 (and $x193 $x135)))
 (let (($x262 (and $x234 $x109)))
 (let (($x211 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x227 (and $x211 $x262)))
 (let (($x67 (forall ((input.ind-%var2483X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2483X)))
 (=> $x217 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2483X) (_ bv0 32)))))
 ))
 (let (($x235 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2482X)))
 (= $x217 false)))
 ))
 (let (($x123 (and $x235 $x67)))
 (let (($x214 (and $x123 $x227)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x181 (and $x37 $x214)))
 (let (($x239 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x12 (and $x239 $x181)))
 (let (($x107 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x256 (and $x107 $x12)))
 (let (($x180 (forall ((input.ind-%var2497X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x198 (= input.ind-%var2497X (_ bv0 32))))
 (let ((?x121 (ite $x198 ?x179 (_ bv0 32))))
 (let ((?x77 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2497X)))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2497X)))
 (=> $x192 (= ?x77 ?x121))))))))
 ))
 (let (($x64 (forall ((input.ind-%var2496X (_ BitVec 32)) )(let (($x198 (= input.ind-%var2496X (_ bv0 32))))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2496X)))
 (= $x192 $x198))))
 ))
 (let (($x119 (and $x64 $x180)))
 (let (($x112 (and $x119 $x256)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x160 (and $x97 $x112)))
 (let (($x195 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x13 (and $x195 $x160)))
 (let (($x54 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x52 (and $x54 $x13)))
 (let (($x130 (forall ((input.ind-%var2515X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x198 (= input.ind-%var2515X (_ bv0 32))))
 (let ((?x121 (ite $x198 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x237 (= input.ind-%var2515X (_ bv1 32))))
 (let ((?x120 (ite $x237 ?x23 ?x121)))
 (let ((?x207 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2515X)))
 (let (($x58 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2515X)))
 (=> $x58 (= ?x207 ?x120)))))))))))
 ))
 (let (($x14 (forall ((input.ind-%var2514X (_ BitVec 32)) )(let (($x237 (= input.ind-%var2514X (_ bv1 32))))
 (let (($x198 (= input.ind-%var2514X (_ bv0 32))))
 (let (($x116 (or $x198 $x237)))
 (let (($x58 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2514X)))
 (= $x58 $x116))))))
 ))
 (let (($x190 (and $x14 $x130)))
 (let (($x249 (and $x190 $x52)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x158 (and $x73 $x249)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x118 (and $x261 $x158)))
 (let (($x243 (and $x24 $x118)))
 (let (($x236 (= input.spec-%var-y-0.L2%23%bbentry ?x164)))
 (let (($x188 (and $x236 $x243)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x230 (and $x32 $x188)))
 (let (($x156 (and $x24 $x230)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x31 (and $x60 $x156)))
 (let (($x222 (=> $x31 $x30)))
 (not $x222)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let ((?x81 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x59 (= ?x81 ?x42)))
 (let (($x30 (= $x59 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x238 (concat ?x50 (concat ?x88 ?x244)))))
 (let (($x72 (= ?x55 input.dst.llvm-%x)))
 (let (($x75 (= $x72 true)))
 (let (($x240 (= input.dst.llvm-%x ?x55)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x134)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x142 $x150)))
 (let (($x144 (and $x85 $x40)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x145 $x144)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x213 $x98)))))))
 (let (($x136 (and (and (and $x65 $x122) $x44) $x240)))
 (let (($x197 (= $x136 true)))
 (let (($x126 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x56 (not $x126)))
 (let (($x16 (= $x56 true)))
 (let (($x83 (and $x16 $x197)))
 (let (($x151 (and $x83 $x75)))
 (let (($x129 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x151)))
 (let (($x115 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= input.spec-%tmpvar-10.L2%13%d $x115)))
 (let (($x80 (and $x48 $x129)))
 (let (($x224 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x241 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x99 (=> $x241 $x224)))
 (let (($x242 (or $x20 $x5)))
 (let ((?x89 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x89 (_ bv1 32))))
 (let (($x137 (= $x241 $x124)))
 (let (($x24 (= false false)))
 (let (($x104 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x51 (=> $x104 $x24)))
 (let (($x209 (= ?x89 (_ bv0 32))))
 (let (($x220 (= $x104 $x209)))
 (let (($x6 (and (and (and $x220 $x51) $x137) $x99)))
 (let (($x183 (and $x6 $x80)))
 (let (($x94 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x147 (ite $x94 ?x179 (_ bv0 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x164 (ite $x15 ?x23 ?x147)))
 (let (($x196 (= input.spec-%tmpvar-12.L2%17%d.2 ?x164)))
 (let (($x45 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x218 (=> $x45 $x196)))
 (let (($x152 (or $x94 $x15)))
 (let ((?x101 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x101 (_ bv1 32))))
 (let (($x69 (= $x45 $x186)))
 (let (($x247 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x127 (=> $x247 $x24)))
 (let (($x184 (= ?x101 (_ bv0 32))))
 (let (($x108 (= $x247 $x184)))
 (let (($x225 (and (and (and $x108 $x127) $x69) $x218)))
 (let (($x149 (and $x225 $x183)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x109 (and $x86 $x149)))
 (let (($x135 (forall ((input.ind-%var2473X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x198 (= input.ind-%var2473X (_ bv0 32))))
 (let ((?x121 (ite $x198 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x237 (= input.ind-%var2473X (_ bv1 32))))
 (let ((?x120 (ite $x237 ?x23 ?x121)))
 (let ((?x199 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2473X)))
 (let (($x194 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2473X)))
 (=> $x194 (= ?x199 ?x120)))))))))))
 ))
 (let (($x193 (forall ((input.ind-%var2472X (_ BitVec 32)) )(let (($x237 (= input.ind-%var2472X (_ bv1 32))))
 (let (($x198 (= input.ind-%var2472X (_ bv0 32))))
 (let (($x116 (or $x198 $x237)))
 (let (($x194 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2472X)))
 (= $x194 $x116))))))
 ))
 (let (($x234 (and $x193 $x135)))
 (let (($x262 (and $x234 $x109)))
 (let (($x211 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x227 (and $x211 $x262)))
 (let (($x67 (forall ((input.ind-%var2483X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2483X)))
 (=> $x217 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2483X) (_ bv0 32)))))
 ))
 (let (($x235 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2482X)))
 (= $x217 false)))
 ))
 (let (($x123 (and $x235 $x67)))
 (let (($x214 (and $x123 $x227)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x181 (and $x37 $x214)))
 (let (($x239 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x12 (and $x239 $x181)))
 (let (($x107 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x256 (and $x107 $x12)))
 (let (($x180 (forall ((input.ind-%var2497X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x198 (= input.ind-%var2497X (_ bv0 32))))
 (let ((?x121 (ite $x198 ?x179 (_ bv0 32))))
 (let ((?x77 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2497X)))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2497X)))
 (=> $x192 (= ?x77 ?x121))))))))
 ))
 (let (($x64 (forall ((input.ind-%var2496X (_ BitVec 32)) )(let (($x198 (= input.ind-%var2496X (_ bv0 32))))
 (let (($x192 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2496X)))
 (= $x192 $x198))))
 ))
 (let (($x119 (and $x64 $x180)))
 (let (($x112 (and $x119 $x256)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x160 (and $x97 $x112)))
 (let (($x195 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x13 (and $x195 $x160)))
 (let (($x54 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x52 (and $x54 $x13)))
 (let (($x130 (forall ((input.ind-%var2515X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x198 (= input.ind-%var2515X (_ bv0 32))))
 (let ((?x121 (ite $x198 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x237 (= input.ind-%var2515X (_ bv1 32))))
 (let ((?x120 (ite $x237 ?x23 ?x121)))
 (let ((?x207 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2515X)))
 (let (($x58 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2515X)))
 (=> $x58 (= ?x207 ?x120)))))))))))
 ))
 (let (($x14 (forall ((input.ind-%var2514X (_ BitVec 32)) )(let (($x237 (= input.ind-%var2514X (_ bv1 32))))
 (let (($x198 (= input.ind-%var2514X (_ bv0 32))))
 (let (($x116 (or $x198 $x237)))
 (let (($x58 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2514X)))
 (= $x58 $x116))))))
 ))
 (let (($x190 (and $x14 $x130)))
 (let (($x249 (and $x190 $x52)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x158 (and $x73 $x249)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x118 (and $x261 $x158)))
 (let (($x243 (and $x24 $x118)))
 (let (($x236 (= input.spec-%var-y-0.L2%23%bbentry ?x164)))
 (let (($x188 (and $x236 $x243)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x230 (and $x32 $x188)))
 (let (($x156 (and $x24 $x230)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x31 (and $x60 $x156)))
 (let (($x222 (=> $x31 $x30)))
 (not $x222)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x147 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x164 (ite $x147 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x94 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x236 (ite $x94 ?x23 ?x164)))
 (let (($x216 (= ?x236 ?x221)))
 (let (($x185 (= $x216 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x259 (concat ?x57 (concat ?x84 (concat ?x27 ?x131)))))
 (let (($x245 (= ?x259 input.dst.llvm-%x)))
 (let (($x228 (= $x245 true)))
 (let (($x189 (= input.dst.llvm-%x ?x259)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x232)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x205 $x161)))
 (let (($x182 (and $x233 $x71)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x138 $x182)))
 (let (($x160 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x230)))))))
 (let (($x167 (and (and (and $x222 $x160) $x100) $x189)))
 (let (($x63 (= $x167 true)))
 (let (($x181 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x12 (= $x181 true)))
 (let (($x68 (and $x12 $x63)))
 (let (($x62 (and $x68 $x228)))
 (let (($x109 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x227 (and true $x109)))
 (let (($x35 (and $x227 $x62)))
 (let (($x262 (= input.spec-%tmpvar-10.L2%13%d $x109)))
 (let (($x9 (and $x262 $x35)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x75 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x136 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x151 (=> $x136 $x75)))
 (let (($x244 (or $x20 $x5)))
 (let ((?x41 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x41 (_ bv1 32))))
 (let (($x83 (= $x136 $x197)))
 (let (($x26 (= false false)))
 (let (($x88 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x240 (=> $x88 $x26)))
 (let (($x163 (= ?x41 (_ bv0 32))))
 (let (($x55 (= $x88 $x163)))
 (let (($x183 (and (and (and $x55 $x240) $x83) $x151)))
 (let (($x132 (and $x183 $x9)))
 (let (($x139 (= input.spec-%tmpvar-12.L2%17%d.2 ?x236)))
 (let (($x144 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x144 $x139)))
 (let (($x203 (or $x147 $x94)))
 (let ((?x150 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x150 (_ bv1 32))))
 (let (($x206 (= $x144 $x44)))
 (let (($x106 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x40 (=> $x106 $x26)))
 (let (($x85 (= ?x150 (_ bv0 32))))
 (let (($x134 (= $x106 $x85)))
 (let (($x50 (and (and (and $x134 $x40) $x206) $x238)))
 (let (($x28 (and $x50 $x132)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x176 (and $x145 $x28)))
 (let (($x122 (forall ((input.ind-%var2605X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x125 (= input.ind-%var2605X (_ bv0 32))))
 (let ((?x180 (ite $x125 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x78 (= input.ind-%var2605X (_ bv1 32))))
 (let ((?x119 (ite $x78 ?x23 ?x180)))
 (let ((?x162 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2605X)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2605X)))
 (=> $x140 (= ?x162 ?x119)))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var2604X (_ BitVec 32)) )(let (($x78 (= input.ind-%var2604X (_ bv1 32))))
 (let (($x125 (= input.ind-%var2604X (_ bv0 32))))
 (let (($x130 (or $x125 $x78)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2604X)))
 (= $x140 $x130))))))
 ))
 (let (($x87 (and $x16 $x122)))
 (let (($x113 (and $x87 $x176)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x226 (and $x224 $x113)))
 (let (($x137 (forall ((input.ind-%var2615X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2615X)))
 (=> $x74 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2615X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var2614X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2614X)))
 (= $x74 false)))
 ))
 (let (($x254 (and $x105 $x137)))
 (let (($x187 (and $x254 $x226)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x157 (and $x186 $x187)))
 (let (($x172 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x201 (and $x172 $x157)))
 (let (($x108 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x103 (and $x108 $x201)))
 (let (($x152 (forall ((input.ind-%var2629X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x125 (= input.ind-%var2629X (_ bv0 32))))
 (let ((?x180 (ite $x125 ?x179 (_ bv0 32))))
 (let ((?x223 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2629X)))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2629X)))
 (=> $x114 (= ?x223 ?x180))))))))
 ))
 (let (($x194 (forall ((input.ind-%var2628X (_ BitVec 32)) )(let (($x125 (= input.ind-%var2628X (_ bv0 32))))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2628X)))
 (= $x114 $x125))))
 ))
 (let (($x101 (and $x194 $x152)))
 (let (($x17 (and $x101 $x103)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x39 (and $x235 $x17)))
 (let (($x217 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x91 (and $x217 $x39)))
 (let (($x90 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x79 (and $x90 $x91)))
 (let (($x29 (forall ((input.ind-%var2647X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x125 (= input.ind-%var2647X (_ bv0 32))))
 (let ((?x180 (ite $x125 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x78 (= input.ind-%var2647X (_ bv1 32))))
 (let ((?x119 (ite $x78 ?x23 ?x180)))
 (let ((?x61 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2647X)))
 (let (($x116 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2647X)))
 (=> $x116 (= ?x61 ?x119)))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var2646X (_ BitVec 32)) )(let (($x78 (= input.ind-%var2646X (_ bv1 32))))
 (let (($x125 (= input.ind-%var2646X (_ bv0 32))))
 (let (($x130 (or $x125 $x78)))
 (let (($x116 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2646X)))
 (= $x116 $x130))))))
 ))
 (let (($x33 (and $x231 $x29)))
 (let (($x11 (and $x33 $x79)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x47 (and $x177 $x11)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x153 (and $x155 $x47)))
 (let (($x76 (and $x26 $x153)))
 (let (($x38 (= input.spec-%var-y-0.L2%23%bbentry ?x236)))
 (let (($x128 (and $x38 $x76)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x82 (and $x43 $x128)))
 (let (($x102 (and $x26 $x82)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x258 (and $x60 $x102)))
 (let (($x165 (=> $x258 $x185)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x147 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x164 (ite $x147 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x94 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x236 (ite $x94 ?x23 ?x164)))
 (let (($x216 (= ?x236 ?x221)))
 (let (($x185 (= $x216 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x259 (concat ?x57 (concat ?x84 (concat ?x27 ?x131)))))
 (let (($x245 (= ?x259 input.dst.llvm-%x)))
 (let (($x228 (= $x245 true)))
 (let (($x189 (= input.dst.llvm-%x ?x259)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x232)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x205 $x161)))
 (let (($x182 (and $x233 $x71)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x138 $x182)))
 (let (($x160 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x230)))))))
 (let (($x167 (and (and (and $x222 $x160) $x100) $x189)))
 (let (($x63 (= $x167 true)))
 (let (($x181 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x12 (= $x181 true)))
 (let (($x68 (and $x12 $x63)))
 (let (($x62 (and $x68 $x228)))
 (let (($x109 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x227 (and true $x109)))
 (let (($x35 (and $x227 $x62)))
 (let (($x262 (= input.spec-%tmpvar-10.L2%13%d $x109)))
 (let (($x9 (and $x262 $x35)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x75 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x136 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x151 (=> $x136 $x75)))
 (let (($x244 (or $x20 $x5)))
 (let ((?x41 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x41 (_ bv1 32))))
 (let (($x83 (= $x136 $x197)))
 (let (($x26 (= false false)))
 (let (($x88 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x240 (=> $x88 $x26)))
 (let (($x163 (= ?x41 (_ bv0 32))))
 (let (($x55 (= $x88 $x163)))
 (let (($x183 (and (and (and $x55 $x240) $x83) $x151)))
 (let (($x132 (and $x183 $x9)))
 (let (($x139 (= input.spec-%tmpvar-12.L2%17%d.2 ?x236)))
 (let (($x144 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x144 $x139)))
 (let (($x203 (or $x147 $x94)))
 (let ((?x150 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x150 (_ bv1 32))))
 (let (($x206 (= $x144 $x44)))
 (let (($x106 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x40 (=> $x106 $x26)))
 (let (($x85 (= ?x150 (_ bv0 32))))
 (let (($x134 (= $x106 $x85)))
 (let (($x50 (and (and (and $x134 $x40) $x206) $x238)))
 (let (($x28 (and $x50 $x132)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x176 (and $x145 $x28)))
 (let (($x122 (forall ((input.ind-%var2605X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x125 (= input.ind-%var2605X (_ bv0 32))))
 (let ((?x180 (ite $x125 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x78 (= input.ind-%var2605X (_ bv1 32))))
 (let ((?x119 (ite $x78 ?x23 ?x180)))
 (let ((?x162 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2605X)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2605X)))
 (=> $x140 (= ?x162 ?x119)))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var2604X (_ BitVec 32)) )(let (($x78 (= input.ind-%var2604X (_ bv1 32))))
 (let (($x125 (= input.ind-%var2604X (_ bv0 32))))
 (let (($x130 (or $x125 $x78)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2604X)))
 (= $x140 $x130))))))
 ))
 (let (($x87 (and $x16 $x122)))
 (let (($x113 (and $x87 $x176)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x226 (and $x224 $x113)))
 (let (($x137 (forall ((input.ind-%var2615X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2615X)))
 (=> $x74 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2615X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var2614X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2614X)))
 (= $x74 false)))
 ))
 (let (($x254 (and $x105 $x137)))
 (let (($x187 (and $x254 $x226)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x157 (and $x186 $x187)))
 (let (($x172 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x201 (and $x172 $x157)))
 (let (($x108 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x103 (and $x108 $x201)))
 (let (($x152 (forall ((input.ind-%var2629X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x125 (= input.ind-%var2629X (_ bv0 32))))
 (let ((?x180 (ite $x125 ?x179 (_ bv0 32))))
 (let ((?x223 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2629X)))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2629X)))
 (=> $x114 (= ?x223 ?x180))))))))
 ))
 (let (($x194 (forall ((input.ind-%var2628X (_ BitVec 32)) )(let (($x125 (= input.ind-%var2628X (_ bv0 32))))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2628X)))
 (= $x114 $x125))))
 ))
 (let (($x101 (and $x194 $x152)))
 (let (($x17 (and $x101 $x103)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x39 (and $x235 $x17)))
 (let (($x217 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x91 (and $x217 $x39)))
 (let (($x90 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x79 (and $x90 $x91)))
 (let (($x29 (forall ((input.ind-%var2647X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x125 (= input.ind-%var2647X (_ bv0 32))))
 (let ((?x180 (ite $x125 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x78 (= input.ind-%var2647X (_ bv1 32))))
 (let ((?x119 (ite $x78 ?x23 ?x180)))
 (let ((?x61 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2647X)))
 (let (($x116 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2647X)))
 (=> $x116 (= ?x61 ?x119)))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var2646X (_ BitVec 32)) )(let (($x78 (= input.ind-%var2646X (_ bv1 32))))
 (let (($x125 (= input.ind-%var2646X (_ bv0 32))))
 (let (($x130 (or $x125 $x78)))
 (let (($x116 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2646X)))
 (= $x116 $x130))))))
 ))
 (let (($x33 (and $x231 $x29)))
 (let (($x11 (and $x33 $x79)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x47 (and $x177 $x11)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x153 (and $x155 $x47)))
 (let (($x76 (and $x26 $x153)))
 (let (($x38 (= input.spec-%var-y-0.L2%23%bbentry ?x236)))
 (let (($x128 (and $x38 $x76)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x82 (and $x43 $x128)))
 (let (($x102 (and $x26 $x82)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x258 (and $x60 $x102)))
 (let (($x165 (=> $x258 $x185)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x236 (ite $x164 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x147 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x147 ?x23 ?x236)))
 (let (($x208 (= ?x38 ?x18)))
 (let (($x49 (= $x208 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x48 (concat ?x202 (concat ?x218 ?x69)))))
 (let (($x253 (= ?x252 input.dst.llvm-%x)))
 (let (($x110 (= $x253 true)))
 (let (($x93 (= input.dst.llvm-%x ?x252)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x67)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x115 $x196)))
 (let (($x251 (and $x220 $x133)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x112 $x251)))
 (let (($x79 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x256 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x258)))))))
 (let (($x169 (and (and (and $x256 $x79) $x97) $x93)))
 (let (($x143 (= $x169 true)))
 (let (($x201 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x103 (not $x201)))
 (let (($x17 (= $x103 true)))
 (let (($x98 (and $x17 $x143)))
 (let (($x199 (and $x98 $x110)))
 (let (($x113 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x187 (and true $x113)))
 (let (($x148 (and $x187 $x199)))
 (let (($x226 (= input.spec-%tmpvar-10.L2%13%d $x113)))
 (let (($x123 (and $x226 $x148)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x62 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x63 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x35 (=> $x63 $x62)))
 (let (($x175 (or $x20 $x5)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x70 (_ bv1 32))))
 (let (($x245 (= $x63 $x68)))
 (let (($x32 (= false false)))
 (let (($x131 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x167 (=> $x131 $x32)))
 (let (($x259 (= ?x70 (_ bv0 32))))
 (let (($x189 (= $x131 $x259)))
 (let (($x28 (and (and (and $x189 $x167) $x245) $x35)))
 (let (($x159 (and $x28 $x123)))
 (let (($x57 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x100 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x215 (=> $x100 $x57)))
 (let (($x161 (or $x164 $x147)))
 (let ((?x233 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x233 (_ bv1 32))))
 (let (($x170 (= $x100 $x66)))
 (let (($x168 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x182 (=> $x168 $x32)))
 (let (($x232 (= ?x233 (_ bv0 32))))
 (let (($x71 (= $x168 $x232)))
 (let (($x210 (and (and (and $x71 $x182) $x170) $x215)))
 (let (($x111 (and $x210 $x159)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x135 (and $x205 $x111)))
 (let (($x246 (forall ((input.ind-%var2737X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x107 (= input.ind-%var2737X (_ bv0 32))))
 (let ((?x152 (ite $x107 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var2737X (_ bv1 32))))
 (let ((?x101 (ite $x257 ?x23 ?x152)))
 (let ((?x243 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2737X)))
 (let (($x149 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2737X)))
 (=> $x149 (= ?x243 ?x101)))))))))))
 ))
 (let (($x52 (forall ((input.ind-%var2736X (_ BitVec 32)) )(let (($x257 (= input.ind-%var2736X (_ bv1 32))))
 (let (($x107 (= input.ind-%var2736X (_ bv0 32))))
 (let (($x29 (or $x107 $x257)))
 (let (($x149 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2736X)))
 (= $x149 $x29))))))
 ))
 (let (($x13 (and $x52 $x246)))
 (let (($x234 (and $x13 $x135)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x212 (and $x75 $x234)))
 (let (($x83 (forall ((input.ind-%var2747X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2747X)))
 (=> $x171 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2747X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var2746X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2746X)))
 (= $x171 false)))
 ))
 (let (($x80 (and $x53 $x83)))
 (let (($x7 (and $x80 $x212)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x191 (and $x44 $x7)))
 (let (($x166 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x193 (and $x166 $x191)))
 (let (($x134 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x86 (and $x134 $x193)))
 (let (($x203 (forall ((input.ind-%var2761X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x107 (= input.ind-%var2761X (_ bv0 32))))
 (let ((?x152 (ite $x107 ?x179 (_ bv0 32))))
 (let ((?x146 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2761X)))
 (let (($x124 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2761X)))
 (=> $x124 (= ?x146 ?x152))))))))
 ))
 (let (($x140 (forall ((input.ind-%var2760X (_ BitVec 32)) )(let (($x107 (= input.ind-%var2760X (_ bv0 32))))
 (let (($x124 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2760X)))
 (= $x124 $x107))))
 ))
 (let (($x150 (and $x140 $x203)))
 (let (($x54 (and $x150 $x86)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x195 (and $x105 $x54)))
 (let (($x74 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x58 (and $x74 $x195)))
 (let (($x45 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x207 (and $x45 $x58)))
 (let (($x24 (forall ((input.ind-%var2779X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x107 (= input.ind-%var2779X (_ bv0 32))))
 (let ((?x152 (ite $x107 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var2779X (_ bv1 32))))
 (let ((?x101 (ite $x257 ?x23 ?x152)))
 (let ((?x248 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2779X)))
 (let (($x130 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2779X)))
 (=> $x130 (= ?x248 ?x101)))))))))))
 ))
 (let (($x239 (forall ((input.ind-%var2778X (_ BitVec 32)) )(let (($x257 (= input.ind-%var2778X (_ bv1 32))))
 (let (($x107 (= input.ind-%var2778X (_ bv0 32))))
 (let (($x29 (or $x107 $x257)))
 (let (($x130 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2778X)))
 (= $x130 $x29))))))
 ))
 (let (($x127 (and $x239 $x24)))
 (let (($x192 (and $x127 $x207)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x14 (and $x237 $x192)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x121 (and $x73 $x14)))
 (let (($x198 (and $x32 $x121)))
 (let (($x261 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x120 (and $x261 $x198)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x173 (and $x15 $x120)))
 (let (($x64 (and $x32 $x173)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x77 (and $x60 $x64)))
 (let (($x250 (=> $x77 $x49)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x164 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x236 (ite $x164 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x147 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x147 ?x23 ?x236)))
 (let (($x208 (= ?x38 ?x18)))
 (let (($x49 (= $x208 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x48 (concat ?x202 (concat ?x218 ?x69)))))
 (let (($x253 (= ?x252 input.dst.llvm-%x)))
 (let (($x110 (= $x253 true)))
 (let (($x93 (= input.dst.llvm-%x ?x252)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x67)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x115 $x196)))
 (let (($x251 (and $x220 $x133)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x112 $x251)))
 (let (($x79 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x256 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x258)))))))
 (let (($x169 (and (and (and $x256 $x79) $x97) $x93)))
 (let (($x143 (= $x169 true)))
 (let (($x201 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x103 (not $x201)))
 (let (($x17 (= $x103 true)))
 (let (($x98 (and $x17 $x143)))
 (let (($x199 (and $x98 $x110)))
 (let (($x113 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x187 (and true $x113)))
 (let (($x148 (and $x187 $x199)))
 (let (($x226 (= input.spec-%tmpvar-10.L2%13%d $x113)))
 (let (($x123 (and $x226 $x148)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x20 ?x179 (_ bv0 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x42 (ite $x5 ?x23 ?x34)))
 (let (($x62 (= input.spec-%tmpvar-16.L2%25%d.2 ?x42)))
 (let (($x63 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x35 (=> $x63 $x62)))
 (let (($x175 (or $x20 $x5)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x70 (_ bv1 32))))
 (let (($x245 (= $x63 $x68)))
 (let (($x32 (= false false)))
 (let (($x131 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x167 (=> $x131 $x32)))
 (let (($x259 (= ?x70 (_ bv0 32))))
 (let (($x189 (= $x131 $x259)))
 (let (($x28 (and (and (and $x189 $x167) $x245) $x35)))
 (let (($x159 (and $x28 $x123)))
 (let (($x57 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x100 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x215 (=> $x100 $x57)))
 (let (($x161 (or $x164 $x147)))
 (let ((?x233 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x233 (_ bv1 32))))
 (let (($x170 (= $x100 $x66)))
 (let (($x168 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x182 (=> $x168 $x32)))
 (let (($x232 (= ?x233 (_ bv0 32))))
 (let (($x71 (= $x168 $x232)))
 (let (($x210 (and (and (and $x71 $x182) $x170) $x215)))
 (let (($x111 (and $x210 $x159)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x135 (and $x205 $x111)))
 (let (($x246 (forall ((input.ind-%var2737X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x107 (= input.ind-%var2737X (_ bv0 32))))
 (let ((?x152 (ite $x107 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var2737X (_ bv1 32))))
 (let ((?x101 (ite $x257 ?x23 ?x152)))
 (let ((?x243 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2737X)))
 (let (($x149 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2737X)))
 (=> $x149 (= ?x243 ?x101)))))))))))
 ))
 (let (($x52 (forall ((input.ind-%var2736X (_ BitVec 32)) )(let (($x257 (= input.ind-%var2736X (_ bv1 32))))
 (let (($x107 (= input.ind-%var2736X (_ bv0 32))))
 (let (($x29 (or $x107 $x257)))
 (let (($x149 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2736X)))
 (= $x149 $x29))))))
 ))
 (let (($x13 (and $x52 $x246)))
 (let (($x234 (and $x13 $x135)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x212 (and $x75 $x234)))
 (let (($x83 (forall ((input.ind-%var2747X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2747X)))
 (=> $x171 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2747X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var2746X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2746X)))
 (= $x171 false)))
 ))
 (let (($x80 (and $x53 $x83)))
 (let (($x7 (and $x80 $x212)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x191 (and $x44 $x7)))
 (let (($x166 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x193 (and $x166 $x191)))
 (let (($x134 (= ?x179 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x86 (and $x134 $x193)))
 (let (($x203 (forall ((input.ind-%var2761X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x107 (= input.ind-%var2761X (_ bv0 32))))
 (let ((?x152 (ite $x107 ?x179 (_ bv0 32))))
 (let ((?x146 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2761X)))
 (let (($x124 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2761X)))
 (=> $x124 (= ?x146 ?x152))))))))
 ))
 (let (($x140 (forall ((input.ind-%var2760X (_ BitVec 32)) )(let (($x107 (= input.ind-%var2760X (_ bv0 32))))
 (let (($x124 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2760X)))
 (= $x124 $x107))))
 ))
 (let (($x150 (and $x140 $x203)))
 (let (($x54 (and $x150 $x86)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x195 (and $x105 $x54)))
 (let (($x74 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x58 (and $x74 $x195)))
 (let (($x45 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x207 (and $x45 $x58)))
 (let (($x24 (forall ((input.ind-%var2779X (_ BitVec 32)) )(let ((?x179 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x107 (= input.ind-%var2779X (_ bv0 32))))
 (let ((?x152 (ite $x107 ?x179 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var2779X (_ bv1 32))))
 (let ((?x101 (ite $x257 ?x23 ?x152)))
 (let ((?x248 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2779X)))
 (let (($x130 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2779X)))
 (=> $x130 (= ?x248 ?x101)))))))))))
 ))
 (let (($x239 (forall ((input.ind-%var2778X (_ BitVec 32)) )(let (($x257 (= input.ind-%var2778X (_ bv1 32))))
 (let (($x107 (= input.ind-%var2778X (_ bv0 32))))
 (let (($x29 (or $x107 $x257)))
 (let (($x130 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2778X)))
 (= $x130 $x29))))))
 ))
 (let (($x127 (and $x239 $x24)))
 (let (($x192 (and $x127 $x207)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x14 (and $x237 $x192)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x121 (and $x73 $x14)))
 (let (($x198 (and $x32 $x121)))
 (let (($x261 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x120 (and $x261 $x198)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x173 (and $x15 $x120)))
 (let (($x64 (and $x32 $x173)))
 (let (($x60 (= input.spec-%var-y-1.L2%31%bbentry ?x42)))
 (let (($x77 (and $x60 $x64)))
 (let (($x250 (=> $x77 $x49)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087219/query
