==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x6 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x6 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x536 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x537 (not $x536)))
 (let (($x538 (or $x536 $x537)))
 (let (($x539 (= $x538 false)))
 (let (($x540 (= $x539 true)))
 (let ((?x499 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x501 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x505 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x508 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x509 (concat ?x508 (concat ?x505 (concat ?x501 ?x499)))))
 (let (($x510 (= ?x509 input.dst.llvm-%x)))
 (let (($x511 (= $x510 true)))
 (let (($x512 (= $x511 true)))
 (let (($x491 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x492 (= $x491 true)))
 (let (($x493 (= $x492 true)))
 (let (($x494 (= $x493 true)))
 (let ((?x483 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x484 (= (_ bv0 32) ?x483)))
 (let ((?x480 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x481 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x480)))
 (let (($x478 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x482 (and $x478 $x481)))
 (let (($x485 (and $x482 $x484)))
 (let (($x476 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x486 (and $x476 $x485)))
 (let (($x487 (= $x486 true)))
 (let (($x488 (= $x487 true)))
 (let (($x489 (= $x488 true)))
 (let (($x495 (and $x489 $x494)))
 (let (($x513 (and $x495 $x512)))
 (let (($x471 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x473 (= $x471 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x514 (and $x473 $x513)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x66 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x67 (ite $x66 ?x24 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x467 (= input.spec-%tmpvar-16.L1%25%d.2 ?x67)))
 (let (($x451 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x468 (=> $x451 $x467)))
 (let (($x462 (= $x451 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x66) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x58 (= false false)))
 (let (($x438 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x449 (=> $x438 $x58)))
 (let (($x445 (= $x438 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x66) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x450 (and $x445 $x449)))
 (let (($x466 (and $x450 $x462)))
 (let (($x469 (and $x466 $x468)))
 (let (($x515 (and $x469 $x514)))
 (let (($x97 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x98 (ite $x97 ?x24 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x432 (= input.spec-%tmpvar-12.L1%17%d.2 ?x98)))
 (let (($x416 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x433 (=> $x416 $x432)))
 (let (($x427 (= $x416 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x97) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x403 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x414 (=> $x403 $x58)))
 (let (($x410 (= $x403 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x97) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x415 (and $x410 $x414)))
 (let (($x431 (and $x415 $x427)))
 (let (($x434 (and $x431 $x433)))
 (let (($x516 (and $x434 $x515)))
 (let (($x400 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x517 (and $x400 $x516)))
 (let (($x397 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x145 (= Lambda35Var (_ bv0 32))))
 (let ((?x198 (ite $x145 ?x28 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x144 (= Lambda35Var (_ bv1 32))))
 (let ((?x201 (ite $x144 ?x24 ?x198)))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x371 (_ bv1 32))))
 (=> $x385 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x201)))))))))))
 ))
 (let (($x387 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x154 (_ bv1 32))))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x371 (_ bv1 32))))
 (= $x385 $x180))))))
 ))
 (let (($x377 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (=> $x372 $x58)))))
 ))
 (let (($x374 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x154 (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (= $x372 $x155))))))
 ))
 (let (($x378 (and $x374 $x377)))
 (let (($x388 (and $x378 $x387)))
 (let (($x398 (and $x388 $x397)))
 (let (($x518 (and $x398 $x517)))
 (let (($x352 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x519 (and $x352 $x518)))
 (let (($x349 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x320 (_ bv1 32))))
 (=> $x336 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x338 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x311 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x311 (_ bv1 32))))
 (let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x320 (_ bv1 32))))
 (= $x336 $x333))))))
 ))
 (let (($x326 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x320 (_ bv0 32))))
 (=> $x321 $x58)))))
 ))
 (let (($x323 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x311 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x311 (_ bv0 32))))
 (let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x320 (_ bv0 32))))
 (= $x321 $x314))))))
 ))
 (let (($x327 (and $x323 $x326)))
 (let (($x339 (and $x327 $x338)))
 (let (($x350 (and $x339 $x349)))
 (let (($x520 (and $x350 $x519)))
 (let (($x296 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x521 (and $x296 $x520)))
 (let (($x294 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x522 (and $x294 $x521)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x291 (= ?x28 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x523 (and $x291 $x522)))
 (let (($x288 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x145 (= Lambda35Var (_ bv0 32))))
 (let ((?x198 (ite $x145 ?x28 (_ bv0 32))))
 (let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x250 (_ bv1 32))))
 (=> $x272 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x198))))))))
 ))
 (let (($x274 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x250 (_ bv1 32))))
 (= $x272 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x256 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x250 (_ bv0 32))))
 (=> $x251 $x58)))))
 ))
 (let (($x253 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x250 (_ bv0 32))))
 (= $x251 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x257 (and $x253 $x256)))
 (let (($x275 (and $x257 $x274)))
 (let (($x289 (and $x275 $x288)))
 (let (($x524 (and $x289 $x523)))
 (let (($x212 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x525 (and $x212 $x524)))
 (let (($x210 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x526 (and $x210 $x525)))
 (let (($x208 (= ?x24 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x527 (and $x208 $x526)))
 (let (($x205 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x145 (= Lambda35Var (_ bv0 32))))
 (let ((?x198 (ite $x145 ?x28 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x144 (= Lambda35Var (_ bv1 32))))
 (let ((?x201 (ite $x144 ?x24 ?x198)))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x157 (_ bv1 32))))
 (=> $x181 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x201)))))))))))
 ))
 (let (($x183 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x154 (_ bv1 32))))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x157 (_ bv1 32))))
 (= $x181 $x180))))))
 ))
 (let (($x163 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x157 (_ bv0 32))))
 (=> $x158 $x58)))))
 ))
 (let (($x160 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x154 (_ bv0 32))))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x157 (_ bv0 32))))
 (= $x158 $x155))))))
 ))
 (let (($x164 (and $x160 $x163)))
 (let (($x185 (and $x164 $x183)))
 (let (($x206 (and $x185 $x205)))
 (let (($x528 (and $x206 $x527)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x529 (and $x100 $x528)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x530 (and $x90 $x529)))
 (let (($x531 (and $x58 $x530)))
 (let (($x85 (= input.spec-%var-y-0.L1%23%bbentry ?x98)))
 (let (($x532 (and $x85 $x531)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x533 (and $x68 $x532)))
 (let (($x534 (and $x58 $x533)))
 (let (($x54 (= input.spec-%var-y-1.L1%31%bbentry ?x67)))
 (let (($x535 (and $x54 $x534)))
 (let (($x541 (=> $x535 $x540)))
 (not $x541))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x536 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x537 (not $x536)))
 (let (($x538 (or $x536 $x537)))
 (let (($x539 (= $x538 false)))
 (let (($x540 (= $x539 true)))
 (let ((?x499 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x501 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x505 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x508 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x509 (concat ?x508 (concat ?x505 (concat ?x501 ?x499)))))
 (let (($x510 (= ?x509 input.dst.llvm-%x)))
 (let (($x511 (= $x510 true)))
 (let (($x512 (= $x511 true)))
 (let (($x491 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x492 (= $x491 true)))
 (let (($x493 (= $x492 true)))
 (let (($x494 (= $x493 true)))
 (let ((?x483 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x484 (= (_ bv0 32) ?x483)))
 (let ((?x480 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x481 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x480)))
 (let (($x478 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x482 (and $x478 $x481)))
 (let (($x485 (and $x482 $x484)))
 (let (($x476 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x486 (and $x476 $x485)))
 (let (($x487 (= $x486 true)))
 (let (($x488 (= $x487 true)))
 (let (($x489 (= $x488 true)))
 (let (($x495 (and $x489 $x494)))
 (let (($x513 (and $x495 $x512)))
 (let (($x471 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x473 (= $x471 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x514 (and $x473 $x513)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x66 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x67 (ite $x66 ?x24 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x467 (= input.spec-%tmpvar-16.L1%25%d.2 ?x67)))
 (let (($x451 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x468 (=> $x451 $x467)))
 (let (($x462 (= $x451 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x66) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x58 (= false false)))
 (let (($x438 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x449 (=> $x438 $x58)))
 (let (($x445 (= $x438 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x66) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x450 (and $x445 $x449)))
 (let (($x466 (and $x450 $x462)))
 (let (($x469 (and $x466 $x468)))
 (let (($x515 (and $x469 $x514)))
 (let (($x97 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x98 (ite $x97 ?x24 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x432 (= input.spec-%tmpvar-12.L1%17%d.2 ?x98)))
 (let (($x416 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x433 (=> $x416 $x432)))
 (let (($x427 (= $x416 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x97) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x403 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x414 (=> $x403 $x58)))
 (let (($x410 (= $x403 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x97) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x415 (and $x410 $x414)))
 (let (($x431 (and $x415 $x427)))
 (let (($x434 (and $x431 $x433)))
 (let (($x516 (and $x434 $x515)))
 (let (($x400 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x517 (and $x400 $x516)))
 (let (($x397 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x145 (= Lambda35Var (_ bv0 32))))
 (let ((?x198 (ite $x145 ?x28 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x144 (= Lambda35Var (_ bv1 32))))
 (let ((?x201 (ite $x144 ?x24 ?x198)))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x371 (_ bv1 32))))
 (=> $x385 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x201)))))))))))
 ))
 (let (($x387 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x154 (_ bv1 32))))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x371 (_ bv1 32))))
 (= $x385 $x180))))))
 ))
 (let (($x377 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (=> $x372 $x58)))))
 ))
 (let (($x374 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x154 (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (= $x372 $x155))))))
 ))
 (let (($x378 (and $x374 $x377)))
 (let (($x388 (and $x378 $x387)))
 (let (($x398 (and $x388 $x397)))
 (let (($x518 (and $x398 $x517)))
 (let (($x352 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x519 (and $x352 $x518)))
 (let (($x349 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x320 (_ bv1 32))))
 (=> $x336 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x338 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x311 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x311 (_ bv1 32))))
 (let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x320 (_ bv1 32))))
 (= $x336 $x333))))))
 ))
 (let (($x326 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x320 (_ bv0 32))))
 (=> $x321 $x58)))))
 ))
 (let (($x323 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x311 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x311 (_ bv0 32))))
 (let ((?x320 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x320 (_ bv0 32))))
 (= $x321 $x314))))))
 ))
 (let (($x327 (and $x323 $x326)))
 (let (($x339 (and $x327 $x338)))
 (let (($x350 (and $x339 $x349)))
 (let (($x520 (and $x350 $x519)))
 (let (($x296 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x521 (and $x296 $x520)))
 (let (($x294 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x522 (and $x294 $x521)))
 (let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x291 (= ?x28 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x523 (and $x291 $x522)))
 (let (($x288 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x145 (= Lambda35Var (_ bv0 32))))
 (let ((?x198 (ite $x145 ?x28 (_ bv0 32))))
 (let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x250 (_ bv1 32))))
 (=> $x272 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x198))))))))
 ))
 (let (($x274 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x250 (_ bv1 32))))
 (= $x272 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x256 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x250 (_ bv0 32))))
 (=> $x251 $x58)))))
 ))
 (let (($x253 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x250 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x250 (_ bv0 32))))
 (= $x251 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x257 (and $x253 $x256)))
 (let (($x275 (and $x257 $x274)))
 (let (($x289 (and $x275 $x288)))
 (let (($x524 (and $x289 $x523)))
 (let (($x212 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x525 (and $x212 $x524)))
 (let (($x210 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x526 (and $x210 $x525)))
 (let (($x208 (= ?x24 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x527 (and $x208 $x526)))
 (let (($x205 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x28 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x145 (= Lambda35Var (_ bv0 32))))
 (let ((?x198 (ite $x145 ?x28 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x144 (= Lambda35Var (_ bv1 32))))
 (let ((?x201 (ite $x144 ?x24 ?x198)))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x157 (_ bv1 32))))
 (=> $x181 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x201)))))))))))
 ))
 (let (($x183 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x154 (_ bv1 32))))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x157 (_ bv1 32))))
 (= $x181 $x180))))))
 ))
 (let (($x163 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x157 (_ bv0 32))))
 (=> $x158 $x58)))))
 ))
 (let (($x160 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x154 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x154 (_ bv0 32))))
 (let ((?x157 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x157 (_ bv0 32))))
 (= $x158 $x155))))))
 ))
 (let (($x164 (and $x160 $x163)))
 (let (($x185 (and $x164 $x183)))
 (let (($x206 (and $x185 $x205)))
 (let (($x528 (and $x206 $x527)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x529 (and $x100 $x528)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x530 (and $x90 $x529)))
 (let (($x531 (and $x58 $x530)))
 (let (($x85 (= input.spec-%var-y-0.L1%23%bbentry ?x98)))
 (let (($x532 (and $x85 $x531)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x533 (and $x68 $x532)))
 (let (($x534 (and $x58 $x533)))
 (let (($x54 (= input.spec-%var-y-1.L1%31%bbentry ?x67)))
 (let (($x535 (and $x54 $x534)))
 (let (($x541 (=> $x535 $x540)))
 (not $x541))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x53160004)
  (define-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!51))
  (define-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32)
    #x00000015)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x53160007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x53160004)
  (define-fun input.spec-%tmpvar-10.L1%13%d () Bool
    false)
  (define-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32)
    #x00000015)
  (define-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32)
    #x00000015)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1!60 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000004
    (ite (= x!0 #x00000001) #x00000015
      #x00000007)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1!57 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L1%13%d.0.1!57 (k!52 x!0)))
  (define-fun k!53 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!55 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1!59 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L1%13%d.0.1!59 (k!55 x!0)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1!56 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000004
    (ite (= x!0 #x00000001) #x00000015
      #x00000006)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L1%13%d.1.1!56 (k!55 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1!61 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000004
      #x0000000a))
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L1%13%d.1.1!60 (k!52 x!0)))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x53160004) #x09
      #x00))
  (define-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1!58 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%13%d.0.1!58 (k!53 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%13%d.1.1!61 (k!53 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.spec-%tmpvar-10.L1%13%d () Bool
    true)
  (define-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xabfd79f4)
  (define-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32)
    #x80000012)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x80000006)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xabfd79f7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xabfd79f4)
  (define-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32)
    #x80000012)
  (define-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32)
    #x80000012)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x80000006)
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1!43 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x80000001
      #x00000008))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%13%d.1.1!43 (k!36 x!0)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1!39 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L1%13%d.0.1!39 (k!35 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1!42 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x80000001
    (ite (= x!0 #x00000001) #x80000012
      #x00000007)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L1%13%d.1.1!42 (k!38 x!0)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L1%13%d.0.1!44 (k!38 x!0)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1!40 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x80000001
    (ite (= x!0 #x00000001) #x80000012
      #x00000006)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L1%13%d.1.1!40 (k!35 x!0)))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xabfd79f7) #x80
    (ite (= x!0 #xabfd79f4) #x06
      #x00)))
  (define-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1!41 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%13%d.0.1!41 (k!36 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x543 (not $x197)))
 (let (($x544 (or $x197 $x543)))
 (let (($x545 (not $x544)))
 (let ((?x331 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x331 (_ bv1 32))))
 (let (($x332 (= ?x331 (_ bv0 32))))
 (let (($x186 (or $x332 $x222)))
 (let (($x193 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x186)))
 (let ((?x384 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (bvuge ?x384 (_ bv1 32))))
 (let (($x389 (= ?x384 (_ bv0 32))))
 (let (($x175 (or $x389 $x304)))
 (let (($x223 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x179 (and $x223 $x175)))
 (let (($x196 (or $x179 $x193)))
 (let (($x546 (or $x196 $x545)))
 (let (($x547 (= $x546 true)))
 (let (($x548 (= $x547 true)))
 (let ((?x261 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x270 (concat ?x262 (concat ?x264 ?x261)))))
 (let (($x277 (= ?x276 input.dst.llvm-%x)))
 (let (($x279 (= $x277 true)))
 (let (($x280 (= $x279 true)))
 (let (($x243 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x244 (= $x243 true)))
 (let (($x245 (= $x244 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x233)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (and $x228 $x234)))
 (let (($x238 (and $x235 $x237)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x226 $x238)))
 (let (($x240 (= $x239 true)))
 (let (($x227 (= $x240 true)))
 (let (($x241 (= $x227 true)))
 (let (($x254 (and $x241 $x246)))
 (let (($x281 (and $x254 $x280)))
 (let (($x225 (= $x223 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x278 (and $x225 $x281)))
 (let ((?x98 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x251 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x247 (ite $x251 ?x98 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x218 (= input.spec-%tmpvar-16.L1%25%d.2 ?x247)))
 (let (($x324 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x219 (=> $x324 $x218)))
 (let (($x343 (= $x324 $x222)))
 (let (($x207 (= false false)))
 (let (($x303 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x317 (=> $x303 $x207)))
 (let (($x310 (= $x303 $x332)))
 (let (($x318 (and $x310 $x317)))
 (let (($x217 (and $x318 $x343)))
 (let (($x221 (and $x217 $x219)))
 (let (($x282 (and $x221 $x278)))
 (let (($x323 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x325 (ite $x323 ?x98 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x200 (= input.spec-%tmpvar-12.L1%17%d.2 ?x325)))
 (let (($x174 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x392 (=> $x174 $x200)))
 (let (($x192 (= $x174 $x304)))
 (let (($x369 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x177 (=> $x369 $x207)))
 (let (($x172 (= $x369 $x389)))
 (let (($x178 (and $x172 $x177)))
 (let (($x199 (and $x178 $x192)))
 (let (($x393 (and $x199 $x392)))
 (let (($x283 (and $x393 $x282)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x284 (and $x150 $x283)))
 (let (($x148 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x402 (= Lambda35Var (_ bv0 32))))
 (let ((?x501 (ite $x402 ?x64 (_ bv0 32))))
 (let ((?x98 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x431 (= Lambda35Var (_ bv1 32))))
 (let ((?x506 (ite $x431 ?x98 ?x501)))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x136 (_ bv1 32))))
 (=> $x116 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x506)))))))))))
 ))
 (let (($x122 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x456 (_ bv1 32))))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x136 (_ bv1 32))))
 (= $x116 $x485))))))
 ))
 (let (($x125 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x136 (_ bv0 32))))
 (=> $x132 $x207)))))
 ))
 (let (($x123 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x445 (= ?x456 (_ bv0 32))))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x136 (_ bv0 32))))
 (= $x132 $x445))))))
 ))
 (let (($x118 (and $x123 $x125)))
 (let (($x120 (and $x118 $x122)))
 (let (($x149 (and $x120 $x148)))
 (let (($x109 (and $x149 $x284)))
 (let (($x424 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x106 (and $x424 $x109)))
 (let (($x409 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x458 (bvuge ?x11 (_ bv1 32))))
 (=> $x458 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x464 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x457 (bvuge ?x50 (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x458 (bvuge ?x11 (_ bv1 32))))
 (= $x458 $x457))))))
 ))
 (let (($x443 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x11 (_ bv0 32))))
 (=> $x14 $x207)))))
 ))
 (let (($x20 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x50 (_ bv0 32))))
 (let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x11 (_ bv0 32))))
 (= $x14 $x61))))))
 ))
 (let (($x441 (and $x20 $x443)))
 (let (($x465 (and $x441 $x464)))
 (let (($x404 (and $x465 $x409)))
 (let (($x107 (and $x404 $x106)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x108 (and $x84 $x107)))
 (let (($x94 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x110 (and $x94 $x108)))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x86 (= ?x64 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x111 (and $x86 $x110)))
 (let (($x73 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x402 (= Lambda35Var (_ bv0 32))))
 (let ((?x501 (ite $x402 ?x64 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x102 (_ bv1 32))))
 (=> $x38 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x501))))))))
 ))
 (let (($x7 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x102 (_ bv1 32))))
 (= $x38 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x10 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (=> $x103 $x207)))))
 ))
 (let (($x105 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (= $x103 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x9 (and $x105 $x10)))
 (let (($x34 (and $x9 $x7)))
 (let (($x81 (and $x34 $x73)))
 (let (($x112 (and $x81 $x111)))
 (let (($x519 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x113 (and $x519 $x112)))
 (let (($x517 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x114 (and $x517 $x113)))
 (let (($x515 (= ?x98 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x129 (and $x515 $x114)))
 (let (($x512 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x402 (= Lambda35Var (_ bv0 32))))
 (let ((?x501 (ite $x402 ?x64 (_ bv0 32))))
 (let ((?x98 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x431 (= Lambda35Var (_ bv1 32))))
 (let ((?x506 (ite $x431 ?x98 ?x501)))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x450 (_ bv1 32))))
 (=> $x486 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x506)))))))))))
 ))
 (let (($x488 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x456 (_ bv1 32))))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x450 (_ bv1 32))))
 (= $x486 $x485))))))
 ))
 (let (($x467 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x450 (_ bv0 32))))
 (=> $x451 $x207)))))
 ))
 (let (($x462 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x445 (= ?x456 (_ bv0 32))))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x450 (_ bv0 32))))
 (= $x451 $x445))))))
 ))
 (let (($x468 (and $x462 $x467)))
 (let (($x490 (and $x468 $x488)))
 (let (($x513 (and $x490 $x512)))
 (let (($x140 (and $x513 $x129)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x141 (and $x327 $x140)))
 (let (($x296 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x142 (and $x296 $x141)))
 (let (($x161 (and $x207 $x142)))
 (let (($x291 (= input.spec-%var-y-0.L1%23%bbentry ?x325)))
 (let (($x165 (and $x291 $x161)))
 (let (($x248 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x166 (and $x248 $x165)))
 (let (($x167 (and $x207 $x166)))
 (let (($x203 (= input.spec-%var-y-1.L1%31%bbentry ?x247)))
 (let (($x168 (and $x203 $x167)))
 (let (($x549 (=> $x168 $x548)))
 (not $x549)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x543 (not $x197)))
 (let (($x544 (or $x197 $x543)))
 (let (($x545 (not $x544)))
 (let ((?x331 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x331 (_ bv1 32))))
 (let (($x332 (= ?x331 (_ bv0 32))))
 (let (($x186 (or $x332 $x222)))
 (let (($x193 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x186)))
 (let ((?x384 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (bvuge ?x384 (_ bv1 32))))
 (let (($x389 (= ?x384 (_ bv0 32))))
 (let (($x175 (or $x389 $x304)))
 (let (($x223 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x179 (and $x223 $x175)))
 (let (($x196 (or $x179 $x193)))
 (let (($x546 (or $x196 $x545)))
 (let (($x547 (= $x546 true)))
 (let (($x548 (= $x547 true)))
 (let ((?x261 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x270 (concat ?x262 (concat ?x264 ?x261)))))
 (let (($x277 (= ?x276 input.dst.llvm-%x)))
 (let (($x279 (= $x277 true)))
 (let (($x280 (= $x279 true)))
 (let (($x243 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x244 (= $x243 true)))
 (let (($x245 (= $x244 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x233)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (and $x228 $x234)))
 (let (($x238 (and $x235 $x237)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x226 $x238)))
 (let (($x240 (= $x239 true)))
 (let (($x227 (= $x240 true)))
 (let (($x241 (= $x227 true)))
 (let (($x254 (and $x241 $x246)))
 (let (($x281 (and $x254 $x280)))
 (let (($x225 (= $x223 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x278 (and $x225 $x281)))
 (let ((?x98 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x251 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x247 (ite $x251 ?x98 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x218 (= input.spec-%tmpvar-16.L1%25%d.2 ?x247)))
 (let (($x324 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x219 (=> $x324 $x218)))
 (let (($x343 (= $x324 $x222)))
 (let (($x207 (= false false)))
 (let (($x303 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x317 (=> $x303 $x207)))
 (let (($x310 (= $x303 $x332)))
 (let (($x318 (and $x310 $x317)))
 (let (($x217 (and $x318 $x343)))
 (let (($x221 (and $x217 $x219)))
 (let (($x282 (and $x221 $x278)))
 (let (($x323 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x325 (ite $x323 ?x98 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x200 (= input.spec-%tmpvar-12.L1%17%d.2 ?x325)))
 (let (($x174 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x392 (=> $x174 $x200)))
 (let (($x192 (= $x174 $x304)))
 (let (($x369 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x177 (=> $x369 $x207)))
 (let (($x172 (= $x369 $x389)))
 (let (($x178 (and $x172 $x177)))
 (let (($x199 (and $x178 $x192)))
 (let (($x393 (and $x199 $x392)))
 (let (($x283 (and $x393 $x282)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x284 (and $x150 $x283)))
 (let (($x148 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x402 (= Lambda35Var (_ bv0 32))))
 (let ((?x501 (ite $x402 ?x64 (_ bv0 32))))
 (let ((?x98 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x431 (= Lambda35Var (_ bv1 32))))
 (let ((?x506 (ite $x431 ?x98 ?x501)))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x136 (_ bv1 32))))
 (=> $x116 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x506)))))))))))
 ))
 (let (($x122 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x456 (_ bv1 32))))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x136 (_ bv1 32))))
 (= $x116 $x485))))))
 ))
 (let (($x125 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x136 (_ bv0 32))))
 (=> $x132 $x207)))))
 ))
 (let (($x123 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x445 (= ?x456 (_ bv0 32))))
 (let ((?x136 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x136 (_ bv0 32))))
 (= $x132 $x445))))))
 ))
 (let (($x118 (and $x123 $x125)))
 (let (($x120 (and $x118 $x122)))
 (let (($x149 (and $x120 $x148)))
 (let (($x109 (and $x149 $x284)))
 (let (($x424 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x106 (and $x424 $x109)))
 (let (($x409 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x458 (bvuge ?x11 (_ bv1 32))))
 (=> $x458 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x464 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x457 (bvuge ?x50 (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x458 (bvuge ?x11 (_ bv1 32))))
 (= $x458 $x457))))))
 ))
 (let (($x443 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x11 (_ bv0 32))))
 (=> $x14 $x207)))))
 ))
 (let (($x20 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x50 (_ bv0 32))))
 (let ((?x11 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x11 (_ bv0 32))))
 (= $x14 $x61))))))
 ))
 (let (($x441 (and $x20 $x443)))
 (let (($x465 (and $x441 $x464)))
 (let (($x404 (and $x465 $x409)))
 (let (($x107 (and $x404 $x106)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x108 (and $x84 $x107)))
 (let (($x94 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x110 (and $x94 $x108)))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x86 (= ?x64 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x111 (and $x86 $x110)))
 (let (($x73 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x402 (= Lambda35Var (_ bv0 32))))
 (let ((?x501 (ite $x402 ?x64 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x102 (_ bv1 32))))
 (=> $x38 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x501))))))))
 ))
 (let (($x7 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x102 (_ bv1 32))))
 (= $x38 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x10 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (=> $x103 $x207)))))
 ))
 (let (($x105 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (= $x103 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x9 (and $x105 $x10)))
 (let (($x34 (and $x9 $x7)))
 (let (($x81 (and $x34 $x73)))
 (let (($x112 (and $x81 $x111)))
 (let (($x519 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x113 (and $x519 $x112)))
 (let (($x517 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x114 (and $x517 $x113)))
 (let (($x515 (= ?x98 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x129 (and $x515 $x114)))
 (let (($x512 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x64 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x402 (= Lambda35Var (_ bv0 32))))
 (let ((?x501 (ite $x402 ?x64 (_ bv0 32))))
 (let ((?x98 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x431 (= Lambda35Var (_ bv1 32))))
 (let ((?x506 (ite $x431 ?x98 ?x501)))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x450 (_ bv1 32))))
 (=> $x486 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x506)))))))))))
 ))
 (let (($x488 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x456 (_ bv1 32))))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x450 (_ bv1 32))))
 (= $x486 $x485))))))
 ))
 (let (($x467 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x207 (= false false)))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x450 (_ bv0 32))))
 (=> $x451 $x207)))))
 ))
 (let (($x462 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x456 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x445 (= ?x456 (_ bv0 32))))
 (let ((?x450 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x450 (_ bv0 32))))
 (= $x451 $x445))))))
 ))
 (let (($x468 (and $x462 $x467)))
 (let (($x490 (and $x468 $x488)))
 (let (($x513 (and $x490 $x512)))
 (let (($x140 (and $x513 $x129)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x141 (and $x327 $x140)))
 (let (($x296 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x142 (and $x296 $x141)))
 (let (($x161 (and $x207 $x142)))
 (let (($x291 (= input.spec-%var-y-0.L1%23%bbentry ?x325)))
 (let (($x165 (and $x291 $x161)))
 (let (($x248 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x166 (and $x248 $x165)))
 (let (($x167 (and $x207 $x166)))
 (let (($x203 (= input.spec-%var-y-1.L1%31%bbentry ?x247)))
 (let (($x168 (and $x203 $x167)))
 (let (($x549 (=> $x168 $x548)))
 (not $x549)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x484 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x491 (= (_ bv0 32) ?x484)))
 (let (($x492 (= $x491 true)))
 (let (($x508 (= $x492 true)))
 (let ((?x299 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x498 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x18 (concat ?x37 (concat ?x498 ?x299)))))
 (let (($x29 (= ?x16 input.dst.llvm-%x)))
 (let (($x31 (= $x29 true)))
 (let (($x83 (= $x31 true)))
 (let (($x32 (= input.dst.llvm-%x ?x16)))
 (let ((?x354 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x355 (= (_ bv0 32) ?x354)))
 (let ((?x542 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x540 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x542)))
 (let (($x538 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x353 (and $x538 $x540)))
 (let (($x356 (and $x353 $x355)))
 (let (($x535 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x537 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and (and (and $x537 $x535) $x356) $x32)))
 (let (($x40 (= $x46 true)))
 (let (($x35 (= $x40 true)))
 (let (($x12 (= $x35 true)))
 (let (($x530 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x531 (= $x530 true)))
 (let (($x532 (= $x531 true)))
 (let (($x539 (= $x532 true)))
 (let (($x23 (and $x539 $x12)))
 (let (($x91 (and $x23 $x83)))
 (let ((?x62 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (let (($x526 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x63)))
 (let ((?x476 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x481 (= ?x476 (_ bv0 32))))
 (let (($x408 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x524 (and $x408 $x481)))
 (let (($x528 (or $x524 $x526)))
 (let (($x41 (and $x528 $x91)))
 (let (($x527 (= $x408 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x87 (and $x527 $x41)))
 (let ((?x323 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x103 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x214 (ite $x103 ?x323 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x461 (= input.spec-%tmpvar-16.L1%25%d.2 ?x214)))
 (let (($x49 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x452 (=> $x49 $x461)))
 (let (($x448 (= $x49 (bvuge ?x62 (_ bv1 32)))))
 (let (($x514 (= false false)))
 (let (($x135 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x13 (=> $x135 $x514)))
 (let (($x52 (= $x135 $x63)))
 (let (($x48 (and $x52 $x13)))
 (let (($x460 (and $x48 $x448)))
 (let (($x405 (and $x460 $x452)))
 (let (($x70 (and $x405 $x87)))
 (let (($x20 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x442 (ite $x20 ?x323 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x503 (= input.spec-%tmpvar-12.L1%17%d.2 ?x442)))
 (let (($x137 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x494 (=> $x137 $x503)))
 (let (($x489 (= $x137 (bvuge ?x476 (_ bv1 32)))))
 (let (($x363 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x127 (=> $x363 $x514)))
 (let (($x454 (= $x363 $x481)))
 (let (($x131 (and $x454 $x127)))
 (let (($x495 (and $x131 $x489)))
 (let (($x496 (and $x495 $x494)))
 (let (($x78 (and $x496 $x70)))
 (let (($x399 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x349 (and $x399 $x78)))
 (let (($x403 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x152 (= Lambda35Var (_ bv0 32))))
 (let ((?x264 (ite $x152 ?x450 (_ bv0 32))))
 (let ((?x323 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x199 (= Lambda35Var (_ bv1 32))))
 (let ((?x268 (ite $x199 ?x323 ?x264)))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x426 (_ bv1 32))))
 (=> $x394 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x268)))))))))))
 ))
 (let (($x395 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x332 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x426 (_ bv1 32))))
 (= $x394 $x238))))))
 ))
 (let (($x361 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x426 (_ bv0 32))))
 (=> $x417 $x514)))))
 ))
 (let (($x357 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x332 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x426 (_ bv0 32))))
 (= $x417 $x310))))))
 ))
 (let (($x397 (and $x357 $x361)))
 (let (($x396 (and $x397 $x395)))
 (let (($x418 (and $x396 $x403)))
 (let (($x346 (and $x418 $x349)))
 (let (($x382 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x347 (and $x382 $x346)))
 (let (($x328 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x202 (_ bv1 32))))
 (=> $x313 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x316 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x209 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x209 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x202 (_ bv1 32))))
 (= $x313 $x308))))))
 ))
 (let (($x201 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x202 (_ bv0 32))))
 (=> $x204 $x514)))))
 ))
 (let (($x211 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x209 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x209 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x202 (_ bv0 32))))
 (= $x204 $x160))))))
 ))
 (let (($x85 (and $x211 $x201)))
 (let (($x312 (and $x85 $x316)))
 (let (($x379 (and $x312 $x328)))
 (let (($x348 (and $x379 $x347)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x350 (and $x257 $x348)))
 (let (($x285 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x351 (and $x285 $x350)))
 (let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= ?x450 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x352 (and $x253 $x351)))
 (let (($x289 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x152 (= Lambda35Var (_ bv0 32))))
 (let ((?x264 (ite $x152 ?x450 (_ bv0 32))))
 (let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x76 (_ bv1 32))))
 (=> $x97 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x264))))))))
 ))
 (let (($x157 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x76 (_ bv1 32))))
 (= $x97 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x522 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x76 (_ bv0 32))))
 (=> $x77 $x514)))))
 ))
 (let (($x260 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x76 (_ bv0 32))))
 (= $x77 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x523 (and $x260 $x522)))
 (let (($x100 (and $x523 $x157)))
 (let (($x319 (and $x100 $x289)))
 (let (($x370 (and $x319 $x352)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x371 (and $x106 $x370)))
 (let (($x284 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x398 (and $x284 $x371)))
 (let (($x282 (= ?x323 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x415 (and $x282 $x398)))
 (let (($x280 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x152 (= Lambda35Var (_ bv0 32))))
 (let ((?x264 (ite $x152 ?x450 (_ bv0 32))))
 (let ((?x323 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x199 (= Lambda35Var (_ bv1 32))))
 (let ((?x268 (ite $x199 ?x323 ?x264)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x318 (_ bv1 32))))
 (=> $x239 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x268)))))))))))
 ))
 (let (($x227 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x332 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x318 (_ bv1 32))))
 (= $x239 $x238))))))
 ))
 (let (($x218 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x318 (_ bv0 32))))
 (=> $x324 $x514)))))
 ))
 (let (($x343 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x332 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x318 (_ bv0 32))))
 (= $x324 $x310))))))
 ))
 (let (($x219 (and $x343 $x218)))
 (let (($x242 (and $x219 $x227)))
 (let (($x281 (and $x242 $x280)))
 (let (($x416 (and $x281 $x415)))
 (let (($x441 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x435 (and $x441 $x416)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x466 (and $x84 $x435)))
 (let (($x469 (and $x514 $x466)))
 (let (($x86 (= input.spec-%var-y-0.L1%23%bbentry ?x442)))
 (let (($x471 (and $x86 $x469)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x472 (and $x215 $x471)))
 (let (($x473 (and $x514 $x472)))
 (let (($x326 (= input.spec-%var-y-1.L1%31%bbentry ?x214)))
 (let (($x480 (and $x326 $x473)))
 (let (($x505 (=> $x480 $x508)))
 (not $x505)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x484 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x491 (= (_ bv0 32) ?x484)))
 (let (($x492 (= $x491 true)))
 (let (($x508 (= $x492 true)))
 (let ((?x299 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x498 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x18 (concat ?x37 (concat ?x498 ?x299)))))
 (let (($x29 (= ?x16 input.dst.llvm-%x)))
 (let (($x31 (= $x29 true)))
 (let (($x83 (= $x31 true)))
 (let (($x32 (= input.dst.llvm-%x ?x16)))
 (let ((?x354 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x355 (= (_ bv0 32) ?x354)))
 (let ((?x542 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x540 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x542)))
 (let (($x538 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x353 (and $x538 $x540)))
 (let (($x356 (and $x353 $x355)))
 (let (($x535 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x537 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and (and (and $x537 $x535) $x356) $x32)))
 (let (($x40 (= $x46 true)))
 (let (($x35 (= $x40 true)))
 (let (($x12 (= $x35 true)))
 (let (($x530 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x531 (= $x530 true)))
 (let (($x532 (= $x531 true)))
 (let (($x539 (= $x532 true)))
 (let (($x23 (and $x539 $x12)))
 (let (($x91 (and $x23 $x83)))
 (let ((?x62 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (let (($x526 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x63)))
 (let ((?x476 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x481 (= ?x476 (_ bv0 32))))
 (let (($x408 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x524 (and $x408 $x481)))
 (let (($x528 (or $x524 $x526)))
 (let (($x41 (and $x528 $x91)))
 (let (($x527 (= $x408 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x87 (and $x527 $x41)))
 (let ((?x323 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x103 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x214 (ite $x103 ?x323 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x461 (= input.spec-%tmpvar-16.L1%25%d.2 ?x214)))
 (let (($x49 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x452 (=> $x49 $x461)))
 (let (($x448 (= $x49 (bvuge ?x62 (_ bv1 32)))))
 (let (($x514 (= false false)))
 (let (($x135 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x13 (=> $x135 $x514)))
 (let (($x52 (= $x135 $x63)))
 (let (($x48 (and $x52 $x13)))
 (let (($x460 (and $x48 $x448)))
 (let (($x405 (and $x460 $x452)))
 (let (($x70 (and $x405 $x87)))
 (let (($x20 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x442 (ite $x20 ?x323 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x503 (= input.spec-%tmpvar-12.L1%17%d.2 ?x442)))
 (let (($x137 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x494 (=> $x137 $x503)))
 (let (($x489 (= $x137 (bvuge ?x476 (_ bv1 32)))))
 (let (($x363 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x127 (=> $x363 $x514)))
 (let (($x454 (= $x363 $x481)))
 (let (($x131 (and $x454 $x127)))
 (let (($x495 (and $x131 $x489)))
 (let (($x496 (and $x495 $x494)))
 (let (($x78 (and $x496 $x70)))
 (let (($x399 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x349 (and $x399 $x78)))
 (let (($x403 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x152 (= Lambda35Var (_ bv0 32))))
 (let ((?x264 (ite $x152 ?x450 (_ bv0 32))))
 (let ((?x323 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x199 (= Lambda35Var (_ bv1 32))))
 (let ((?x268 (ite $x199 ?x323 ?x264)))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x426 (_ bv1 32))))
 (=> $x394 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x268)))))))))))
 ))
 (let (($x395 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x332 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x426 (_ bv1 32))))
 (= $x394 $x238))))))
 ))
 (let (($x361 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x426 (_ bv0 32))))
 (=> $x417 $x514)))))
 ))
 (let (($x357 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x332 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x426 (_ bv0 32))))
 (= $x417 $x310))))))
 ))
 (let (($x397 (and $x357 $x361)))
 (let (($x396 (and $x397 $x395)))
 (let (($x418 (and $x396 $x403)))
 (let (($x346 (and $x418 $x349)))
 (let (($x382 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x347 (and $x382 $x346)))
 (let (($x328 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x202 (_ bv1 32))))
 (=> $x313 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x316 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x209 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x209 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x202 (_ bv1 32))))
 (= $x313 $x308))))))
 ))
 (let (($x201 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x202 (_ bv0 32))))
 (=> $x204 $x514)))))
 ))
 (let (($x211 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x209 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x209 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x202 (_ bv0 32))))
 (= $x204 $x160))))))
 ))
 (let (($x85 (and $x211 $x201)))
 (let (($x312 (and $x85 $x316)))
 (let (($x379 (and $x312 $x328)))
 (let (($x348 (and $x379 $x347)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x350 (and $x257 $x348)))
 (let (($x285 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x351 (and $x285 $x350)))
 (let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x253 (= ?x450 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x352 (and $x253 $x351)))
 (let (($x289 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x152 (= Lambda35Var (_ bv0 32))))
 (let ((?x264 (ite $x152 ?x450 (_ bv0 32))))
 (let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x76 (_ bv1 32))))
 (=> $x97 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x264))))))))
 ))
 (let (($x157 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x76 (_ bv1 32))))
 (= $x97 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x522 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x76 (_ bv0 32))))
 (=> $x77 $x514)))))
 ))
 (let (($x260 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x76 (_ bv0 32))))
 (= $x77 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x523 (and $x260 $x522)))
 (let (($x100 (and $x523 $x157)))
 (let (($x319 (and $x100 $x289)))
 (let (($x370 (and $x319 $x352)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x371 (and $x106 $x370)))
 (let (($x284 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x398 (and $x284 $x371)))
 (let (($x282 (= ?x323 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x415 (and $x282 $x398)))
 (let (($x280 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x450 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x152 (= Lambda35Var (_ bv0 32))))
 (let ((?x264 (ite $x152 ?x450 (_ bv0 32))))
 (let ((?x323 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x199 (= Lambda35Var (_ bv1 32))))
 (let ((?x268 (ite $x199 ?x323 ?x264)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x318 (_ bv1 32))))
 (=> $x239 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x268)))))))))))
 ))
 (let (($x227 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x332 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x318 (_ bv1 32))))
 (= $x239 $x238))))))
 ))
 (let (($x218 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x514 (= false false)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x318 (_ bv0 32))))
 (=> $x324 $x514)))))
 ))
 (let (($x343 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x332 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x332 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x318 (_ bv0 32))))
 (= $x324 $x310))))))
 ))
 (let (($x219 (and $x343 $x218)))
 (let (($x242 (and $x219 $x227)))
 (let (($x281 (and $x242 $x280)))
 (let (($x416 (and $x281 $x415)))
 (let (($x441 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x435 (and $x441 $x416)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x466 (and $x84 $x435)))
 (let (($x469 (and $x514 $x466)))
 (let (($x86 (= input.spec-%var-y-0.L1%23%bbentry ?x442)))
 (let (($x471 (and $x86 $x469)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x472 (and $x215 $x471)))
 (let (($x473 (and $x514 $x472)))
 (let (($x326 (= input.spec-%var-y-1.L1%31%bbentry ?x214)))
 (let (($x480 (and $x326 $x473)))
 (let (($x505 (=> $x480 $x508)))
 (not $x505)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x244 (= (_ bv0 32) ?x243)))
 (let (($x270 (= $x244 true)))
 (let (($x262 (= $x270 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x423 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x5 (concat ?x338 (concat ?x423 ?x259)))))
 (let (($x146 (= ?x66 input.dst.llvm-%x)))
 (let (($x144 (= $x146 true)))
 (let (($x163 (= $x144 true)))
 (let (($x65 (= input.dst.llvm-%x ?x66)))
 (let ((?x546 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x547 (= (_ bv0 32) ?x546)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x544 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x545 (and $x196 $x544)))
 (let (($x167 (and $x545 $x547)))
 (let (($x175 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and (and (and $x168 $x175) $x167) $x65)))
 (let (($x59 (= $x67 true)))
 (let (($x95 (= $x59 true)))
 (let (($x156 (= $x95 true)))
 (let (($x142 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x161 (not $x142)))
 (let (($x165 (= $x161 true)))
 (let (($x186 (= $x165 true)))
 (let (($x543 (= $x186 true)))
 (let (($x158 (and $x543 $x156)))
 (let (($x145 (and $x158 $x163)))
 (let ((?x153 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x153 (_ bv0 32))))
 (let (($x114 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x182)))
 (let ((?x226 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x226 (_ bv0 32))))
 (let (($x335 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x112 (and $x335 $x234)))
 (let (($x140 (or $x112 $x114)))
 (let (($x159 (and $x140 $x145)))
 (let (($x129 (= $x335 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x162 (and $x129 $x159)))
 (let ((?x442 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x77 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x428 (ite $x77 ?x442 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x305 (= input.spec-%tmpvar-16.L1%25%d.2 ?x428)))
 (let (($x256 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x334 (=> $x256 $x305)))
 (let (($x206 (= $x256 (bvuge ?x153 (_ bv1 32)))))
 (let (($x278 (= false false)))
 (let (($x410 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x274 (=> $x410 $x278)))
 (let (($x311 (= $x410 $x182)))
 (let (($x294 (and $x311 $x274)))
 (let (($x307 (and $x294 $x206)))
 (let (($x340 (and $x307 $x334)))
 (let (($x58 (and $x340 $x162)))
 (let (($x211 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x143 (ite $x211 ?x442 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x266 (= input.spec-%tmpvar-12.L1%17%d.2 ?x143)))
 (let (($x387 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x246 (=> $x387 $x266)))
 (let (($x241 (= $x387 (bvuge ?x226 (_ bv1 32)))))
 (let (($x169 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x401 (=> $x169 $x278)))
 (let (($x330 (= $x169 $x234)))
 (let (($x372 (and $x330 $x401)))
 (let (($x254 (and $x372 $x241)))
 (let (($x258 (and $x254 $x246)))
 (let (($x409 (and $x258 $x58)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x411 (and $x147 $x409)))
 (let (($x369 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x362 (= Lambda35Var (_ bv0 32))))
 (let ((?x37 (ite $x362 ?x296 (_ bv0 32))))
 (let ((?x442 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x495 (= Lambda35Var (_ bv1 32))))
 (let ((?x299 (ite $x495 ?x442 ?x37)))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x375 (_ bv1 32))))
 (=> $x366 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x299)))))))))))
 ))
 (let (($x367 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x63 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x375 (_ bv1 32))))
 (= $x366 $x537))))))
 ))
 (let (($x391 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x375 (_ bv0 32))))
 (=> $x390 $x278)))))
 ))
 (let (($x190 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x63 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x375 (_ bv0 32))))
 (= $x390 $x52))))))
 ))
 (let (($x148 (and $x190 $x391)))
 (let (($x368 (and $x148 $x367)))
 (let (($x383 (and $x368 $x369)))
 (let (($x412 (and $x383 $x411)))
 (let (($x438 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x413 (and $x438 $x412)))
 (let (($x51 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x467 (_ bv1 32))))
 (=> $x60 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x15 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x516 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x516 (_ bv1 32))))
 (let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x467 (_ bv1 32))))
 (= $x60 $x117))))))
 ))
 (let (($x248 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x467 (_ bv0 32))))
 (=> $x511 $x278)))))
 ))
 (let (($x518 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x516 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x516 (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x467 (_ bv0 32))))
 (= $x511 $x322))))))
 ))
 (let (($x485 (and $x518 $x248)))
 (let (($x72 (and $x485 $x15)))
 (let (($x434 (and $x72 $x51)))
 (let (($x404 (and $x434 $x413)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x422 (and $x9 $x404)))
 (let (($x74 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x424 (and $x74 $x422)))
 (let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= ?x296 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x128 (and $x105 $x424)))
 (let (($x81 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x362 (= Lambda35Var (_ bv0 32))))
 (let ((?x37 (ite $x362 ?x296 (_ bv0 32))))
 (let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (bvuge ?x288 (_ bv1 32))))
 (=> $x510 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x37))))))))
 ))
 (let (($x327 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (bvuge ?x288 (_ bv1 32))))
 (= $x510 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x110 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x288 (_ bv0 32))))
 (=> $x292 $x278)))))
 ))
 (let (($x298 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x288 (_ bv0 32))))
 (= $x292 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x111 (and $x298 $x110)))
 (let (($x249 (and $x111 $x327)))
 (let (($x30 (and $x249 $x81)))
 (let (($x136 (and $x30 $x128)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x149 (and $x31 $x136)))
 (let (($x23 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x178 (and $x23 $x149)))
 (let (($x35 (= ?x442 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x174 (and $x35 $x178)))
 (let (($x32 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x362 (= Lambda35Var (_ bv0 32))))
 (let ((?x37 (ite $x362 ?x296 (_ bv0 32))))
 (let ((?x442 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x495 (= Lambda35Var (_ bv1 32))))
 (let ((?x299 (ite $x495 ?x442 ?x37)))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x48 (_ bv1 32))))
 (=> $x535 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x299)))))))))))
 ))
 (let (($x536 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x63 (_ bv1 32))))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x48 (_ bv1 32))))
 (= $x535 $x537))))))
 ))
 (let (($x461 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x48 (_ bv0 32))))
 (=> $x49 $x278)))))
 ))
 (let (($x448 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x63 (_ bv0 32))))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x48 (_ bv0 32))))
 (= $x49 $x52))))))
 ))
 (let (($x452 (and $x448 $x461)))
 (let (($x541 (and $x452 $x536)))
 (let (($x46 (and $x541 $x32)))
 (let (($x304 (and $x46 $x174)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x217 (and $x85 $x304)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x221 (and $x257 $x217)))
 (let (($x223 (and $x278 $x221)))
 (let (($x253 (= input.spec-%var-y-0.L1%23%bbentry ?x143)))
 (let (($x224 (and $x253 $x223)))
 (let (($x429 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x225 (and $x429 $x224)))
 (let (($x231 (and $x278 $x225)))
 (let (($x277 (= input.spec-%var-y-1.L1%31%bbentry ?x428)))
 (let (($x237 (and $x277 $x231)))
 (let (($x263 (=> $x237 $x262)))
 (not $x263))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x244 (= (_ bv0 32) ?x243)))
 (let (($x270 (= $x244 true)))
 (let (($x262 (= $x270 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x423 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x5 (concat ?x338 (concat ?x423 ?x259)))))
 (let (($x146 (= ?x66 input.dst.llvm-%x)))
 (let (($x144 (= $x146 true)))
 (let (($x163 (= $x144 true)))
 (let (($x65 (= input.dst.llvm-%x ?x66)))
 (let ((?x546 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x547 (= (_ bv0 32) ?x546)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x544 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x545 (and $x196 $x544)))
 (let (($x167 (and $x545 $x547)))
 (let (($x175 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and (and (and $x168 $x175) $x167) $x65)))
 (let (($x59 (= $x67 true)))
 (let (($x95 (= $x59 true)))
 (let (($x156 (= $x95 true)))
 (let (($x142 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x161 (not $x142)))
 (let (($x165 (= $x161 true)))
 (let (($x186 (= $x165 true)))
 (let (($x543 (= $x186 true)))
 (let (($x158 (and $x543 $x156)))
 (let (($x145 (and $x158 $x163)))
 (let ((?x153 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x153 (_ bv0 32))))
 (let (($x114 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x182)))
 (let ((?x226 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x226 (_ bv0 32))))
 (let (($x335 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x112 (and $x335 $x234)))
 (let (($x140 (or $x112 $x114)))
 (let (($x159 (and $x140 $x145)))
 (let (($x129 (= $x335 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x162 (and $x129 $x159)))
 (let ((?x442 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x77 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x428 (ite $x77 ?x442 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x305 (= input.spec-%tmpvar-16.L1%25%d.2 ?x428)))
 (let (($x256 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x334 (=> $x256 $x305)))
 (let (($x206 (= $x256 (bvuge ?x153 (_ bv1 32)))))
 (let (($x278 (= false false)))
 (let (($x410 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x274 (=> $x410 $x278)))
 (let (($x311 (= $x410 $x182)))
 (let (($x294 (and $x311 $x274)))
 (let (($x307 (and $x294 $x206)))
 (let (($x340 (and $x307 $x334)))
 (let (($x58 (and $x340 $x162)))
 (let (($x211 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x143 (ite $x211 ?x442 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x266 (= input.spec-%tmpvar-12.L1%17%d.2 ?x143)))
 (let (($x387 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x246 (=> $x387 $x266)))
 (let (($x241 (= $x387 (bvuge ?x226 (_ bv1 32)))))
 (let (($x169 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x401 (=> $x169 $x278)))
 (let (($x330 (= $x169 $x234)))
 (let (($x372 (and $x330 $x401)))
 (let (($x254 (and $x372 $x241)))
 (let (($x258 (and $x254 $x246)))
 (let (($x409 (and $x258 $x58)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x411 (and $x147 $x409)))
 (let (($x369 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x362 (= Lambda35Var (_ bv0 32))))
 (let ((?x37 (ite $x362 ?x296 (_ bv0 32))))
 (let ((?x442 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x495 (= Lambda35Var (_ bv1 32))))
 (let ((?x299 (ite $x495 ?x442 ?x37)))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x375 (_ bv1 32))))
 (=> $x366 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x299)))))))))))
 ))
 (let (($x367 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x63 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x375 (_ bv1 32))))
 (= $x366 $x537))))))
 ))
 (let (($x391 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x375 (_ bv0 32))))
 (=> $x390 $x278)))))
 ))
 (let (($x190 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x63 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x375 (_ bv0 32))))
 (= $x390 $x52))))))
 ))
 (let (($x148 (and $x190 $x391)))
 (let (($x368 (and $x148 $x367)))
 (let (($x383 (and $x368 $x369)))
 (let (($x412 (and $x383 $x411)))
 (let (($x438 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x413 (and $x438 $x412)))
 (let (($x51 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x467 (_ bv1 32))))
 (=> $x60 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x15 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x516 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x516 (_ bv1 32))))
 (let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x467 (_ bv1 32))))
 (= $x60 $x117))))))
 ))
 (let (($x248 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x467 (_ bv0 32))))
 (=> $x511 $x278)))))
 ))
 (let (($x518 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x516 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x516 (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x467 (_ bv0 32))))
 (= $x511 $x322))))))
 ))
 (let (($x485 (and $x518 $x248)))
 (let (($x72 (and $x485 $x15)))
 (let (($x434 (and $x72 $x51)))
 (let (($x404 (and $x434 $x413)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x422 (and $x9 $x404)))
 (let (($x74 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x424 (and $x74 $x422)))
 (let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= ?x296 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x128 (and $x105 $x424)))
 (let (($x81 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x362 (= Lambda35Var (_ bv0 32))))
 (let ((?x37 (ite $x362 ?x296 (_ bv0 32))))
 (let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (bvuge ?x288 (_ bv1 32))))
 (=> $x510 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x37))))))))
 ))
 (let (($x327 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (bvuge ?x288 (_ bv1 32))))
 (= $x510 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x110 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x288 (_ bv0 32))))
 (=> $x292 $x278)))))
 ))
 (let (($x298 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x288 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x288 (_ bv0 32))))
 (= $x292 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x111 (and $x298 $x110)))
 (let (($x249 (and $x111 $x327)))
 (let (($x30 (and $x249 $x81)))
 (let (($x136 (and $x30 $x128)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x149 (and $x31 $x136)))
 (let (($x23 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x178 (and $x23 $x149)))
 (let (($x35 (= ?x442 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x174 (and $x35 $x178)))
 (let (($x32 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x296 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x362 (= Lambda35Var (_ bv0 32))))
 (let ((?x37 (ite $x362 ?x296 (_ bv0 32))))
 (let ((?x442 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x495 (= Lambda35Var (_ bv1 32))))
 (let ((?x299 (ite $x495 ?x442 ?x37)))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x48 (_ bv1 32))))
 (=> $x535 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x299)))))))))))
 ))
 (let (($x536 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x63 (_ bv1 32))))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x48 (_ bv1 32))))
 (= $x535 $x537))))))
 ))
 (let (($x461 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x278 (= false false)))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x48 (_ bv0 32))))
 (=> $x49 $x278)))))
 ))
 (let (($x448 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x63 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x63 (_ bv0 32))))
 (let ((?x48 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x48 (_ bv0 32))))
 (= $x49 $x52))))))
 ))
 (let (($x452 (and $x448 $x461)))
 (let (($x541 (and $x452 $x536)))
 (let (($x46 (and $x541 $x32)))
 (let (($x304 (and $x46 $x174)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x217 (and $x85 $x304)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x221 (and $x257 $x217)))
 (let (($x223 (and $x278 $x221)))
 (let (($x253 (= input.spec-%var-y-0.L1%23%bbentry ?x143)))
 (let (($x224 (and $x253 $x223)))
 (let (($x429 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x225 (and $x429 $x224)))
 (let (($x231 (and $x278 $x225)))
 (let (($x277 (= input.spec-%var-y-1.L1%31%bbentry ?x428)))
 (let (($x237 (and $x277 $x231)))
 (let (($x263 (=> $x237 $x262)))
 (not $x263))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x292 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x171 (ite $x292 ?x143 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x406 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x527 (= ?x406 ?x171)))
 (let (($x531 (= $x527 true)))
 (let (($x533 (= $x531 true)))
 (let ((?x371 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x505 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x464 (concat ?x463 (concat ?x173 (concat ?x505 ?x371)))))
 (let (($x468 (= ?x464 input.dst.llvm-%x)))
 (let (($x250 (= $x468 true)))
 (let (($x462 (= $x250 true)))
 (let (($x465 (= input.dst.llvm-%x ?x464)))
 (let ((?x472 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x469 (= (_ bv0 32) ?x472)))
 (let ((?x415 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x435 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x415)))
 (let (($x416 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x471 (and $x416 $x435)))
 (let (($x480 (and $x471 $x469)))
 (let (($x473 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and (and (and $x466 $x473) $x480) $x465)))
 (let (($x455 (= $x44 true)))
 (let (($x54 (= $x455 true)))
 (let (($x45 (= $x54 true)))
 (let (($x349 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x347 (= $x349 true)))
 (let (($x348 (= $x347 true)))
 (let (($x350 (= $x348 true)))
 (let (($x64 (and $x350 $x45)))
 (let (($x427 (and $x64 $x462)))
 (let ((?x325 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x292) (_ bv1 32) (_ bv0 32))))
 (let (($x440 (bvuge ?x325 (_ bv1 32))))
 (let (($x70 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x440)))
 (let (($x203 (and $x70 $x427)))
 (let (($x446 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x444 (= $x446 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x487 (and $x444 $x203)))
 (let (($x130 (= input.spec-%tmpvar-16.L1%25%d.2 ?x171)))
 (let (($x94 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x499 (=> $x94 $x130)))
 (let (($x451 (= $x94 $x440)))
 (let (($x40 (= false false)))
 (let (($x353 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x36 (=> $x353 $x40)))
 (let (($x14 (= $x353 (= ?x325 (_ bv0 32)))))
 (let (($x7 (and $x14 $x36)))
 (let (($x56 (and $x7 $x451)))
 (let (($x25 (and $x56 $x499)))
 (let (($x402 (and $x25 $x487)))
 (let (($x518 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x247 (ite $x518 ?x143 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x355 (= input.spec-%tmpvar-12.L1%17%d.2 ?x247)))
 (let (($x132 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x43 (=> $x132 $x355)))
 (let (($x125 (= $x132 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x518) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x138 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x384 (=> $x138 $x40)))
 (let (($x17 (= $x138 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x518) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x151 (and $x17 $x384)))
 (let (($x389 (and $x151 $x125)))
 (let (($x354 (and $x389 $x43)))
 (let (($x207 (and $x354 $x402)))
 (let (($x478 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x445 (and $x478 $x207)))
 (let (($x397 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x191 (= Lambda35Var (_ bv0 32))))
 (let ((?x337 (ite $x191 ?x71 (_ bv0 32))))
 (let ((?x143 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x254 (= Lambda35Var (_ bv1 32))))
 (let ((?x423 (ite $x254 ?x143 ?x337)))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (bvuge ?x453 (_ bv1 32))))
 (=> $x396 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x423)))))))))))
 ))
 (let (($x359 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x182 (_ bv1 32))))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (bvuge ?x453 (_ bv1 32))))
 (= $x396 $x179))))))
 ))
 (let (($x133 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x453 (_ bv0 32))))
 (=> $x364 $x40)))))
 ))
 (let (($x474 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x182 (_ bv0 32))))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x453 (_ bv0 32))))
 (= $x364 $x311))))))
 ))
 (let (($x134 (and $x474 $x133)))
 (let (($x386 (and $x134 $x359)))
 (let (($x363 (and $x386 $x397)))
 (let (($x437 (and $x363 $x445)))
 (let (($x392 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x456 (and $x392 $x437)))
 (let (($x155 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (bvuge ?x242 (_ bv1 32))))
 (=> $x414 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x255 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x264 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x264 (_ bv1 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (bvuge ?x242 (_ bv1 32))))
 (= $x414 $x265))))))
 ))
 (let (($x192 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x242 (_ bv0 32))))
 (=> $x276 $x40)))))
 ))
 (let (($x284 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x264 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x264 (_ bv0 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x242 (_ bv0 32))))
 (= $x276 $x75))))))
 ))
 (let (($x268 (and $x284 $x192)))
 (let (($x273 (and $x268 $x255)))
 (let (($x205 (and $x273 $x155)))
 (let (($x328 (and $x205 $x456)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x345 (and $x181 $x328)))
 (let (($x97 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x220 (and $x97 $x345)))
 (let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x272 (= ?x71 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x342 (and $x272 $x220)))
 (let (($x238 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x191 (= Lambda35Var (_ bv0 32))))
 (let ((?x337 (ite $x191 ?x71 (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x80 (_ bv1 32))))
 (=> $x104 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x337))))))))
 ))
 (let (($x57 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x80 (_ bv1 32))))
 (= $x104 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x91 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x80 (_ bv0 32))))
 (=> $x73 $x40)))))
 ))
 (let (($x11 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x80 (_ bv0 32))))
 (= $x73 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x41 (and $x11 $x91)))
 (let (($x318 (and $x41 $x57)))
 (let (($x319 (and $x318 $x238)))
 (let (($x379 (and $x319 $x342)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x381 (and $x146 $x379)))
 (let (($x156 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x382 (and $x156 $x381)))
 (let (($x59 (= ?x143 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x430 (and $x59 $x382)))
 (let (($x66 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x191 (= Lambda35Var (_ bv0 32))))
 (let ((?x337 (ite $x191 ?x71 (_ bv0 32))))
 (let ((?x143 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x254 (= Lambda35Var (_ bv1 32))))
 (let ((?x423 (ite $x254 ?x143 ?x337)))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x294 (_ bv1 32))))
 (=> $x168 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x423)))))))))))
 ))
 (let (($x28 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x182 (_ bv1 32))))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x294 (_ bv1 32))))
 (= $x168 $x179))))))
 ))
 (let (($x305 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x294 (_ bv0 32))))
 (=> $x256 $x40)))))
 ))
 (let (($x206 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x182 (_ bv0 32))))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x294 (_ bv0 32))))
 (= $x256 $x311))))))
 ))
 (let (($x334 (and $x206 $x305)))
 (let (($x196 (and $x334 $x28)))
 (let (($x65 (and $x196 $x66)))
 (let (($x426 (and $x65 $x430)))
 (let (($x485 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x418 (and $x485 $x426)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x131 (and $x9 $x418)))
 (let (($x137 (and $x40 $x131)))
 (let (($x105 (= input.spec-%var-y-0.L1%23%bbentry ?x247)))
 (let (($x507 (and $x105 $x137)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x460 (and $x176 $x507)))
 (let (($x405 (and $x40 $x460)))
 (let (($x42 (= input.spec-%var-y-1.L1%31%bbentry ?x171)))
 (let (($x408 (and $x42 $x405)))
 (let (($x542 (=> $x408 $x533)))
 (not $x542)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x292 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x171 (ite $x292 ?x143 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x406 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x527 (= ?x406 ?x171)))
 (let (($x531 (= $x527 true)))
 (let (($x533 (= $x531 true)))
 (let ((?x371 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x505 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x464 (concat ?x463 (concat ?x173 (concat ?x505 ?x371)))))
 (let (($x468 (= ?x464 input.dst.llvm-%x)))
 (let (($x250 (= $x468 true)))
 (let (($x462 (= $x250 true)))
 (let (($x465 (= input.dst.llvm-%x ?x464)))
 (let ((?x472 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x469 (= (_ bv0 32) ?x472)))
 (let ((?x415 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x435 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x415)))
 (let (($x416 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x471 (and $x416 $x435)))
 (let (($x480 (and $x471 $x469)))
 (let (($x473 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and (and (and $x466 $x473) $x480) $x465)))
 (let (($x455 (= $x44 true)))
 (let (($x54 (= $x455 true)))
 (let (($x45 (= $x54 true)))
 (let (($x349 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x347 (= $x349 true)))
 (let (($x348 (= $x347 true)))
 (let (($x350 (= $x348 true)))
 (let (($x64 (and $x350 $x45)))
 (let (($x427 (and $x64 $x462)))
 (let ((?x325 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x292) (_ bv1 32) (_ bv0 32))))
 (let (($x440 (bvuge ?x325 (_ bv1 32))))
 (let (($x70 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x440)))
 (let (($x203 (and $x70 $x427)))
 (let (($x446 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x444 (= $x446 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x487 (and $x444 $x203)))
 (let (($x130 (= input.spec-%tmpvar-16.L1%25%d.2 ?x171)))
 (let (($x94 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x499 (=> $x94 $x130)))
 (let (($x451 (= $x94 $x440)))
 (let (($x40 (= false false)))
 (let (($x353 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x36 (=> $x353 $x40)))
 (let (($x14 (= $x353 (= ?x325 (_ bv0 32)))))
 (let (($x7 (and $x14 $x36)))
 (let (($x56 (and $x7 $x451)))
 (let (($x25 (and $x56 $x499)))
 (let (($x402 (and $x25 $x487)))
 (let (($x518 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x247 (ite $x518 ?x143 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x355 (= input.spec-%tmpvar-12.L1%17%d.2 ?x247)))
 (let (($x132 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x43 (=> $x132 $x355)))
 (let (($x125 (= $x132 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x518) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x138 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x384 (=> $x138 $x40)))
 (let (($x17 (= $x138 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x518) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x151 (and $x17 $x384)))
 (let (($x389 (and $x151 $x125)))
 (let (($x354 (and $x389 $x43)))
 (let (($x207 (and $x354 $x402)))
 (let (($x478 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x445 (and $x478 $x207)))
 (let (($x397 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x191 (= Lambda35Var (_ bv0 32))))
 (let ((?x337 (ite $x191 ?x71 (_ bv0 32))))
 (let ((?x143 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x254 (= Lambda35Var (_ bv1 32))))
 (let ((?x423 (ite $x254 ?x143 ?x337)))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (bvuge ?x453 (_ bv1 32))))
 (=> $x396 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x423)))))))))))
 ))
 (let (($x359 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x182 (_ bv1 32))))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (bvuge ?x453 (_ bv1 32))))
 (= $x396 $x179))))))
 ))
 (let (($x133 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x453 (_ bv0 32))))
 (=> $x364 $x40)))))
 ))
 (let (($x474 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x182 (_ bv0 32))))
 (let ((?x453 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x453 (_ bv0 32))))
 (= $x364 $x311))))))
 ))
 (let (($x134 (and $x474 $x133)))
 (let (($x386 (and $x134 $x359)))
 (let (($x363 (and $x386 $x397)))
 (let (($x437 (and $x363 $x445)))
 (let (($x392 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x456 (and $x392 $x437)))
 (let (($x155 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (bvuge ?x242 (_ bv1 32))))
 (=> $x414 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x255 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x264 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x264 (_ bv1 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (bvuge ?x242 (_ bv1 32))))
 (= $x414 $x265))))))
 ))
 (let (($x192 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x242 (_ bv0 32))))
 (=> $x276 $x40)))))
 ))
 (let (($x284 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x264 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x264 (_ bv0 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x242 (_ bv0 32))))
 (= $x276 $x75))))))
 ))
 (let (($x268 (and $x284 $x192)))
 (let (($x273 (and $x268 $x255)))
 (let (($x205 (and $x273 $x155)))
 (let (($x328 (and $x205 $x456)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x345 (and $x181 $x328)))
 (let (($x97 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x220 (and $x97 $x345)))
 (let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x272 (= ?x71 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x342 (and $x272 $x220)))
 (let (($x238 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x191 (= Lambda35Var (_ bv0 32))))
 (let ((?x337 (ite $x191 ?x71 (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x80 (_ bv1 32))))
 (=> $x104 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x337))))))))
 ))
 (let (($x57 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x80 (_ bv1 32))))
 (= $x104 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x91 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x80 (_ bv0 32))))
 (=> $x73 $x40)))))
 ))
 (let (($x11 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x80 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x80 (_ bv0 32))))
 (= $x73 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x41 (and $x11 $x91)))
 (let (($x318 (and $x41 $x57)))
 (let (($x319 (and $x318 $x238)))
 (let (($x379 (and $x319 $x342)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x381 (and $x146 $x379)))
 (let (($x156 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x382 (and $x156 $x381)))
 (let (($x59 (= ?x143 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x430 (and $x59 $x382)))
 (let (($x66 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x71 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x191 (= Lambda35Var (_ bv0 32))))
 (let ((?x337 (ite $x191 ?x71 (_ bv0 32))))
 (let ((?x143 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x254 (= Lambda35Var (_ bv1 32))))
 (let ((?x423 (ite $x254 ?x143 ?x337)))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x294 (_ bv1 32))))
 (=> $x168 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x423)))))))))))
 ))
 (let (($x28 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x182 (_ bv1 32))))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x294 (_ bv1 32))))
 (= $x168 $x179))))))
 ))
 (let (($x305 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x40 (= false false)))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x294 (_ bv0 32))))
 (=> $x256 $x40)))))
 ))
 (let (($x206 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x182 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x182 (_ bv0 32))))
 (let ((?x294 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x294 (_ bv0 32))))
 (= $x256 $x311))))))
 ))
 (let (($x334 (and $x206 $x305)))
 (let (($x196 (and $x334 $x28)))
 (let (($x65 (and $x196 $x66)))
 (let (($x426 (and $x65 $x430)))
 (let (($x485 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x418 (and $x485 $x426)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x131 (and $x9 $x418)))
 (let (($x137 (and $x40 $x131)))
 (let (($x105 (= input.spec-%var-y-0.L1%23%bbentry ?x247)))
 (let (($x507 (and $x105 $x137)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x460 (and $x176 $x507)))
 (let (($x405 (and $x40 $x460)))
 (let (($x42 (= input.spec-%var-y-1.L1%31%bbentry ?x171)))
 (let (($x408 (and $x42 $x405)))
 (let (($x542 (=> $x408 $x533)))
 (not $x542)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x365 (ite $x73 ?x247 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x197 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x193 (= ?x197 ?x365)))
 (let (($x39 (= $x193 true)))
 (let (($x5 (= $x39 true)))
 (let ((?x551 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x436 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x323 (concat ?x315 (concat ?x436 ?x551)))))
 (let (($x152 (= ?x21 input.dst.llvm-%x)))
 (let (($x200 (= $x152 true)))
 (let (($x199 (= $x200 true)))
 (let (($x103 (= input.dst.llvm-%x ?x21)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x243)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x223 $x231)))
 (let (($x136 (and $x237 $x244)))
 (let (($x178 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and (and (and $x149 $x178) $x136) $x103)))
 (let (($x326 (= $x102 true)))
 (let (($x515 (= $x326 true)))
 (let (($x441 (= $x515 true)))
 (let (($x404 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x422 (not $x404)))
 (let (($x424 (= $x422 true)))
 (let (($x217 (= $x424 true)))
 (let (($x225 (= $x217 true)))
 (let (($x317 (and $x225 $x441)))
 (let (($x324 (and $x317 $x199)))
 (let ((?x240 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x73) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x240 (_ bv1 32))))
 (let (($x412 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x99)))
 (let (($x218 (and $x412 $x324)))
 (let (($x411 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x58 (= $x411 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x222 (and $x58 $x218)))
 (let (($x183 (= input.spec-%tmpvar-16.L1%25%d.2 ?x365)))
 (let (($x522 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x212 (=> $x522 $x183)))
 (let (($x84 (= $x522 $x99)))
 (let (($x67 (= false false)))
 (let (($x425 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x285 (=> $x425 $x67)))
 (let (($x293 (= $x425 (= ?x240 (_ bv0 32)))))
 (let (($x283 (and $x293 $x285)))
 (let (($x261 (and $x283 $x84)))
 (let (($x154 (and $x261 $x212)))
 (let (($x302 (and $x154 $x222)))
 (let (($x284 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x106 (ite $x284 ?x247 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x547 (= input.spec-%tmpvar-12.L1%17%d.2 ?x106)))
 (let (($x140 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x167 (=> $x140 $x547)))
 (let (($x378 (= $x140 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x284) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x258 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x417 (=> $x258 $x67)))
 (let (($x483 (= $x258 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x284) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x113 (and $x483 $x417)))
 (let (($x545 (and $x113 $x378)))
 (let (($x24 (and $x545 $x167)))
 (let (($x51 (and $x24 $x302)))
 (let (($x421 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x439 (and $x421 $x51)))
 (let (($x228 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x357 (= Lambda35Var (_ bv0 32))))
 (let ((?x505 (ite $x357 ?x295 (_ bv0 32))))
 (let ((?x247 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x389 (= Lambda35Var (_ bv1 32))))
 (let ((?x107 (ite $x389 ?x247 ?x505)))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x229 (_ bv1 32))))
 (=> $x121 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x107)))))))))))
 ))
 (let (($x147 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x432 (_ bv1 32))))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x229 (_ bv1 32))))
 (= $x121 $x68))))))
 ))
 (let (($x226 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x229 (_ bv0 32))))
 (=> $x232 $x67)))))
 ))
 (let (($x388 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x432 (_ bv0 32))))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x229 (_ bv0 32))))
 (= $x232 $x14))))))
 ))
 (let (($x123 (and $x388 $x226)))
 (let (($x234 (and $x123 $x147)))
 (let (($x184 (and $x234 $x228)))
 (let (($x459 (and $x184 $x439)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x447 (and $x55 $x459)))
 (let (($x504 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x23 (_ bv1 32))))
 (=> $x33 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x172 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x286 (_ bv1 32))))
 (let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x23 (_ bv1 32))))
 (= $x33 $x498))))))
 ))
 (let (($x63 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x23 (_ bv0 32))))
 (=> $x29 $x67)))))
 ))
 (let (($x489 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x286 (_ bv0 32))))
 (let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x23 (_ bv0 32))))
 (= $x29 $x26))))))
 ))
 (let (($x52 (and $x489 $x63)))
 (let (($x488 (and $x52 $x172)))
 (let (($x494 (and $x488 $x504)))
 (let (($x434 (and $x494 $x447)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x433 (and $x81 $x434)))
 (let (($x111 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x438 (and $x111 $x433)))
 (let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x510 (= ?x295 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x170 (and $x510 $x438)))
 (let (($x38 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x357 (= Lambda35Var (_ bv0 32))))
 (let ((?x505 (ite $x357 ?x295 (_ bv0 32))))
 (let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x275 (_ bv1 32))))
 (=> $x48 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x505))))))))
 ))
 (let (($x13 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x275 (_ bv1 32))))
 (= $x48 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x117 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x275 (_ bv0 32))))
 (=> $x492 $x67)))))
 ))
 (let (($x163 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x275 (_ bv0 32))))
 (= $x492 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x27 (and $x163 $x117)))
 (let (($x49 (and $x27 $x13)))
 (let (($x298 (and $x49 $x38)))
 (let (($x375 (and $x298 $x170)))
 (let (($x427 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x383 (and $x427 $x375)))
 (let (($x250 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x372 (and $x250 $x383)))
 (let (($x64 (= ?x247 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x387 (and $x64 $x372)))
 (let (($x455 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x357 (= Lambda35Var (_ bv0 32))))
 (let ((?x505 (ite $x357 ?x295 (_ bv0 32))))
 (let ((?x247 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x389 (= Lambda35Var (_ bv1 32))))
 (let ((?x107 (ite $x389 ?x247 ?x505)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x7 (_ bv1 32))))
 (=> $x370 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x107)))))))))))
 ))
 (let (($x398 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x432 (_ bv1 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x7 (_ bv1 32))))
 (= $x370 $x68))))))
 ))
 (let (($x130 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x7 (_ bv0 32))))
 (=> $x94 $x67)))))
 ))
 (let (($x451 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x432 (_ bv0 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x7 (_ bv0 32))))
 (= $x94 $x14))))))
 ))
 (let (($x499 (and $x451 $x130)))
 (let (($x435 (and $x499 $x398)))
 (let (($x54 (and $x435 $x455)))
 (let (($x269 (and $x54 $x387)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x307 (and $x268 $x269)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x340 (and $x181 $x307)))
 (let (($x335 (and $x67 $x340)))
 (let (($x272 (= input.spec-%var-y-0.L1%23%bbentry ?x106)))
 (let (($x344 (and $x272 $x335)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x129 (and $x119 $x344)))
 (let (($x161 (and $x67 $x129)))
 (let (($x520 (= input.spec-%var-y-1.L1%31%bbentry ?x365)))
 (let (($x166 (and $x520 $x161)))
 (let (($x333 (=> $x166 $x5)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x365 (ite $x73 ?x247 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x197 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x193 (= ?x197 ?x365)))
 (let (($x39 (= $x193 true)))
 (let (($x5 (= $x39 true)))
 (let ((?x551 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x436 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x323 (concat ?x315 (concat ?x436 ?x551)))))
 (let (($x152 (= ?x21 input.dst.llvm-%x)))
 (let (($x200 (= $x152 true)))
 (let (($x199 (= $x200 true)))
 (let (($x103 (= input.dst.llvm-%x ?x21)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x243)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x223 $x231)))
 (let (($x136 (and $x237 $x244)))
 (let (($x178 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and (and (and $x149 $x178) $x136) $x103)))
 (let (($x326 (= $x102 true)))
 (let (($x515 (= $x326 true)))
 (let (($x441 (= $x515 true)))
 (let (($x404 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x422 (not $x404)))
 (let (($x424 (= $x422 true)))
 (let (($x217 (= $x424 true)))
 (let (($x225 (= $x217 true)))
 (let (($x317 (and $x225 $x441)))
 (let (($x324 (and $x317 $x199)))
 (let ((?x240 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x73) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x240 (_ bv1 32))))
 (let (($x412 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x99)))
 (let (($x218 (and $x412 $x324)))
 (let (($x411 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x58 (= $x411 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x222 (and $x58 $x218)))
 (let (($x183 (= input.spec-%tmpvar-16.L1%25%d.2 ?x365)))
 (let (($x522 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x212 (=> $x522 $x183)))
 (let (($x84 (= $x522 $x99)))
 (let (($x67 (= false false)))
 (let (($x425 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x285 (=> $x425 $x67)))
 (let (($x293 (= $x425 (= ?x240 (_ bv0 32)))))
 (let (($x283 (and $x293 $x285)))
 (let (($x261 (and $x283 $x84)))
 (let (($x154 (and $x261 $x212)))
 (let (($x302 (and $x154 $x222)))
 (let (($x284 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x106 (ite $x284 ?x247 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x547 (= input.spec-%tmpvar-12.L1%17%d.2 ?x106)))
 (let (($x140 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x167 (=> $x140 $x547)))
 (let (($x378 (= $x140 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x284) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x258 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x417 (=> $x258 $x67)))
 (let (($x483 (= $x258 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x284) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x113 (and $x483 $x417)))
 (let (($x545 (and $x113 $x378)))
 (let (($x24 (and $x545 $x167)))
 (let (($x51 (and $x24 $x302)))
 (let (($x421 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x439 (and $x421 $x51)))
 (let (($x228 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x357 (= Lambda35Var (_ bv0 32))))
 (let ((?x505 (ite $x357 ?x295 (_ bv0 32))))
 (let ((?x247 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x389 (= Lambda35Var (_ bv1 32))))
 (let ((?x107 (ite $x389 ?x247 ?x505)))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x229 (_ bv1 32))))
 (=> $x121 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x107)))))))))))
 ))
 (let (($x147 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x432 (_ bv1 32))))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x229 (_ bv1 32))))
 (= $x121 $x68))))))
 ))
 (let (($x226 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x229 (_ bv0 32))))
 (=> $x232 $x67)))))
 ))
 (let (($x388 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x432 (_ bv0 32))))
 (let ((?x229 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x229 (_ bv0 32))))
 (= $x232 $x14))))))
 ))
 (let (($x123 (and $x388 $x226)))
 (let (($x234 (and $x123 $x147)))
 (let (($x184 (and $x234 $x228)))
 (let (($x459 (and $x184 $x439)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x447 (and $x55 $x459)))
 (let (($x504 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x23 (_ bv1 32))))
 (=> $x33 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x172 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x286 (_ bv1 32))))
 (let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x23 (_ bv1 32))))
 (= $x33 $x498))))))
 ))
 (let (($x63 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x23 (_ bv0 32))))
 (=> $x29 $x67)))))
 ))
 (let (($x489 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x286 (_ bv0 32))))
 (let ((?x23 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x23 (_ bv0 32))))
 (= $x29 $x26))))))
 ))
 (let (($x52 (and $x489 $x63)))
 (let (($x488 (and $x52 $x172)))
 (let (($x494 (and $x488 $x504)))
 (let (($x434 (and $x494 $x447)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x433 (and $x81 $x434)))
 (let (($x111 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x438 (and $x111 $x433)))
 (let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x510 (= ?x295 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x170 (and $x510 $x438)))
 (let (($x38 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x357 (= Lambda35Var (_ bv0 32))))
 (let ((?x505 (ite $x357 ?x295 (_ bv0 32))))
 (let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x275 (_ bv1 32))))
 (=> $x48 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x505))))))))
 ))
 (let (($x13 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x275 (_ bv1 32))))
 (= $x48 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x117 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x275 (_ bv0 32))))
 (=> $x492 $x67)))))
 ))
 (let (($x163 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x275 (_ bv0 32))))
 (= $x492 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x27 (and $x163 $x117)))
 (let (($x49 (and $x27 $x13)))
 (let (($x298 (and $x49 $x38)))
 (let (($x375 (and $x298 $x170)))
 (let (($x427 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x383 (and $x427 $x375)))
 (let (($x250 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x372 (and $x250 $x383)))
 (let (($x64 (= ?x247 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x387 (and $x64 $x372)))
 (let (($x455 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x295 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x357 (= Lambda35Var (_ bv0 32))))
 (let ((?x505 (ite $x357 ?x295 (_ bv0 32))))
 (let ((?x247 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x389 (= Lambda35Var (_ bv1 32))))
 (let ((?x107 (ite $x389 ?x247 ?x505)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x7 (_ bv1 32))))
 (=> $x370 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x107)))))))))))
 ))
 (let (($x398 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x432 (_ bv1 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x7 (_ bv1 32))))
 (= $x370 $x68))))))
 ))
 (let (($x130 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x67 (= false false)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x7 (_ bv0 32))))
 (=> $x94 $x67)))))
 ))
 (let (($x451 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x432 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x432 (_ bv0 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x7 (_ bv0 32))))
 (= $x94 $x14))))))
 ))
 (let (($x499 (and $x451 $x130)))
 (let (($x435 (and $x499 $x398)))
 (let (($x54 (and $x435 $x455)))
 (let (($x269 (and $x54 $x387)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x307 (and $x268 $x269)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x340 (and $x181 $x307)))
 (let (($x335 (and $x67 $x340)))
 (let (($x272 (= input.spec-%var-y-0.L1%23%bbentry ?x106)))
 (let (($x344 (and $x272 $x335)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x129 (and $x119 $x344)))
 (let (($x161 (and $x67 $x129)))
 (let (($x520 (= input.spec-%var-y-1.L1%31%bbentry ?x365)))
 (let (($x166 (and $x520 $x161)))
 (let (($x333 (=> $x166 $x5)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x489 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x253 (ite $x489 ?x106 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x444 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x350 (= ?x444 ?x253)))
 (let (($x473 (= $x350 true)))
 (let (($x471 (= $x473 true)))
 (let ((?x540 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x215 (concat ?x145 (concat ?x303 ?x540)))))
 (let (($x211 (= ?x77 input.dst.llvm-%x)))
 (let (($x362 (= $x211 true)))
 (let (($x503 (= $x362 true)))
 (let (($x216 (= input.dst.llvm-%x ?x77)))
 (let ((?x460 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x527 (= (_ bv0 32) ?x460)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x405 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x408 (and $x426 $x405)))
 (let (($x531 (and $x408 $x527)))
 (let (($x382 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x406 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and (and (and $x406 $x382) $x531) $x216)))
 (let (($x282 (= $x277 true)))
 (let (($x98 (= $x282 true)))
 (let (($x160 (= $x98 true)))
 (let (($x345 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x220 (= $x345 true)))
 (let (($x342 (= $x220 true)))
 (let (($x379 (= $x342 true)))
 (let (($x88 (and $x379 $x160)))
 (let (($x461 (and $x88 $x503)))
 (let ((?x351 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x489) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvuge ?x351 (_ bv1 32))))
 (let (($x502 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x437 (and $x502 $x380)))
 (let (($x407 (and $x437 $x461)))
 (let (($x445 (= $x502 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x493 (and $x445 $x407)))
 (let (($x492 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x523 (ite $x492 ?x106 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x519 (= input.spec-%tmpvar-16.L1%25%d.2 ?x523)))
 (let (($x448 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x509 (=> $x448 $x519)))
 (let (($x177 (= $x448 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x492) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x45 (= false false)))
 (let (($x371 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x37 (=> $x371 $x45)))
 (let (($x108 (= $x371 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x492) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x12 (and $x108 $x37)))
 (let (($x449 (and $x12 $x177)))
 (let (($x513 (and $x449 $x509)))
 (let (($x495 (and $x513 $x493)))
 (let (($x480 (= input.spec-%tmpvar-12.L1%17%d.2 ?x253)))
 (let (($x70 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x484 (=> $x70 $x480)))
 (let (($x188 (= $x70 $x380)))
 (let (($x420 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x391 (=> $x420 $x45)))
 (let (($x329 (= $x420 (= ?x351 (_ bv0 32)))))
 (let (($x368 (and $x329 $x391)))
 (let (($x297 (and $x368 $x188)))
 (let (($x457 (and $x297 $x484)))
 (let (($x278 (and $x457 $x495)))
 (let (($x474 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x452 (and $x474 $x278)))
 (let (($x525 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda35Var (_ bv0 32))))
 (let ((?x549 (ite $x236 ?x126 (_ bv0 32))))
 (let ((?x106 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x545 (= Lambda35Var (_ bv1 32))))
 (let ((?x550 (ite $x545 ?x106 ?x549)))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x530 (_ bv1 32))))
 (=> $x139 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x550)))))))))))
 ))
 (let (($x376 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x227 (_ bv1 32))))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x530 (_ bv1 32))))
 (= $x139 $x178))))))
 ))
 (let (($x397 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (= ?x530 (_ bv0 32))))
 (=> $x538 $x45)))))
 ))
 (let (($x150 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x227 (_ bv0 32))))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (= ?x530 (_ bv0 32))))
 (= $x538 $x293))))))
 ))
 (let (($x529 (and $x150 $x397)))
 (let (($x478 (and $x529 $x376)))
 (let (($x528 (and $x478 $x525)))
 (let (($x535 (and $x528 $x452)))
 (let (($x410 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x155 (and $x410 $x535)))
 (let (($x246 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x339 (_ bv1 32))))
 (=> $x96 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x209 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x66 (_ bv1 32))))
 (let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x339 (_ bv1 32))))
 (= $x96 $x204))))))
 ))
 (let (($x105 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x339 (_ bv0 32))))
 (=> $x156 $x45)))))
 ))
 (let (($x146 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x66 (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x339 (_ bv0 32))))
 (= $x156 $x153))))))
 ))
 (let (($x182 (and $x146 $x105)))
 (let (($x454 (and $x182 $x209)))
 (let (($x198 (and $x454 $x246)))
 (let (($x90 (and $x198 $x155)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x306 (and $x239 $x90)))
 (let (($x219 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x309 (and $x219 $x306)))
 (let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x318 (= ?x126 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x205 (and $x318 $x309)))
 (let (($x443 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda35Var (_ bv0 32))))
 (let ((?x549 (ite $x236 ?x126 (_ bv0 32))))
 (let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x511 (_ bv1 32))))
 (=> $x517 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x549))))))))
 ))
 (let (($x485 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x511 (_ bv1 32))))
 (= $x517 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x207 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (= ?x511 (_ bv0 32))))
 (=> $x516 $x45)))))
 ))
 (let (($x203 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (= ?x511 (_ bv0 32))))
 (= $x516 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x265 (and $x203 $x207)))
 (let (($x274 (and $x265 $x485)))
 (let (($x100 (and $x274 $x443)))
 (let (($x393 (and $x100 $x205)))
 (let (($x199 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x392 (and $x199 $x393)))
 (let (($x152 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x479 (and $x152 $x392)))
 (let (($x441 (= ?x106 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x453 (and $x441 $x479)))
 (let (($x102 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda35Var (_ bv0 32))))
 (let ((?x549 (ite $x236 ?x126 (_ bv0 32))))
 (let ((?x106 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x545 (= Lambda35Var (_ bv1 32))))
 (let ((?x550 (ite $x545 ?x106 ?x549)))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x283 (_ bv1 32))))
 (=> $x214 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x550)))))))))))
 ))
 (let (($x223 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x227 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x283 (_ bv1 32))))
 (= $x214 $x178))))))
 ))
 (let (($x183 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x283 (_ bv0 32))))
 (=> $x522 $x45)))))
 ))
 (let (($x84 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x227 (_ bv0 32))))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x283 (_ bv0 32))))
 (= $x522 $x293))))))
 ))
 (let (($x212 (and $x84 $x183)))
 (let (($x221 (and $x212 $x223)))
 (let (($x326 (and $x221 $x102)))
 (let (($x363 (and $x326 $x453)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x151 (and $x52 $x363)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x132 (and $x81 $x151)))
 (let (($x356 (and $x45 $x132)))
 (let (($x510 (= input.spec-%var-y-0.L1%23%bbentry ?x253)))
 (let (($x56 (and $x510 $x356)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x25 (and $x180 $x56)))
 (let (($x446 (and $x45 $x25)))
 (let (($x465 (= input.spec-%var-y-1.L1%31%bbentry ?x523)))
 (let (($x53 (and $x465 $x446)))
 (let (($x472 (=> $x53 $x471)))
 (not $x472)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x489 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x253 (ite $x489 ?x106 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x444 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x350 (= ?x444 ?x253)))
 (let (($x473 (= $x350 true)))
 (let (($x471 (= $x473 true)))
 (let ((?x540 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x215 (concat ?x145 (concat ?x303 ?x540)))))
 (let (($x211 (= ?x77 input.dst.llvm-%x)))
 (let (($x362 (= $x211 true)))
 (let (($x503 (= $x362 true)))
 (let (($x216 (= input.dst.llvm-%x ?x77)))
 (let ((?x460 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x527 (= (_ bv0 32) ?x460)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x405 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x408 (and $x426 $x405)))
 (let (($x531 (and $x408 $x527)))
 (let (($x382 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x406 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and (and (and $x406 $x382) $x531) $x216)))
 (let (($x282 (= $x277 true)))
 (let (($x98 (= $x282 true)))
 (let (($x160 (= $x98 true)))
 (let (($x345 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x220 (= $x345 true)))
 (let (($x342 (= $x220 true)))
 (let (($x379 (= $x342 true)))
 (let (($x88 (and $x379 $x160)))
 (let (($x461 (and $x88 $x503)))
 (let ((?x351 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x489) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvuge ?x351 (_ bv1 32))))
 (let (($x502 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x437 (and $x502 $x380)))
 (let (($x407 (and $x437 $x461)))
 (let (($x445 (= $x502 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x493 (and $x445 $x407)))
 (let (($x492 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x523 (ite $x492 ?x106 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x519 (= input.spec-%tmpvar-16.L1%25%d.2 ?x523)))
 (let (($x448 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x509 (=> $x448 $x519)))
 (let (($x177 (= $x448 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x492) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x45 (= false false)))
 (let (($x371 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x37 (=> $x371 $x45)))
 (let (($x108 (= $x371 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x492) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x12 (and $x108 $x37)))
 (let (($x449 (and $x12 $x177)))
 (let (($x513 (and $x449 $x509)))
 (let (($x495 (and $x513 $x493)))
 (let (($x480 (= input.spec-%tmpvar-12.L1%17%d.2 ?x253)))
 (let (($x70 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x484 (=> $x70 $x480)))
 (let (($x188 (= $x70 $x380)))
 (let (($x420 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x391 (=> $x420 $x45)))
 (let (($x329 (= $x420 (= ?x351 (_ bv0 32)))))
 (let (($x368 (and $x329 $x391)))
 (let (($x297 (and $x368 $x188)))
 (let (($x457 (and $x297 $x484)))
 (let (($x278 (and $x457 $x495)))
 (let (($x474 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x452 (and $x474 $x278)))
 (let (($x525 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda35Var (_ bv0 32))))
 (let ((?x549 (ite $x236 ?x126 (_ bv0 32))))
 (let ((?x106 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x545 (= Lambda35Var (_ bv1 32))))
 (let ((?x550 (ite $x545 ?x106 ?x549)))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x530 (_ bv1 32))))
 (=> $x139 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x550)))))))))))
 ))
 (let (($x376 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x227 (_ bv1 32))))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x530 (_ bv1 32))))
 (= $x139 $x178))))))
 ))
 (let (($x397 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (= ?x530 (_ bv0 32))))
 (=> $x538 $x45)))))
 ))
 (let (($x150 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x227 (_ bv0 32))))
 (let ((?x530 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (= ?x530 (_ bv0 32))))
 (= $x538 $x293))))))
 ))
 (let (($x529 (and $x150 $x397)))
 (let (($x478 (and $x529 $x376)))
 (let (($x528 (and $x478 $x525)))
 (let (($x535 (and $x528 $x452)))
 (let (($x410 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x155 (and $x410 $x535)))
 (let (($x246 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x339 (_ bv1 32))))
 (=> $x96 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x209 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x66 (_ bv1 32))))
 (let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x339 (_ bv1 32))))
 (= $x96 $x204))))))
 ))
 (let (($x105 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x339 (_ bv0 32))))
 (=> $x156 $x45)))))
 ))
 (let (($x146 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x66 (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x339 (_ bv0 32))))
 (= $x156 $x153))))))
 ))
 (let (($x182 (and $x146 $x105)))
 (let (($x454 (and $x182 $x209)))
 (let (($x198 (and $x454 $x246)))
 (let (($x90 (and $x198 $x155)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x306 (and $x239 $x90)))
 (let (($x219 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x309 (and $x219 $x306)))
 (let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x318 (= ?x126 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x205 (and $x318 $x309)))
 (let (($x443 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda35Var (_ bv0 32))))
 (let ((?x549 (ite $x236 ?x126 (_ bv0 32))))
 (let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x511 (_ bv1 32))))
 (=> $x517 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x549))))))))
 ))
 (let (($x485 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x511 (_ bv1 32))))
 (= $x517 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x207 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (= ?x511 (_ bv0 32))))
 (=> $x516 $x45)))))
 ))
 (let (($x203 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x511 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (= ?x511 (_ bv0 32))))
 (= $x516 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x265 (and $x203 $x207)))
 (let (($x274 (and $x265 $x485)))
 (let (($x100 (and $x274 $x443)))
 (let (($x393 (and $x100 $x205)))
 (let (($x199 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x392 (and $x199 $x393)))
 (let (($x152 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x479 (and $x152 $x392)))
 (let (($x441 (= ?x106 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x453 (and $x441 $x479)))
 (let (($x102 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x126 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda35Var (_ bv0 32))))
 (let ((?x549 (ite $x236 ?x126 (_ bv0 32))))
 (let ((?x106 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x545 (= Lambda35Var (_ bv1 32))))
 (let ((?x550 (ite $x545 ?x106 ?x549)))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x283 (_ bv1 32))))
 (=> $x214 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x550)))))))))))
 ))
 (let (($x223 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x227 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x283 (_ bv1 32))))
 (= $x214 $x178))))))
 ))
 (let (($x183 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x283 (_ bv0 32))))
 (=> $x522 $x45)))))
 ))
 (let (($x84 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x227 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x227 (_ bv0 32))))
 (let ((?x283 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x283 (_ bv0 32))))
 (= $x522 $x293))))))
 ))
 (let (($x212 (and $x84 $x183)))
 (let (($x221 (and $x212 $x223)))
 (let (($x326 (and $x221 $x102)))
 (let (($x363 (and $x326 $x453)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x151 (and $x52 $x363)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x132 (and $x81 $x151)))
 (let (($x356 (and $x45 $x132)))
 (let (($x510 (= input.spec-%var-y-0.L1%23%bbentry ?x253)))
 (let (($x56 (and $x510 $x356)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x25 (and $x180 $x56)))
 (let (($x446 (and $x45 $x25)))
 (let (($x465 (= input.spec-%var-y-1.L1%31%bbentry ?x523)))
 (let (($x53 (and $x465 $x446)))
 (let (($x472 (=> $x53 $x471)))
 (not $x472)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x146 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x423 (ite $x146 ?x253 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x231 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x237 (= ?x231 ?x423)))
 (let (($x506 (= $x237 true)))
 (let (($x308 (= $x506 true)))
 (let ((?x194 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x429 (concat ?x273 (concat ?x135 ?x194)))))
 (let (($x254 (= ?x171 input.dst.llvm-%x)))
 (let (($x305 (= $x254 true)))
 (let (($x341 (= $x305 true)))
 (let (($x288 (= input.dst.llvm-%x ?x171)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x39)))
 (let ((?x344 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x197 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x344)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x129 $x197)))
 (let (($x372 (and $x193 $x5)))
 (let (($x269 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x387 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and (and (and $x387 $x269) $x372) $x288)))
 (let (($x322 (= $x35 true)))
 (let (($x320 (= $x322 true)))
 (let (($x256 (= $x320 true)))
 (let (($x438 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x170 (not $x438)))
 (let (($x375 (= $x170 true)))
 (let (($x335 (= $x375 true)))
 (let (($x166 (= $x335 true)))
 (let (($x191 (and $x166 $x256)))
 (let (($x266 (and $x191 $x341)))
 (let ((?x174 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x146) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x174 (_ bv1 32))))
 (let (($x51 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x434 (and $x51 $x384)))
 (let (($x245 (and $x434 $x266)))
 (let (($x459 (= $x51 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x40 (and $x459 $x245)))
 (let (($x516 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x475 (ite $x516 ?x253 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x86 (= input.spec-%tmpvar-16.L1%25%d.2 ?x475)))
 (let (($x206 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x373 (=> $x206 $x86)))
 (let (($x69 (= $x206 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x516) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x515 (= false false)))
 (let (($x482 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x79 (=> $x482 $x515)))
 (let (($x57 (= $x482 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x516) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x95 (and $x57 $x79)))
 (let (($x310 (and $x95 $x69)))
 (let (($x290 (and $x310 $x373)))
 (let (($x334 (and $x290 $x40)))
 (let (($x270 (= input.spec-%tmpvar-12.L1%17%d.2 ?x423)))
 (let (($x422 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x87 (=> $x422 $x270)))
 (let (($x17 (= $x422 $x384)))
 (let (($x481 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x412 (=> $x481 $x515)))
 (let (($x419 (= $x481 (= ?x174 (_ bv0 32)))))
 (let (($x404 (and $x419 $x412)))
 (let (($x312 (and $x404 $x17)))
 (let (($x243 (and $x312 $x87)))
 (let (($x504 (and $x243 $x334)))
 (let (($x414 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x486 (and $x414 $x504)))
 (let (($x190 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x235 (= Lambda35Var (_ bv0 32))))
 (let ((?x540 (ite $x235 ?x501 (_ bv0 32))))
 (let ((?x253 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x297 (= Lambda35Var (_ bv1 32))))
 (let ((?x77 (ite $x297 ?x253 ?x540)))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x399 (_ bv1 32))))
 (=> $x230 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x77)))))))))))
 ))
 (let (($x543 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x541 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x399 (_ bv1 32))))
 (= $x230 $x131))))))
 ))
 (let (($x377 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (= ?x399 (_ bv0 32))))
 (=> $x546 $x515)))))
 ))
 (let (($x361 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x541 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (= ?x399 (_ bv0 32))))
 (= $x546 $x108))))))
 ))
 (let (($x232 (and $x361 $x377)))
 (let (($x483 (and $x232 $x543)))
 (let (($x388 (and $x483 $x190)))
 (let (($x10 (and $x388 $x486)))
 (let (($x390 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x458 (and $x390 $x10)))
 (let (($x512 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x462 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x451 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x451 (_ bv1 32))))
 (let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x462 (_ bv1 32))))
 (= $x93 $x327))))))
 ))
 (let (($x14 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x462 (_ bv0 32))))
 (=> $x427 $x515)))))
 ))
 (let (($x107 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x451 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x451 (_ bv0 32))))
 (let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x462 (_ bv0 32))))
 (= $x427 $x398))))))
 ))
 (let (($x54 (and $x107 $x14)))
 (let (($x46 (and $x54 $x213)))
 (let (($x43 (and $x46 $x512)))
 (let (($x494 (and $x43 $x458)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x496 (and $x314 $x494)))
 (let (($x470 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x55 (and $x470 $x496)))
 (let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x537 (= ?x501 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x336 (and $x537 $x55)))
 (let (($x163 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x235 (= Lambda35Var (_ bv0 32))))
 (let ((?x540 (ite $x235 ?x501 (_ bv0 32))))
 (let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x430 (_ bv1 32))))
 (=> $x268 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x540))))))))
 ))
 (let (($x94 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x430 (_ bv1 32))))
 (= $x268 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x82 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x430 (_ bv0 32))))
 (=> $x324 $x515)))))
 ))
 (let (($x222 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x430 (_ bv0 32))))
 (= $x324 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x172 (and $x222 $x82)))
 (let (($x357 (and $x172 $x94)))
 (let (($x49 (and $x357 $x163)))
 (let (($x229 (and $x49 $x336)))
 (let (($x407 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x184 (and $x407 $x229)))
 (let (($x503 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x113 (and $x503 $x184)))
 (let (($x211 (= ?x253 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x140 (and $x211 $x113)))
 (let (($x98 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x235 (= Lambda35Var (_ bv0 32))))
 (let ((?x540 (ite $x235 ?x501 (_ bv0 32))))
 (let ((?x253 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x297 (= Lambda35Var (_ bv1 32))))
 (let ((?x77 (ite $x297 ?x253 ?x540)))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x12 (_ bv1 32))))
 (=> $x426 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x77)))))))))))
 ))
 (let (($x137 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x541 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x12 (_ bv1 32))))
 (= $x426 $x131))))))
 ))
 (let (($x519 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x448 (= ?x12 (_ bv0 32))))
 (=> $x448 $x515)))))
 ))
 (let (($x177 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x541 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x448 (= ?x12 (_ bv0 32))))
 (= $x448 $x108))))))
 ))
 (let (($x509 (and $x177 $x519)))
 (let (($x408 (and $x509 $x137)))
 (let (($x160 (and $x408 $x98)))
 (let (($x544 (and $x160 $x140)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x261 (and $x182 $x544)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x154 (and $x239 $x261)))
 (let (($x411 (and $x515 $x154)))
 (let (($x318 (= input.spec-%var-y-0.L1%23%bbentry ?x423)))
 (let (($x162 (and $x318 $x411)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x58 (and $x34 $x162)))
 (let (($x217 (and $x515 $x58)))
 (let (($x21 (= input.spec-%var-y-1.L1%31%bbentry ?x475)))
 (let (($x149 (and $x21 $x217)))
 (let (($x315 (=> $x149 $x308)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x146 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x423 (ite $x146 ?x253 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let ((?x231 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x237 (= ?x231 ?x423)))
 (let (($x506 (= $x237 true)))
 (let (($x308 (= $x506 true)))
 (let ((?x194 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x429 (concat ?x273 (concat ?x135 ?x194)))))
 (let (($x254 (= ?x171 input.dst.llvm-%x)))
 (let (($x305 (= $x254 true)))
 (let (($x341 (= $x305 true)))
 (let (($x288 (= input.dst.llvm-%x ?x171)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x39)))
 (let ((?x344 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x197 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x344)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x129 $x197)))
 (let (($x372 (and $x193 $x5)))
 (let (($x269 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x387 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and (and (and $x387 $x269) $x372) $x288)))
 (let (($x322 (= $x35 true)))
 (let (($x320 (= $x322 true)))
 (let (($x256 (= $x320 true)))
 (let (($x438 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x170 (not $x438)))
 (let (($x375 (= $x170 true)))
 (let (($x335 (= $x375 true)))
 (let (($x166 (= $x335 true)))
 (let (($x191 (and $x166 $x256)))
 (let (($x266 (and $x191 $x341)))
 (let ((?x174 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x146) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x174 (_ bv1 32))))
 (let (($x51 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x434 (and $x51 $x384)))
 (let (($x245 (and $x434 $x266)))
 (let (($x459 (= $x51 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x40 (and $x459 $x245)))
 (let (($x516 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x475 (ite $x516 ?x253 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x86 (= input.spec-%tmpvar-16.L1%25%d.2 ?x475)))
 (let (($x206 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x373 (=> $x206 $x86)))
 (let (($x69 (= $x206 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x516) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x515 (= false false)))
 (let (($x482 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x79 (=> $x482 $x515)))
 (let (($x57 (= $x482 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x516) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x95 (and $x57 $x79)))
 (let (($x310 (and $x95 $x69)))
 (let (($x290 (and $x310 $x373)))
 (let (($x334 (and $x290 $x40)))
 (let (($x270 (= input.spec-%tmpvar-12.L1%17%d.2 ?x423)))
 (let (($x422 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x87 (=> $x422 $x270)))
 (let (($x17 (= $x422 $x384)))
 (let (($x481 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x412 (=> $x481 $x515)))
 (let (($x419 (= $x481 (= ?x174 (_ bv0 32)))))
 (let (($x404 (and $x419 $x412)))
 (let (($x312 (and $x404 $x17)))
 (let (($x243 (and $x312 $x87)))
 (let (($x504 (and $x243 $x334)))
 (let (($x414 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x486 (and $x414 $x504)))
 (let (($x190 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x235 (= Lambda35Var (_ bv0 32))))
 (let ((?x540 (ite $x235 ?x501 (_ bv0 32))))
 (let ((?x253 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x297 (= Lambda35Var (_ bv1 32))))
 (let ((?x77 (ite $x297 ?x253 ?x540)))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x399 (_ bv1 32))))
 (=> $x230 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x77)))))))))))
 ))
 (let (($x543 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x541 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x399 (_ bv1 32))))
 (= $x230 $x131))))))
 ))
 (let (($x377 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (= ?x399 (_ bv0 32))))
 (=> $x546 $x515)))))
 ))
 (let (($x361 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x541 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (= ?x399 (_ bv0 32))))
 (= $x546 $x108))))))
 ))
 (let (($x232 (and $x361 $x377)))
 (let (($x483 (and $x232 $x543)))
 (let (($x388 (and $x483 $x190)))
 (let (($x10 (and $x388 $x486)))
 (let (($x390 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x458 (and $x390 $x10)))
 (let (($x512 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x462 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x451 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x451 (_ bv1 32))))
 (let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x462 (_ bv1 32))))
 (= $x93 $x327))))))
 ))
 (let (($x14 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x462 (_ bv0 32))))
 (=> $x427 $x515)))))
 ))
 (let (($x107 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x451 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x451 (_ bv0 32))))
 (let ((?x462 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x462 (_ bv0 32))))
 (= $x427 $x398))))))
 ))
 (let (($x54 (and $x107 $x14)))
 (let (($x46 (and $x54 $x213)))
 (let (($x43 (and $x46 $x512)))
 (let (($x494 (and $x43 $x458)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x496 (and $x314 $x494)))
 (let (($x470 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x55 (and $x470 $x496)))
 (let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x537 (= ?x501 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x336 (and $x537 $x55)))
 (let (($x163 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x235 (= Lambda35Var (_ bv0 32))))
 (let ((?x540 (ite $x235 ?x501 (_ bv0 32))))
 (let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x430 (_ bv1 32))))
 (=> $x268 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x540))))))))
 ))
 (let (($x94 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x430 (_ bv1 32))))
 (= $x268 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x82 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x430 (_ bv0 32))))
 (=> $x324 $x515)))))
 ))
 (let (($x222 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x430 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x430 (_ bv0 32))))
 (= $x324 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x172 (and $x222 $x82)))
 (let (($x357 (and $x172 $x94)))
 (let (($x49 (and $x357 $x163)))
 (let (($x229 (and $x49 $x336)))
 (let (($x407 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x184 (and $x407 $x229)))
 (let (($x503 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x113 (and $x503 $x184)))
 (let (($x211 (= ?x253 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x140 (and $x211 $x113)))
 (let (($x98 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x501 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x235 (= Lambda35Var (_ bv0 32))))
 (let ((?x540 (ite $x235 ?x501 (_ bv0 32))))
 (let ((?x253 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x297 (= Lambda35Var (_ bv1 32))))
 (let ((?x77 (ite $x297 ?x253 ?x540)))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x12 (_ bv1 32))))
 (=> $x426 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x77)))))))))))
 ))
 (let (($x137 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x541 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x12 (_ bv1 32))))
 (= $x426 $x131))))))
 ))
 (let (($x519 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x515 (= false false)))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x448 (= ?x12 (_ bv0 32))))
 (=> $x448 $x515)))))
 ))
 (let (($x177 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x541 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x541 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x448 (= ?x12 (_ bv0 32))))
 (= $x448 $x108))))))
 ))
 (let (($x509 (and $x177 $x519)))
 (let (($x408 (and $x509 $x137)))
 (let (($x160 (and $x408 $x98)))
 (let (($x544 (and $x160 $x140)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x261 (and $x182 $x544)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x154 (and $x239 $x261)))
 (let (($x411 (and $x515 $x154)))
 (let (($x318 (= input.spec-%var-y-0.L1%23%bbentry ?x423)))
 (let (($x162 (and $x318 $x411)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x58 (and $x34 $x162)))
 (let (($x217 (and $x515 $x58)))
 (let (($x21 (= input.spec-%var-y-1.L1%31%bbentry ?x475)))
 (let (($x149 (and $x21 $x217)))
 (let (($x315 (=> $x149 $x308)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x380 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x449 (not $x380)))
 (let (($x513 (or $x380 $x449)))
 (let (($x502 (= $x513 true)))
 (let (($x328 (= $x502 true)))
 (let ((?x313 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x442 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x520 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x520 (concat ?x442 (concat ?x302 ?x313)))))
 (let (($x75 (= ?x59 input.dst.llvm-%x)))
 (let (($x450 (= $x75 true)))
 (let (($x92 (= $x450 true)))
 (let (($x471 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x472 (= $x471 true)))
 (let (($x463 (= $x472 true)))
 (let (($x363 (= $x463 true)))
 (let ((?x356 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x356)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x350 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x392 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x453 (and $x392 $x350)))
 (let (($x132 (and $x453 $x151)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x205 $x132)))
 (let (($x53 (= $x56 true)))
 (let (($x444 (= $x53 true)))
 (let (($x446 (= $x444 true)))
 (let (($x542 (and $x446 $x363)))
 (let (($x284 (and $x542 $x92)))
 (let (($x306 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x155 (= $x306 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x279 (and $x155 $x284)))
 (let ((?x423 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x324 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x260 (ite $x324 ?x423 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x115 (= input.spec-%tmpvar-16.L1%25%d.2 ?x260)))
 (let (($x164 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x50 (=> $x164 $x115)))
 (let (($x124 (= $x164 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x324) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x88 (= false false)))
 (let (($x15 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x455 (=> $x15 $x88)))
 (let (($x111 (= $x15 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x324) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x325 (and $x111 $x455)))
 (let (($x299 (and $x325 $x124)))
 (let (($x8 (and $x299 $x50)))
 (let (($x355 (and $x8 $x279)))
 (let (($x107 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x432 (ite $x107 ?x423 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x72 (= input.spec-%tmpvar-12.L1%17%d.2 ?x432)))
 (let (($x220 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x215 (=> $x220 $x72)))
 (let (($x417 (= $x220 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x107) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x457 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x148 (=> $x457 $x88)))
 (let (($x228 (= $x457 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x107) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x456 (and $x228 $x148)))
 (let (($x76 (and $x456 $x417)))
 (let (($x145 (and $x76 $x215)))
 (let (($x389 (and $x145 $x355)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x440 (and $x187 $x389)))
 (let (($x78 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= Lambda35Var (_ bv0 32))))
 (let ((?x135 (ite $x24 ?x492 (_ bv0 32))))
 (let ((?x423 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x312 (= Lambda35Var (_ bv1 32))))
 (let ((?x143 (ite $x312 ?x423 ?x135)))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x401 (_ bv1 32))))
 (=> $x134 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x143)))))))))))
 ))
 (let (($x474 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x241 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x401 (_ bv1 32))))
 (= $x134 $x42))))))
 ))
 (let (($x351 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x401 (_ bv0 32))))
 (=> $x251 $x88)))))
 ))
 (let (($x349 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x241 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x401 (_ bv0 32))))
 (= $x251 $x57))))))
 ))
 (let (($x60 (and $x349 $x351)))
 (let (($x352 (and $x60 $x474)))
 (let (($x477 (and $x352 $x78)))
 (let (($x18 (and $x477 $x440)))
 (let (($x364 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x67 (and $x364 $x18)))
 (let (($x331 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x152 (_ bv1 32))))
 (=> $x337 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x396 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x22 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x22 (_ bv1 32))))
 (let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x152 (_ bv1 32))))
 (= $x337 $x264))))))
 ))
 (let (($x227 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x152 (_ bv0 32))))
 (=> $x200 $x88)))))
 ))
 (let (($x378 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x22 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x22 (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x152 (_ bv0 32))))
 (= $x200 $x304))))))
 ))
 (let (($x293 (and $x378 $x227)))
 (let (($x311 (and $x293 $x396)))
 (let (($x532 (and $x311 $x331)))
 (let (($x130 (and $x532 $x67)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x499 (and $x443 $x130)))
 (let (($x265 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x370 (and $x265 $x499)))
 (let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x517 (= ?x492 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x68 (and $x517 $x370)))
 (let (($x514 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= Lambda35Var (_ bv0 32))))
 (let ((?x135 (ite $x24 ?x492 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x210 (_ bv1 32))))
 (=> $x283 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x135))))))))
 ))
 (let (($x285 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x210 (_ bv1 32))))
 (= $x283 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x204 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x210 (_ bv0 32))))
 (=> $x262 $x88)))))
 ))
 (let (($x495 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x210 (_ bv0 32))))
 (= $x262 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x157 (and $x495 $x204)))
 (let (($x522 (and $x157 $x285)))
 (let (($x203 (and $x522 $x514)))
 (let (($x246 (and $x203 $x68)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x321 (and $x266 $x246)))
 (let (($x305 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x281 (and $x305 $x321)))
 (let (($x191 (= ?x423 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x280 (and $x191 $x281)))
 (let (($x322 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= Lambda35Var (_ bv0 32))))
 (let ((?x135 (ite $x24 ?x492 (_ bv0 32))))
 (let ((?x423 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x312 (= Lambda35Var (_ bv1 32))))
 (let ((?x143 (ite $x312 ?x423 ?x135)))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x95 (_ bv1 32))))
 (=> $x340 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x143)))))))))))
 ))
 (let (($x161 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x241 (_ bv1 32))))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x95 (_ bv1 32))))
 (= $x340 $x42))))))
 ))
 (let (($x86 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x95 (_ bv0 32))))
 (=> $x206 $x88)))))
 ))
 (let (($x69 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x241 (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x95 (_ bv0 32))))
 (= $x206 $x57))))))
 ))
 (let (($x373 (and $x69 $x86)))
 (let (($x197 (and $x373 $x161)))
 (let (($x320 (and $x197 $x322)))
 (let (($x198 (and $x320 $x280)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x89 (and $x54 $x198)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x410 (and $x314 $x89)))
 (let (($x497 (and $x88 $x410)))
 (let (($x537 (= input.spec-%var-y-0.L1%23%bbentry ?x432)))
 (let (($x530 (and $x537 $x497)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x528 (and $x242 $x530)))
 (let (($x368 (and $x88 $x528)))
 (let (($x277 (= input.spec-%var-y-1.L1%31%bbentry ?x260)))
 (let (($x70 (and $x277 $x368)))
 (let (($x445 (=> $x70 $x328)))
 (not $x445))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x380 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x449 (not $x380)))
 (let (($x513 (or $x380 $x449)))
 (let (($x502 (= $x513 true)))
 (let (($x328 (= $x502 true)))
 (let ((?x313 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x442 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x520 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x520 (concat ?x442 (concat ?x302 ?x313)))))
 (let (($x75 (= ?x59 input.dst.llvm-%x)))
 (let (($x450 (= $x75 true)))
 (let (($x92 (= $x450 true)))
 (let (($x471 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x472 (= $x471 true)))
 (let (($x463 (= $x472 true)))
 (let (($x363 (= $x463 true)))
 (let ((?x356 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x356)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x350 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x392 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x453 (and $x392 $x350)))
 (let (($x132 (and $x453 $x151)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x205 $x132)))
 (let (($x53 (= $x56 true)))
 (let (($x444 (= $x53 true)))
 (let (($x446 (= $x444 true)))
 (let (($x542 (and $x446 $x363)))
 (let (($x284 (and $x542 $x92)))
 (let (($x306 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x155 (= $x306 input.spec-%tmpvar-10.L1%13%d)))
 (let (($x279 (and $x155 $x284)))
 (let ((?x423 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x324 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x260 (ite $x324 ?x423 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x115 (= input.spec-%tmpvar-16.L1%25%d.2 ?x260)))
 (let (($x164 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x50 (=> $x164 $x115)))
 (let (($x124 (= $x164 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x324) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x88 (= false false)))
 (let (($x15 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x455 (=> $x15 $x88)))
 (let (($x111 (= $x15 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x324) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x325 (and $x111 $x455)))
 (let (($x299 (and $x325 $x124)))
 (let (($x8 (and $x299 $x50)))
 (let (($x355 (and $x8 $x279)))
 (let (($x107 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x432 (ite $x107 ?x423 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd input.spec-%var-x-0 (_ bv4294967291 32)) (_ bv0 32)))))
 (let (($x72 (= input.spec-%tmpvar-12.L1%17%d.2 ?x432)))
 (let (($x220 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x215 (=> $x220 $x72)))
 (let (($x417 (= $x220 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x107) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x457 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x148 (=> $x457 $x88)))
 (let (($x228 (= $x457 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x107) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x456 (and $x228 $x148)))
 (let (($x76 (and $x456 $x417)))
 (let (($x145 (and $x76 $x215)))
 (let (($x389 (and $x145 $x355)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x440 (and $x187 $x389)))
 (let (($x78 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= Lambda35Var (_ bv0 32))))
 (let ((?x135 (ite $x24 ?x492 (_ bv0 32))))
 (let ((?x423 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x312 (= Lambda35Var (_ bv1 32))))
 (let ((?x143 (ite $x312 ?x423 ?x135)))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x401 (_ bv1 32))))
 (=> $x134 (= (input.spec-%var-t1-0.L1%13%d.1.1 Lambda35Var) ?x143)))))))))))
 ))
 (let (($x474 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x241 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x401 (_ bv1 32))))
 (= $x134 $x42))))))
 ))
 (let (($x351 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x401 (_ bv0 32))))
 (=> $x251 $x88)))))
 ))
 (let (($x349 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x241 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-t1-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x401 (_ bv0 32))))
 (= $x251 $x57))))))
 ))
 (let (($x60 (and $x349 $x351)))
 (let (($x352 (and $x60 $x474)))
 (let (($x477 (and $x352 $x78)))
 (let (($x18 (and $x477 $x440)))
 (let (($x364 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x67 (and $x364 $x18)))
 (let (($x331 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x152 (_ bv1 32))))
 (=> $x337 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda35Var) (_ bv0 32))))))
 ))
 (let (($x396 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x22 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x22 (_ bv1 32))))
 (let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x152 (_ bv1 32))))
 (= $x337 $x264))))))
 ))
 (let (($x227 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x152 (_ bv0 32))))
 (=> $x200 $x88)))))
 ))
 (let (($x378 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x22 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x22 (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x152 (_ bv0 32))))
 (= $x200 $x304))))))
 ))
 (let (($x293 (and $x378 $x227)))
 (let (($x311 (and $x293 $x396)))
 (let (($x532 (and $x311 $x331)))
 (let (($x130 (and $x532 $x67)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x499 (and $x443 $x130)))
 (let (($x265 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x370 (and $x265 $x499)))
 (let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x517 (= ?x492 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x68 (and $x517 $x370)))
 (let (($x514 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= Lambda35Var (_ bv0 32))))
 (let ((?x135 (ite $x24 ?x492 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x210 (_ bv1 32))))
 (=> $x283 (= (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda35Var) ?x135))))))))
 ))
 (let (($x285 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x210 (_ bv1 32))))
 (= $x283 (bvuge (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x204 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x210 (_ bv0 32))))
 (=> $x262 $x88)))))
 ))
 (let (($x495 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x210 (ite (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x210 (_ bv0 32))))
 (= $x262 (= (ite (or false (= Lambda35Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x157 (and $x495 $x204)))
 (let (($x522 (and $x157 $x285)))
 (let (($x203 (and $x522 $x514)))
 (let (($x246 (and $x203 $x68)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x321 (and $x266 $x246)))
 (let (($x305 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x281 (and $x305 $x321)))
 (let (($x191 (= ?x423 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x280 (and $x191 $x281)))
 (let (($x322 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x492 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= Lambda35Var (_ bv0 32))))
 (let ((?x135 (ite $x24 ?x492 (_ bv0 32))))
 (let ((?x423 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x312 (= Lambda35Var (_ bv1 32))))
 (let ((?x143 (ite $x312 ?x423 ?x135)))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x95 (_ bv1 32))))
 (=> $x340 (= (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda35Var) ?x143)))))))))))
 ))
 (let (($x161 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x241 (_ bv1 32))))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x95 (_ bv1 32))))
 (= $x340 $x42))))))
 ))
 (let (($x86 (forall ((Lambda35Var (_ BitVec 32)) )(let (($x88 (= false false)))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x95 (_ bv0 32))))
 (=> $x206 $x88)))))
 ))
 (let (($x69 (forall ((Lambda35Var (_ BitVec 32)) )(let ((?x241 (ite (or (or false (= Lambda35Var (_ bv0 32))) (= Lambda35Var (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x241 (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda35Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x95 (_ bv0 32))))
 (= $x206 $x57))))))
 ))
 (let (($x373 (and $x69 $x86)))
 (let (($x197 (and $x373 $x161)))
 (let (($x320 (and $x197 $x322)))
 (let (($x198 (and $x320 $x280)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x89 (and $x54 $x198)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x410 (and $x314 $x89)))
 (let (($x497 (and $x88 $x410)))
 (let (($x537 (= input.spec-%var-y-0.L1%23%bbentry ?x432)))
 (let (($x530 (and $x537 $x497)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x528 (and $x242 $x530)))
 (let (($x368 (and $x88 $x528)))
 (let (($x277 (= input.spec-%var-y-1.L1%31%bbentry ?x260)))
 (let (($x70 (and $x277 $x368)))
 (let (($x445 (=> $x70 $x328)))
 (not $x445))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310063/query
