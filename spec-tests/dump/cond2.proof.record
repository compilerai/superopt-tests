==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x289 (not $x288)))
 (let (($x290 (or $x288 $x289)))
 (let (($x291 (= $x290 false)))
 (let (($x292 (= $x291 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x261 (concat ?x258 (concat ?x254 ?x252)))))
 (let (($x263 (= ?x262 input.dst.llvm-%x)))
 (let (($x264 (= $x263 true)))
 (let (($x246 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x238)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x233 $x236)))
 (let (($x240 (and $x237 $x239)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x219 $x240)))
 (let (($x226 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x226)))))))
 (let (($x242 (and $x232 $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x249 (and $x244 $x248)))
 (let (($x265 (and $x249 $x264)))
 (let (($x214 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x215 (= input.spec-%tmpvar-10.L1%13%d $x214)))
 (let (($x266 (and $x215 $x265)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x18 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x44 (ite $x18 ?x26 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x11 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x39 (ite $x11 ?x20 ?x44)))
 (let (($x210 (= input.spec-%tmpvar-16.L1%25%d.2 ?x39)))
 (let (($x206 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x211 (=> $x206 $x210)))
 (let (($x207 (= $x206 true)))
 (let (($x48 (= false false)))
 (let (($x202 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x204 (=> $x202 $x48)))
 (let (($x203 (= $x202 false)))
 (let (($x205 (and $x203 $x204)))
 (let (($x208 (and $x205 $x207)))
 (let (($x212 (and $x208 $x211)))
 (let (($x267 (and $x212 $x266)))
 (let (($x46 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x47 (ite $x46 ?x26 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x27 (ite $x13 ?x20 ?x47)))
 (let (($x198 (= input.spec-%tmpvar-12.L1%17%d.2 ?x27)))
 (let (($x194 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x199 (=> $x194 $x198)))
 (let (($x195 (= $x194 true)))
 (let (($x190 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x192 (=> $x190 $x48)))
 (let (($x191 (= $x190 false)))
 (let (($x193 (and $x191 $x192)))
 (let (($x196 (and $x193 $x195)))
 (let (($x200 (and $x196 $x199)))
 (let (($x268 (and $x200 $x267)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x269 (and $x188 $x268)))
 (let (($x185 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= Lambda38 (_ bv0 32))))
 (let ((?x73 (ite $x43 ?x26 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x40 (= Lambda38 (_ bv1 32))))
 (let ((?x74 (ite $x40 ?x20 ?x73)))
 (let ((?x179 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x164 (_ bv1 32))))
 (=> $x174 (= ?x179 ?x74)))))))))))))
 ))
 (let (($x176 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x31 (_ bv1 32))))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x164 (_ bv1 32))))
 (= $x174 $x61)))))))
 ))
 (let (($x170 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x164 (_ bv0 32))))
 (=> $x165 $x48))))))
 ))
 (let (($x167 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x31 (_ bv0 32))))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x164 (_ bv0 32))))
 (= $x165 $x49)))))))
 ))
 (let (($x171 (and $x167 $x170)))
 (let (($x177 (and $x171 $x176)))
 (let (($x186 (and $x177 $x185)))
 (let (($x270 (and $x186 $x269)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x271 (and $x157 $x270)))
 (let (($x154 (forall ((Lambda38 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x133 (_ bv1 32))))
 (=> $x143 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x145 (forall ((Lambda38 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x133 (_ bv1 32))))
 (= $x143 false)))))
 ))
 (let (($x139 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (=> $x134 $x48))))))
 ))
 (let (($x136 (forall ((Lambda38 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (= $x134 true)))))
 ))
 (let (($x140 (and $x136 $x139)))
 (let (($x146 (and $x140 $x145)))
 (let (($x155 (and $x146 $x154)))
 (let (($x272 (and $x155 $x271)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x273 (and $x126 $x272)))
 (let (($x124 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x274 (and $x124 $x273)))
 (let (($x121 (= ?x26 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x275 (and $x121 $x274)))
 (let (($x118 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= Lambda38 (_ bv0 32))))
 (let ((?x73 (ite $x43 ?x26 (_ bv0 32))))
 (let ((?x112 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x95 (_ bv1 32))))
 (=> $x107 (= ?x112 ?x73))))))))))
 ))
 (let (($x109 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x95 (_ bv1 32))))
 (= $x107 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (=> $x96 $x48))))))
 ))
 (let (($x98 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (= $x96 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x102 (and $x98 $x101)))
 (let (($x110 (and $x102 $x109)))
 (let (($x119 (and $x110 $x118)))
 (let (($x276 (and $x119 $x275)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x277 (and $x84 $x276)))
 (let (($x82 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x278 (and $x82 $x277)))
 (let (($x80 (= ?x20 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x279 (and $x80 $x278)))
 (let (($x77 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= Lambda38 (_ bv0 32))))
 (let ((?x73 (ite $x43 ?x26 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x40 (= Lambda38 (_ bv1 32))))
 (let ((?x74 (ite $x40 ?x20 ?x73)))
 (let ((?x67 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x50 (_ bv1 32))))
 (=> $x62 (= ?x67 ?x74)))))))))))))
 ))
 (let (($x64 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x31 (_ bv1 32))))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x50 (_ bv1 32))))
 (= $x62 $x61)))))))
 ))
 (let (($x56 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (=> $x51 $x48))))))
 ))
 (let (($x53 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x31 (_ bv0 32))))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (= $x51 $x49)))))))
 ))
 (let (($x57 (and $x53 $x56)))
 (let (($x65 (and $x57 $x64)))
 (let (($x78 (and $x65 $x77)))
 (let (($x280 (and $x78 $x279)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x281 (and $x42 $x280)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x282 (and $x14 $x281)))
 (let (($x283 (and $x48 $x282)))
 (let (($x30 (= input.spec-%var-y-0.L1%23%bbentry ?x27)))
 (let (($x284 (and $x30 $x283)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x285 (and $x35 $x284)))
 (let (($x286 (and $x48 $x285)))
 (let (($x41 (= input.spec-%var-y-1.L1%31%bbentry ?x39)))
 (let (($x287 (and $x41 $x286)))
 (let (($x293 (=> $x287 $x292)))
 (not $x293)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x289 (not $x288)))
 (let (($x290 (or $x288 $x289)))
 (let (($x291 (= $x290 false)))
 (let (($x292 (= $x291 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x261 (concat ?x258 (concat ?x254 ?x252)))))
 (let (($x263 (= ?x262 input.dst.llvm-%x)))
 (let (($x264 (= $x263 true)))
 (let (($x246 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x238)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x233 $x236)))
 (let (($x240 (and $x237 $x239)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x219 $x240)))
 (let (($x226 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x226)))))))
 (let (($x242 (and $x232 $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x249 (and $x244 $x248)))
 (let (($x265 (and $x249 $x264)))
 (let (($x214 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x215 (= input.spec-%tmpvar-10.L1%13%d $x214)))
 (let (($x266 (and $x215 $x265)))
 (let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x18 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x44 (ite $x18 ?x26 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x11 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x39 (ite $x11 ?x20 ?x44)))
 (let (($x210 (= input.spec-%tmpvar-16.L1%25%d.2 ?x39)))
 (let (($x206 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x211 (=> $x206 $x210)))
 (let (($x207 (= $x206 true)))
 (let (($x48 (= false false)))
 (let (($x202 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x204 (=> $x202 $x48)))
 (let (($x203 (= $x202 false)))
 (let (($x205 (and $x203 $x204)))
 (let (($x208 (and $x205 $x207)))
 (let (($x212 (and $x208 $x211)))
 (let (($x267 (and $x212 $x266)))
 (let (($x46 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x47 (ite $x46 ?x26 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x27 (ite $x13 ?x20 ?x47)))
 (let (($x198 (= input.spec-%tmpvar-12.L1%17%d.2 ?x27)))
 (let (($x194 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x199 (=> $x194 $x198)))
 (let (($x195 (= $x194 true)))
 (let (($x190 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x192 (=> $x190 $x48)))
 (let (($x191 (= $x190 false)))
 (let (($x193 (and $x191 $x192)))
 (let (($x196 (and $x193 $x195)))
 (let (($x200 (and $x196 $x199)))
 (let (($x268 (and $x200 $x267)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x269 (and $x188 $x268)))
 (let (($x185 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= Lambda38 (_ bv0 32))))
 (let ((?x73 (ite $x43 ?x26 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x40 (= Lambda38 (_ bv1 32))))
 (let ((?x74 (ite $x40 ?x20 ?x73)))
 (let ((?x179 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x164 (_ bv1 32))))
 (=> $x174 (= ?x179 ?x74)))))))))))))
 ))
 (let (($x176 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x31 (_ bv1 32))))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x164 (_ bv1 32))))
 (= $x174 $x61)))))))
 ))
 (let (($x170 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x164 (_ bv0 32))))
 (=> $x165 $x48))))))
 ))
 (let (($x167 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x31 (_ bv0 32))))
 (let (($x159 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x164 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x164 (_ bv0 32))))
 (= $x165 $x49)))))))
 ))
 (let (($x171 (and $x167 $x170)))
 (let (($x177 (and $x171 $x176)))
 (let (($x186 (and $x177 $x185)))
 (let (($x270 (and $x186 $x269)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x271 (and $x157 $x270)))
 (let (($x154 (forall ((Lambda38 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x133 (_ bv1 32))))
 (=> $x143 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x145 (forall ((Lambda38 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x133 (_ bv1 32))))
 (= $x143 false)))))
 ))
 (let (($x139 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (=> $x134 $x48))))))
 ))
 (let (($x136 (forall ((Lambda38 (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x133 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (= $x134 true)))))
 ))
 (let (($x140 (and $x136 $x139)))
 (let (($x146 (and $x140 $x145)))
 (let (($x155 (and $x146 $x154)))
 (let (($x272 (and $x155 $x271)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x273 (and $x126 $x272)))
 (let (($x124 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x274 (and $x124 $x273)))
 (let (($x121 (= ?x26 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x275 (and $x121 $x274)))
 (let (($x118 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= Lambda38 (_ bv0 32))))
 (let ((?x73 (ite $x43 ?x26 (_ bv0 32))))
 (let ((?x112 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x95 (_ bv1 32))))
 (=> $x107 (= ?x112 ?x73))))))))))
 ))
 (let (($x109 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x95 (_ bv1 32))))
 (= $x107 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (=> $x96 $x48))))))
 ))
 (let (($x98 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (= $x96 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x102 (and $x98 $x101)))
 (let (($x110 (and $x102 $x109)))
 (let (($x119 (and $x110 $x118)))
 (let (($x276 (and $x119 $x275)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x277 (and $x84 $x276)))
 (let (($x82 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x278 (and $x82 $x277)))
 (let (($x80 (= ?x20 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x279 (and $x80 $x278)))
 (let (($x77 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x26 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= Lambda38 (_ bv0 32))))
 (let ((?x73 (ite $x43 ?x26 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x40 (= Lambda38 (_ bv1 32))))
 (let ((?x74 (ite $x40 ?x20 ?x73)))
 (let ((?x67 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x50 (_ bv1 32))))
 (=> $x62 (= ?x67 ?x74)))))))))))))
 ))
 (let (($x64 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x31 (_ bv1 32))))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x50 (_ bv1 32))))
 (= $x62 $x61)))))))
 ))
 (let (($x56 (forall ((Lambda38 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (=> $x51 $x48))))))
 ))
 (let (($x53 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x31 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x31 (_ bv0 32))))
 (let (($x17 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x50 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x50 (_ bv0 32))))
 (= $x51 $x49)))))))
 ))
 (let (($x57 (and $x53 $x56)))
 (let (($x65 (and $x57 $x64)))
 (let (($x78 (and $x65 $x77)))
 (let (($x280 (and $x78 $x279)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x281 (and $x42 $x280)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x282 (and $x14 $x281)))
 (let (($x283 (and $x48 $x282)))
 (let (($x30 (= input.spec-%var-y-0.L1%23%bbentry ?x27)))
 (let (($x284 (and $x30 $x283)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x285 (and $x35 $x284)))
 (let (($x286 (and $x48 $x285)))
 (let (($x41 (= input.spec-%var-y-1.L1%31%bbentry ?x39)))
 (let (($x287 (and $x41 $x286)))
 (let (($x293 (=> $x287 $x292)))
 (not $x293)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.spec-%tmpvar-10.L1%13%d () Bool
    false)
  (define-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7288154)
  (define-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32)
    #x00000011)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7288157)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7288154)
  (define-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32)
    #x00000011)
  (define-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32)
    #x00000011)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1!43 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000008))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%13%d.1.1!43 (k!36 x!0)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1!39 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L1%13%d.0.1!39 (k!35 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1!42 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000011
      #x00000007)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L1%13%d.1.1!42 (k!38 x!0)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L1%13%d.0.1!44 (k!38 x!0)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1!40 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000011
      #x00000006)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L1%13%d.1.1!40 (k!35 x!0)))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf7288154) #x05
      #x00))
  (define-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1!41 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%13%d.0.1!41 (k!36 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3c000004)
  (define-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!51))
  (define-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32)
    #x0000001b)
  (define-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32)
    #x0000002c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3c000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3c000004)
  (define-fun input.spec-%tmpvar-10.L1%13%d () Bool
    false)
  (define-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32)
    #x0000002c)
  (define-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32)
    #x0000001b)
  (define-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32)
    #x0000001b)
  (define-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32)
    #x0000002c)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1!60 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x0000001b
    (ite (= x!0 #x00000001) #x0000002c
      #x00000007)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1!57 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L1%13%d.0.1!57 (k!52 x!0)))
  (define-fun k!53 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!55 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1!59 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun input.spec-%var-t1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L1%13%d.0.1!59 (k!55 x!0)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1!56 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x0000001b
    (ite (= x!0 #x00000001) #x0000002c
      #x00000006)))
  (define-fun input.spec-%var-t1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L1%13%d.1.1!56 (k!55 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1!61 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x0000001b
      #x00000008))
  (define-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L1%13%d.1.1!60 (k!52 x!0)))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3c000004) #x20
      #x00))
  (define-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1!58 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%13%d.0.1!58 (k!53 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%13%d.1.1!61 (k!53 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x178 (not $x173)))
 (let (($x181 (or $x173 $x178)))
 (let (($x182 (not $x181)))
 (let (($x276 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x168 (and true $x276)))
 (let (($x163 (not $x276)))
 (let (($x172 (or $x163 $x168)))
 (let (($x295 (or $x172 $x182)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x90 (concat ?x85 (concat ?x71 ?x69)))))
 (let (($x92 (= ?x91 input.dst.llvm-%x)))
 (let (($x99 (= $x92 true)))
 (let (($x10 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x54 (= $x10 true)))
 (let (($x58 (= $x54 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x28)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x217 $x7)))
 (let (($x36 (and $x68 $x6)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x281 $x36)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x294 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x288)))))))
 (let (($x37 (and $x294 $x8)))
 (let (($x9 (= $x37 true)))
 (let (($x33 (= $x9 true)))
 (let (($x59 (and $x33 $x58)))
 (let (($x103 (and $x59 $x99)))
 (let (($x277 (= input.spec-%tmpvar-10.L1%13%d $x276)))
 (let (($x104 (and $x277 $x103)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x26 (ite $x34 ?x24 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x44 (ite $x20 ?x23 ?x26)))
 (let (($x272 (= input.spec-%tmpvar-16.L1%25%d.2 ?x44)))
 (let (($x268 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x273 (=> $x268 $x272)))
 (let (($x269 (= $x268 true)))
 (let (($x41 (= false false)))
 (let (($x264 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x266 (=> $x264 $x41)))
 (let (($x265 (= $x264 false)))
 (let (($x267 (and $x265 $x266)))
 (let (($x270 (and $x267 $x269)))
 (let (($x274 (and $x270 $x273)))
 (let (($x105 (and $x274 $x104)))
 (let (($x46 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x47 (ite $x46 ?x24 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x27 (ite $x13 ?x23 ?x47)))
 (let (($x255 (= input.spec-%tmpvar-12.L1%17%d.2 ?x27)))
 (let (($x258 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x259 (=> $x258 $x255)))
 (let (($x253 (= $x258 true)))
 (let (($x260 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x256 (=> $x260 $x41)))
 (let (($x261 (= $x260 false)))
 (let (($x257 (and $x261 $x256)))
 (let (($x254 (and $x257 $x253)))
 (let (($x262 (and $x254 $x259)))
 (let (($x111 (and $x262 $x105)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x114 (and $x249 $x111)))
 (let (($x246 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x57 (= Lambda38 (_ bv0 32))))
 (let ((?x101 (ite $x57 ?x24 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x56 (= Lambda38 (_ bv1 32))))
 (let ((?x102 (ite $x56 ?x23 ?x101)))
 (let ((?x240 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x226 (_ bv1 32))))
 (=> $x235 (= ?x240 ?x102)))))))))))))
 ))
 (let (($x237 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x61 (_ bv1 32))))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x226 (_ bv1 32))))
 (= $x235 $x81)))))))
 ))
 (let (($x218 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x226 (_ bv0 32))))
 (=> $x227 $x41))))))
 ))
 (let (($x229 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x61 (_ bv0 32))))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x226 (_ bv0 32))))
 (= $x227 $x63)))))))
 ))
 (let (($x219 (and $x229 $x218)))
 (let (($x238 (and $x219 $x237)))
 (let (($x247 (and $x238 $x246)))
 (let (($x115 (and $x247 $x114)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x129 (and $x220 $x115)))
 (let (($x213 (forall ((Lambda38 (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x192 (_ bv1 32))))
 (=> $x202 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x204 (forall ((Lambda38 (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x192 (_ bv1 32))))
 (= $x202 false)))))
 ))
 (let (($x198 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x192 (_ bv0 32))))
 (=> $x193 $x41))))))
 ))
 (let (($x195 (forall ((Lambda38 (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x192 (_ bv0 32))))
 (= $x193 true)))))
 ))
 (let (($x199 (and $x195 $x198)))
 (let (($x205 (and $x199 $x204)))
 (let (($x214 (and $x205 $x213)))
 (let (($x149 (and $x214 $x129)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x127 (and $x185 $x149)))
 (let (($x183 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x130 (and $x183 $x127)))
 (let (($x176 (= ?x24 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x131 (and $x176 $x130)))
 (let (($x171 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x57 (= Lambda38 (_ bv0 32))))
 (let ((?x101 (ite $x57 ?x24 (_ bv0 32))))
 (let ((?x164 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x135 (_ bv1 32))))
 (=> $x154 (= ?x164 ?x101))))))))))
 ))
 (let (($x156 (forall ((Lambda38 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x135 (_ bv1 32))))
 (= $x154 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x144 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x135 (_ bv0 32))))
 (=> $x136 $x41))))))
 ))
 (let (($x139 (forall ((Lambda38 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x135 (_ bv0 32))))
 (= $x136 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x145 (and $x139 $x144)))
 (let (($x157 (and $x145 $x156)))
 (let (($x174 (and $x157 $x171)))
 (let (($x132 (and $x174 $x131)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x137 (and $x119 $x132)))
 (let (($x117 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x141 (and $x117 $x137)))
 (let (($x112 (= ?x23 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x142 (and $x112 $x141)))
 (let (($x108 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x57 (= Lambda38 (_ bv0 32))))
 (let ((?x101 (ite $x57 ?x24 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x56 (= Lambda38 (_ bv1 32))))
 (let ((?x102 (ite $x56 ?x23 ?x101)))
 (let ((?x96 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x64 (_ bv1 32))))
 (=> $x82 (= ?x96 ?x102)))))))))))))
 ))
 (let (($x84 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x61 (_ bv1 32))))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x64 (_ bv1 32))))
 (= $x82 $x81)))))))
 ))
 (let (($x76 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x64 (_ bv0 32))))
 (=> $x65 $x41))))))
 ))
 (let (($x73 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x61 (_ bv0 32))))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x64 (_ bv0 32))))
 (= $x65 $x63)))))))
 ))
 (let (($x77 (and $x73 $x76)))
 (let (($x86 (and $x77 $x84)))
 (let (($x109 (and $x86 $x108)))
 (let (($x147 (and $x109 $x142)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x150 (and $x42 $x147)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x151 (and $x14 $x150)))
 (let (($x160 (and $x41 $x151)))
 (let (($x30 (= input.spec-%var-y-0.L1%23%bbentry ?x27)))
 (let (($x180 (and $x30 $x160)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x158 (and $x35 $x180)))
 (let (($x161 (and $x41 $x158)))
 (let (($x39 (= input.spec-%var-y-1.L1%31%bbentry ?x44)))
 (let (($x162 (and $x39 $x161)))
 (let (($x298 (=> $x162 $x297)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x178 (not $x173)))
 (let (($x181 (or $x173 $x178)))
 (let (($x182 (not $x181)))
 (let (($x276 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x168 (and true $x276)))
 (let (($x163 (not $x276)))
 (let (($x172 (or $x163 $x168)))
 (let (($x295 (or $x172 $x182)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x90 (concat ?x85 (concat ?x71 ?x69)))))
 (let (($x92 (= ?x91 input.dst.llvm-%x)))
 (let (($x99 (= $x92 true)))
 (let (($x10 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x54 (= $x10 true)))
 (let (($x58 (= $x54 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x28)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x217 $x7)))
 (let (($x36 (and $x68 $x6)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x281 $x36)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x294 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x288)))))))
 (let (($x37 (and $x294 $x8)))
 (let (($x9 (= $x37 true)))
 (let (($x33 (= $x9 true)))
 (let (($x59 (and $x33 $x58)))
 (let (($x103 (and $x59 $x99)))
 (let (($x277 (= input.spec-%tmpvar-10.L1%13%d $x276)))
 (let (($x104 (and $x277 $x103)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x26 (ite $x34 ?x24 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x44 (ite $x20 ?x23 ?x26)))
 (let (($x272 (= input.spec-%tmpvar-16.L1%25%d.2 ?x44)))
 (let (($x268 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x273 (=> $x268 $x272)))
 (let (($x269 (= $x268 true)))
 (let (($x41 (= false false)))
 (let (($x264 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x266 (=> $x264 $x41)))
 (let (($x265 (= $x264 false)))
 (let (($x267 (and $x265 $x266)))
 (let (($x270 (and $x267 $x269)))
 (let (($x274 (and $x270 $x273)))
 (let (($x105 (and $x274 $x104)))
 (let (($x46 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x47 (ite $x46 ?x24 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x27 (ite $x13 ?x23 ?x47)))
 (let (($x255 (= input.spec-%tmpvar-12.L1%17%d.2 ?x27)))
 (let (($x258 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x259 (=> $x258 $x255)))
 (let (($x253 (= $x258 true)))
 (let (($x260 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x256 (=> $x260 $x41)))
 (let (($x261 (= $x260 false)))
 (let (($x257 (and $x261 $x256)))
 (let (($x254 (and $x257 $x253)))
 (let (($x262 (and $x254 $x259)))
 (let (($x111 (and $x262 $x105)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x114 (and $x249 $x111)))
 (let (($x246 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x57 (= Lambda38 (_ bv0 32))))
 (let ((?x101 (ite $x57 ?x24 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x56 (= Lambda38 (_ bv1 32))))
 (let ((?x102 (ite $x56 ?x23 ?x101)))
 (let ((?x240 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x226 (_ bv1 32))))
 (=> $x235 (= ?x240 ?x102)))))))))))))
 ))
 (let (($x237 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x61 (_ bv1 32))))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x226 (_ bv1 32))))
 (= $x235 $x81)))))))
 ))
 (let (($x218 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x226 (_ bv0 32))))
 (=> $x227 $x41))))))
 ))
 (let (($x229 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x61 (_ bv0 32))))
 (let (($x231 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x226 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x226 (_ bv0 32))))
 (= $x227 $x63)))))))
 ))
 (let (($x219 (and $x229 $x218)))
 (let (($x238 (and $x219 $x237)))
 (let (($x247 (and $x238 $x246)))
 (let (($x115 (and $x247 $x114)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x129 (and $x220 $x115)))
 (let (($x213 (forall ((Lambda38 (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x192 (_ bv1 32))))
 (=> $x202 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x204 (forall ((Lambda38 (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x192 (_ bv1 32))))
 (= $x202 false)))))
 ))
 (let (($x198 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x192 (_ bv0 32))))
 (=> $x193 $x41))))))
 ))
 (let (($x195 (forall ((Lambda38 (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x192 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x192 (_ bv0 32))))
 (= $x193 true)))))
 ))
 (let (($x199 (and $x195 $x198)))
 (let (($x205 (and $x199 $x204)))
 (let (($x214 (and $x205 $x213)))
 (let (($x149 (and $x214 $x129)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x127 (and $x185 $x149)))
 (let (($x183 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x130 (and $x183 $x127)))
 (let (($x176 (= ?x24 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x131 (and $x176 $x130)))
 (let (($x171 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x57 (= Lambda38 (_ bv0 32))))
 (let ((?x101 (ite $x57 ?x24 (_ bv0 32))))
 (let ((?x164 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x135 (_ bv1 32))))
 (=> $x154 (= ?x164 ?x101))))))))))
 ))
 (let (($x156 (forall ((Lambda38 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x135 (_ bv1 32))))
 (= $x154 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x144 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x135 (_ bv0 32))))
 (=> $x136 $x41))))))
 ))
 (let (($x139 (forall ((Lambda38 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x135 (_ bv0 32))))
 (= $x136 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x145 (and $x139 $x144)))
 (let (($x157 (and $x145 $x156)))
 (let (($x174 (and $x157 $x171)))
 (let (($x132 (and $x174 $x131)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x137 (and $x119 $x132)))
 (let (($x117 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x141 (and $x117 $x137)))
 (let (($x112 (= ?x23 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x142 (and $x112 $x141)))
 (let (($x108 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x57 (= Lambda38 (_ bv0 32))))
 (let ((?x101 (ite $x57 ?x24 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x56 (= Lambda38 (_ bv1 32))))
 (let ((?x102 (ite $x56 ?x23 ?x101)))
 (let ((?x96 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x64 (_ bv1 32))))
 (=> $x82 (= ?x96 ?x102)))))))))))))
 ))
 (let (($x84 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x61 (_ bv1 32))))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x64 (_ bv1 32))))
 (= $x82 $x81)))))))
 ))
 (let (($x76 (forall ((Lambda38 (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x64 (_ bv0 32))))
 (=> $x65 $x41))))))
 ))
 (let (($x73 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x61 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x61 (_ bv0 32))))
 (let (($x51 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x64 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x64 (_ bv0 32))))
 (= $x65 $x63)))))))
 ))
 (let (($x77 (and $x73 $x76)))
 (let (($x86 (and $x77 $x84)))
 (let (($x109 (and $x86 $x108)))
 (let (($x147 (and $x109 $x142)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x150 (and $x42 $x147)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x151 (and $x14 $x150)))
 (let (($x160 (and $x41 $x151)))
 (let (($x30 (= input.spec-%var-y-0.L1%23%bbentry ?x27)))
 (let (($x180 (and $x30 $x160)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x158 (and $x35 $x180)))
 (let (($x161 (and $x41 $x158)))
 (let (($x39 (= input.spec-%var-y-1.L1%31%bbentry ?x44)))
 (let (($x162 (and $x39 $x161)))
 (let (($x298 (=> $x162 $x297)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x239 (= (_ bv0 32) ?x234)))
 (let (($x242 (= $x239 true)))
 (let (($x243 (= $x242 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x122 (concat ?x97 (concat ?x79 ?x74)))))
 (let (($x146 (= ?x165 input.dst.llvm-%x)))
 (let (($x148 (= $x146 true)))
 (let (($x120 (= input.dst.llvm-%x ?x165)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x31)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x43 $x40)))
 (let (($x52 (and $x45 $x49)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x16 $x52)))
 (let (($x163 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x296)))))))
 (let (($x125 (and (and (and $x66 $x163) $x53) $x120)))
 (let (($x126 (= $x125 true)))
 (let (($x128 (= $x126 true)))
 (let (($x160 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x180 (= $x160 true)))
 (let (($x158 (= $x180 true)))
 (let (($x140 (and $x158 $x128)))
 (let (($x152 (and $x140 $x148)))
 (let (($x147 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x150 (or false $x147)))
 (let (($x159 (and $x150 $x152)))
 (let (($x137 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x141 (= input.spec-%tmpvar-10.L1%13%d $x137)))
 (let (($x166 (and $x141 $x159)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x11 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x24 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x24 ?x216 ?x42)))
 (let (($x127 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x114 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x130 (=> $x114 $x127)))
 (let (($x115 (= $x114 true)))
 (let (($x86 (= false false)))
 (let (($x103 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x105 (=> $x103 $x86)))
 (let (($x104 (= $x103 false)))
 (let (($x111 (and $x104 $x105)))
 (let (($x129 (and $x111 $x115)))
 (let (($x131 (and $x129 $x130)))
 (let (($x167 (and $x131 $x166)))
 (let (($x108 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x57 (ite $x108 ?x19 (_ bv0 32))))
 (let (($x102 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x39 (ite $x102 ?x216 ?x57)))
 (let (($x88 (= input.spec-%tmpvar-12.L1%17%d.2 ?x39)))
 (let (($x70 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x91 (=> $x70 $x88)))
 (let (($x71 (= $x70 true)))
 (let (($x90 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x113 (=> $x90 $x86)))
 (let (($x87 (= $x90 false)))
 (let (($x85 (and $x87 $x113)))
 (let (($x69 (and $x85 $x71)))
 (let (($x92 (and $x69 $x91)))
 (let (($x188 (and $x92 $x167)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x208 (and $x60 $x188)))
 (let (($x54 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x77 (= Lambda38 (_ bv0 32))))
 (let ((?x145 (ite $x77 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= Lambda38 (_ bv1 32))))
 (let ((?x154 (ite $x41 ?x216 ?x145)))
 (let ((?x8 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x289 (_ bv1 32))))
 (=> $x7 (= ?x8 ?x154)))))))))))))
 ))
 (let (($x28 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x289 (_ bv1 32))))
 (= $x7 $x117)))))))
 ))
 (let (($x281 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (=> $x290 $x86))))))
 ))
 (let (($x292 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x73 (_ bv0 32))))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (= $x290 $x30)))))))
 ))
 (let (($x217 (and $x292 $x281)))
 (let (($x6 (and $x217 $x28)))
 (let (($x58 (and $x6 $x54)))
 (let (($x186 (and $x58 $x208)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x189 (and $x283 $x186)))
 (let (($x276 (forall ((Lambda38 (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x257 (_ bv1 32))))
 (=> $x265 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x267 (forall ((Lambda38 (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x257 (_ bv1 32))))
 (= $x265 false)))))
 ))
 (let (($x259 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x257 (_ bv0 32))))
 (=> $x258 $x86))))))
 ))
 (let (($x254 (forall ((Lambda38 (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x257 (_ bv0 32))))
 (= $x258 true)))))
 ))
 (let (($x262 (and $x254 $x259)))
 (let (($x268 (and $x262 $x267)))
 (let (($x277 (and $x268 $x276)))
 (let (($x190 (and $x277 $x189)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x191 (and $x247 $x190)))
 (let (($x245 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x196 (and $x245 $x191)))
 (let (($x238 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x200 (and $x238 $x196)))
 (let (($x235 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x77 (= Lambda38 (_ bv0 32))))
 (let ((?x145 (ite $x77 ?x19 (_ bv0 32))))
 (let ((?x227 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x195 (_ bv1 32))))
 (=> $x214 (= ?x227 ?x145))))))))))
 ))
 (let (($x220 (forall ((Lambda38 (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x195 (_ bv1 32))))
 (= $x214 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x204 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x195 (_ bv0 32))))
 (=> $x197 $x86))))))
 ))
 (let (($x199 (forall ((Lambda38 (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x195 (_ bv0 32))))
 (= $x197 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x205 (and $x199 $x204)))
 (let (($x231 (and $x205 $x220)))
 (let (($x236 (and $x231 $x235)))
 (let (($x201 (and $x236 $x200)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x206 (and $x175 $x201)))
 (let (($x171 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x209 (and $x171 $x206)))
 (let (($x169 (= ?x216 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x210 (and $x169 $x209)))
 (let (($x156 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x77 (= Lambda38 (_ bv0 32))))
 (let ((?x145 (ite $x77 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= Lambda38 (_ bv1 32))))
 (let ((?x154 (ite $x41 ?x216 ?x145)))
 (let ((?x133 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x82 (_ bv1 32))))
 (=> $x118 (= ?x133 ?x154)))))))))))))
 ))
 (let (($x121 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x82 (_ bv1 32))))
 (= $x118 $x117)))))))
 ))
 (let (($x83 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x82 (_ bv0 32))))
 (=> $x106 $x86))))))
 ))
 (let (($x63 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x73 (_ bv0 32))))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x82 (_ bv0 32))))
 (= $x106 $x30)))))))
 ))
 (let (($x109 (and $x63 $x83)))
 (let (($x135 (and $x109 $x121)))
 (let (($x157 (and $x135 $x156)))
 (let (($x222 (and $x157 $x210)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x241 (and $x34 $x222)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x221 (and $x51 $x241)))
 (let (($x224 (and $x86 $x221)))
 (let (($x25 (= input.spec-%var-y-0.L1%23%bbentry ?x39)))
 (let (($x225 (and $x25 $x224)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x223 (and $x14 $x225)))
 (let (($x230 (and $x86 $x223)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x233 (and $x27 $x230)))
 (let (($x300 (=> $x233 $x243)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x239 (= (_ bv0 32) ?x234)))
 (let (($x242 (= $x239 true)))
 (let (($x243 (= $x242 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x122 (concat ?x97 (concat ?x79 ?x74)))))
 (let (($x146 (= ?x165 input.dst.llvm-%x)))
 (let (($x148 (= $x146 true)))
 (let (($x120 (= input.dst.llvm-%x ?x165)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x31)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x43 $x40)))
 (let (($x52 (and $x45 $x49)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x16 $x52)))
 (let (($x163 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x296)))))))
 (let (($x125 (and (and (and $x66 $x163) $x53) $x120)))
 (let (($x126 (= $x125 true)))
 (let (($x128 (= $x126 true)))
 (let (($x160 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x180 (= $x160 true)))
 (let (($x158 (= $x180 true)))
 (let (($x140 (and $x158 $x128)))
 (let (($x152 (and $x140 $x148)))
 (let (($x147 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x150 (or false $x147)))
 (let (($x159 (and $x150 $x152)))
 (let (($x137 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x141 (= input.spec-%tmpvar-10.L1%13%d $x137)))
 (let (($x166 (and $x141 $x159)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x11 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x24 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x24 ?x216 ?x42)))
 (let (($x127 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x114 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x130 (=> $x114 $x127)))
 (let (($x115 (= $x114 true)))
 (let (($x86 (= false false)))
 (let (($x103 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x105 (=> $x103 $x86)))
 (let (($x104 (= $x103 false)))
 (let (($x111 (and $x104 $x105)))
 (let (($x129 (and $x111 $x115)))
 (let (($x131 (and $x129 $x130)))
 (let (($x167 (and $x131 $x166)))
 (let (($x108 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x57 (ite $x108 ?x19 (_ bv0 32))))
 (let (($x102 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x39 (ite $x102 ?x216 ?x57)))
 (let (($x88 (= input.spec-%tmpvar-12.L1%17%d.2 ?x39)))
 (let (($x70 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x91 (=> $x70 $x88)))
 (let (($x71 (= $x70 true)))
 (let (($x90 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x113 (=> $x90 $x86)))
 (let (($x87 (= $x90 false)))
 (let (($x85 (and $x87 $x113)))
 (let (($x69 (and $x85 $x71)))
 (let (($x92 (and $x69 $x91)))
 (let (($x188 (and $x92 $x167)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x208 (and $x60 $x188)))
 (let (($x54 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x77 (= Lambda38 (_ bv0 32))))
 (let ((?x145 (ite $x77 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= Lambda38 (_ bv1 32))))
 (let ((?x154 (ite $x41 ?x216 ?x145)))
 (let ((?x8 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x289 (_ bv1 32))))
 (=> $x7 (= ?x8 ?x154)))))))))))))
 ))
 (let (($x28 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x289 (_ bv1 32))))
 (= $x7 $x117)))))))
 ))
 (let (($x281 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (=> $x290 $x86))))))
 ))
 (let (($x292 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x73 (_ bv0 32))))
 (let (($x284 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x289 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (= $x290 $x30)))))))
 ))
 (let (($x217 (and $x292 $x281)))
 (let (($x6 (and $x217 $x28)))
 (let (($x58 (and $x6 $x54)))
 (let (($x186 (and $x58 $x208)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x189 (and $x283 $x186)))
 (let (($x276 (forall ((Lambda38 (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x257 (_ bv1 32))))
 (=> $x265 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x267 (forall ((Lambda38 (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x257 (_ bv1 32))))
 (= $x265 false)))))
 ))
 (let (($x259 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x257 (_ bv0 32))))
 (=> $x258 $x86))))))
 ))
 (let (($x254 (forall ((Lambda38 (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x257 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x257 (_ bv0 32))))
 (= $x258 true)))))
 ))
 (let (($x262 (and $x254 $x259)))
 (let (($x268 (and $x262 $x267)))
 (let (($x277 (and $x268 $x276)))
 (let (($x190 (and $x277 $x189)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x191 (and $x247 $x190)))
 (let (($x245 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x196 (and $x245 $x191)))
 (let (($x238 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x200 (and $x238 $x196)))
 (let (($x235 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x77 (= Lambda38 (_ bv0 32))))
 (let ((?x145 (ite $x77 ?x19 (_ bv0 32))))
 (let ((?x227 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x195 (_ bv1 32))))
 (=> $x214 (= ?x227 ?x145))))))))))
 ))
 (let (($x220 (forall ((Lambda38 (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x195 (_ bv1 32))))
 (= $x214 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x204 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x195 (_ bv0 32))))
 (=> $x197 $x86))))))
 ))
 (let (($x199 (forall ((Lambda38 (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x195 (_ bv0 32))))
 (= $x197 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x205 (and $x199 $x204)))
 (let (($x231 (and $x205 $x220)))
 (let (($x236 (and $x231 $x235)))
 (let (($x201 (and $x236 $x200)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x206 (and $x175 $x201)))
 (let (($x171 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x209 (and $x171 $x206)))
 (let (($x169 (= ?x216 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x210 (and $x169 $x209)))
 (let (($x156 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x77 (= Lambda38 (_ bv0 32))))
 (let ((?x145 (ite $x77 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= Lambda38 (_ bv1 32))))
 (let ((?x154 (ite $x41 ?x216 ?x145)))
 (let ((?x133 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x82 (_ bv1 32))))
 (=> $x118 (= ?x133 ?x154)))))))))))))
 ))
 (let (($x121 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x82 (_ bv1 32))))
 (= $x118 $x117)))))))
 ))
 (let (($x83 (forall ((Lambda38 (_ BitVec 32)) )(let (($x86 (= false false)))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x82 (_ bv0 32))))
 (=> $x106 $x86))))))
 ))
 (let (($x63 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x73 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x73 (_ bv0 32))))
 (let (($x46 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x82 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x82 (_ bv0 32))))
 (= $x106 $x30)))))))
 ))
 (let (($x109 (and $x63 $x83)))
 (let (($x135 (and $x109 $x121)))
 (let (($x157 (and $x135 $x156)))
 (let (($x222 (and $x157 $x210)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x241 (and $x34 $x222)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x221 (and $x51 $x241)))
 (let (($x224 (and $x86 $x221)))
 (let (($x25 (= input.spec-%var-y-0.L1%23%bbentry ?x39)))
 (let (($x225 (and $x25 $x224)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x223 (and $x14 $x225)))
 (let (($x230 (and $x86 $x223)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x233 (and $x27 $x230)))
 (let (($x300 (=> $x233 $x243)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x12 (= (_ bv0 32) ?x251)))
 (let (($x36 (= $x12 true)))
 (let (($x9 (= $x36 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x144 (concat ?x138 (concat ?x110 ?x56)))))
 (let (($x202 (= ?x179 input.dst.llvm-%x)))
 (let (($x207 (= $x202 true)))
 (let (($x228 (= input.dst.llvm-%x ?x179)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x75)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x18 $x15)))
 (let (($x81 (and $x67 $x96)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x55 $x81)))
 (let (($x241 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x239)))))))
 (let (($x184 (and (and (and $x162 $x241) $x84) $x228)))
 (let (($x185 (= $x184 true)))
 (let (($x187 (= $x185 true)))
 (let (($x200 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x201 (not $x200)))
 (let (($x206 (= $x201 true)))
 (let (($x209 (= $x206 true)))
 (let (($x192 (and $x209 $x187)))
 (let (($x211 (and $x192 $x207)))
 (let (($x190 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x191 (or false $x190)))
 (let (($x212 (and $x191 $x211)))
 (let (($x208 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x186 (= input.spec-%tmpvar-10.L1%13%d $x208)))
 (let (($x226 (and $x186 $x212)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x11 ?x19 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x23 ?x24 ?x42)))
 (let (($x159 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x140 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x166 (=> $x140 $x159)))
 (let (($x146 (= $x140 true)))
 (let (($x29 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x126 (=> $x120 $x29)))
 (let (($x125 (= $x120 false)))
 (let (($x128 (and $x125 $x126)))
 (let (($x148 (and $x128 $x146)))
 (let (($x167 (and $x148 $x166)))
 (let (($x229 (and $x167 $x226)))
 (let (($x57 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x39 (ite $x57 ?x19 (_ bv0 32))))
 (let (($x108 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x108 ?x24 ?x39)))
 (let (($x74 (= input.spec-%tmpvar-12.L1%17%d.2 ?x25)))
 (let (($x94 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x80 (=> $x94 $x74)))
 (let (($x97 (= $x94 true)))
 (let (($x48 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x122 (=> $x48 $x29)))
 (let (($x100 (= $x48 false)))
 (let (($x95 (and $x100 $x122)))
 (let (($x78 (and $x95 $x97)))
 (let (($x98 (and $x78 $x80)))
 (let (($x232 (and $x98 $x229)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x250 (and $x53 $x232)))
 (let (($x31 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x118 (= Lambda38 (_ bv0 32))))
 (let ((?x205 (ite $x118 ?x19 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= Lambda38 (_ bv1 32))))
 (let ((?x214 (ite $x109 ?x24 ?x205)))
 (let ((?x16 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x173 (_ bv1 32))))
 (=> $x278 (= ?x16 ?x214)))))))))))))
 ))
 (let (($x163 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x119 (_ bv1 32))))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x173 (_ bv1 32))))
 (= $x278 $x171)))))))
 ))
 (let (($x296 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x173 (_ bv0 32))))
 (=> $x279 $x29))))))
 ))
 (let (($x182 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x119 (_ bv0 32))))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x173 (_ bv0 32))))
 (= $x279 $x121)))))))
 ))
 (let (($x297 (and $x182 $x296)))
 (let (($x123 (and $x297 $x163)))
 (let (($x49 (and $x123 $x31)))
 (let (($x271 (and $x49 $x250)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x248 (and $x147 $x271)))
 (let (($x137 (forall ((Lambda38 (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x85 (_ bv1 32))))
 (=> $x104 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x111 (forall ((Lambda38 (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x85 (_ bv1 32))))
 (= $x104 false)))))
 ))
 (let (($x91 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x85 (_ bv0 32))))
 (=> $x70 $x29))))))
 ))
 (let (($x69 (forall ((Lambda38 (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x85 (_ bv0 32))))
 (= $x70 true)))))
 ))
 (let (($x92 (and $x69 $x91)))
 (let (($x114 (and $x92 $x111)))
 (let (($x141 (and $x114 $x137)))
 (let (($x260 (and $x141 $x248)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x261 (and $x58 $x260)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x256 (and $x10 $x261)))
 (let (($x6 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x252 (and $x6 $x256)))
 (let (($x7 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x118 (= Lambda38 (_ bv0 32))))
 (let ((?x205 (ite $x118 ?x19 (_ bv0 32))))
 (let ((?x290 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x254 (_ bv1 32))))
 (=> $x277 (= ?x290 ?x205))))))))))
 ))
 (let (($x283 (forall ((Lambda38 (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x254 (_ bv1 32))))
 (= $x277 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x267 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x254 (_ bv0 32))))
 (=> $x255 $x29))))))
 ))
 (let (($x262 (forall ((Lambda38 (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x254 (_ bv0 32))))
 (= $x255 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x268 (and $x262 $x267)))
 (let (($x284 (and $x268 $x283)))
 (let (($x68 (and $x284 $x7)))
 (let (($x263 (and $x68 $x252)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x264 (and $x237 $x263)))
 (let (($x235 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x269 (and $x235 $x264)))
 (let (($x218 (= ?x24 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x272 (and $x218 $x269)))
 (let (($x220 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x118 (= Lambda38 (_ bv0 32))))
 (let ((?x205 (ite $x118 ?x19 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= Lambda38 (_ bv1 32))))
 (let ((?x214 (ite $x109 ?x24 ?x205)))
 (let ((?x193 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x135 (_ bv1 32))))
 (=> $x174 (= ?x193 ?x214)))))))))))))
 ))
 (let (($x177 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x119 (_ bv1 32))))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x135 (_ bv1 32))))
 (= $x174 $x171)))))))
 ))
 (let (($x156 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x135 (_ bv0 32))))
 (=> $x133 $x29))))))
 ))
 (let (($x154 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x119 (_ bv0 32))))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x135 (_ bv0 32))))
 (= $x133 $x121)))))))
 ))
 (let (($x157 (and $x154 $x156)))
 (let (($x195 (and $x157 $x177)))
 (let (($x231 (and $x195 $x220)))
 (let (($x273 (and $x231 $x272)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x286 (and $x13 $x273)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x37 (and $x64 $x286)))
 (let (($x293 (and $x29 $x37)))
 (let (($x76 (= input.spec-%var-y-0.L1%23%bbentry ?x25)))
 (let (($x287 (and $x76 $x293)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x285 (and $x65 $x287)))
 (let (($x288 (and $x29 $x285)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x294 (and $x27 $x288)))
 (let (($x33 (=> $x294 $x9)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x12 (= (_ bv0 32) ?x251)))
 (let (($x36 (= $x12 true)))
 (let (($x9 (= $x36 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x144 (concat ?x138 (concat ?x110 ?x56)))))
 (let (($x202 (= ?x179 input.dst.llvm-%x)))
 (let (($x207 (= $x202 true)))
 (let (($x228 (= input.dst.llvm-%x ?x179)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x75)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x18 $x15)))
 (let (($x81 (and $x67 $x96)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x55 $x81)))
 (let (($x241 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x239)))))))
 (let (($x184 (and (and (and $x162 $x241) $x84) $x228)))
 (let (($x185 (= $x184 true)))
 (let (($x187 (= $x185 true)))
 (let (($x200 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x201 (not $x200)))
 (let (($x206 (= $x201 true)))
 (let (($x209 (= $x206 true)))
 (let (($x192 (and $x209 $x187)))
 (let (($x211 (and $x192 $x207)))
 (let (($x190 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x191 (or false $x190)))
 (let (($x212 (and $x191 $x211)))
 (let (($x208 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x186 (= input.spec-%tmpvar-10.L1%13%d $x208)))
 (let (($x226 (and $x186 $x212)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x11 ?x19 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x23 ?x24 ?x42)))
 (let (($x159 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x140 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x166 (=> $x140 $x159)))
 (let (($x146 (= $x140 true)))
 (let (($x29 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x126 (=> $x120 $x29)))
 (let (($x125 (= $x120 false)))
 (let (($x128 (and $x125 $x126)))
 (let (($x148 (and $x128 $x146)))
 (let (($x167 (and $x148 $x166)))
 (let (($x229 (and $x167 $x226)))
 (let (($x57 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x39 (ite $x57 ?x19 (_ bv0 32))))
 (let (($x108 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x108 ?x24 ?x39)))
 (let (($x74 (= input.spec-%tmpvar-12.L1%17%d.2 ?x25)))
 (let (($x94 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x80 (=> $x94 $x74)))
 (let (($x97 (= $x94 true)))
 (let (($x48 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x122 (=> $x48 $x29)))
 (let (($x100 (= $x48 false)))
 (let (($x95 (and $x100 $x122)))
 (let (($x78 (and $x95 $x97)))
 (let (($x98 (and $x78 $x80)))
 (let (($x232 (and $x98 $x229)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x250 (and $x53 $x232)))
 (let (($x31 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x118 (= Lambda38 (_ bv0 32))))
 (let ((?x205 (ite $x118 ?x19 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= Lambda38 (_ bv1 32))))
 (let ((?x214 (ite $x109 ?x24 ?x205)))
 (let ((?x16 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x173 (_ bv1 32))))
 (=> $x278 (= ?x16 ?x214)))))))))))))
 ))
 (let (($x163 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x119 (_ bv1 32))))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x173 (_ bv1 32))))
 (= $x278 $x171)))))))
 ))
 (let (($x296 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x173 (_ bv0 32))))
 (=> $x279 $x29))))))
 ))
 (let (($x182 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x119 (_ bv0 32))))
 (let (($x151 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x173 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x173 (_ bv0 32))))
 (= $x279 $x121)))))))
 ))
 (let (($x297 (and $x182 $x296)))
 (let (($x123 (and $x297 $x163)))
 (let (($x49 (and $x123 $x31)))
 (let (($x271 (and $x49 $x250)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x248 (and $x147 $x271)))
 (let (($x137 (forall ((Lambda38 (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x85 (_ bv1 32))))
 (=> $x104 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x111 (forall ((Lambda38 (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x85 (_ bv1 32))))
 (= $x104 false)))))
 ))
 (let (($x91 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x85 (_ bv0 32))))
 (=> $x70 $x29))))))
 ))
 (let (($x69 (forall ((Lambda38 (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x85 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x85 (_ bv0 32))))
 (= $x70 true)))))
 ))
 (let (($x92 (and $x69 $x91)))
 (let (($x114 (and $x92 $x111)))
 (let (($x141 (and $x114 $x137)))
 (let (($x260 (and $x141 $x248)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x261 (and $x58 $x260)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x256 (and $x10 $x261)))
 (let (($x6 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x252 (and $x6 $x256)))
 (let (($x7 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x118 (= Lambda38 (_ bv0 32))))
 (let ((?x205 (ite $x118 ?x19 (_ bv0 32))))
 (let ((?x290 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x254 (_ bv1 32))))
 (=> $x277 (= ?x290 ?x205))))))))))
 ))
 (let (($x283 (forall ((Lambda38 (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x254 (_ bv1 32))))
 (= $x277 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x267 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x254 (_ bv0 32))))
 (=> $x255 $x29))))))
 ))
 (let (($x262 (forall ((Lambda38 (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x254 (_ bv0 32))))
 (= $x255 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x268 (and $x262 $x267)))
 (let (($x284 (and $x268 $x283)))
 (let (($x68 (and $x284 $x7)))
 (let (($x263 (and $x68 $x252)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x264 (and $x237 $x263)))
 (let (($x235 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x269 (and $x235 $x264)))
 (let (($x218 (= ?x24 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x272 (and $x218 $x269)))
 (let (($x220 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x118 (= Lambda38 (_ bv0 32))))
 (let ((?x205 (ite $x118 ?x19 (_ bv0 32))))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= Lambda38 (_ bv1 32))))
 (let ((?x214 (ite $x109 ?x24 ?x205)))
 (let ((?x193 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x135 (_ bv1 32))))
 (=> $x174 (= ?x193 ?x214)))))))))))))
 ))
 (let (($x177 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x119 (_ bv1 32))))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x135 (_ bv1 32))))
 (= $x174 $x171)))))))
 ))
 (let (($x156 (forall ((Lambda38 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x135 (_ bv0 32))))
 (=> $x133 $x29))))))
 ))
 (let (($x154 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x119 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x119 (_ bv0 32))))
 (let (($x77 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x135 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x135 (_ bv0 32))))
 (= $x133 $x121)))))))
 ))
 (let (($x157 (and $x154 $x156)))
 (let (($x195 (and $x157 $x177)))
 (let (($x231 (and $x195 $x220)))
 (let (($x273 (and $x231 $x272)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x286 (and $x13 $x273)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x37 (and $x64 $x286)))
 (let (($x293 (and $x29 $x37)))
 (let (($x76 (= input.spec-%var-y-0.L1%23%bbentry ?x25)))
 (let (($x287 (and $x76 $x293)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x285 (and $x65 $x287)))
 (let (($x288 (and $x29 $x285)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x294 (and $x27 $x288)))
 (let (($x33 (=> $x294 $x9)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x216 ?x19 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x107 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x107 ?x5 ?x42)))
 (let ((?x180 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x158 (= ?x180 ?x47)))
 (let (($x172 (= $x158 true)))
 (let (($x295 (= $x172 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x170 (concat ?x153 (concat ?x63 ?x30)))))
 (let (($x245 (= ?x197 input.dst.llvm-%x)))
 (let (($x246 (= $x245 true)))
 (let (($x198 (= input.dst.llvm-%x ?x197)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x46)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x33 $x222)))
 (let (($x194 (and $x61 $x41)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x9 $x194)))
 (let (($x263 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x287 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x293 $x287)))))))
 (let (($x204 (and (and (and $x36 $x263) $x82) $x198)))
 (let (($x244 (= $x204 true)))
 (let (($x291 (= $x244 true)))
 (let (($x248 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x260 (= $x248 true)))
 (let (($x261 (= $x260 true)))
 (let (($x238 (and $x261 $x291)))
 (let (($x247 (and $x238 $x246)))
 (let (($x257 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x247)))
 (let (($x232 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x250 (= input.spec-%tmpvar-10.L1%13%d $x232)))
 (let (($x265 (and $x250 $x257)))
 (let (($x211 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x187 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x212 (=> $x187 $x211)))
 (let (($x192 (= $x187 true)))
 (let (($x14 (= false false)))
 (let (($x179 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x184 (=> $x179 $x14)))
 (let (($x228 (= $x179 false)))
 (let (($x185 (and $x228 $x184)))
 (let (($x202 (and $x185 $x192)))
 (let (($x226 (and $x202 $x212)))
 (let (($x270 (and $x226 $x265)))
 (let (($x39 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x25 (ite $x39 ?x19 (_ bv0 32))))
 (let (($x57 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x76 (ite $x57 ?x5 ?x25)))
 (let (($x110 (= input.spec-%tmpvar-12.L1%17%d.2 ?x76)))
 (let (($x116 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x56 (=> $x116 $x110)))
 (let (($x136 (= $x116 true)))
 (let (($x183 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x143 (=> $x183 $x14)))
 (let (($x101 (= $x183 false)))
 (let (($x144 (and $x101 $x143)))
 (let (($x138 (and $x144 $x136)))
 (let (($x112 (and $x138 $x56)))
 (let (($x274 (and $x112 $x270)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x275 (and $x81 $x274)))
 (let (($x67 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x174 (= Lambda38 (_ bv0 32))))
 (let ((?x268 (ite $x174 ?x19 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x157 (= Lambda38 (_ bv1 32))))
 (let ((?x277 (ite $x157 ?x5 ?x268)))
 (let ((?x221 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x224 (_ bv1 32))))
 (=> $x300 (= ?x221 ?x277)))))))))))))
 ))
 (let (($x162 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x175 (_ bv1 32))))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x224 (_ bv1 32))))
 (= $x300 $x235)))))))
 ))
 (let (($x230 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x224 (_ bv0 32))))
 (=> $x225 $x14))))))
 ))
 (let (($x223 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x175 (_ bv0 32))))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x224 (_ bv0 32))))
 (= $x225 $x177)))))))
 ))
 (let (($x239 (and $x223 $x230)))
 (let (($x241 (and $x239 $x162)))
 (let (($x75 (and $x241 $x67)))
 (let (($x289 (and $x75 $x275)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x292 (and $x190 $x289)))
 (let (($x208 (forall ((Lambda38 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x95 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x128 (forall ((Lambda38 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x95 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x80 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x95 (_ bv0 32))))
 (=> $x94 $x14))))))
 ))
 (let (($x78 (forall ((Lambda38 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x95 (_ bv0 32))))
 (= $x94 true)))))
 ))
 (let (($x98 (and $x78 $x80)))
 (let (($x140 (and $x98 $x128)))
 (let (($x186 (and $x140 $x208)))
 (let (($x280 (and $x186 $x292)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x89 (and $x49 $x280)))
 (let (($x45 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x149 (and $x45 $x89)))
 (let (($x123 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x59 (and $x123 $x149)))
 (let (($x278 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x174 (= Lambda38 (_ bv0 32))))
 (let ((?x268 (ite $x174 ?x19 (_ bv0 32))))
 (let ((?x279 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x69 (_ bv1 32))))
 (=> $x141 (= ?x279 ?x268))))))))))
 ))
 (let (($x147 (forall ((Lambda38 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x69 (_ bv1 32))))
 (= $x141 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x69 (_ bv0 32))))
 (=> $x88 $x14))))))
 ))
 (let (($x92 (forall ((Lambda38 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x69 (_ bv0 32))))
 (= $x88 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x114 (and $x92 $x111)))
 (let (($x151 (and $x114 $x147)))
 (let (($x66 (and $x151 $x278)))
 (let (($x90 (and $x66 $x59)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x87 (and $x28 $x90)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x113 (and $x7 $x87)))
 (let (($x281 (= ?x5 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x72 (and $x281 $x113)))
 (let (($x283 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x174 (= Lambda38 (_ bv0 32))))
 (let ((?x268 (ite $x174 ?x19 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x157 (= Lambda38 (_ bv1 32))))
 (let ((?x277 (ite $x157 ?x5 ?x268)))
 (let ((?x258 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x195 (_ bv1 32))))
 (=> $x236 (= ?x258 ?x277)))))))))))))
 ))
 (let (($x240 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x175 (_ bv1 32))))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x195 (_ bv1 32))))
 (= $x236 $x235)))))))
 ))
 (let (($x220 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x195 (_ bv0 32))))
 (=> $x193 $x14))))))
 ))
 (let (($x214 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x175 (_ bv0 32))))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x195 (_ bv0 32))))
 (= $x193 $x177)))))))
 ))
 (let (($x231 (and $x214 $x220)))
 (let (($x254 (and $x231 $x240)))
 (let (($x284 (and $x254 $x283)))
 (let (($x99 (and $x284 $x72)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x103 (and $x106 $x99)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x115 (and $x34 $x103)))
 (let (($x127 (and $x14 $x115)))
 (let (($x51 (= input.spec-%var-y-0.L1%23%bbentry ?x76)))
 (let (($x130 (and $x51 $x127)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x160 (and $x102 $x130)))
 (let (($x43 (and $x14 $x160)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x150 (and $x27 $x43)))
 (let (($x298 (=> $x150 $x295)))
 (not $x298)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x216 ?x19 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x107 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x107 ?x5 ?x42)))
 (let ((?x180 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x158 (= ?x180 ?x47)))
 (let (($x172 (= $x158 true)))
 (let (($x295 (= $x172 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x170 (concat ?x153 (concat ?x63 ?x30)))))
 (let (($x245 (= ?x197 input.dst.llvm-%x)))
 (let (($x246 (= $x245 true)))
 (let (($x198 (= input.dst.llvm-%x ?x197)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x46)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x33 $x222)))
 (let (($x194 (and $x61 $x41)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x9 $x194)))
 (let (($x263 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x287 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x293 $x287)))))))
 (let (($x204 (and (and (and $x36 $x263) $x82) $x198)))
 (let (($x244 (= $x204 true)))
 (let (($x291 (= $x244 true)))
 (let (($x248 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x260 (= $x248 true)))
 (let (($x261 (= $x260 true)))
 (let (($x238 (and $x261 $x291)))
 (let (($x247 (and $x238 $x246)))
 (let (($x257 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x247)))
 (let (($x232 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x250 (= input.spec-%tmpvar-10.L1%13%d $x232)))
 (let (($x265 (and $x250 $x257)))
 (let (($x211 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x187 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x212 (=> $x187 $x211)))
 (let (($x192 (= $x187 true)))
 (let (($x14 (= false false)))
 (let (($x179 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x184 (=> $x179 $x14)))
 (let (($x228 (= $x179 false)))
 (let (($x185 (and $x228 $x184)))
 (let (($x202 (and $x185 $x192)))
 (let (($x226 (and $x202 $x212)))
 (let (($x270 (and $x226 $x265)))
 (let (($x39 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x25 (ite $x39 ?x19 (_ bv0 32))))
 (let (($x57 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x76 (ite $x57 ?x5 ?x25)))
 (let (($x110 (= input.spec-%tmpvar-12.L1%17%d.2 ?x76)))
 (let (($x116 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x56 (=> $x116 $x110)))
 (let (($x136 (= $x116 true)))
 (let (($x183 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x143 (=> $x183 $x14)))
 (let (($x101 (= $x183 false)))
 (let (($x144 (and $x101 $x143)))
 (let (($x138 (and $x144 $x136)))
 (let (($x112 (and $x138 $x56)))
 (let (($x274 (and $x112 $x270)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x275 (and $x81 $x274)))
 (let (($x67 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x174 (= Lambda38 (_ bv0 32))))
 (let ((?x268 (ite $x174 ?x19 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x157 (= Lambda38 (_ bv1 32))))
 (let ((?x277 (ite $x157 ?x5 ?x268)))
 (let ((?x221 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x224 (_ bv1 32))))
 (=> $x300 (= ?x221 ?x277)))))))))))))
 ))
 (let (($x162 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x175 (_ bv1 32))))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x224 (_ bv1 32))))
 (= $x300 $x235)))))))
 ))
 (let (($x230 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x224 (_ bv0 32))))
 (=> $x225 $x14))))))
 ))
 (let (($x223 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x175 (_ bv0 32))))
 (let (($x196 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x224 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x224 (_ bv0 32))))
 (= $x225 $x177)))))))
 ))
 (let (($x239 (and $x223 $x230)))
 (let (($x241 (and $x239 $x162)))
 (let (($x75 (and $x241 $x67)))
 (let (($x289 (and $x75 $x275)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x292 (and $x190 $x289)))
 (let (($x208 (forall ((Lambda38 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x95 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x128 (forall ((Lambda38 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x95 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x80 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x95 (_ bv0 32))))
 (=> $x94 $x14))))))
 ))
 (let (($x78 (forall ((Lambda38 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x95 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x95 (_ bv0 32))))
 (= $x94 true)))))
 ))
 (let (($x98 (and $x78 $x80)))
 (let (($x140 (and $x98 $x128)))
 (let (($x186 (and $x140 $x208)))
 (let (($x280 (and $x186 $x292)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x89 (and $x49 $x280)))
 (let (($x45 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x149 (and $x45 $x89)))
 (let (($x123 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x59 (and $x123 $x149)))
 (let (($x278 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x174 (= Lambda38 (_ bv0 32))))
 (let ((?x268 (ite $x174 ?x19 (_ bv0 32))))
 (let ((?x279 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x69 (_ bv1 32))))
 (=> $x141 (= ?x279 ?x268))))))))))
 ))
 (let (($x147 (forall ((Lambda38 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x69 (_ bv1 32))))
 (= $x141 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x69 (_ bv0 32))))
 (=> $x88 $x14))))))
 ))
 (let (($x92 (forall ((Lambda38 (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x69 (_ bv0 32))))
 (= $x88 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x114 (and $x92 $x111)))
 (let (($x151 (and $x114 $x147)))
 (let (($x66 (and $x151 $x278)))
 (let (($x90 (and $x66 $x59)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x87 (and $x28 $x90)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x113 (and $x7 $x87)))
 (let (($x281 (= ?x5 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x72 (and $x281 $x113)))
 (let (($x283 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x174 (= Lambda38 (_ bv0 32))))
 (let ((?x268 (ite $x174 ?x19 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x157 (= Lambda38 (_ bv1 32))))
 (let ((?x277 (ite $x157 ?x5 ?x268)))
 (let ((?x258 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x195 (_ bv1 32))))
 (=> $x236 (= ?x258 ?x277)))))))))))))
 ))
 (let (($x240 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x175 (_ bv1 32))))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x195 (_ bv1 32))))
 (= $x236 $x235)))))))
 ))
 (let (($x220 (forall ((Lambda38 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x195 (_ bv0 32))))
 (=> $x193 $x14))))))
 ))
 (let (($x214 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x175 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x175 (_ bv0 32))))
 (let (($x118 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x195 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x195 (_ bv0 32))))
 (= $x193 $x177)))))))
 ))
 (let (($x231 (and $x214 $x220)))
 (let (($x254 (and $x231 $x240)))
 (let (($x284 (and $x254 $x283)))
 (let (($x99 (and $x284 $x72)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x103 (and $x106 $x99)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x115 (and $x34 $x103)))
 (let (($x127 (and $x14 $x115)))
 (let (($x51 (= input.spec-%var-y-0.L1%23%bbentry ?x76)))
 (let (($x130 (and $x51 $x127)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x160 (and $x102 $x130)))
 (let (($x43 (and $x14 $x160)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x150 (and $x27 $x43)))
 (let (($x298 (=> $x150 $x295)))
 (not $x298)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x23 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x23 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x5 ?x216 ?x42)))
 (let ((?x242 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x243 (= ?x242 ?x47)))
 (let (($x176 (= $x243 true)))
 (let (($x18 (= $x176 true)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x267 (concat ?x266 (concat ?x255 (concat ?x213 ?x155)))))
 (let (($x85 (= ?x267 input.dst.llvm-%x)))
 (let (($x104 (= $x85 true)))
 (let (($x32 (= input.dst.llvm-%x ?x267)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x117)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x73 $x253)))
 (let (($x121 (and $x135 $x119)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x252 $x121)))
 (let (($x99 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x256 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x150 $x180)))))))
 (let (($x10 (and (and (and $x256 $x99) $x145) $x32)))
 (let (($x54 (= $x10 true)))
 (let (($x58 (= $x54 true)))
 (let (($x149 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x59 (not $x149)))
 (let (($x90 (= $x59 true)))
 (let (($x87 (= $x90 true)))
 (let (($x60 (and $x87 $x58)))
 (let (($x129 (and $x60 $x104)))
 (let (($x132 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x129)))
 (let (($x292 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x280 (= input.spec-%tmpvar-10.L1%13%d $x292)))
 (let (($x173 (and $x280 $x132)))
 (let (($x270 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x246 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x274 (=> $x246 $x270)))
 (let (($x247 (= $x246 true)))
 (let (($x65 (= false false)))
 (let (($x244 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x238 (=> $x244 $x65)))
 (let (($x291 (= $x244 false)))
 (let (($x245 (and $x291 $x238)))
 (let (($x257 (and $x245 $x247)))
 (let (($x275 (and $x257 $x274)))
 (let (($x182 (and $x275 $x173)))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x76 (ite $x25 ?x19 (_ bv0 32))))
 (let (($x39 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x51 (ite $x39 ?x216 ?x76)))
 (let (($x164 (= input.spec-%tmpvar-12.L1%17%d.2 ?x51)))
 (let (($x62 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x197 (=> $x62 $x164)))
 (let (($x63 (= $x62 true)))
 (let (($x170 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x83 (=> $x170 $x65)))
 (let (($x44 (= $x170 false)))
 (let (($x153 (and $x44 $x83)))
 (let (($x30 (and $x153 $x63)))
 (let (($x198 (and $x30 $x197)))
 (let (($x181 (and $x198 $x182)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x124 (and $x35 $x181)))
 (let (($x194 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda38 (_ bv0 32))))
 (let ((?x114 (ite $x236 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x231 (= Lambda38 (_ bv1 32))))
 (let ((?x141 (ite $x231 ?x216 ?x114)))
 (let ((?x302 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x273 (_ bv1 32))))
 (=> $x263 (= ?x302 ?x141)))))))))))))
 ))
 (let (($x264 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x237 (_ bv1 32))))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x273 (_ bv1 32))))
 (= $x263 $x7)))))))
 ))
 (let (($x288 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x273 (_ bv0 32))))
 (=> $x37 $x65))))))
 ))
 (let (($x286 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x237 (_ bv0 32))))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x273 (_ bv0 32))))
 (= $x37 $x240)))))))
 ))
 (let (($x294 (and $x286 $x288)))
 (let (($x9 (and $x294 $x264)))
 (let (($x82 (and $x9 $x194)))
 (let (($x152 (and $x82 $x124)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x52 (and $x271 $x152)))
 (let (($x232 (forall ((Lambda38 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x144 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x185 (forall ((Lambda38 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x144 (_ bv1 32))))
 (= $x228 false)))))
 ))
 (let (($x56 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x144 (_ bv0 32))))
 (=> $x116 $x65))))))
 ))
 (let (($x138 (forall ((Lambda38 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x144 (_ bv0 32))))
 (= $x116 true)))))
 ))
 (let (($x112 (and $x138 $x56)))
 (let (($x187 (and $x112 $x185)))
 (let (($x250 (and $x187 $x232)))
 (let (($x48 (and $x250 $x52)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x100 (and $x75 $x48)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x122 (and $x15 $x100)))
 (let (($x241 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x79 (and $x241 $x122)))
 (let (($x300 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda38 (_ bv0 32))))
 (let ((?x114 (ite $x236 ?x19 (_ bv0 32))))
 (let ((?x225 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x78 (_ bv1 32))))
 (=> $x186 (= ?x225 ?x114))))))))))
 ))
 (let (($x190 (forall ((Lambda38 (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x78 (_ bv1 32))))
 (= $x186 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x128 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x78 (_ bv0 32))))
 (=> $x74 $x65))))))
 ))
 (let (($x98 (forall ((Lambda38 (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x78 (_ bv0 32))))
 (= $x74 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x140 (and $x98 $x128)))
 (let (($x196 (and $x140 $x190)))
 (let (($x301 (and $x196 $x300)))
 (let (($x165 (and $x301 $x79)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x120 (and $x163 $x165)))
 (let (($x278 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x146 (and $x278 $x120)))
 (let (($x296 (= ?x216 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x159 (and $x296 $x146)))
 (let (($x147 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda38 (_ bv0 32))))
 (let ((?x114 (ite $x236 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x231 (= Lambda38 (_ bv1 32))))
 (let ((?x141 (ite $x231 ?x216 ?x114)))
 (let ((?x70 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x254 (_ bv1 32))))
 (=> $x68 (= ?x70 ?x141)))))))))))))
 ))
 (let (($x8 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x237 (_ bv1 32))))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x254 (_ bv1 32))))
 (= $x68 $x7)))))))
 ))
 (let (($x283 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x254 (_ bv0 32))))
 (=> $x258 $x65))))))
 ))
 (let (($x277 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x237 (_ bv0 32))))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x254 (_ bv0 32))))
 (= $x258 $x240)))))))
 ))
 (let (($x284 (and $x277 $x283)))
 (let (($x69 (and $x284 $x8)))
 (let (($x151 (and $x69 $x147)))
 (let (($x166 (and $x151 $x159)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x200 (and $x133 $x166)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x55 (and $x13 $x200)))
 (let (($x191 (and $x65 $x55)))
 (let (($x64 (= input.spec-%var-y-0.L1%23%bbentry ?x51)))
 (let (($x201 (and $x64 $x191)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x206 (and $x108 $x201)))
 (let (($x209 (and $x65 $x206)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x233 (and $x27 $x209)))
 (let (($x50 (=> $x233 $x18)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x23 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x23 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x5 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x5 ?x216 ?x42)))
 (let ((?x242 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x243 (= ?x242 ?x47)))
 (let (($x176 (= $x243 true)))
 (let (($x18 (= $x176 true)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x267 (concat ?x266 (concat ?x255 (concat ?x213 ?x155)))))
 (let (($x85 (= ?x267 input.dst.llvm-%x)))
 (let (($x104 (= $x85 true)))
 (let (($x32 (= input.dst.llvm-%x ?x267)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x117)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x73 $x253)))
 (let (($x121 (and $x135 $x119)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x252 $x121)))
 (let (($x99 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x256 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x150 $x180)))))))
 (let (($x10 (and (and (and $x256 $x99) $x145) $x32)))
 (let (($x54 (= $x10 true)))
 (let (($x58 (= $x54 true)))
 (let (($x149 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x59 (not $x149)))
 (let (($x90 (= $x59 true)))
 (let (($x87 (= $x90 true)))
 (let (($x60 (and $x87 $x58)))
 (let (($x129 (and $x60 $x104)))
 (let (($x132 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x129)))
 (let (($x292 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x280 (= input.spec-%tmpvar-10.L1%13%d $x292)))
 (let (($x173 (and $x280 $x132)))
 (let (($x270 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x246 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x274 (=> $x246 $x270)))
 (let (($x247 (= $x246 true)))
 (let (($x65 (= false false)))
 (let (($x244 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x238 (=> $x244 $x65)))
 (let (($x291 (= $x244 false)))
 (let (($x245 (and $x291 $x238)))
 (let (($x257 (and $x245 $x247)))
 (let (($x275 (and $x257 $x274)))
 (let (($x182 (and $x275 $x173)))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x76 (ite $x25 ?x19 (_ bv0 32))))
 (let (($x39 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x51 (ite $x39 ?x216 ?x76)))
 (let (($x164 (= input.spec-%tmpvar-12.L1%17%d.2 ?x51)))
 (let (($x62 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x197 (=> $x62 $x164)))
 (let (($x63 (= $x62 true)))
 (let (($x170 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x83 (=> $x170 $x65)))
 (let (($x44 (= $x170 false)))
 (let (($x153 (and $x44 $x83)))
 (let (($x30 (and $x153 $x63)))
 (let (($x198 (and $x30 $x197)))
 (let (($x181 (and $x198 $x182)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x124 (and $x35 $x181)))
 (let (($x194 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda38 (_ bv0 32))))
 (let ((?x114 (ite $x236 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x231 (= Lambda38 (_ bv1 32))))
 (let ((?x141 (ite $x231 ?x216 ?x114)))
 (let ((?x302 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x273 (_ bv1 32))))
 (=> $x263 (= ?x302 ?x141)))))))))))))
 ))
 (let (($x264 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x237 (_ bv1 32))))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x273 (_ bv1 32))))
 (= $x263 $x7)))))))
 ))
 (let (($x288 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x273 (_ bv0 32))))
 (=> $x37 $x65))))))
 ))
 (let (($x286 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x237 (_ bv0 32))))
 (let (($x260 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x273 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x273 (_ bv0 32))))
 (= $x37 $x240)))))))
 ))
 (let (($x294 (and $x286 $x288)))
 (let (($x9 (and $x294 $x264)))
 (let (($x82 (and $x9 $x194)))
 (let (($x152 (and $x82 $x124)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x52 (and $x271 $x152)))
 (let (($x232 (forall ((Lambda38 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x144 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x185 (forall ((Lambda38 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x144 (_ bv1 32))))
 (= $x228 false)))))
 ))
 (let (($x56 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x144 (_ bv0 32))))
 (=> $x116 $x65))))))
 ))
 (let (($x138 (forall ((Lambda38 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x144 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x144 (_ bv0 32))))
 (= $x116 true)))))
 ))
 (let (($x112 (and $x138 $x56)))
 (let (($x187 (and $x112 $x185)))
 (let (($x250 (and $x187 $x232)))
 (let (($x48 (and $x250 $x52)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x100 (and $x75 $x48)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x122 (and $x15 $x100)))
 (let (($x241 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x79 (and $x241 $x122)))
 (let (($x300 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda38 (_ bv0 32))))
 (let ((?x114 (ite $x236 ?x19 (_ bv0 32))))
 (let ((?x225 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x78 (_ bv1 32))))
 (=> $x186 (= ?x225 ?x114))))))))))
 ))
 (let (($x190 (forall ((Lambda38 (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x78 (_ bv1 32))))
 (= $x186 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x128 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x78 (_ bv0 32))))
 (=> $x74 $x65))))))
 ))
 (let (($x98 (forall ((Lambda38 (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x78 (_ bv0 32))))
 (= $x74 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x140 (and $x98 $x128)))
 (let (($x196 (and $x140 $x190)))
 (let (($x301 (and $x196 $x300)))
 (let (($x165 (and $x301 $x79)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x120 (and $x163 $x165)))
 (let (($x278 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x146 (and $x278 $x120)))
 (let (($x296 (= ?x216 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x159 (and $x296 $x146)))
 (let (($x147 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x236 (= Lambda38 (_ bv0 32))))
 (let ((?x114 (ite $x236 ?x19 (_ bv0 32))))
 (let ((?x216 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x231 (= Lambda38 (_ bv1 32))))
 (let ((?x141 (ite $x231 ?x216 ?x114)))
 (let ((?x70 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x254 (_ bv1 32))))
 (=> $x68 (= ?x70 ?x141)))))))))))))
 ))
 (let (($x8 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x237 (_ bv1 32))))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x254 (_ bv1 32))))
 (= $x68 $x7)))))))
 ))
 (let (($x283 (forall ((Lambda38 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x254 (_ bv0 32))))
 (=> $x258 $x65))))))
 ))
 (let (($x277 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x237 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (= ?x237 (_ bv0 32))))
 (let (($x174 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x254 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x254 (_ bv0 32))))
 (= $x258 $x240)))))))
 ))
 (let (($x284 (and $x277 $x283)))
 (let (($x69 (and $x284 $x8)))
 (let (($x151 (and $x69 $x147)))
 (let (($x166 (and $x151 $x159)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x200 (and $x133 $x166)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x55 (and $x13 $x200)))
 (let (($x191 (and $x65 $x55)))
 (let (($x64 (= input.spec-%var-y-0.L1%23%bbentry ?x51)))
 (let (($x201 (and $x64 $x191)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x206 (and $x108 $x201)))
 (let (($x209 (and $x65 $x206)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x233 (and $x27 $x209)))
 (let (($x50 (=> $x233 $x18)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x76 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x51 (ite $x76 ?x19 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x25 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x64 (ite $x25 ?x20 ?x51)))
 (let ((?x12 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x287 (= ?x12 ?x64)))
 (let (($x251 (= $x287 true)))
 (let (($x36 (= $x251 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x92 (concat ?x217 (concat ?x220 ?x14)))))
 (let (($x53 (= ?x105 input.dst.llvm-%x)))
 (let (($x95 (= $x53 true)))
 (let (($x111 (= input.dst.llvm-%x ?x105)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x195)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x72 $x157)))
 (let (($x175 (and $x71 $x171)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x113 $x175)))
 (let (($x159 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x209 $x233)))))))
 (let (($x123 (and (and (and $x168 $x159) $x177) $x111)))
 (let (($x45 (= $x123 true)))
 (let (($x31 (= $x45 true)))
 (let (($x122 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x79 (= $x122 true)))
 (let (($x165 (= $x79 true)))
 (let (($x49 (and $x165 $x31)))
 (let (($x125 (and $x49 $x95)))
 (let (($x152 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (and true $x152)))
 (let (($x148 (and $x48 $x125)))
 (let (($x52 (= input.spec-%tmpvar-10.L1%13%d $x152)))
 (let (($x167 (and $x52 $x148)))
 (let (($x107 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x107 ?x19 (_ bv0 32))))
 (let (($x24 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x24 ?x20 ?x42)))
 (let (($x173 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x85 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x182 (=> $x85 $x173)))
 (let (($x104 (= $x85 true)))
 (let (($x102 (= false false)))
 (let (($x10 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x58 (=> $x10 $x102)))
 (let (($x54 (= $x10 false)))
 (let (($x60 (and $x54 $x58)))
 (let (($x129 (and $x60 $x104)))
 (let (($x181 (and $x129 $x182)))
 (let (($x188 (and $x181 $x167)))
 (let (($x227 (= input.spec-%tmpvar-12.L1%17%d.2 ?x64)))
 (let (($x255 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x259 (=> $x255 $x227)))
 (let (($x156 (= $x255 true)))
 (let (($x262 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x218 (=> $x262 $x102)))
 (let (($x266 (= $x262 false)))
 (let (($x219 (and $x266 $x218)))
 (let (($x213 (and $x219 $x156)))
 (let (($x267 (and $x213 $x259)))
 (let (($x224 (and $x267 $x188)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x223 (and $x6 $x224)))
 (let (($x119 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x68 (= Lambda38 (_ bv0 32))))
 (let ((?x140 (ite $x68 ?x19 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x284 (= Lambda38 (_ bv1 32))))
 (let ((?x186 (ite $x284 ?x20 ?x140)))
 (let ((?x73 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x299 (_ bv1 32))))
 (=> $x256 (= ?x73 ?x186)))))))))))))
 ))
 (let (($x178 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x28 (_ bv1 32))))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x299 (_ bv1 32))))
 (= $x256 $x278)))))))
 ))
 (let (($x158 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x299 (_ bv0 32))))
 (=> $x130 $x102))))))
 ))
 (let (($x150 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x28 (_ bv0 32))))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x299 (_ bv0 32))))
 (= $x130 $x8)))))))
 ))
 (let (($x172 (and $x150 $x158)))
 (let (($x103 (and $x172 $x178)))
 (let (($x121 (and $x103 $x119)))
 (let (($x234 (and $x121 $x223)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x84 (and $x89 $x234)))
 (let (($x292 (forall ((Lambda38 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (bvuge ?x153 (_ bv1 32))))
 (=> $x291 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x245 (forall ((Lambda38 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (bvuge ?x153 (_ bv1 32))))
 (= $x291 false)))))
 ))
 (let (($x197 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x153 (_ bv0 32))))
 (=> $x62 $x102))))))
 ))
 (let (($x30 (forall ((Lambda38 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x153 (_ bv0 32))))
 (= $x62 true)))))
 ))
 (let (($x198 (and $x30 $x197)))
 (let (($x246 (and $x198 $x245)))
 (let (($x280 (and $x246 $x292)))
 (let (($x207 (and $x280 $x84)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x96 (and $x82 $x207)))
 (let (($x41 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x183 (and $x41 $x96)))
 (let (($x9 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x101 (and $x9 $x183)))
 (let (($x263 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x68 (= Lambda38 (_ bv0 32))))
 (let ((?x140 (ite $x68 ?x19 (_ bv0 32))))
 (let ((?x37 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x138 (_ bv1 32))))
 (=> $x250 (= ?x37 ?x140))))))))))
 ))
 (let (($x271 (forall ((Lambda38 (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x138 (_ bv1 32))))
 (= $x250 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x185 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x138 (_ bv0 32))))
 (=> $x110 $x102))))))
 ))
 (let (($x112 (forall ((Lambda38 (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x138 (_ bv0 32))))
 (= $x110 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x187 (and $x112 $x185)))
 (let (($x260 (and $x187 $x271)))
 (let (($x199 (and $x260 $x263)))
 (let (($x143 (and $x199 $x101)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x26 (and $x162 $x143)))
 (let (($x300 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x139 (and $x300 $x26)))
 (let (($x230 (= ?x20 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x179 (and $x230 $x139)))
 (let (($x190 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x68 (= Lambda38 (_ bv0 32))))
 (let ((?x140 (ite $x68 ?x19 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x284 (= Lambda38 (_ bv1 32))))
 (let ((?x186 (ite $x284 ?x20 ?x140)))
 (let ((?x94 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x69 (_ bv1 32))))
 (=> $x66 (= ?x94 ?x186)))))))))))))
 ))
 (let (($x16 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x28 (_ bv1 32))))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x69 (_ bv1 32))))
 (= $x66 $x278)))))))
 ))
 (let (($x147 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x69 (_ bv0 32))))
 (=> $x70 $x102))))))
 ))
 (let (($x141 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x28 (_ bv0 32))))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x69 (_ bv0 32))))
 (= $x70 $x8)))))))
 ))
 (let (($x151 (and $x141 $x147)))
 (let (($x78 (and $x151 $x16)))
 (let (($x196 (and $x78 $x190)))
 (let (($x192 (and $x196 $x179)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x211 (and $x193 $x192)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x212 (and $x106 $x211)))
 (let (($x261 (and $x102 $x212)))
 (let (($x34 (= input.spec-%var-y-0.L1%23%bbentry ?x64)))
 (let (($x210 (and $x34 $x261)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x248 (and $x57 $x210)))
 (let (($x269 (and $x102 $x248)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x272 (and $x27 $x269)))
 (let (($x33 (=> $x272 $x36)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x76 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x51 (ite $x76 ?x19 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x25 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x64 (ite $x25 ?x20 ?x51)))
 (let ((?x12 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x287 (= ?x12 ?x64)))
 (let (($x251 (= $x287 true)))
 (let (($x36 (= $x251 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x92 (concat ?x217 (concat ?x220 ?x14)))))
 (let (($x53 (= ?x105 input.dst.llvm-%x)))
 (let (($x95 (= $x53 true)))
 (let (($x111 (= input.dst.llvm-%x ?x105)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x195)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x72 $x157)))
 (let (($x175 (and $x71 $x171)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x113 $x175)))
 (let (($x159 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x209 $x233)))))))
 (let (($x123 (and (and (and $x168 $x159) $x177) $x111)))
 (let (($x45 (= $x123 true)))
 (let (($x31 (= $x45 true)))
 (let (($x122 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x79 (= $x122 true)))
 (let (($x165 (= $x79 true)))
 (let (($x49 (and $x165 $x31)))
 (let (($x125 (and $x49 $x95)))
 (let (($x152 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (and true $x152)))
 (let (($x148 (and $x48 $x125)))
 (let (($x52 (= input.spec-%tmpvar-10.L1%13%d $x152)))
 (let (($x167 (and $x52 $x148)))
 (let (($x107 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x107 ?x19 (_ bv0 32))))
 (let (($x24 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x24 ?x20 ?x42)))
 (let (($x173 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x85 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x182 (=> $x85 $x173)))
 (let (($x104 (= $x85 true)))
 (let (($x102 (= false false)))
 (let (($x10 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x58 (=> $x10 $x102)))
 (let (($x54 (= $x10 false)))
 (let (($x60 (and $x54 $x58)))
 (let (($x129 (and $x60 $x104)))
 (let (($x181 (and $x129 $x182)))
 (let (($x188 (and $x181 $x167)))
 (let (($x227 (= input.spec-%tmpvar-12.L1%17%d.2 ?x64)))
 (let (($x255 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x259 (=> $x255 $x227)))
 (let (($x156 (= $x255 true)))
 (let (($x262 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x218 (=> $x262 $x102)))
 (let (($x266 (= $x262 false)))
 (let (($x219 (and $x266 $x218)))
 (let (($x213 (and $x219 $x156)))
 (let (($x267 (and $x213 $x259)))
 (let (($x224 (and $x267 $x188)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x223 (and $x6 $x224)))
 (let (($x119 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x68 (= Lambda38 (_ bv0 32))))
 (let ((?x140 (ite $x68 ?x19 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x284 (= Lambda38 (_ bv1 32))))
 (let ((?x186 (ite $x284 ?x20 ?x140)))
 (let ((?x73 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x299 (_ bv1 32))))
 (=> $x256 (= ?x73 ?x186)))))))))))))
 ))
 (let (($x178 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x28 (_ bv1 32))))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x299 (_ bv1 32))))
 (= $x256 $x278)))))))
 ))
 (let (($x158 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x299 (_ bv0 32))))
 (=> $x130 $x102))))))
 ))
 (let (($x150 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x28 (_ bv0 32))))
 (let (($x59 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x299 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x299 (_ bv0 32))))
 (= $x130 $x8)))))))
 ))
 (let (($x172 (and $x150 $x158)))
 (let (($x103 (and $x172 $x178)))
 (let (($x121 (and $x103 $x119)))
 (let (($x234 (and $x121 $x223)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x84 (and $x89 $x234)))
 (let (($x292 (forall ((Lambda38 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (bvuge ?x153 (_ bv1 32))))
 (=> $x291 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x245 (forall ((Lambda38 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (bvuge ?x153 (_ bv1 32))))
 (= $x291 false)))))
 ))
 (let (($x197 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x153 (_ bv0 32))))
 (=> $x62 $x102))))))
 ))
 (let (($x30 (forall ((Lambda38 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x153 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x153 (_ bv0 32))))
 (= $x62 true)))))
 ))
 (let (($x198 (and $x30 $x197)))
 (let (($x246 (and $x198 $x245)))
 (let (($x280 (and $x246 $x292)))
 (let (($x207 (and $x280 $x84)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x96 (and $x82 $x207)))
 (let (($x41 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x183 (and $x41 $x96)))
 (let (($x9 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x101 (and $x9 $x183)))
 (let (($x263 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x68 (= Lambda38 (_ bv0 32))))
 (let ((?x140 (ite $x68 ?x19 (_ bv0 32))))
 (let ((?x37 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x138 (_ bv1 32))))
 (=> $x250 (= ?x37 ?x140))))))))))
 ))
 (let (($x271 (forall ((Lambda38 (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x138 (_ bv1 32))))
 (= $x250 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x185 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x138 (_ bv0 32))))
 (=> $x110 $x102))))))
 ))
 (let (($x112 (forall ((Lambda38 (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x138 (_ bv0 32))))
 (= $x110 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x187 (and $x112 $x185)))
 (let (($x260 (and $x187 $x271)))
 (let (($x199 (and $x260 $x263)))
 (let (($x143 (and $x199 $x101)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x26 (and $x162 $x143)))
 (let (($x300 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x139 (and $x300 $x26)))
 (let (($x230 (= ?x20 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x179 (and $x230 $x139)))
 (let (($x190 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x68 (= Lambda38 (_ bv0 32))))
 (let ((?x140 (ite $x68 ?x19 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x284 (= Lambda38 (_ bv1 32))))
 (let ((?x186 (ite $x284 ?x20 ?x140)))
 (let ((?x94 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x69 (_ bv1 32))))
 (=> $x66 (= ?x94 ?x186)))))))))))))
 ))
 (let (($x16 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x28 (_ bv1 32))))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x69 (_ bv1 32))))
 (= $x66 $x278)))))))
 ))
 (let (($x147 (forall ((Lambda38 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x69 (_ bv0 32))))
 (=> $x70 $x102))))))
 ))
 (let (($x141 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x28 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x28 (_ bv0 32))))
 (let (($x236 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x69 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x69 (_ bv0 32))))
 (= $x70 $x8)))))))
 ))
 (let (($x151 (and $x141 $x147)))
 (let (($x78 (and $x151 $x16)))
 (let (($x196 (and $x78 $x190)))
 (let (($x192 (and $x196 $x179)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x211 (and $x193 $x192)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x212 (and $x106 $x211)))
 (let (($x261 (and $x102 $x212)))
 (let (($x34 (= input.spec-%var-y-0.L1%23%bbentry ?x64)))
 (let (($x210 (and $x34 $x261)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x248 (and $x57 $x210)))
 (let (($x269 (and $x102 $x248)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x272 (and $x27 $x269)))
 (let (($x33 (=> $x272 $x36)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x64 (ite $x51 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x76 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x34 (ite $x76 ?x107 ?x64)))
 (let ((?x295 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x298 (= ?x295 ?x34)))
 (let (($x252 (= $x298 true)))
 (let (($x109 (= $x252 true)))
 (let ((?x283 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x128 (concat ?x80 (concat ?x279 ?x283)))))
 (let (($x228 (= ?x134 input.dst.llvm-%x)))
 (let (($x202 (= $x228 true)))
 (let (($x293 (= input.dst.llvm-%x ?x134)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x237)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (and $x174 $x254)))
 (let (($x268 (and $x235 $x240)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and $x214 $x268)))
 (let (($x211 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x287 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x287)))))))
 (let (($x67 (and (and (and $x146 $x211) $x277) $x293)))
 (let (($x75 (= $x67 true)))
 (let (($x81 (= $x75 true)))
 (let (($x101 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x143 (not $x101)))
 (let (($x26 (= $x143 true)))
 (let (($x139 (= $x26 true)))
 (let (($x144 (and $x139 $x81)))
 (let (($x226 (and $x144 $x202)))
 (let (($x84 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x96 (and true $x84)))
 (let (($x229 (and $x96 $x226)))
 (let (($x207 (= input.spec-%tmpvar-10.L1%13%d $x84)))
 (let (($x273 (and $x207 $x229)))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x21 ?x19 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x20 ?x107 ?x42)))
 (let (($x188 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x95 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x224 (=> $x95 $x188)))
 (let (($x125 (= $x95 true)))
 (let (($x108 (= false false)))
 (let (($x45 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x49 (=> $x45 $x108)))
 (let (($x31 (= $x45 false)))
 (let (($x53 (and $x31 $x49)))
 (let (($x148 (and $x53 $x125)))
 (let (($x223 (and $x148 $x224)))
 (let (($x286 (and $x223 $x273)))
 (let (($x88 (= input.spec-%tmpvar-12.L1%17%d.2 ?x34)))
 (let (($x215 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x105 (=> $x215 $x88)))
 (let (($x220 (= $x215 true)))
 (let (($x92 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x281 (=> $x92 $x108)))
 (let (($x290 (= $x92 false)))
 (let (($x217 (and $x290 $x281)))
 (let (($x14 (and $x217 $x220)))
 (let (($x111 (and $x14 $x105)))
 (let (($x285 (and $x111 $x286)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x169 (and $x205 $x285)))
 (let (($x175 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x66 (= Lambda38 (_ bv0 32))))
 (let ((?x187 (ite $x66 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x151 (= Lambda38 (_ bv1 32))))
 (let ((?x250 (ite $x151 ?x107 ?x187)))
 (let ((?x29 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x191 (_ bv1 32))))
 (=> $x159 (= ?x29 ?x250)))))))))))))
 ))
 (let (($x166 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x163 (_ bv1 32))))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x191 (_ bv1 32))))
 (= $x159 $x300)))))))
 ))
 (let (($x243 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x191 (_ bv0 32))))
 (=> $x206 $x108))))))
 ))
 (let (($x201 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x163 (_ bv0 32))))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x191 (_ bv0 32))))
 (= $x206 $x16)))))))
 ))
 (let (($x176 (and $x201 $x243)))
 (let (($x113 (and $x176 $x166)))
 (let (($x177 (and $x113 $x175)))
 (let (($x265 (and $x177 $x169)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x203 (and $x100 $x265)))
 (let (($x152 (forall ((Lambda38 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x219 (_ bv1 32))))
 (=> $x54 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x60 (forall ((Lambda38 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x219 (_ bv1 32))))
 (= $x54 false)))))
 ))
 (let (($x259 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x219 (_ bv0 32))))
 (=> $x255 $x108))))))
 ))
 (let (($x213 (forall ((Lambda38 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x219 (_ bv0 32))))
 (= $x255 true)))))
 ))
 (let (($x267 (and $x213 $x259)))
 (let (($x85 (and $x267 $x60)))
 (let (($x52 (and $x85 $x152)))
 (let (($x170 (and $x52 $x203)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x44 (and $x121 $x170)))
 (let (($x117 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x83 (and $x117 $x44)))
 (let (($x103 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x86 (and $x103 $x83)))
 (let (($x256 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x66 (= Lambda38 (_ bv0 32))))
 (let ((?x187 (ite $x66 ?x19 (_ bv0 32))))
 (let ((?x130 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x30 (_ bv1 32))))
 (=> $x280 (= ?x130 ?x187))))))))))
 ))
 (let (($x89 (forall ((Lambda38 (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x30 (_ bv1 32))))
 (= $x280 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x245 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x30 (_ bv0 32))))
 (=> $x164 $x108))))))
 ))
 (let (($x198 (forall ((Lambda38 (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x30 (_ bv0 32))))
 (= $x164 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x246 (and $x198 $x245)))
 (let (($x59 (and $x246 $x89)))
 (let (($x99 (and $x59 $x256)))
 (let (($x204 (and $x99 $x86)))
 (let (($x264 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x244 (and $x264 $x204)))
 (let (($x263 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x247 (and $x263 $x244)))
 (let (($x288 (= ?x107 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x270 (and $x288 $x247)))
 (let (($x271 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x66 (= Lambda38 (_ bv0 32))))
 (let ((?x187 (ite $x66 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x151 (= Lambda38 (_ bv1 32))))
 (let ((?x250 (ite $x151 ?x107 ?x187)))
 (let ((?x116 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x78 (_ bv1 32))))
 (=> $x301 (= ?x116 ?x250)))))))))))))
 ))
 (let (($x221 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x163 (_ bv1 32))))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x78 (_ bv1 32))))
 (= $x301 $x300)))))))
 ))
 (let (($x190 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x78 (_ bv0 32))))
 (=> $x94 $x108))))))
 ))
 (let (($x186 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x163 (_ bv0 32))))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x78 (_ bv0 32))))
 (= $x94 $x16)))))))
 ))
 (let (($x196 (and $x186 $x190)))
 (let (($x138 (and $x196 $x221)))
 (let (($x260 (and $x138 $x271)))
 (let (($x274 (and $x260 $x270)))
 (let (($x258 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x90 (and $x258 $x274)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x77 (and $x133 $x90)))
 (let (($x149 (and $x108 $x77)))
 (let (($x13 (= input.spec-%var-y-0.L1%23%bbentry ?x34)))
 (let (($x87 (and $x13 $x149)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x115 (and $x39 $x87)))
 (let (($x127 (and $x108 $x115)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x160 (and $x27 $x127)))
 (let (($x253 (=> $x160 $x109)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x64 (ite $x51 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x76 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x34 (ite $x76 ?x107 ?x64)))
 (let ((?x295 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x298 (= ?x295 ?x34)))
 (let (($x252 (= $x298 true)))
 (let (($x109 (= $x252 true)))
 (let ((?x283 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x128 (concat ?x80 (concat ?x279 ?x283)))))
 (let (($x228 (= ?x134 input.dst.llvm-%x)))
 (let (($x202 (= $x228 true)))
 (let (($x293 (= input.dst.llvm-%x ?x134)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x237)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (and $x174 $x254)))
 (let (($x268 (and $x235 $x240)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and $x214 $x268)))
 (let (($x211 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x287 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x287)))))))
 (let (($x67 (and (and (and $x146 $x211) $x277) $x293)))
 (let (($x75 (= $x67 true)))
 (let (($x81 (= $x75 true)))
 (let (($x101 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x143 (not $x101)))
 (let (($x26 (= $x143 true)))
 (let (($x139 (= $x26 true)))
 (let (($x144 (and $x139 $x81)))
 (let (($x226 (and $x144 $x202)))
 (let (($x84 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x96 (and true $x84)))
 (let (($x229 (and $x96 $x226)))
 (let (($x207 (= input.spec-%tmpvar-10.L1%13%d $x84)))
 (let (($x273 (and $x207 $x229)))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x21 ?x19 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x20 ?x107 ?x42)))
 (let (($x188 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x95 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x224 (=> $x95 $x188)))
 (let (($x125 (= $x95 true)))
 (let (($x108 (= false false)))
 (let (($x45 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x49 (=> $x45 $x108)))
 (let (($x31 (= $x45 false)))
 (let (($x53 (and $x31 $x49)))
 (let (($x148 (and $x53 $x125)))
 (let (($x223 (and $x148 $x224)))
 (let (($x286 (and $x223 $x273)))
 (let (($x88 (= input.spec-%tmpvar-12.L1%17%d.2 ?x34)))
 (let (($x215 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x105 (=> $x215 $x88)))
 (let (($x220 (= $x215 true)))
 (let (($x92 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x281 (=> $x92 $x108)))
 (let (($x290 (= $x92 false)))
 (let (($x217 (and $x290 $x281)))
 (let (($x14 (and $x217 $x220)))
 (let (($x111 (and $x14 $x105)))
 (let (($x285 (and $x111 $x286)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x169 (and $x205 $x285)))
 (let (($x175 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x66 (= Lambda38 (_ bv0 32))))
 (let ((?x187 (ite $x66 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x151 (= Lambda38 (_ bv1 32))))
 (let ((?x250 (ite $x151 ?x107 ?x187)))
 (let ((?x29 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x191 (_ bv1 32))))
 (=> $x159 (= ?x29 ?x250)))))))))))))
 ))
 (let (($x166 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x163 (_ bv1 32))))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x191 (_ bv1 32))))
 (= $x159 $x300)))))))
 ))
 (let (($x243 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x191 (_ bv0 32))))
 (=> $x206 $x108))))))
 ))
 (let (($x201 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x163 (_ bv0 32))))
 (let (($x79 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x191 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x191 (_ bv0 32))))
 (= $x206 $x16)))))))
 ))
 (let (($x176 (and $x201 $x243)))
 (let (($x113 (and $x176 $x166)))
 (let (($x177 (and $x113 $x175)))
 (let (($x265 (and $x177 $x169)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x203 (and $x100 $x265)))
 (let (($x152 (forall ((Lambda38 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x219 (_ bv1 32))))
 (=> $x54 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x60 (forall ((Lambda38 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x219 (_ bv1 32))))
 (= $x54 false)))))
 ))
 (let (($x259 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x219 (_ bv0 32))))
 (=> $x255 $x108))))))
 ))
 (let (($x213 (forall ((Lambda38 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x219 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x219 (_ bv0 32))))
 (= $x255 true)))))
 ))
 (let (($x267 (and $x213 $x259)))
 (let (($x85 (and $x267 $x60)))
 (let (($x52 (and $x85 $x152)))
 (let (($x170 (and $x52 $x203)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x44 (and $x121 $x170)))
 (let (($x117 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x83 (and $x117 $x44)))
 (let (($x103 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x86 (and $x103 $x83)))
 (let (($x256 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x66 (= Lambda38 (_ bv0 32))))
 (let ((?x187 (ite $x66 ?x19 (_ bv0 32))))
 (let ((?x130 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x30 (_ bv1 32))))
 (=> $x280 (= ?x130 ?x187))))))))))
 ))
 (let (($x89 (forall ((Lambda38 (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x30 (_ bv1 32))))
 (= $x280 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x245 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x30 (_ bv0 32))))
 (=> $x164 $x108))))))
 ))
 (let (($x198 (forall ((Lambda38 (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x30 (ite $x302 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x30 (_ bv0 32))))
 (= $x164 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x246 (and $x198 $x245)))
 (let (($x59 (and $x246 $x89)))
 (let (($x99 (and $x59 $x256)))
 (let (($x204 (and $x99 $x86)))
 (let (($x264 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x244 (and $x264 $x204)))
 (let (($x263 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x247 (and $x263 $x244)))
 (let (($x288 (= ?x107 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x270 (and $x288 $x247)))
 (let (($x271 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x66 (= Lambda38 (_ bv0 32))))
 (let ((?x187 (ite $x66 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x151 (= Lambda38 (_ bv1 32))))
 (let ((?x250 (ite $x151 ?x107 ?x187)))
 (let ((?x116 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x78 (_ bv1 32))))
 (=> $x301 (= ?x116 ?x250)))))))))))))
 ))
 (let (($x221 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x163 (_ bv1 32))))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x78 (_ bv1 32))))
 (= $x301 $x300)))))))
 ))
 (let (($x190 (forall ((Lambda38 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x78 (_ bv0 32))))
 (=> $x94 $x108))))))
 ))
 (let (($x186 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x163 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x163 (_ bv0 32))))
 (let (($x68 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x78 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x78 (_ bv0 32))))
 (= $x94 $x16)))))))
 ))
 (let (($x196 (and $x186 $x190)))
 (let (($x138 (and $x196 $x221)))
 (let (($x260 (and $x138 $x271)))
 (let (($x274 (and $x260 $x270)))
 (let (($x258 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x90 (and $x258 $x274)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x77 (and $x133 $x90)))
 (let (($x149 (and $x108 $x77)))
 (let (($x13 (= input.spec-%var-y-0.L1%23%bbentry ?x34)))
 (let (($x87 (and $x13 $x149)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x115 (and $x39 $x87)))
 (let (($x127 (and $x108 $x115)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x160 (and $x27 $x127)))
 (let (($x253 (=> $x160 $x109)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x165 (not $x182)))
 (let (($x118 (or $x182 $x165)))
 (let (($x122 (= $x118 true)))
 (let (($x200 (= $x122 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x185 (concat ?x56 (concat ?x225 ?x147)))))
 (let (($x43 (= ?x46 input.dst.llvm-%x)))
 (let (($x9 (= $x43 true)))
 (let (($x28 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (= $x28 true)))
 (let (($x114 (= $x8 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x179)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x298 $x253)))
 (let (($x282 (and $x61 $x192)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x86 $x282)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x295 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x77)))))))
 (let (($x284 (and $x295 $x236)))
 (let (($x136 (= $x284 true)))
 (let (($x69 (= $x136 true)))
 (let (($x141 (and $x69 $x114)))
 (let (($x41 (and $x141 $x9)))
 (let (($x265 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x203 (= input.spec-%tmpvar-10.L1%13%d $x265)))
 (let (($x194 (and $x203 $x41)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x21 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x20 ?x107 ?x42)))
 (let (($x273 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x228 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x286 (=> $x228 $x273)))
 (let (($x202 (= $x228 true)))
 (let (($x57 (= false false)))
 (let (($x67 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x81 (=> $x67 $x57)))
 (let (($x75 (= $x67 false)))
 (let (($x144 (and $x75 $x81)))
 (let (($x226 (and $x144 $x202)))
 (let (($x285 (and $x226 $x286)))
 (let (($x82 (and $x285 $x194)))
 (let (($x64 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x34 (ite $x64 ?x19 (_ bv0 32))))
 (let (($x51 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x13 (ite $x51 ?x107 ?x34)))
 (let (($x296 (= input.spec-%tmpvar-12.L1%17%d.2 ?x13)))
 (let (($x80 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x98 (=> $x80 $x296)))
 (let (($x137 (= $x80 true)))
 (let (($x126 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x297 (=> $x126 $x57)))
 (let (($x128 (= $x126 false)))
 (let (($x74 (and $x128 $x297)))
 (let (($x279 (and $x74 $x137)))
 (let (($x134 (and $x279 $x98)))
 (let (($x35 (and $x134 $x82)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x153 (and $x15 $x35)))
 (let (($x240 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x301 (= Lambda38 (_ bv0 32))))
 (let ((?x246 (ite $x301 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x196 (= Lambda38 (_ bv1 32))))
 (let ((?x280 (ite $x196 ?x107 ?x246)))
 (let ((?x174 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x120 (_ bv1 32))))
 (=> $x146 (= ?x174 ?x280)))))))))))))
 ))
 (let (($x241 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x162 (_ bv1 32))))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x120 (_ bv1 32))))
 (= $x146 $x263)))))))
 ))
 (let (($x251 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x120 (_ bv0 32))))
 (=> $x248 $x57))))))
 ))
 (let (($x12 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x162 (_ bv0 32))))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x120 (_ bv0 32))))
 (= $x248 $x221)))))))
 ))
 (let (($x36 (and $x12 $x251)))
 (let (($x212 (and $x36 $x241)))
 (let (($x268 (and $x212 $x240)))
 (let (($x291 (and $x268 $x153)))
 (let (($x183 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x257 (and $x183 $x291)))
 (let (($x84 (forall ((Lambda38 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x217 (_ bv1 32))))
 (=> $x31 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x53 (forall ((Lambda38 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x217 (_ bv1 32))))
 (= $x31 false)))))
 ))
 (let (($x105 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x217 (_ bv0 32))))
 (=> $x215 $x57))))))
 ))
 (let (($x14 (forall ((Lambda38 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x217 (_ bv0 32))))
 (= $x215 true)))))
 ))
 (let (($x111 (and $x14 $x105)))
 (let (($x95 (and $x111 $x53)))
 (let (($x207 (and $x95 $x84)))
 (let (($x275 (and $x207 $x257)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x289 (and $x177 $x275)))
 (let (($x171 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x299 (and $x171 $x289)))
 (let (($x113 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x150 (and $x113 $x299)))
 (let (($x159 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x301 (= Lambda38 (_ bv0 32))))
 (let ((?x246 (ite $x301 ?x19 (_ bv0 32))))
 (let ((?x206 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x213 (_ bv1 32))))
 (=> $x52 (= ?x206 ?x246))))))))))
 ))
 (let (($x100 (forall ((Lambda38 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x213 (_ bv1 32))))
 (= $x52 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x60 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x213 (_ bv0 32))))
 (=> $x227 $x57))))))
 ))
 (let (($x267 (forall ((Lambda38 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x213 (_ bv0 32))))
 (= $x227 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x85 (and $x267 $x60)))
 (let (($x79 (and $x85 $x100)))
 (let (($x40 (and $x79 $x159)))
 (let (($x180 (and $x40 $x150)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x154 (and $x178 $x180)))
 (let (($x256 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x132 (and $x256 $x154)))
 (let (($x158 (= ?x107 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x145 (and $x158 $x132)))
 (let (($x89 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x301 (= Lambda38 (_ bv0 32))))
 (let ((?x246 (ite $x301 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x196 (= Lambda38 (_ bv1 32))))
 (let ((?x280 (ite $x196 ?x107 ?x246)))
 (let ((?x62 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x138 (_ bv1 32))))
 (=> $x199 (= ?x62 ?x280)))))))))))))
 ))
 (let (($x302 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x162 (_ bv1 32))))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x138 (_ bv1 32))))
 (= $x199 $x263)))))))
 ))
 (let (($x271 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x138 (_ bv0 32))))
 (=> $x116 $x57))))))
 ))
 (let (($x250 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x162 (_ bv0 32))))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x138 (_ bv0 32))))
 (= $x116 $x221)))))))
 ))
 (let (($x260 (and $x250 $x271)))
 (let (($x30 (and $x260 $x302)))
 (let (($x59 (and $x30 $x89)))
 (let (($x262 (and $x59 $x145)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x266 (and $x70 $x262)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x218 (and $x193 $x266)))
 (let (($x155 (and $x57 $x218)))
 (let (($x106 (= input.spec-%var-y-0.L1%23%bbentry ?x13)))
 (let (($x32 (and $x106 $x155)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x10 (and $x25 $x32)))
 (let (($x104 (and $x57 $x10)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x173 (and $x27 $x104)))
 (let (($x55 (=> $x173 $x200)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%13%d () Bool)
(declare-fun input.spec-%tmpvar-16.L1%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L1%25%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L1%17%d () (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-15.L1%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L1%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L1%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L1%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L1%31%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x165 (not $x182)))
 (let (($x118 (or $x182 $x165)))
 (let (($x122 (= $x118 true)))
 (let (($x200 (= $x122 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x185 (concat ?x56 (concat ?x225 ?x147)))))
 (let (($x43 (= ?x46 input.dst.llvm-%x)))
 (let (($x9 (= $x43 true)))
 (let (($x28 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (= $x28 true)))
 (let (($x114 (= $x8 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x179)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x298 $x253)))
 (let (($x282 (and $x61 $x192)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x86 $x282)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x295 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x77)))))))
 (let (($x284 (and $x295 $x236)))
 (let (($x136 (= $x284 true)))
 (let (($x69 (= $x136 true)))
 (let (($x141 (and $x69 $x114)))
 (let (($x41 (and $x141 $x9)))
 (let (($x265 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x203 (= input.spec-%tmpvar-10.L1%13%d $x265)))
 (let (($x194 (and $x203 $x41)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x42 (ite $x21 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x20 ?x107 ?x42)))
 (let (($x273 (= input.spec-%tmpvar-16.L1%25%d.2 ?x47)))
 (let (($x228 (bvuge input.spec-%tmpvar-16.L1%25%d.0 (_ bv1 32))))
 (let (($x286 (=> $x228 $x273)))
 (let (($x202 (= $x228 true)))
 (let (($x57 (= false false)))
 (let (($x67 (= input.spec-%tmpvar-16.L1%25%d.0 (_ bv0 32))))
 (let (($x81 (=> $x67 $x57)))
 (let (($x75 (= $x67 false)))
 (let (($x144 (and $x75 $x81)))
 (let (($x226 (and $x144 $x202)))
 (let (($x285 (and $x226 $x286)))
 (let (($x82 (and $x285 $x194)))
 (let (($x64 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x34 (ite $x64 ?x19 (_ bv0 32))))
 (let (($x51 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x13 (ite $x51 ?x107 ?x34)))
 (let (($x296 (= input.spec-%tmpvar-12.L1%17%d.2 ?x13)))
 (let (($x80 (bvuge input.spec-%tmpvar-12.L1%17%d.0 (_ bv1 32))))
 (let (($x98 (=> $x80 $x296)))
 (let (($x137 (= $x80 true)))
 (let (($x126 (= input.spec-%tmpvar-12.L1%17%d.0 (_ bv0 32))))
 (let (($x297 (=> $x126 $x57)))
 (let (($x128 (= $x126 false)))
 (let (($x74 (and $x128 $x297)))
 (let (($x279 (and $x74 $x137)))
 (let (($x134 (and $x279 $x98)))
 (let (($x35 (and $x134 $x82)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-11.L1%17%d)))
 (let (($x153 (and $x15 $x35)))
 (let (($x240 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x301 (= Lambda38 (_ bv0 32))))
 (let ((?x246 (ite $x301 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x196 (= Lambda38 (_ bv1 32))))
 (let ((?x280 (ite $x196 ?x107 ?x246)))
 (let ((?x174 (input.spec-%var-t1-0.L1%13%d.1.1 Lambda38)))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x120 (_ bv1 32))))
 (=> $x146 (= ?x174 ?x280)))))))))))))
 ))
 (let (($x241 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x162 (_ bv1 32))))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x120 (_ bv1 32))))
 (= $x146 $x263)))))))
 ))
 (let (($x251 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x120 (_ bv0 32))))
 (=> $x248 $x57))))))
 ))
 (let (($x12 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x162 (_ bv0 32))))
 (let (($x143 (input.spec-%var-t1-0.L1%13%d.0.1 Lambda38)))
 (let ((?x120 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x120 (_ bv0 32))))
 (= $x248 $x221)))))))
 ))
 (let (($x36 (and $x12 $x251)))
 (let (($x212 (and $x36 $x241)))
 (let (($x268 (and $x212 $x240)))
 (let (($x291 (and $x268 $x153)))
 (let (($x183 (= (_ bv1 32) input.spec-%tmpvar-15.L1%25%d)))
 (let (($x257 (and $x183 $x291)))
 (let (($x84 (forall ((Lambda38 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x217 (_ bv1 32))))
 (=> $x31 (= (input.spec-%tmpvar-0.L1%13%d.1.1 Lambda38) (_ bv0 32)))))))
 ))
 (let (($x53 (forall ((Lambda38 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x217 (_ bv1 32))))
 (= $x31 false)))))
 ))
 (let (($x105 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x217 (_ bv0 32))))
 (=> $x215 $x57))))))
 ))
 (let (($x14 (forall ((Lambda38 (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-0.L1%13%d.0.1 Lambda38)))
 (let ((?x217 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x217 (_ bv0 32))))
 (= $x215 true)))))
 ))
 (let (($x111 (and $x14 $x105)))
 (let (($x95 (and $x111 $x53)))
 (let (($x207 (and $x95 $x84)))
 (let (($x275 (and $x207 $x257)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-1.L1%13%d)))
 (let (($x289 (and $x177 $x275)))
 (let (($x171 (= (_ bv5 32) input.spec-%tmpvar-2.L1%13%d)))
 (let (($x299 (and $x171 $x289)))
 (let (($x113 (= ?x19 input.spec-%tmpvar-3.L1%13%d)))
 (let (($x150 (and $x113 $x299)))
 (let (($x159 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x301 (= Lambda38 (_ bv0 32))))
 (let ((?x246 (ite $x301 ?x19 (_ bv0 32))))
 (let ((?x206 (input.spec-%tmpvar-4.L1%13%d.1.1 Lambda38)))
 (let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x213 (_ bv1 32))))
 (=> $x52 (= ?x206 ?x246))))))))))
 ))
 (let (($x100 (forall ((Lambda38 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x213 (_ bv1 32))))
 (= $x52 (bvuge (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x60 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x213 (_ bv0 32))))
 (=> $x227 $x57))))))
 ))
 (let (($x267 (forall ((Lambda38 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-4.L1%13%d.0.1 Lambda38)))
 (let ((?x213 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x213 (_ bv0 32))))
 (= $x227 (= (ite (= Lambda38 (_ bv0 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x85 (and $x267 $x60)))
 (let (($x79 (and $x85 $x100)))
 (let (($x40 (and $x79 $x159)))
 (let (($x180 (and $x40 $x150)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-5.L1%13%d)))
 (let (($x154 (and $x178 $x180)))
 (let (($x256 (= (_ bv12 32) input.spec-%tmpvar-6.L1%13%d)))
 (let (($x132 (and $x256 $x154)))
 (let (($x158 (= ?x107 input.spec-%tmpvar-7.L1%13%d)))
 (let (($x145 (and $x158 $x132)))
 (let (($x89 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x301 (= Lambda38 (_ bv0 32))))
 (let ((?x246 (ite $x301 ?x19 (_ bv0 32))))
 (let ((?x107 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x196 (= Lambda38 (_ bv1 32))))
 (let ((?x280 (ite $x196 ?x107 ?x246)))
 (let ((?x62 (input.spec-%tmpvar-8.L1%13%d.1.1 Lambda38)))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x138 (_ bv1 32))))
 (=> $x199 (= ?x62 ?x280)))))))))))))
 ))
 (let (($x302 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x162 (_ bv1 32))))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x138 (_ bv1 32))))
 (= $x199 $x263)))))))
 ))
 (let (($x271 (forall ((Lambda38 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x138 (_ bv0 32))))
 (=> $x116 $x57))))))
 ))
 (let (($x250 (forall ((Lambda38 (_ BitVec 32)) )(let ((?x162 (ite (or (= Lambda38 (_ bv0 32)) (= Lambda38 (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x162 (_ bv0 32))))
 (let (($x66 (input.spec-%tmpvar-8.L1%13%d.0.1 Lambda38)))
 (let ((?x138 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x138 (_ bv0 32))))
 (= $x116 $x221)))))))
 ))
 (let (($x260 (and $x250 $x271)))
 (let (($x30 (and $x260 $x302)))
 (let (($x59 (and $x30 $x89)))
 (let (($x262 (and $x59 $x145)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-9.L1%13%d)))
 (let (($x266 (and $x70 $x262)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-13.L1%23%bbentry)))
 (let (($x218 (and $x193 $x266)))
 (let (($x155 (and $x57 $x218)))
 (let (($x106 (= input.spec-%var-y-0.L1%23%bbentry ?x13)))
 (let (($x32 (and $x106 $x155)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L1%31%bbentry)))
 (let (($x10 (and $x25 $x32)))
 (let (($x104 (and $x57 $x10)))
 (let (($x27 (= input.spec-%var-y-1.L1%31%bbentry ?x47)))
 (let (($x173 (and $x27 $x104)))
 (let (($x55 (=> $x173 $x200)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460608/query
