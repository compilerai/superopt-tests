==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x261 (not $x260)))
 (let (($x262 (or $x260 $x261)))
 (let (($x263 (= $x262 false)))
 (let (($x264 (= $x263 true)))
 (let (($x240 (forall ((input.ind-%var497X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var497X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var497X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x20 ?x166)))
 (let ((?x230 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var497X)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var497X)))
 (=> $x219 (= ?x230 ?x167)))))))))))
 ))
 (let (($x226 (forall ((input.ind-%var496X (_ BitVec 32)) )(let (($x150 (= input.ind-%var496X (_ bv1 32))))
 (let (($x151 (= input.ind-%var496X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var496X)))
 (= $x219 $x152))))))
 ))
 (let (($x241 (and $x226 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x213 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var485X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x18 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var485X)))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var485X)))
 (=> $x196 (= ?x205 ?x166))))))))
 ))
 (let (($x201 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x151 (= input.ind-%var484X (_ bv0 32))))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var484X)))
 (= $x196 $x151))))
 ))
 (let (($x214 (and $x201 $x213)))
 (let (($x215 (= $x214 true)))
 (let (($x190 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var475X)))
 (=> $x176 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var474X)))
 (= $x176 false)))
 ))
 (let (($x191 (and $x180 $x190)))
 (let (($x192 (= $x191 true)))
 (let (($x170 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var463X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var463X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x20 ?x166)))
 (let ((?x158 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var463X)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var463X)))
 (=> $x144 (= ?x158 ?x167)))))))))))
 ))
 (let (($x154 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x150 (= input.ind-%var462X (_ bv1 32))))
 (let (($x151 (= input.ind-%var462X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var462X)))
 (= $x144 $x152))))))
 ))
 (let (($x171 (and $x154 $x170)))
 (let (($x172 (= $x171 true)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x20 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x129 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x129 $x133)))
 (let (($x125 (or $x48 $x41)))
 (let ((?x126 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x126 (_ bv1 32))))
 (let (($x131 (= $x129 $x130)))
 (let (($x127 (= ?x126 (_ bv0 32))))
 (let (($x123 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x128 (= $x123 $x127)))
 (let (($x46 (= false false)))
 (let (($x124 (=> $x123 $x46)))
 (let (($x137 (and (and (and $x124 $x128) $x131) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x23 (ite $x19 ?x18 (_ bv0 32))))
 (let (($x21 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x34 (ite $x21 ?x20 ?x23)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x34)))
 (let (($x105 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x105 $x115)))
 (let (($x106 (or $x19 $x21)))
 (let ((?x107 (ite $x106 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x107 (_ bv0 32))))
 (let (($x110 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x113 (= $x110 $x112)))
 (let (($x119 (and (and (and (= $x105 (bvuge ?x107 (_ bv1 32))) (=> $x110 $x46)) $x113) $x116)))
 (let (($x120 (= $x119 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x89)))))
 (let (($x100 (= ?x99 input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x82 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x54 $x75)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x61)))))))
 (let (($x77 (and $x67 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x86 (and $x80 $x85)))
 (let (($x103 (and $x86 $x102)))
 (let (($x121 (and $x103 $x120)))
 (let (($x139 (and $x121 $x138)))
 (let (($x173 (and $x139 $x172)))
 (let (($x193 (and $x173 $x192)))
 (let (($x216 (and $x193 $x215)))
 (let (($x243 (and $x216 $x242)))
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x244 (and $x50 $x243)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x30 $x244)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x246 (and $x42 $x245)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x247 (and $x16 $x246)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x248 (and $x40 $x247)))
 (let (($x33 (= ?x18 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x249 (and $x33 $x248)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x250 (and $x9 $x249)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x251 (and $x7 $x250)))
 (let (($x17 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x252 (and $x17 $x251)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x253 (and $x8 $x252)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x254 (and $x13 $x253)))
 (let (($x255 (and $x46 $x254)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x256 (and $x35 $x255)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x257 (and $x44 $x256)))
 (let (($x258 (and $x46 $x257)))
 (let (($x5 (= input.spec-%var-y-1.L2%31%bbentry ?x34)))
 (let (($x259 (and $x5 $x258)))
 (let (($x265 (=> $x259 $x264)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x261 (not $x260)))
 (let (($x262 (or $x260 $x261)))
 (let (($x263 (= $x262 false)))
 (let (($x264 (= $x263 true)))
 (let (($x240 (forall ((input.ind-%var497X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var497X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var497X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x20 ?x166)))
 (let ((?x230 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var497X)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var497X)))
 (=> $x219 (= ?x230 ?x167)))))))))))
 ))
 (let (($x226 (forall ((input.ind-%var496X (_ BitVec 32)) )(let (($x150 (= input.ind-%var496X (_ bv1 32))))
 (let (($x151 (= input.ind-%var496X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var496X)))
 (= $x219 $x152))))))
 ))
 (let (($x241 (and $x226 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x213 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var485X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x18 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var485X)))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var485X)))
 (=> $x196 (= ?x205 ?x166))))))))
 ))
 (let (($x201 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x151 (= input.ind-%var484X (_ bv0 32))))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var484X)))
 (= $x196 $x151))))
 ))
 (let (($x214 (and $x201 $x213)))
 (let (($x215 (= $x214 true)))
 (let (($x190 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var475X)))
 (=> $x176 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var474X)))
 (= $x176 false)))
 ))
 (let (($x191 (and $x180 $x190)))
 (let (($x192 (= $x191 true)))
 (let (($x170 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var463X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var463X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x20 ?x166)))
 (let ((?x158 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var463X)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var463X)))
 (=> $x144 (= ?x158 ?x167)))))))))))
 ))
 (let (($x154 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x150 (= input.ind-%var462X (_ bv1 32))))
 (let (($x151 (= input.ind-%var462X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var462X)))
 (= $x144 $x152))))))
 ))
 (let (($x171 (and $x154 $x170)))
 (let (($x172 (= $x171 true)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x20 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x129 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x129 $x133)))
 (let (($x125 (or $x48 $x41)))
 (let ((?x126 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x126 (_ bv1 32))))
 (let (($x131 (= $x129 $x130)))
 (let (($x127 (= ?x126 (_ bv0 32))))
 (let (($x123 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x128 (= $x123 $x127)))
 (let (($x46 (= false false)))
 (let (($x124 (=> $x123 $x46)))
 (let (($x137 (and (and (and $x124 $x128) $x131) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x23 (ite $x19 ?x18 (_ bv0 32))))
 (let (($x21 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x34 (ite $x21 ?x20 ?x23)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x34)))
 (let (($x105 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x105 $x115)))
 (let (($x106 (or $x19 $x21)))
 (let ((?x107 (ite $x106 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x107 (_ bv0 32))))
 (let (($x110 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x113 (= $x110 $x112)))
 (let (($x119 (and (and (and (= $x105 (bvuge ?x107 (_ bv1 32))) (=> $x110 $x46)) $x113) $x116)))
 (let (($x120 (= $x119 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x89)))))
 (let (($x100 (= ?x99 input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x82 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x54 $x75)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x61)))))))
 (let (($x77 (and $x67 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x86 (and $x80 $x85)))
 (let (($x103 (and $x86 $x102)))
 (let (($x121 (and $x103 $x120)))
 (let (($x139 (and $x121 $x138)))
 (let (($x173 (and $x139 $x172)))
 (let (($x193 (and $x173 $x192)))
 (let (($x216 (and $x193 $x215)))
 (let (($x243 (and $x216 $x242)))
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x244 (and $x50 $x243)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x30 $x244)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x246 (and $x42 $x245)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x247 (and $x16 $x246)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x248 (and $x40 $x247)))
 (let (($x33 (= ?x18 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x249 (and $x33 $x248)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x250 (and $x9 $x249)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x251 (and $x7 $x250)))
 (let (($x17 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x252 (and $x17 $x251)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x253 (and $x8 $x252)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x254 (and $x13 $x253)))
 (let (($x255 (and $x46 $x254)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x256 (and $x35 $x255)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x257 (and $x44 $x256)))
 (let (($x258 (and $x46 $x257)))
 (let (($x5 (= input.spec-%var-y-1.L2%31%bbentry ?x34)))
 (let (($x259 (and $x5 $x258)))
 (let (($x265 (=> $x259 $x264)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-10.L2%13%d () Bool
    true)
  (define-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32)
    #xad0003c0)
  (define-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd22033f8)
  (define-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32)
    #xad0003d1)
  (define-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32)
    #xad0003c0)
  (define-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32)
    #xad0003d1)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xad0003c5)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd22033fb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd22033f8)
  (define-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32)
    #xad0003c0)
  (define-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32)
    #xad0003d1)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #xad0003c5)
  (define-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1!40 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #xad0003c0
    (ite (= x!0 #x00000001) #xad0003d1
      #x00000006)))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L2%13%d.1.1!40 (k!38 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1!41 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #xad0003c0
      #x00000007))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1!42 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #xad0003c0
    (ite (= x!0 #x00000001) #xad0003d1
      #x00000008)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1!43 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1!39 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun k!37 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%13%d.0.1!44 (k!37 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd22033f9) #x03
    (ite (= x!0 #xd22033fb) #xad
    (ite (= x!0 #xd22033f8) #xc5
      #x00))))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L2%13%d.1.1!42 (k!35 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%13%d.1.1!41 (k!37 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L2%13%d.0.1!43 (k!35 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L2%13%d.0.1!39 (k!38 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa0800000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!51))
  (define-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32)
    #x00200001)
  (define-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32)
    #x00200012)
  (define-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32)
    #x00200001)
  (define-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32)
    #x00200012)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00200006)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa0800003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa0800000)
  (define-fun input.spec-%tmpvar-10.L2%13%d () Bool
    false)
  (define-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32)
    #x00200001)
  (define-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32)
    #x00200012)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00200006)
  (define-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1!61 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1!56 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
    (ite (= x!0 #x00200001) #x00200001
      #x00000004))))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L2%13%d.0.1!56 (k!52 x!0)))
  (define-fun k!55 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
    (ite (= x!0 #x00200001) #x00200001
      #x00000004))))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L2%13%d.0.1!61 (k!55 x!0)))
  (define-fun k!54 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00200001) #x00200001
      #x00000004)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1!59 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%13%d.0.1!59 (k!54 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1!58 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00200001
    (ite (= x!0 #x00000001) #x00200012
      #x00000007)))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa0800000) #x06
    (ite (= x!0 #xa0800002) #x20
      #x00)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L2%13%d.1.1!58 (k!55 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1!57 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00200001
    (ite (= x!0 #x00000001) #x00200012
      #x00000006)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1!60 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00200001
      #x00000008))
  (define-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L2%13%d.1.1!57 (k!52 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%13%d.1.1!60 (k!54 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x228 (not $x236)))
 (let (($x237 (or $x236 $x228)))
 (let (($x141 (not $x237)))
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x234 (and true $x14)))
 (let (($x233 (not $x14)))
 (let (($x235 (or $x233 $x234)))
 (let (($x267 (or $x235 $x141)))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x146 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var767X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var767X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x20 ?x200)))
 (let ((?x207 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var767X)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var767X)))
 (=> $x185 (= ?x207 ?x201)))))))))))
 ))
 (let (($x202 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x169 (= input.ind-%var766X (_ bv1 32))))
 (let (($x170 (= input.ind-%var766X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var766X)))
 (= $x185 $x171))))))
 ))
 (let (($x148 (and $x202 $x146)))
 (let (($x149 (= $x148 true)))
 (let (($x157 (forall ((input.ind-%var757X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var757X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x18 (_ bv0 32))))
 (let ((?x264 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var757X)))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var757X)))
 (=> $x255 (= ?x264 ?x200))))))))
 ))
 (let (($x260 (forall ((input.ind-%var756X (_ BitVec 32)) )(let (($x170 (= input.ind-%var756X (_ bv0 32))))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var756X)))
 (= $x255 $x170))))
 ))
 (let (($x140 (and $x260 $x157)))
 (let (($x147 (= $x140 true)))
 (let (($x249 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var749X)))
 (=> $x225 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x239 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var748X)))
 (= $x225 false)))
 ))
 (let (($x250 (and $x239 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x212 (forall ((input.ind-%var743X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var743X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var743X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x20 ?x200)))
 (let ((?x184 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var743X)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var743X)))
 (=> $x153 (= ?x184 ?x201)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x169 (= input.ind-%var742X (_ bv1 32))))
 (let (($x170 (= input.ind-%var742X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var742X)))
 (= $x153 $x171))))))
 ))
 (let (($x213 (and $x173 $x212)))
 (let (($x214 (= $x213 true)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x20 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x130 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x130 $x133)))
 (let (($x127 (or $x48 $x41)))
 (let ((?x128 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x128 (_ bv1 32))))
 (let (($x136 (= $x130 $x131)))
 (let (($x135 (= ?x128 (_ bv0 32))))
 (let (($x125 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x129 (= $x125 $x135)))
 (let (($x5 (= false false)))
 (let (($x126 (=> $x125 $x5)))
 (let (($x139 (and (and (and $x126 $x129) $x136) $x134)))
 (let (($x143 (= $x139 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x23 (ite $x19 ?x18 (_ bv0 32))))
 (let (($x47 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x45 (ite $x47 ?x20 ?x23)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x45)))
 (let (($x108 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x108 $x115)))
 (let (($x109 (or $x19 $x47)))
 (let ((?x110 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x110 (_ bv0 32))))
 (let (($x117 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x118 (= $x117 $x113)))
 (let (($x121 (and (and (and (= $x108 (bvuge ?x110 (_ bv1 32))) (=> $x117 $x5)) $x118) $x116)))
 (let (($x122 (= $x121 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x96 (concat ?x90 ?x94)))))
 (let (($x103 (= ?x102 input.dst.llvm-%x)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x84 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x57 $x77)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x64)))))))
 (let (($x79 (and $x69 $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x97 (and $x82 $x87)))
 (let (($x106 (and $x97 $x105)))
 (let (($x123 (and $x106 $x122)))
 (let (($x144 (and $x123 $x143)))
 (let (($x215 (and $x144 $x214)))
 (let (($x252 (and $x215 $x251)))
 (let (($x160 (and $x252 $x147)))
 (let (($x161 (and $x160 $x149)))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x162 (and $x50 $x161)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x163 (and $x30 $x162)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x164 (and $x42 $x163)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x178 (and $x16 $x164)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x156 (and $x40 $x178)))
 (let (($x33 (= ?x18 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x33 $x156)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x186 (and $x9 $x165)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x199 (and $x7 $x186)))
 (let (($x17 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x182 (and $x17 $x199)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x187 (and $x8 $x182)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x209 (and $x13 $x187)))
 (let (($x221 (and $x5 $x209)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x203 (and $x35 $x221)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x210 (and $x44 $x203)))
 (let (($x223 (and $x5 $x210)))
 (let (($x34 (= input.spec-%var-y-1.L2%31%bbentry ?x45)))
 (let (($x224 (and $x34 $x223)))
 (let (($x270 (=> $x224 $x269)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x228 (not $x236)))
 (let (($x237 (or $x236 $x228)))
 (let (($x141 (not $x237)))
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x234 (and true $x14)))
 (let (($x233 (not $x14)))
 (let (($x235 (or $x233 $x234)))
 (let (($x267 (or $x235 $x141)))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x146 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var767X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var767X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x20 ?x200)))
 (let ((?x207 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var767X)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var767X)))
 (=> $x185 (= ?x207 ?x201)))))))))))
 ))
 (let (($x202 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x169 (= input.ind-%var766X (_ bv1 32))))
 (let (($x170 (= input.ind-%var766X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var766X)))
 (= $x185 $x171))))))
 ))
 (let (($x148 (and $x202 $x146)))
 (let (($x149 (= $x148 true)))
 (let (($x157 (forall ((input.ind-%var757X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var757X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x18 (_ bv0 32))))
 (let ((?x264 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var757X)))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var757X)))
 (=> $x255 (= ?x264 ?x200))))))))
 ))
 (let (($x260 (forall ((input.ind-%var756X (_ BitVec 32)) )(let (($x170 (= input.ind-%var756X (_ bv0 32))))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var756X)))
 (= $x255 $x170))))
 ))
 (let (($x140 (and $x260 $x157)))
 (let (($x147 (= $x140 true)))
 (let (($x249 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var749X)))
 (=> $x225 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x239 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var748X)))
 (= $x225 false)))
 ))
 (let (($x250 (and $x239 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x212 (forall ((input.ind-%var743X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var743X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var743X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x20 ?x200)))
 (let ((?x184 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var743X)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var743X)))
 (=> $x153 (= ?x184 ?x201)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x169 (= input.ind-%var742X (_ bv1 32))))
 (let (($x170 (= input.ind-%var742X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var742X)))
 (= $x153 $x171))))))
 ))
 (let (($x213 (and $x173 $x212)))
 (let (($x214 (= $x213 true)))
 (let ((?x18 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x18 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x20 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x130 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x130 $x133)))
 (let (($x127 (or $x48 $x41)))
 (let ((?x128 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x128 (_ bv1 32))))
 (let (($x136 (= $x130 $x131)))
 (let (($x135 (= ?x128 (_ bv0 32))))
 (let (($x125 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x129 (= $x125 $x135)))
 (let (($x5 (= false false)))
 (let (($x126 (=> $x125 $x5)))
 (let (($x139 (and (and (and $x126 $x129) $x136) $x134)))
 (let (($x143 (= $x139 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x23 (ite $x19 ?x18 (_ bv0 32))))
 (let (($x47 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x45 (ite $x47 ?x20 ?x23)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x45)))
 (let (($x108 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x108 $x115)))
 (let (($x109 (or $x19 $x47)))
 (let ((?x110 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x110 (_ bv0 32))))
 (let (($x117 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x118 (= $x117 $x113)))
 (let (($x121 (and (and (and (= $x108 (bvuge ?x110 (_ bv1 32))) (=> $x117 $x5)) $x118) $x116)))
 (let (($x122 (= $x121 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x96 (concat ?x90 ?x94)))))
 (let (($x103 (= ?x102 input.dst.llvm-%x)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x84 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x57 $x77)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x64)))))))
 (let (($x79 (and $x69 $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x97 (and $x82 $x87)))
 (let (($x106 (and $x97 $x105)))
 (let (($x123 (and $x106 $x122)))
 (let (($x144 (and $x123 $x143)))
 (let (($x215 (and $x144 $x214)))
 (let (($x252 (and $x215 $x251)))
 (let (($x160 (and $x252 $x147)))
 (let (($x161 (and $x160 $x149)))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x162 (and $x50 $x161)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x163 (and $x30 $x162)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x164 (and $x42 $x163)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x178 (and $x16 $x164)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x156 (and $x40 $x178)))
 (let (($x33 (= ?x18 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x33 $x156)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x186 (and $x9 $x165)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x199 (and $x7 $x186)))
 (let (($x17 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x182 (and $x17 $x199)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x187 (and $x8 $x182)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x209 (and $x13 $x187)))
 (let (($x221 (and $x5 $x209)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x203 (and $x35 $x221)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x210 (and $x44 $x203)))
 (let (($x223 (and $x5 $x210)))
 (let (($x34 (= input.spec-%var-y-1.L2%31%bbentry ?x45)))
 (let (($x224 (and $x34 $x223)))
 (let (($x270 (=> $x224 $x269)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x278 (= (_ bv0 32) ?x277)))
 (let (($x279 (= $x278 true)))
 (let (($x280 (= $x279 true)))
 (let (($x258 (forall ((input.ind-%var861X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x264 (= input.ind-%var861X (_ bv0 32))))
 (let ((?x149 (ite $x264 ?x8 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var861X (_ bv1 32))))
 (let ((?x161 (ite $x260 ?x20 ?x149)))
 (let ((?x168 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var861X)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var861X)))
 (=> $x266 (= ?x168 ?x161)))))))))))
 ))
 (let (($x254 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x260 (= input.ind-%var860X (_ bv1 32))))
 (let (($x264 (= input.ind-%var860X (_ bv0 32))))
 (let (($x88 (or $x264 $x260)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var860X)))
 (= $x266 $x88))))))
 ))
 (let (($x241 (and $x254 $x258)))
 (let (($x246 (= $x241 true)))
 (let (($x242 (forall ((input.ind-%var851X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x264 (= input.ind-%var851X (_ bv0 32))))
 (let ((?x149 (ite $x264 ?x8 (_ bv0 32))))
 (let ((?x181 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var851X)))
 (let (($x55 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var851X)))
 (=> $x55 (= ?x181 ?x149))))))))
 ))
 (let (($x226 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x264 (= input.ind-%var850X (_ bv0 32))))
 (let (($x55 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var850X)))
 (= $x55 $x264))))
 ))
 (let (($x261 (and $x226 $x242)))
 (let (($x263 (= $x261 true)))
 (let (($x141 (forall ((input.ind-%var843X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var843X)))
 (=> $x182 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var843X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var842X)))
 (= $x182 false)))
 ))
 (let (($x267 (and $x203 $x141)))
 (let (($x268 (= $x267 true)))
 (let (($x164 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x264 (= input.ind-%var837X (_ bv0 32))))
 (let ((?x149 (ite $x264 ?x8 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var837X (_ bv1 32))))
 (let ((?x161 (ite $x260 ?x20 ?x149)))
 (let ((?x185 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var837X)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var837X)))
 (=> $x249 (= ?x185 ?x161)))))))))))
 ))
 (let (($x157 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x260 (= input.ind-%var836X (_ bv1 32))))
 (let (($x264 (= input.ind-%var836X (_ bv0 32))))
 (let (($x88 (or $x264 $x260)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var836X)))
 (= $x249 $x88))))))
 ))
 (let (($x178 (and $x157 $x164)))
 (let (($x156 (= $x178 true)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x61 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x61 ?x8 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x6 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x6 ?x20 ?x11)))
 (let (($x212 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x200 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x213 (=> $x200 $x212)))
 (let (($x171 (or $x61 $x6)))
 (let ((?x172 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x172 (_ bv1 32))))
 (let (($x205 (= $x200 $x201)))
 (let (($x173 (= ?x172 (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x184 (= $x170 $x173)))
 (let (($x32 (= false false)))
 (let (($x169 (=> $x170 $x32)))
 (let (($x225 (and (and (and $x169 $x184) $x205) $x213)))
 (let (($x238 (= $x225 true)))
 (let (($x47 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x19 (ite $x47 ?x8 (_ bv0 32))))
 (let (($x18 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x21 (ite $x18 ?x20 ?x19)))
 (let (($x132 (= input.spec-%tmpvar-16.L2%25%d.2 ?x21)))
 (let (($x126 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x133 (=> $x126 $x132)))
 (let (($x127 (or $x47 $x18)))
 (let ((?x128 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x128 (_ bv0 32))))
 (let (($x137 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x136 (= $x137 $x131)))
 (let (($x143 (and (and (and (= $x126 (bvuge ?x128 (_ bv1 32))) (=> $x137 $x32)) $x136) $x133)))
 (let (($x144 (= $x143 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x106 (concat ?x102 ?x91)))))
 (let (($x121 (= ?x110 input.dst.llvm-%x)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x95 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x120 (= $x95 true)))
 (let (($x114 (= $x120 true)))
 (let (($x115 (= $x114 true)))
 (let (($x46 (= input.dst.llvm-%x ?x110)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x76 $x79)))
 (let (($x83 (and $x80 $x82)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x64 $x83)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x57)))))))
 (let (($x5 (and (and (and $x75 $x95) $x84) $x46)))
 (let (($x112 (= $x5 true)))
 (let (($x119 (= $x112 true)))
 (let (($x113 (= $x119 true)))
 (let (($x100 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let (($x85 (and $x75 $x84)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x97 (= $x87 true)))
 (let (($x96 (and $x97 $x92)))
 (let (($x118 (and $x96 $x113)))
 (let (($x116 (and $x118 $x115)))
 (let (($x124 (and $x116 $x123)))
 (let (($x152 (and $x124 $x144)))
 (let (($x239 (and $x152 $x238)))
 (let (($x165 (and $x239 $x156)))
 (let (($x269 (and $x165 $x268)))
 (let (($x150 (and $x269 $x263)))
 (let (($x145 (and $x150 $x246)))
 (let (($x16 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x30 (or false $x16)))
 (let (($x183 (and $x30 $x145)))
 (let (($x23 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x60 (= input.spec-%tmpvar-10.L2%13%d $x23)))
 (let (($x262 (and $x60 $x183)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x159 (and $x62 $x262)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x174 (and $x12 $x159)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x175 (and $x35 $x174)))
 (let (($x9 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x195 (and $x9 $x175)))
 (let (($x59 (= ?x8 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x231 (and $x59 $x195)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x229 (and $x42 $x231)))
 (let (($x17 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x217 (and $x17 $x229)))
 (let (($x26 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x194 (and $x26 $x217)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x222 (and $x68 $x194)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x227 (and $x13 $x222)))
 (let (($x272 (and $x32 $x227)))
 (let (($x50 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x273 (and $x50 $x272)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x274 (and $x29 $x273)))
 (let (($x275 (and $x32 $x274)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x21)))
 (let (($x276 (and $x49 $x275)))
 (let (($x281 (=> $x276 $x280)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x278 (= (_ bv0 32) ?x277)))
 (let (($x279 (= $x278 true)))
 (let (($x280 (= $x279 true)))
 (let (($x258 (forall ((input.ind-%var861X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x264 (= input.ind-%var861X (_ bv0 32))))
 (let ((?x149 (ite $x264 ?x8 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var861X (_ bv1 32))))
 (let ((?x161 (ite $x260 ?x20 ?x149)))
 (let ((?x168 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var861X)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var861X)))
 (=> $x266 (= ?x168 ?x161)))))))))))
 ))
 (let (($x254 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x260 (= input.ind-%var860X (_ bv1 32))))
 (let (($x264 (= input.ind-%var860X (_ bv0 32))))
 (let (($x88 (or $x264 $x260)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var860X)))
 (= $x266 $x88))))))
 ))
 (let (($x241 (and $x254 $x258)))
 (let (($x246 (= $x241 true)))
 (let (($x242 (forall ((input.ind-%var851X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x264 (= input.ind-%var851X (_ bv0 32))))
 (let ((?x149 (ite $x264 ?x8 (_ bv0 32))))
 (let ((?x181 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var851X)))
 (let (($x55 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var851X)))
 (=> $x55 (= ?x181 ?x149))))))))
 ))
 (let (($x226 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x264 (= input.ind-%var850X (_ bv0 32))))
 (let (($x55 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var850X)))
 (= $x55 $x264))))
 ))
 (let (($x261 (and $x226 $x242)))
 (let (($x263 (= $x261 true)))
 (let (($x141 (forall ((input.ind-%var843X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var843X)))
 (=> $x182 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var843X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var842X)))
 (= $x182 false)))
 ))
 (let (($x267 (and $x203 $x141)))
 (let (($x268 (= $x267 true)))
 (let (($x164 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x264 (= input.ind-%var837X (_ bv0 32))))
 (let ((?x149 (ite $x264 ?x8 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var837X (_ bv1 32))))
 (let ((?x161 (ite $x260 ?x20 ?x149)))
 (let ((?x185 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var837X)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var837X)))
 (=> $x249 (= ?x185 ?x161)))))))))))
 ))
 (let (($x157 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x260 (= input.ind-%var836X (_ bv1 32))))
 (let (($x264 (= input.ind-%var836X (_ bv0 32))))
 (let (($x88 (or $x264 $x260)))
 (let (($x249 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var836X)))
 (= $x249 $x88))))))
 ))
 (let (($x178 (and $x157 $x164)))
 (let (($x156 (= $x178 true)))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x61 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x61 ?x8 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x6 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x6 ?x20 ?x11)))
 (let (($x212 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x200 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x213 (=> $x200 $x212)))
 (let (($x171 (or $x61 $x6)))
 (let ((?x172 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x172 (_ bv1 32))))
 (let (($x205 (= $x200 $x201)))
 (let (($x173 (= ?x172 (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x184 (= $x170 $x173)))
 (let (($x32 (= false false)))
 (let (($x169 (=> $x170 $x32)))
 (let (($x225 (and (and (and $x169 $x184) $x205) $x213)))
 (let (($x238 (= $x225 true)))
 (let (($x47 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x19 (ite $x47 ?x8 (_ bv0 32))))
 (let (($x18 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x21 (ite $x18 ?x20 ?x19)))
 (let (($x132 (= input.spec-%tmpvar-16.L2%25%d.2 ?x21)))
 (let (($x126 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x133 (=> $x126 $x132)))
 (let (($x127 (or $x47 $x18)))
 (let ((?x128 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x128 (_ bv0 32))))
 (let (($x137 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x136 (= $x137 $x131)))
 (let (($x143 (and (and (and (= $x126 (bvuge ?x128 (_ bv1 32))) (=> $x137 $x32)) $x136) $x133)))
 (let (($x144 (= $x143 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x106 (concat ?x102 ?x91)))))
 (let (($x121 (= ?x110 input.dst.llvm-%x)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x95 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x120 (= $x95 true)))
 (let (($x114 (= $x120 true)))
 (let (($x115 (= $x114 true)))
 (let (($x46 (= input.dst.llvm-%x ?x110)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x76 $x79)))
 (let (($x83 (and $x80 $x82)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x64 $x83)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x57)))))))
 (let (($x5 (and (and (and $x75 $x95) $x84) $x46)))
 (let (($x112 (= $x5 true)))
 (let (($x119 (= $x112 true)))
 (let (($x113 (= $x119 true)))
 (let (($x100 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let (($x85 (and $x75 $x84)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x97 (= $x87 true)))
 (let (($x96 (and $x97 $x92)))
 (let (($x118 (and $x96 $x113)))
 (let (($x116 (and $x118 $x115)))
 (let (($x124 (and $x116 $x123)))
 (let (($x152 (and $x124 $x144)))
 (let (($x239 (and $x152 $x238)))
 (let (($x165 (and $x239 $x156)))
 (let (($x269 (and $x165 $x268)))
 (let (($x150 (and $x269 $x263)))
 (let (($x145 (and $x150 $x246)))
 (let (($x16 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x30 (or false $x16)))
 (let (($x183 (and $x30 $x145)))
 (let (($x23 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x60 (= input.spec-%tmpvar-10.L2%13%d $x23)))
 (let (($x262 (and $x60 $x183)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x159 (and $x62 $x262)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x174 (and $x12 $x159)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x175 (and $x35 $x174)))
 (let (($x9 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x195 (and $x9 $x175)))
 (let (($x59 (= ?x8 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x231 (and $x59 $x195)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x229 (and $x42 $x231)))
 (let (($x17 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x217 (and $x17 $x229)))
 (let (($x26 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x194 (and $x26 $x217)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x222 (and $x68 $x194)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x227 (and $x13 $x222)))
 (let (($x272 (and $x32 $x227)))
 (let (($x50 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x273 (and $x50 $x272)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x274 (and $x29 $x273)))
 (let (($x275 (and $x32 $x274)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x21)))
 (let (($x276 (and $x49 $x275)))
 (let (($x281 (=> $x276 $x280)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x230 (= (_ bv0 32) ?x193)))
 (let (($x158 (= $x230 true)))
 (let (($x179 (= $x158 true)))
 (let (($x259 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x156 (= input.ind-%var955X (_ bv0 32))))
 (let ((?x181 (ite $x156 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x178 (= input.ind-%var955X (_ bv1 32))))
 (let ((?x189 (ite $x178 ?x51 ?x181)))
 (let ((?x186 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var955X)))
 (let (($x243 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var955X)))
 (=> $x243 (= ?x186 ?x189)))))))))))
 ))
 (let (($x247 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x178 (= input.ind-%var954X (_ bv1 32))))
 (let (($x156 (= input.ind-%var954X (_ bv0 32))))
 (let (($x165 (or $x156 $x178)))
 (let (($x243 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var954X)))
 (= $x243 $x165))))))
 ))
 (let (($x257 (and $x247 $x259)))
 (let (($x207 (= $x257 true)))
 (let (($x56 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x156 (= input.ind-%var944X (_ bv0 32))))
 (let (($x273 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var944X)))
 (= $x273 $x156))))
 ))
 (let (($x48 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x156 (= input.ind-%var945X (_ bv0 32))))
 (let ((?x181 (ite $x156 ?x19 (_ bv0 32))))
 (let ((?x276 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var945X)))
 (let (($x273 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var945X)))
 (=> $x273 (= ?x276 ?x181))))))))
 ))
 (let (($x208 (and $x48 $x56)))
 (let (($x216 (= $x208 true)))
 (let (($x229 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var937X)))
 (=> $x168 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var937X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var936X)))
 (= $x168 false)))
 ))
 (let (($x217 (and $x241 $x229)))
 (let (($x194 (= $x217 true)))
 (let (($x261 (forall ((input.ind-%var931X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x156 (= input.ind-%var931X (_ bv0 32))))
 (let ((?x181 (ite $x156 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x178 (= input.ind-%var931X (_ bv1 32))))
 (let ((?x189 (ite $x178 ?x51 ?x181)))
 (let ((?x237 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var931X)))
 (let (($x185 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var931X)))
 (=> $x185 (= ?x237 ?x189)))))))))))
 ))
 (let (($x221 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x178 (= input.ind-%var930X (_ bv1 32))))
 (let (($x156 (= input.ind-%var930X (_ bv0 32))))
 (let (($x165 (or $x156 $x178)))
 (let (($x185 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var930X)))
 (= $x185 $x165))))))
 ))
 (let (($x263 (and $x221 $x261)))
 (let (($x150 (= $x263 true)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x25 (ite $x11 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x61 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x50 (ite $x61 ?x51 ?x25)))
 (let (($x225 (= input.spec-%tmpvar-12.L2%17%d.2 ?x50)))
 (let (($x215 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x215 $x225)))
 (let (($x214 (or $x11 $x61)))
 (let ((?x200 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x200 (_ bv1 32))))
 (let (($x212 (= $x215 $x211)))
 (let (($x201 (= ?x200 (_ bv0 32))))
 (let (($x173 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x205 (= $x173 $x201)))
 (let (($x45 (= false false)))
 (let (($x184 (=> $x173 $x45)))
 (let (($x249 (and (and (and $x184 $x205) $x212) $x238)))
 (let (($x264 (= $x249 true)))
 (let (($x24 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x24 ?x19 (_ bv0 32))))
 (let (($x31 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x31 ?x51 ?x21)))
 (let (($x143 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x137 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x137 $x143)))
 (let (($x32 (or $x24 $x31)))
 (let ((?x130 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x130 (_ bv0 32))))
 (let (($x136 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x132 (= $x136 $x138)))
 (let (($x170 (and (and (and (= $x137 (bvuge ?x130 (_ bv1 32))) (=> $x136 $x45)) $x132) $x144)))
 (let (($x169 (= $x170 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x5 (concat ?x107 (concat ?x99 ?x105)))))
 (let (($x126 (= ?x112 input.dst.llvm-%x)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x108 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x122 (= $x108 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x119 (= input.dst.llvm-%x ?x112)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x69 $x86)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x73)))))))
 (let (($x120 (and (and (and $x78 $x108) $x87) $x119)))
 (let (($x114 (= $x120 true)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (not $x92)))
 (let (($x95 (= $x96 true)))
 (let (($x111 (= $x95 true)))
 (let (($x117 (= $x111 true)))
 (let (($x97 (and $x78 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x90 (and $x101 $x117)))
 (let (($x121 (and $x90 $x116)))
 (let (($x125 (and $x121 $x124)))
 (let (($x135 (and $x125 $x128)))
 (let (($x171 (and $x135 $x169)))
 (let (($x260 (and $x171 $x264)))
 (let (($x266 (and $x260 $x150)))
 (let (($x222 (and $x266 $x194)))
 (let (($x142 (and $x222 $x216)))
 (let (($x232 (and $x142 $x207)))
 (let (($x30 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x65 (or false $x30)))
 (let (($x218 (and $x65 $x232)))
 (let (($x60 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x39 (= input.spec-%tmpvar-10.L2%13%d $x60)))
 (let (($x146 (and $x39 $x218)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x209 (and $x10 $x146)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x147 (and $x37 $x209)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x148 (and $x40 $x147)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x235 (and $x43 $x148)))
 (let (($x33 (= ?x19 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x188 (and $x33 $x235)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x223 (and $x44 $x188)))
 (let (($x28 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x236 (and $x28 $x223)))
 (let (($x27 (= ?x51 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x151 (and $x27 $x236)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x219 (and $x63 $x151)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x256 (and $x7 $x219)))
 (let (($x166 (and $x45 $x256)))
 (let (($x15 (= input.spec-%var-y-0.L2%23%bbentry ?x50)))
 (let (($x198 (and $x15 $x166)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x177 (and $x58 $x198)))
 (let (($x191 (and $x45 $x177)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x192 (and $x49 $x191)))
 (let (($x204 (=> $x192 $x179)))
 (not $x204)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x230 (= (_ bv0 32) ?x193)))
 (let (($x158 (= $x230 true)))
 (let (($x179 (= $x158 true)))
 (let (($x259 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x156 (= input.ind-%var955X (_ bv0 32))))
 (let ((?x181 (ite $x156 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x178 (= input.ind-%var955X (_ bv1 32))))
 (let ((?x189 (ite $x178 ?x51 ?x181)))
 (let ((?x186 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var955X)))
 (let (($x243 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var955X)))
 (=> $x243 (= ?x186 ?x189)))))))))))
 ))
 (let (($x247 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x178 (= input.ind-%var954X (_ bv1 32))))
 (let (($x156 (= input.ind-%var954X (_ bv0 32))))
 (let (($x165 (or $x156 $x178)))
 (let (($x243 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var954X)))
 (= $x243 $x165))))))
 ))
 (let (($x257 (and $x247 $x259)))
 (let (($x207 (= $x257 true)))
 (let (($x56 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x156 (= input.ind-%var944X (_ bv0 32))))
 (let (($x273 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var944X)))
 (= $x273 $x156))))
 ))
 (let (($x48 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x156 (= input.ind-%var945X (_ bv0 32))))
 (let ((?x181 (ite $x156 ?x19 (_ bv0 32))))
 (let ((?x276 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var945X)))
 (let (($x273 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var945X)))
 (=> $x273 (= ?x276 ?x181))))))))
 ))
 (let (($x208 (and $x48 $x56)))
 (let (($x216 (= $x208 true)))
 (let (($x229 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var937X)))
 (=> $x168 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var937X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var936X)))
 (= $x168 false)))
 ))
 (let (($x217 (and $x241 $x229)))
 (let (($x194 (= $x217 true)))
 (let (($x261 (forall ((input.ind-%var931X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x156 (= input.ind-%var931X (_ bv0 32))))
 (let ((?x181 (ite $x156 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x178 (= input.ind-%var931X (_ bv1 32))))
 (let ((?x189 (ite $x178 ?x51 ?x181)))
 (let ((?x237 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var931X)))
 (let (($x185 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var931X)))
 (=> $x185 (= ?x237 ?x189)))))))))))
 ))
 (let (($x221 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x178 (= input.ind-%var930X (_ bv1 32))))
 (let (($x156 (= input.ind-%var930X (_ bv0 32))))
 (let (($x165 (or $x156 $x178)))
 (let (($x185 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var930X)))
 (= $x185 $x165))))))
 ))
 (let (($x263 (and $x221 $x261)))
 (let (($x150 (= $x263 true)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x25 (ite $x11 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x61 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x50 (ite $x61 ?x51 ?x25)))
 (let (($x225 (= input.spec-%tmpvar-12.L2%17%d.2 ?x50)))
 (let (($x215 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x215 $x225)))
 (let (($x214 (or $x11 $x61)))
 (let ((?x200 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x200 (_ bv1 32))))
 (let (($x212 (= $x215 $x211)))
 (let (($x201 (= ?x200 (_ bv0 32))))
 (let (($x173 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x205 (= $x173 $x201)))
 (let (($x45 (= false false)))
 (let (($x184 (=> $x173 $x45)))
 (let (($x249 (and (and (and $x184 $x205) $x212) $x238)))
 (let (($x264 (= $x249 true)))
 (let (($x24 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x24 ?x19 (_ bv0 32))))
 (let (($x31 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x31 ?x51 ?x21)))
 (let (($x143 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x137 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x137 $x143)))
 (let (($x32 (or $x24 $x31)))
 (let ((?x130 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x130 (_ bv0 32))))
 (let (($x136 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x132 (= $x136 $x138)))
 (let (($x170 (and (and (and (= $x137 (bvuge ?x130 (_ bv1 32))) (=> $x136 $x45)) $x132) $x144)))
 (let (($x169 (= $x170 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x5 (concat ?x107 (concat ?x99 ?x105)))))
 (let (($x126 (= ?x112 input.dst.llvm-%x)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x108 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x122 (= $x108 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x119 (= input.dst.llvm-%x ?x112)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x69 $x86)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x73)))))))
 (let (($x120 (and (and (and $x78 $x108) $x87) $x119)))
 (let (($x114 (= $x120 true)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (not $x92)))
 (let (($x95 (= $x96 true)))
 (let (($x111 (= $x95 true)))
 (let (($x117 (= $x111 true)))
 (let (($x97 (and $x78 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x90 (and $x101 $x117)))
 (let (($x121 (and $x90 $x116)))
 (let (($x125 (and $x121 $x124)))
 (let (($x135 (and $x125 $x128)))
 (let (($x171 (and $x135 $x169)))
 (let (($x260 (and $x171 $x264)))
 (let (($x266 (and $x260 $x150)))
 (let (($x222 (and $x266 $x194)))
 (let (($x142 (and $x222 $x216)))
 (let (($x232 (and $x142 $x207)))
 (let (($x30 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x65 (or false $x30)))
 (let (($x218 (and $x65 $x232)))
 (let (($x60 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x39 (= input.spec-%tmpvar-10.L2%13%d $x60)))
 (let (($x146 (and $x39 $x218)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x209 (and $x10 $x146)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x147 (and $x37 $x209)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x148 (and $x40 $x147)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x235 (and $x43 $x148)))
 (let (($x33 (= ?x19 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x188 (and $x33 $x235)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x223 (and $x44 $x188)))
 (let (($x28 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x236 (and $x28 $x223)))
 (let (($x27 (= ?x51 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x151 (and $x27 $x236)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x219 (and $x63 $x151)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x256 (and $x7 $x219)))
 (let (($x166 (and $x45 $x256)))
 (let (($x15 (= input.spec-%var-y-0.L2%23%bbentry ?x50)))
 (let (($x198 (and $x15 $x166)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x177 (and $x58 $x198)))
 (let (($x191 (and $x45 $x177)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x192 (and $x49 $x191)))
 (let (($x204 (=> $x192 $x179)))
 (not $x204)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x20 (ite $x24 ?x21 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x36 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x31 (ite $x36 ?x8 ?x20)))
 (let ((?x224 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x244 (= ?x224 ?x31)))
 (let (($x167 (= $x244 true)))
 (let (($x253 (= $x167 true)))
 (let (($x210 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x189 (= input.ind-%var1049X (_ bv0 32))))
 (let ((?x194 (ite $x189 ?x21 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x181 (= input.ind-%var1049X (_ bv1 32))))
 (let ((?x222 (ite $x181 ?x8 ?x194)))
 (let ((?x275 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1049X)))
 (let (($x277 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1049X)))
 (=> $x277 (= ?x275 ?x222)))))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x181 (= input.ind-%var1048X (_ bv1 32))))
 (let (($x189 (= input.ind-%var1048X (_ bv0 32))))
 (let (($x240 (or $x189 $x181)))
 (let (($x277 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1048X)))
 (= $x277 $x240))))))
 ))
 (let (($x206 (and $x267 $x210)))
 (let (($x180 (= $x206 true)))
 (let (($x149 (forall ((input.ind-%var1038X (_ BitVec 32)) )(let (($x189 (= input.ind-%var1038X (_ bv0 32))))
 (let (($x236 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1038X)))
 (= $x236 $x189))))
 ))
 (let (($x158 (forall ((input.ind-%var1039X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x189 (= input.ind-%var1039X (_ bv0 32))))
 (let ((?x194 (ite $x189 ?x21 (_ bv0 32))))
 (let ((?x256 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1039X)))
 (let (($x236 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1039X)))
 (=> $x236 (= ?x256 ?x194))))))))
 ))
 (let (($x141 (and $x158 $x149)))
 (let (($x104 (= $x141 true)))
 (let (($x209 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1031X)))
 (=> $x216 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1030X)))
 (= $x216 false)))
 ))
 (let (($x147 (and $x247 $x209)))
 (let (($x148 (= $x147 true)))
 (let (($x282 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x189 (= input.ind-%var1025X (_ bv0 32))))
 (let ((?x194 (ite $x189 ?x21 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x181 (= input.ind-%var1025X (_ bv1 32))))
 (let ((?x222 (ite $x181 ?x8 ?x194)))
 (let ((?x168 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1025X)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1025X)))
 (=> $x156 (= ?x168 ?x222)))))))))))
 ))
 (let (($x261 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x181 (= input.ind-%var1024X (_ bv1 32))))
 (let (($x189 (= input.ind-%var1024X (_ bv0 32))))
 (let (($x240 (or $x189 $x181)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1024X)))
 (= $x156 $x240))))))
 ))
 (let (($x41 (and $x261 $x282)))
 (let (($x48 (= $x41 true)))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x50 (ite $x25 ?x21 (_ bv0 32))))
 (let (($x11 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x15 (ite $x11 ?x8 ?x50)))
 (let (($x212 (= input.spec-%tmpvar-12.L2%17%d.2 ?x15)))
 (let (($x205 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x248 (=> $x205 $x212)))
 (let (($x184 (or $x25 $x11)))
 (let ((?x214 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= $x205 $x239)))
 (let (($x200 (= ?x214 (_ bv0 32))))
 (let (($x172 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x201 (= $x172 $x200)))
 (let (($x29 (= false false)))
 (let (($x173 (=> $x172 $x29)))
 (let (($x238 (and (and (and $x173 $x201) $x215) $x248)))
 (let (($x249 (= $x238 true)))
 (let (($x132 (= input.spec-%tmpvar-16.L2%25%d.2 ?x31)))
 (let (($x137 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x153 (=> $x137 $x132)))
 (let (($x32 (or $x24 $x36)))
 (let ((?x130 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x130 (_ bv0 32))))
 (let (($x136 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x152 (= $x136 $x139)))
 (let (($x144 (and (and (and (= $x137 (bvuge ?x130 (_ bv1 32))) (=> $x136 $x29)) $x152) $x153)))
 (let (($x170 (= $x144 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x105 (concat ?x107 (concat ?x46 ?x118)))))
 (let (($x126 (= ?x102 input.dst.llvm-%x)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x90 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x122 (= $x90 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x110 (= input.dst.llvm-%x ?x102)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x54 $x86)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x75)))))))
 (let (($x120 (and (and (and $x69 $x90) $x87) $x110)))
 (let (($x114 (= $x120 true)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x111 (= $x95 true)))
 (let (($x97 (and $x69 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x117 (and $x101 $x111)))
 (let (($x121 (and $x117 $x116)))
 (let (($x125 (and $x121 $x124)))
 (let (($x135 (and $x125 $x128)))
 (let (($x169 (and $x135 $x170)))
 (let (($x264 (and $x169 $x249)))
 (let (($x234 (and $x264 $x48)))
 (let (($x235 (and $x234 $x148)))
 (let (($x196 (and $x235 $x104)))
 (let (($x161 (and $x196 $x180)))
 (let (($x164 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x161)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= input.spec-%tmpvar-10.L2%13%d $x39)))
 (let (($x160 (and $x16 $x164)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x268 (and $x23 $x160)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x269 (and $x62 $x268)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x55 (and $x12 $x269)))
 (let (($x35 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x93 (and $x35 $x55)))
 (let (($x14 (= ?x21 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x245 (and $x14 $x93)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x233 (and $x59 $x245)))
 (let (($x42 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x226 (and $x42 $x233)))
 (let (($x17 (= ?x8 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x174 (and $x17 $x226)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x187 (and $x26 $x174)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x145 (and $x68 $x187)))
 (let (($x175 (and $x29 $x145)))
 (let (($x13 (= input.spec-%var-y-0.L2%23%bbentry ?x15)))
 (let (($x280 (and $x13 $x175)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x202 (and $x6 $x280)))
 (let (($x272 (and $x29 $x202)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x31)))
 (let (($x281 (and $x49 $x272)))
 (let (($x52 (=> $x281 $x253)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x24 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x20 (ite $x24 ?x21 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x36 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x31 (ite $x36 ?x8 ?x20)))
 (let ((?x224 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x244 (= ?x224 ?x31)))
 (let (($x167 (= $x244 true)))
 (let (($x253 (= $x167 true)))
 (let (($x210 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x189 (= input.ind-%var1049X (_ bv0 32))))
 (let ((?x194 (ite $x189 ?x21 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x181 (= input.ind-%var1049X (_ bv1 32))))
 (let ((?x222 (ite $x181 ?x8 ?x194)))
 (let ((?x275 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1049X)))
 (let (($x277 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1049X)))
 (=> $x277 (= ?x275 ?x222)))))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x181 (= input.ind-%var1048X (_ bv1 32))))
 (let (($x189 (= input.ind-%var1048X (_ bv0 32))))
 (let (($x240 (or $x189 $x181)))
 (let (($x277 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1048X)))
 (= $x277 $x240))))))
 ))
 (let (($x206 (and $x267 $x210)))
 (let (($x180 (= $x206 true)))
 (let (($x149 (forall ((input.ind-%var1038X (_ BitVec 32)) )(let (($x189 (= input.ind-%var1038X (_ bv0 32))))
 (let (($x236 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1038X)))
 (= $x236 $x189))))
 ))
 (let (($x158 (forall ((input.ind-%var1039X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x189 (= input.ind-%var1039X (_ bv0 32))))
 (let ((?x194 (ite $x189 ?x21 (_ bv0 32))))
 (let ((?x256 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1039X)))
 (let (($x236 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1039X)))
 (=> $x236 (= ?x256 ?x194))))))))
 ))
 (let (($x141 (and $x158 $x149)))
 (let (($x104 (= $x141 true)))
 (let (($x209 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1031X)))
 (=> $x216 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1030X)))
 (= $x216 false)))
 ))
 (let (($x147 (and $x247 $x209)))
 (let (($x148 (= $x147 true)))
 (let (($x282 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x189 (= input.ind-%var1025X (_ bv0 32))))
 (let ((?x194 (ite $x189 ?x21 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x181 (= input.ind-%var1025X (_ bv1 32))))
 (let ((?x222 (ite $x181 ?x8 ?x194)))
 (let ((?x168 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1025X)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1025X)))
 (=> $x156 (= ?x168 ?x222)))))))))))
 ))
 (let (($x261 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x181 (= input.ind-%var1024X (_ bv1 32))))
 (let (($x189 (= input.ind-%var1024X (_ bv0 32))))
 (let (($x240 (or $x189 $x181)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1024X)))
 (= $x156 $x240))))))
 ))
 (let (($x41 (and $x261 $x282)))
 (let (($x48 (= $x41 true)))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x50 (ite $x25 ?x21 (_ bv0 32))))
 (let (($x11 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x15 (ite $x11 ?x8 ?x50)))
 (let (($x212 (= input.spec-%tmpvar-12.L2%17%d.2 ?x15)))
 (let (($x205 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x248 (=> $x205 $x212)))
 (let (($x184 (or $x25 $x11)))
 (let ((?x214 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= $x205 $x239)))
 (let (($x200 (= ?x214 (_ bv0 32))))
 (let (($x172 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x201 (= $x172 $x200)))
 (let (($x29 (= false false)))
 (let (($x173 (=> $x172 $x29)))
 (let (($x238 (and (and (and $x173 $x201) $x215) $x248)))
 (let (($x249 (= $x238 true)))
 (let (($x132 (= input.spec-%tmpvar-16.L2%25%d.2 ?x31)))
 (let (($x137 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x153 (=> $x137 $x132)))
 (let (($x32 (or $x24 $x36)))
 (let ((?x130 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x130 (_ bv0 32))))
 (let (($x136 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x152 (= $x136 $x139)))
 (let (($x144 (and (and (and (= $x137 (bvuge ?x130 (_ bv1 32))) (=> $x136 $x29)) $x152) $x153)))
 (let (($x170 (= $x144 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x105 (concat ?x107 (concat ?x46 ?x118)))))
 (let (($x126 (= ?x102 input.dst.llvm-%x)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x90 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x122 (= $x90 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x110 (= input.dst.llvm-%x ?x102)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x54 $x86)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x75)))))))
 (let (($x120 (and (and (and $x69 $x90) $x87) $x110)))
 (let (($x114 (= $x120 true)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x111 (= $x95 true)))
 (let (($x97 (and $x69 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x117 (and $x101 $x111)))
 (let (($x121 (and $x117 $x116)))
 (let (($x125 (and $x121 $x124)))
 (let (($x135 (and $x125 $x128)))
 (let (($x169 (and $x135 $x170)))
 (let (($x264 (and $x169 $x249)))
 (let (($x234 (and $x264 $x48)))
 (let (($x235 (and $x234 $x148)))
 (let (($x196 (and $x235 $x104)))
 (let (($x161 (and $x196 $x180)))
 (let (($x164 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x161)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x16 (= input.spec-%tmpvar-10.L2%13%d $x39)))
 (let (($x160 (and $x16 $x164)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x268 (and $x23 $x160)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x269 (and $x62 $x268)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x55 (and $x12 $x269)))
 (let (($x35 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x93 (and $x35 $x55)))
 (let (($x14 (= ?x21 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x245 (and $x14 $x93)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x233 (and $x59 $x245)))
 (let (($x42 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x226 (and $x42 $x233)))
 (let (($x17 (= ?x8 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x174 (and $x17 $x226)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x187 (and $x26 $x174)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x145 (and $x68 $x187)))
 (let (($x175 (and $x29 $x145)))
 (let (($x13 (= input.spec-%var-y-0.L2%23%bbentry ?x15)))
 (let (($x280 (and $x13 $x175)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x202 (and $x6 $x280)))
 (let (($x272 (and $x29 $x202)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x31)))
 (let (($x281 (and $x49 $x272)))
 (let (($x52 (=> $x281 $x253)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x31 (ite $x51 ?x20 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x36 (ite $x22 ?x8 ?x31)))
 (let ((?x197 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x254 (= ?x197 ?x36)))
 (let (($x183 (= $x254 true)))
 (let (($x279 (= $x183 true)))
 (let (($x221 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x41 (= input.ind-%var1143X (_ bv0 32))))
 (let ((?x193 (ite $x41 ?x20 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1143X (_ bv1 32))))
 (let ((?x230 (ite $x282 ?x8 ?x193)))
 (let ((?x198 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1143X)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1143X)))
 (=> $x266 (= ?x198 ?x230)))))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1142X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1142X (_ bv1 32))))
 (let (($x41 (= input.ind-%var1142X (_ bv0 32))))
 (let (($x48 (or $x41 $x282)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1142X)))
 (= $x266 $x48))))))
 ))
 (let (($x237 (and $x219 $x221)))
 (let (($x274 (= $x237 true)))
 (let (($x257 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x41 (= input.ind-%var1132X (_ bv0 32))))
 (let (($x175 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1132X)))
 (= $x175 $x41))))
 ))
 (let (($x30 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x41 (= input.ind-%var1133X (_ bv0 32))))
 (let ((?x193 (ite $x41 ?x20 (_ bv0 32))))
 (let ((?x272 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1133X)))
 (let (($x175 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1133X)))
 (=> $x175 (= ?x272 ?x193))))))))
 ))
 (let (($x151 (and $x30 $x257)))
 (let (($x166 (= $x151 true)))
 (let (($x245 (forall ((input.ind-%var1125X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1125X)))
 (=> $x267 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1125X) (_ bv0 32)))))
 ))
 (let (($x210 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1124X)))
 (= $x267 false)))
 ))
 (let (($x233 (and $x210 $x245)))
 (let (($x226 (= $x233 true)))
 (let (($x149 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x41 (= input.ind-%var1119X (_ bv0 32))))
 (let ((?x193 (ite $x41 ?x20 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1119X (_ bv1 32))))
 (let ((?x230 (ite $x282 ?x8 ?x193)))
 (let ((?x218 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1119X)))
 (let (($x261 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1119X)))
 (=> $x261 (= ?x218 ?x230)))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1118X (_ bv1 32))))
 (let (($x41 (= input.ind-%var1118X (_ bv0 32))))
 (let (($x48 (or $x41 $x282)))
 (let (($x261 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1118X)))
 (= $x261 $x48))))))
 ))
 (let (($x141 (and $x216 $x149)))
 (let (($x104 (= $x141 true)))
 (let (($x50 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x15 (ite $x50 ?x20 (_ bv0 32))))
 (let (($x25 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x13 (ite $x25 ?x8 ?x15)))
 (let (($x248 (= input.spec-%tmpvar-12.L2%17%d.2 ?x13)))
 (let (($x215 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x215 $x248)))
 (let (($x201 (or $x50 $x25)))
 (let ((?x213 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x213 (_ bv1 32))))
 (let (($x211 (= $x215 $x225)))
 (let (($x205 (= ?x213 (_ bv0 32))))
 (let (($x214 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x239 (= $x214 $x205)))
 (let (($x58 (= false false)))
 (let (($x200 (=> $x214 $x58)))
 (let (($x185 (and (and (and $x200 $x239) $x211) $x238)))
 (let (($x156 (= $x185 true)))
 (let (($x153 (= input.spec-%tmpvar-16.L2%25%d.2 ?x36)))
 (let (($x131 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x131 $x153)))
 (let (($x136 (or $x51 $x22)))
 (let ((?x29 (ite $x136 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x29 (_ bv0 32))))
 (let (($x139 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x138 (= $x139 $x143)))
 (let (($x171 (and (and (and (= $x131 (bvuge ?x29 (_ bv1 32))) (=> $x139 $x58)) $x138) $x144)))
 (let (($x172 (= $x171 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x110 (concat ?x5 (concat ?x107 ?x91)))))
 (let (($x129 (= ?x120 input.dst.llvm-%x)))
 (let (($x137 (= $x129 true)))
 (let (($x32 (= $x137 true)))
 (let (($x108 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x126 (= $x108 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x114 (= input.dst.llvm-%x ?x120)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x81 $x84)))
 (let (($x97 (and $x85 $x87)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x71 $x97)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x76)))))))
 (let (($x121 (and (and (and $x80 $x108) $x98) $x114)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x95 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x111 (not $x95)))
 (let (($x117 (= $x111 true)))
 (let (($x90 (= $x117 true)))
 (let (($x112 (= $x90 true)))
 (let (($x100 (and $x80 $x98)))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let (($x119 (and $x92 $x112)))
 (let (($x125 (and $x119 $x124)))
 (let (($x135 (and $x125 $x128)))
 (let (($x130 (and $x135 $x32)))
 (let (($x173 (and $x130 $x172)))
 (let (($x189 (and $x173 $x156)))
 (let (($x196 (and $x189 $x104)))
 (let (($x174 (and $x196 $x226)))
 (let (($x252 (and $x174 $x166)))
 (let (($x262 (and $x252 $x274)))
 (let (($x231 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x262)))
 (let (($x16 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x163 (= input.spec-%tmpvar-10.L2%13%d $x16)))
 (let (($x229 (and $x163 $x231)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x243 (and $x60 $x229)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x150 (and $x10 $x243)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x217 (and $x37 $x150)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x207 (and $x40 $x217)))
 (let (($x9 (= ?x20 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x67 (and $x9 $x207)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x251 (and $x33 $x67)))
 (let (($x44 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x232 (and $x44 $x251)))
 (let (($x28 (= ?x8 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x191 (and $x28 $x232)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x199 (and $x27 $x191)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x223 (and $x63 $x199)))
 (let (($x192 (and $x58 $x223)))
 (let (($x7 (= input.spec-%var-y-0.L2%23%bbentry ?x13)))
 (let (($x228 (and $x7 $x192)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x88 (and $x61 $x228)))
 (let (($x94 (and $x58 $x88)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x36)))
 (let (($x278 (and $x49 $x94)))
 (let (($x270 (=> $x278 $x279)))
 (not $x270)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x31 (ite $x51 ?x20 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x36 (ite $x22 ?x8 ?x31)))
 (let ((?x197 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x254 (= ?x197 ?x36)))
 (let (($x183 (= $x254 true)))
 (let (($x279 (= $x183 true)))
 (let (($x221 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x41 (= input.ind-%var1143X (_ bv0 32))))
 (let ((?x193 (ite $x41 ?x20 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1143X (_ bv1 32))))
 (let ((?x230 (ite $x282 ?x8 ?x193)))
 (let ((?x198 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1143X)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1143X)))
 (=> $x266 (= ?x198 ?x230)))))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1142X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1142X (_ bv1 32))))
 (let (($x41 (= input.ind-%var1142X (_ bv0 32))))
 (let (($x48 (or $x41 $x282)))
 (let (($x266 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1142X)))
 (= $x266 $x48))))))
 ))
 (let (($x237 (and $x219 $x221)))
 (let (($x274 (= $x237 true)))
 (let (($x257 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x41 (= input.ind-%var1132X (_ bv0 32))))
 (let (($x175 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1132X)))
 (= $x175 $x41))))
 ))
 (let (($x30 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x41 (= input.ind-%var1133X (_ bv0 32))))
 (let ((?x193 (ite $x41 ?x20 (_ bv0 32))))
 (let ((?x272 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1133X)))
 (let (($x175 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1133X)))
 (=> $x175 (= ?x272 ?x193))))))))
 ))
 (let (($x151 (and $x30 $x257)))
 (let (($x166 (= $x151 true)))
 (let (($x245 (forall ((input.ind-%var1125X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1125X)))
 (=> $x267 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1125X) (_ bv0 32)))))
 ))
 (let (($x210 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1124X)))
 (= $x267 false)))
 ))
 (let (($x233 (and $x210 $x245)))
 (let (($x226 (= $x233 true)))
 (let (($x149 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x41 (= input.ind-%var1119X (_ bv0 32))))
 (let ((?x193 (ite $x41 ?x20 (_ bv0 32))))
 (let ((?x8 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1119X (_ bv1 32))))
 (let ((?x230 (ite $x282 ?x8 ?x193)))
 (let ((?x218 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1119X)))
 (let (($x261 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1119X)))
 (=> $x261 (= ?x218 ?x230)))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1118X (_ bv1 32))))
 (let (($x41 (= input.ind-%var1118X (_ bv0 32))))
 (let (($x48 (or $x41 $x282)))
 (let (($x261 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1118X)))
 (= $x261 $x48))))))
 ))
 (let (($x141 (and $x216 $x149)))
 (let (($x104 (= $x141 true)))
 (let (($x50 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x15 (ite $x50 ?x20 (_ bv0 32))))
 (let (($x25 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x13 (ite $x25 ?x8 ?x15)))
 (let (($x248 (= input.spec-%tmpvar-12.L2%17%d.2 ?x13)))
 (let (($x215 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x215 $x248)))
 (let (($x201 (or $x50 $x25)))
 (let ((?x213 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x213 (_ bv1 32))))
 (let (($x211 (= $x215 $x225)))
 (let (($x205 (= ?x213 (_ bv0 32))))
 (let (($x214 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x239 (= $x214 $x205)))
 (let (($x58 (= false false)))
 (let (($x200 (=> $x214 $x58)))
 (let (($x185 (and (and (and $x200 $x239) $x211) $x238)))
 (let (($x156 (= $x185 true)))
 (let (($x153 (= input.spec-%tmpvar-16.L2%25%d.2 ?x36)))
 (let (($x131 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x131 $x153)))
 (let (($x136 (or $x51 $x22)))
 (let ((?x29 (ite $x136 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x29 (_ bv0 32))))
 (let (($x139 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x138 (= $x139 $x143)))
 (let (($x171 (and (and (and (= $x131 (bvuge ?x29 (_ bv1 32))) (=> $x139 $x58)) $x138) $x144)))
 (let (($x172 (= $x171 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x110 (concat ?x5 (concat ?x107 ?x91)))))
 (let (($x129 (= ?x120 input.dst.llvm-%x)))
 (let (($x137 (= $x129 true)))
 (let (($x32 (= $x137 true)))
 (let (($x108 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x126 (= $x108 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x114 (= input.dst.llvm-%x ?x120)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x81 $x84)))
 (let (($x97 (and $x85 $x87)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x71 $x97)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x76)))))))
 (let (($x121 (and (and (and $x80 $x108) $x98) $x114)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x95 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x111 (not $x95)))
 (let (($x117 (= $x111 true)))
 (let (($x90 (= $x117 true)))
 (let (($x112 (= $x90 true)))
 (let (($x100 (and $x80 $x98)))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let (($x119 (and $x92 $x112)))
 (let (($x125 (and $x119 $x124)))
 (let (($x135 (and $x125 $x128)))
 (let (($x130 (and $x135 $x32)))
 (let (($x173 (and $x130 $x172)))
 (let (($x189 (and $x173 $x156)))
 (let (($x196 (and $x189 $x104)))
 (let (($x174 (and $x196 $x226)))
 (let (($x252 (and $x174 $x166)))
 (let (($x262 (and $x252 $x274)))
 (let (($x231 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x262)))
 (let (($x16 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x163 (= input.spec-%tmpvar-10.L2%13%d $x16)))
 (let (($x229 (and $x163 $x231)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x243 (and $x60 $x229)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x150 (and $x10 $x243)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x217 (and $x37 $x150)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x207 (and $x40 $x217)))
 (let (($x9 (= ?x20 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x67 (and $x9 $x207)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x251 (and $x33 $x67)))
 (let (($x44 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x232 (and $x44 $x251)))
 (let (($x28 (= ?x8 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x191 (and $x28 $x232)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x199 (and $x27 $x191)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x223 (and $x63 $x199)))
 (let (($x192 (and $x58 $x223)))
 (let (($x7 (= input.spec-%var-y-0.L2%23%bbentry ?x13)))
 (let (($x228 (and $x7 $x192)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x88 (and $x61 $x228)))
 (let (($x94 (and $x58 $x88)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x36)))
 (let (($x278 (and $x49 $x94)))
 (let (($x270 (=> $x278 $x279)))
 (not $x270)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x13 (ite $x15 ?x31 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x50 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x7 (ite $x50 ?x19 ?x13)))
 (let ((?x177 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x227 (= ?x177 ?x7)))
 (let (($x159 (= $x227 true)))
 (let (($x203 (= $x159 true)))
 (let (($x194 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x149 (= input.ind-%var1237X (_ bv0 32))))
 (let ((?x272 (ite $x149 ?x31 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x74 (= input.ind-%var1237X (_ bv1 32))))
 (let ((?x52 (ite $x74 ?x19 ?x272)))
 (let ((?x258 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1237X)))
 (let (($x265 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1237X)))
 (=> $x265 (= ?x258 ?x52)))))))))))
 ))
 (let (($x187 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x74 (= input.ind-%var1236X (_ bv1 32))))
 (let (($x149 (= input.ind-%var1236X (_ bv0 32))))
 (let (($x141 (or $x149 $x74)))
 (let (($x265 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1236X)))
 (= $x265 $x141))))))
 ))
 (let (($x273 (and $x187 $x194)))
 (let (($x276 (= $x273 true)))
 (let (($x275 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1226X (_ bv0 32))))
 (let (($x223 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1226X)))
 (= $x223 $x149))))
 ))
 (let (($x154 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x149 (= input.ind-%var1227X (_ bv0 32))))
 (let ((?x272 (ite $x149 ?x31 (_ bv0 32))))
 (let ((?x88 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1227X)))
 (let (($x223 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1227X)))
 (=> $x223 (= ?x88 ?x272))))))))
 ))
 (let (($x160 (and $x154 $x275)))
 (let (($x280 (= $x160 true)))
 (let (($x207 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1219X)))
 (=> $x188 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1219X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1218X)))
 (= $x188 false)))
 ))
 (let (($x67 (and $x165 $x207)))
 (let (($x251 (= $x67 true)))
 (let (($x142 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x149 (= input.ind-%var1213X (_ bv0 32))))
 (let ((?x272 (ite $x149 ?x31 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x74 (= input.ind-%var1213X (_ bv1 32))))
 (let ((?x52 (ite $x74 ?x19 ?x272)))
 (let ((?x164 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1213X)))
 (let (($x234 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1213X)))
 (=> $x234 (= ?x164 ?x52)))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x74 (= input.ind-%var1212X (_ bv1 32))))
 (let (($x149 (= input.ind-%var1212X (_ bv0 32))))
 (let (($x141 (or $x149 $x74)))
 (let (($x234 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1212X)))
 (= $x234 $x141))))))
 ))
 (let (($x257 (and $x196 $x142)))
 (let (($x151 (= $x257 true)))
 (let (($x248 (= input.spec-%tmpvar-12.L2%17%d.2 ?x7)))
 (let (($x225 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x225 $x248)))
 (let (($x205 (or $x15 $x50)))
 (let ((?x239 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x239 (_ bv1 32))))
 (let (($x264 (= $x225 $x211)))
 (let (($x249 (= ?x239 (_ bv0 32))))
 (let (($x201 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x215 (= $x201 $x249)))
 (let (($x6 (= false false)))
 (let (($x213 (=> $x201 $x6)))
 (let (($x189 (and (and (and $x213 $x215) $x264) $x238)))
 (let (($x242 (= $x189 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x36 (ite $x51 ?x31 (_ bv0 32))))
 (let (($x34 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x21 (ite $x34 ?x19 ?x36)))
 (let (($x153 (= input.spec-%tmpvar-16.L2%25%d.2 ?x21)))
 (let (($x45 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x45 $x153)))
 (let (($x133 (or $x51 $x34)))
 (let ((?x139 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x139 (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x169 (= $x170 $x138)))
 (let (($x173 (and (and (and (= $x45 (bvuge ?x139 (_ bv1 32))) (=> $x170 $x6)) $x169) $x144)))
 (let (($x184 (= $x173 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x120 (concat ?x91 (concat ?x118 ?x110)))))
 (let (($x130 (= ?x114 input.dst.llvm-%x)))
 (let (($x134 (= $x130 true)))
 (let (($x131 (= $x134 true)))
 (let (($x116 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x135 (= $x116 true)))
 (let (($x129 (= $x135 true)))
 (let (($x137 (= $x129 true)))
 (let (($x121 (= input.dst.llvm-%x ?x114)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x98)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x84 $x87)))
 (let (($x101 (and $x97 $x100)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x38 $x101)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x54)))))))
 (let (($x124 (and (and (and $x83 $x116) $x89) $x121)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x90 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x112 (= $x90 true)))
 (let (($x119 (= $x112 true)))
 (let (($x108 (= $x119 true)))
 (let (($x92 (and $x83 $x89)))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x111 (= $x95 true)))
 (let (($x115 (and $x111 $x108)))
 (let (($x128 (and $x115 $x127)))
 (let (($x32 (and $x128 $x137)))
 (let (($x136 (and $x32 $x131)))
 (let (($x214 (and $x136 $x184)))
 (let (($x261 (and $x214 $x242)))
 (let (($x166 (and $x261 $x151)))
 (let (($x232 (and $x166 $x251)))
 (let (($x281 (and $x232 $x280)))
 (let (($x263 (and $x281 $x276)))
 (let (($x163 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (and true $x163)))
 (let (($x147 (and $x70 $x263)))
 (let (($x195 (= input.spec-%tmpvar-10.L2%13%d $x163)))
 (let (($x148 (and $x195 $x147)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x235 (and $x39 $x148)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x236 (and $x23 $x235)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x176 (and $x62 $x236)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x247 (and $x12 $x176)))
 (let (($x43 (= ?x31 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x256 (and $x43 $x247)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x268 (and $x14 $x256)))
 (let (($x59 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x113 (and $x59 $x268)))
 (let (($x42 (= ?x19 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x180 (and $x42 $x113)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x269 (and $x17 $x180)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x167 (and $x26 $x269)))
 (let (($x182 (and $x6 $x167)))
 (let (($x68 (= input.spec-%var-y-0.L2%23%bbentry ?x7)))
 (let (($x145 (and $x68 $x182)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x253 (and $x11 $x145)))
 (let (($x186 (and $x6 $x253)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x21)))
 (let (($x255 (and $x49 $x186)))
 (let (($x179 (=> $x255 $x203)))
 (not $x179)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x15 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x13 (ite $x15 ?x31 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x50 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x7 (ite $x50 ?x19 ?x13)))
 (let ((?x177 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x227 (= ?x177 ?x7)))
 (let (($x159 (= $x227 true)))
 (let (($x203 (= $x159 true)))
 (let (($x194 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x149 (= input.ind-%var1237X (_ bv0 32))))
 (let ((?x272 (ite $x149 ?x31 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x74 (= input.ind-%var1237X (_ bv1 32))))
 (let ((?x52 (ite $x74 ?x19 ?x272)))
 (let ((?x258 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1237X)))
 (let (($x265 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1237X)))
 (=> $x265 (= ?x258 ?x52)))))))))))
 ))
 (let (($x187 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x74 (= input.ind-%var1236X (_ bv1 32))))
 (let (($x149 (= input.ind-%var1236X (_ bv0 32))))
 (let (($x141 (or $x149 $x74)))
 (let (($x265 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1236X)))
 (= $x265 $x141))))))
 ))
 (let (($x273 (and $x187 $x194)))
 (let (($x276 (= $x273 true)))
 (let (($x275 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1226X (_ bv0 32))))
 (let (($x223 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1226X)))
 (= $x223 $x149))))
 ))
 (let (($x154 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x149 (= input.ind-%var1227X (_ bv0 32))))
 (let ((?x272 (ite $x149 ?x31 (_ bv0 32))))
 (let ((?x88 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1227X)))
 (let (($x223 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1227X)))
 (=> $x223 (= ?x88 ?x272))))))))
 ))
 (let (($x160 (and $x154 $x275)))
 (let (($x280 (= $x160 true)))
 (let (($x207 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1219X)))
 (=> $x188 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1219X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1218X)))
 (= $x188 false)))
 ))
 (let (($x67 (and $x165 $x207)))
 (let (($x251 (= $x67 true)))
 (let (($x142 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let ((?x31 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x149 (= input.ind-%var1213X (_ bv0 32))))
 (let ((?x272 (ite $x149 ?x31 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x74 (= input.ind-%var1213X (_ bv1 32))))
 (let ((?x52 (ite $x74 ?x19 ?x272)))
 (let ((?x164 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1213X)))
 (let (($x234 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1213X)))
 (=> $x234 (= ?x164 ?x52)))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x74 (= input.ind-%var1212X (_ bv1 32))))
 (let (($x149 (= input.ind-%var1212X (_ bv0 32))))
 (let (($x141 (or $x149 $x74)))
 (let (($x234 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1212X)))
 (= $x234 $x141))))))
 ))
 (let (($x257 (and $x196 $x142)))
 (let (($x151 (= $x257 true)))
 (let (($x248 (= input.spec-%tmpvar-12.L2%17%d.2 ?x7)))
 (let (($x225 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x238 (=> $x225 $x248)))
 (let (($x205 (or $x15 $x50)))
 (let ((?x239 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x239 (_ bv1 32))))
 (let (($x264 (= $x225 $x211)))
 (let (($x249 (= ?x239 (_ bv0 32))))
 (let (($x201 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x215 (= $x201 $x249)))
 (let (($x6 (= false false)))
 (let (($x213 (=> $x201 $x6)))
 (let (($x189 (and (and (and $x213 $x215) $x264) $x238)))
 (let (($x242 (= $x189 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x36 (ite $x51 ?x31 (_ bv0 32))))
 (let (($x34 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x21 (ite $x34 ?x19 ?x36)))
 (let (($x153 (= input.spec-%tmpvar-16.L2%25%d.2 ?x21)))
 (let (($x45 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x45 $x153)))
 (let (($x133 (or $x51 $x34)))
 (let ((?x139 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x139 (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x169 (= $x170 $x138)))
 (let (($x173 (and (and (and (= $x45 (bvuge ?x139 (_ bv1 32))) (=> $x170 $x6)) $x169) $x144)))
 (let (($x184 (= $x173 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x120 (concat ?x91 (concat ?x118 ?x110)))))
 (let (($x130 (= ?x114 input.dst.llvm-%x)))
 (let (($x134 (= $x130 true)))
 (let (($x131 (= $x134 true)))
 (let (($x116 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x135 (= $x116 true)))
 (let (($x129 (= $x135 true)))
 (let (($x137 (= $x129 true)))
 (let (($x121 (= input.dst.llvm-%x ?x114)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x98)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x84 $x87)))
 (let (($x101 (and $x97 $x100)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x38 $x101)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x54)))))))
 (let (($x124 (and (and (and $x83 $x116) $x89) $x121)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x90 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x112 (= $x90 true)))
 (let (($x119 (= $x112 true)))
 (let (($x108 (= $x119 true)))
 (let (($x92 (and $x83 $x89)))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x111 (= $x95 true)))
 (let (($x115 (and $x111 $x108)))
 (let (($x128 (and $x115 $x127)))
 (let (($x32 (and $x128 $x137)))
 (let (($x136 (and $x32 $x131)))
 (let (($x214 (and $x136 $x184)))
 (let (($x261 (and $x214 $x242)))
 (let (($x166 (and $x261 $x151)))
 (let (($x232 (and $x166 $x251)))
 (let (($x281 (and $x232 $x280)))
 (let (($x263 (and $x281 $x276)))
 (let (($x163 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (and true $x163)))
 (let (($x147 (and $x70 $x263)))
 (let (($x195 (= input.spec-%tmpvar-10.L2%13%d $x163)))
 (let (($x148 (and $x195 $x147)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x235 (and $x39 $x148)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x236 (and $x23 $x235)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x176 (and $x62 $x236)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x247 (and $x12 $x176)))
 (let (($x43 (= ?x31 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x256 (and $x43 $x247)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x268 (and $x14 $x256)))
 (let (($x59 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x113 (and $x59 $x268)))
 (let (($x42 (= ?x19 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x180 (and $x42 $x113)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x269 (and $x17 $x180)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x167 (and $x26 $x269)))
 (let (($x182 (and $x6 $x167)))
 (let (($x68 (= input.spec-%var-y-0.L2%23%bbentry ?x7)))
 (let (($x145 (and $x68 $x182)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x253 (and $x11 $x145)))
 (let (($x186 (and $x6 $x253)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x21)))
 (let (($x255 (and $x49 $x186)))
 (let (($x179 (=> $x255 $x203)))
 (not $x179)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x19 ?x7)))
 (let ((?x283 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x155 (= ?x283 ?x68)))
 (let (($x240 (= $x155 true)))
 (let (($x241 (= $x240 true)))
 (let (($x158 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var1331X (_ bv0 32))))
 (let ((?x270 (ite $x151 ?x36 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var1331X (_ bv1 32))))
 (let ((?x154 (ite $x257 ?x19 ?x270)))
 (let ((?x252 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1331X)))
 (let (($x41 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1331X)))
 (=> $x41 (= ?x252 ?x154)))))))))))
 ))
 (let (($x282 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1330X (_ bv1 32))))
 (let (($x151 (= input.ind-%var1330X (_ bv0 32))))
 (let (($x166 (or $x151 $x257)))
 (let (($x41 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1330X)))
 (= $x41 $x166))))))
 ))
 (let (($x56 (and $x282 $x158)))
 (let (($x245 (= $x56 true)))
 (let (($x192 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x151 (= input.ind-%var1320X (_ bv0 32))))
 (let (($x145 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1320X)))
 (= $x145 $x151))))
 ))
 (let (($x79 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var1321X (_ bv0 32))))
 (let ((?x270 (ite $x151 ?x36 (_ bv0 32))))
 (let ((?x255 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1321X)))
 (let (($x145 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1321X)))
 (=> $x145 (= ?x255 ?x270))))))))
 ))
 (let (($x94 (and $x79 $x192)))
 (let (($x259 (= $x94 true)))
 (let (($x268 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1313X)))
 (=> $x258 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1313X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1312X)))
 (= $x258 false)))
 ))
 (let (($x113 (and $x273 $x268)))
 (let (($x180 (= $x113 true)))
 (let (($x160 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var1307X (_ bv0 32))))
 (let ((?x270 (ite $x151 ?x36 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var1307X (_ bv1 32))))
 (let ((?x154 (ite $x257 ?x19 ?x270)))
 (let ((?x217 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1307X)))
 (let (($x164 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1307X)))
 (=> $x164 (= ?x217 ?x154)))))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1306X (_ bv1 32))))
 (let (($x151 (= input.ind-%var1306X (_ bv0 32))))
 (let (($x166 (or $x151 $x257)))
 (let (($x164 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1306X)))
 (= $x164 $x166))))))
 ))
 (let (($x280 (and $x250 $x160)))
 (let (($x281 (= $x280 true)))
 (let (($x189 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x156 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x242 (=> $x156 $x189)))
 (let (($x185 (or $x13 $x15)))
 (let ((?x225 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x225 (_ bv1 32))))
 (let (($x248 (= $x156 $x212)))
 (let (($x211 (= ?x225 (_ bv0 32))))
 (let (($x249 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x264 (= $x249 $x211)))
 (let (($x61 (= false false)))
 (let (($x215 (=> $x249 $x61)))
 (let (($x234 (and (and (and $x215 $x264) $x248) $x242)))
 (let (($x149 (= $x234 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x18 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x34 (ite $x18 ?x19 ?x21)))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.2 ?x34)))
 (let (($x170 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x184 (=> $x170 $x173)))
 (let (($x6 (or $x8 $x18)))
 (let ((?x143 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x143 (_ bv0 32))))
 (let (($x169 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x153 (= $x169 $x132)))
 (let (($x201 (and (and (and (= $x170 (bvuge ?x143 (_ bv1 32))) (=> $x169 $x61)) $x153) $x184)))
 (let (($x213 (= $x201 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x109 (concat ?x46 ?x107)))))
 (let (($x45 (= ?x125 input.dst.llvm-%x)))
 (let (($x133 (= $x45 true)))
 (let (($x139 (= $x133 true)))
 (let (($x106 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x134 (= $x106 true)))
 (let (($x131 (= $x134 true)))
 (let (($x136 (= $x131 true)))
 (let (($x126 (= input.dst.llvm-%x ?x125)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x89)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x87 $x100)))
 (let (($x96 (and $x101 $x92)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x69 $x96)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x81)))))))
 (let (($x135 (and (and (and $x86 $x106) $x95) $x126)))
 (let (($x129 (= $x135 true)))
 (let (($x137 (= $x129 true)))
 (let (($x32 (= $x137 true)))
 (let (($x108 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x115 (not $x108)))
 (let (($x116 (= $x115 true)))
 (let (($x122 (= $x116 true)))
 (let (($x123 (= $x122 true)))
 (let (($x111 (and $x86 $x95)))
 (let (($x117 (= $x111 true)))
 (let (($x90 (= $x117 true)))
 (let (($x112 (= $x90 true)))
 (let (($x99 (and $x112 $x123)))
 (let (($x130 (and $x99 $x32)))
 (let (($x29 (and $x130 $x136)))
 (let (($x58 (and $x29 $x139)))
 (let (($x205 (and $x58 $x213)))
 (let (($x74 (and $x205 $x149)))
 (let (($x265 (and $x74 $x281)))
 (let (($x269 (and $x265 $x180)))
 (let (($x224 (and $x269 $x259)))
 (let (($x233 (and $x224 $x245)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x64 (and true $x195)))
 (let (($x226 (and $x64 $x233)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x174 (and $x70 $x226)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x198 (and $x16 $x174)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x140 (and $x60 $x198)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x175 (and $x10 $x140)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x229 (and $x37 $x175)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x146 (and $x35 $x229)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x237 (and $x9 $x146)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x243 (and $x33 $x237)))
 (let (($x44 (= ?x19 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x254 (and $x44 $x243)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x181 (and $x28 $x254)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x199 (and $x27 $x181)))
 (let (($x183 (and $x61 $x199)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x209 (and $x63 $x183)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x206 (and $x25 $x209)))
 (let (($x162 (and $x61 $x206)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x34)))
 (let (($x244 (and $x49 $x162)))
 (let (($x157 (=> $x244 $x241)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x19 ?x7)))
 (let ((?x283 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x155 (= ?x283 ?x68)))
 (let (($x240 (= $x155 true)))
 (let (($x241 (= $x240 true)))
 (let (($x158 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var1331X (_ bv0 32))))
 (let ((?x270 (ite $x151 ?x36 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var1331X (_ bv1 32))))
 (let ((?x154 (ite $x257 ?x19 ?x270)))
 (let ((?x252 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1331X)))
 (let (($x41 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1331X)))
 (=> $x41 (= ?x252 ?x154)))))))))))
 ))
 (let (($x282 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1330X (_ bv1 32))))
 (let (($x151 (= input.ind-%var1330X (_ bv0 32))))
 (let (($x166 (or $x151 $x257)))
 (let (($x41 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1330X)))
 (= $x41 $x166))))))
 ))
 (let (($x56 (and $x282 $x158)))
 (let (($x245 (= $x56 true)))
 (let (($x192 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x151 (= input.ind-%var1320X (_ bv0 32))))
 (let (($x145 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1320X)))
 (= $x145 $x151))))
 ))
 (let (($x79 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var1321X (_ bv0 32))))
 (let ((?x270 (ite $x151 ?x36 (_ bv0 32))))
 (let ((?x255 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1321X)))
 (let (($x145 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1321X)))
 (=> $x145 (= ?x255 ?x270))))))))
 ))
 (let (($x94 (and $x79 $x192)))
 (let (($x259 (= $x94 true)))
 (let (($x268 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1313X)))
 (=> $x258 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1313X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1312X)))
 (= $x258 false)))
 ))
 (let (($x113 (and $x273 $x268)))
 (let (($x180 (= $x113 true)))
 (let (($x160 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var1307X (_ bv0 32))))
 (let ((?x270 (ite $x151 ?x36 (_ bv0 32))))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x257 (= input.ind-%var1307X (_ bv1 32))))
 (let ((?x154 (ite $x257 ?x19 ?x270)))
 (let ((?x217 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1307X)))
 (let (($x164 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1307X)))
 (=> $x164 (= ?x217 ?x154)))))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1306X (_ bv1 32))))
 (let (($x151 (= input.ind-%var1306X (_ bv0 32))))
 (let (($x166 (or $x151 $x257)))
 (let (($x164 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1306X)))
 (= $x164 $x166))))))
 ))
 (let (($x280 (and $x250 $x160)))
 (let (($x281 (= $x280 true)))
 (let (($x189 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x156 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x242 (=> $x156 $x189)))
 (let (($x185 (or $x13 $x15)))
 (let ((?x225 (ite $x185 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x225 (_ bv1 32))))
 (let (($x248 (= $x156 $x212)))
 (let (($x211 (= ?x225 (_ bv0 32))))
 (let (($x249 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x264 (= $x249 $x211)))
 (let (($x61 (= false false)))
 (let (($x215 (=> $x249 $x61)))
 (let (($x234 (and (and (and $x215 $x264) $x248) $x242)))
 (let (($x149 (= $x234 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x18 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x34 (ite $x18 ?x19 ?x21)))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.2 ?x34)))
 (let (($x170 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x184 (=> $x170 $x173)))
 (let (($x6 (or $x8 $x18)))
 (let ((?x143 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x143 (_ bv0 32))))
 (let (($x169 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x153 (= $x169 $x132)))
 (let (($x201 (and (and (and (= $x170 (bvuge ?x143 (_ bv1 32))) (=> $x169 $x61)) $x153) $x184)))
 (let (($x213 (= $x201 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x109 (concat ?x46 ?x107)))))
 (let (($x45 (= ?x125 input.dst.llvm-%x)))
 (let (($x133 (= $x45 true)))
 (let (($x139 (= $x133 true)))
 (let (($x106 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x134 (= $x106 true)))
 (let (($x131 (= $x134 true)))
 (let (($x136 (= $x131 true)))
 (let (($x126 (= input.dst.llvm-%x ?x125)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x89)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x87 $x100)))
 (let (($x96 (and $x101 $x92)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x69 $x96)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x81)))))))
 (let (($x135 (and (and (and $x86 $x106) $x95) $x126)))
 (let (($x129 (= $x135 true)))
 (let (($x137 (= $x129 true)))
 (let (($x32 (= $x137 true)))
 (let (($x108 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x115 (not $x108)))
 (let (($x116 (= $x115 true)))
 (let (($x122 (= $x116 true)))
 (let (($x123 (= $x122 true)))
 (let (($x111 (and $x86 $x95)))
 (let (($x117 (= $x111 true)))
 (let (($x90 (= $x117 true)))
 (let (($x112 (= $x90 true)))
 (let (($x99 (and $x112 $x123)))
 (let (($x130 (and $x99 $x32)))
 (let (($x29 (and $x130 $x136)))
 (let (($x58 (and $x29 $x139)))
 (let (($x205 (and $x58 $x213)))
 (let (($x74 (and $x205 $x149)))
 (let (($x265 (and $x74 $x281)))
 (let (($x269 (and $x265 $x180)))
 (let (($x224 (and $x269 $x259)))
 (let (($x233 (and $x224 $x245)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x64 (and true $x195)))
 (let (($x226 (and $x64 $x233)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x174 (and $x70 $x226)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x198 (and $x16 $x174)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x140 (and $x60 $x198)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x175 (and $x10 $x140)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x229 (and $x37 $x175)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x146 (and $x35 $x229)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x237 (and $x9 $x146)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x243 (and $x33 $x237)))
 (let (($x44 (= ?x19 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x254 (and $x44 $x243)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x181 (and $x28 $x254)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x199 (and $x27 $x181)))
 (let (($x183 (and $x61 $x199)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x209 (and $x63 $x183)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x206 (and $x25 $x209)))
 (let (($x162 (and $x61 $x206)))
 (let (($x49 (= input.spec-%var-y-1.L2%31%bbentry ?x34)))
 (let (($x244 (and $x49 $x162)))
 (let (($x157 (=> $x244 $x241)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x223 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x88 (not $x223)))
 (let (($x208 (or $x223 $x88)))
 (let (($x262 (= $x208 true)))
 (let (($x279 (= $x262 true)))
 (let (($x167 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x234 (= input.ind-%var1425X (_ bv0 32))))
 (let ((?x160 (ite $x234 ?x36 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x242 (= input.ind-%var1425X (_ bv1 32))))
 (let ((?x280 (ite $x242 ?x22 ?x160)))
 (let ((?x177 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1425X)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1425X)))
 (=> $x240 (= ?x177 ?x280)))))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x242 (= input.ind-%var1424X (_ bv1 32))))
 (let (($x234 (= input.ind-%var1424X (_ bv0 32))))
 (let (($x149 (or $x234 $x242)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1424X)))
 (= $x240 $x149))))))
 ))
 (let (($x186 (and $x103 $x167)))
 (let (($x104 (= $x186 true)))
 (let (($x209 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x234 (= input.ind-%var1414X (_ bv0 32))))
 (let (($x158 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1414X)))
 (= $x158 $x234))))
 ))
 (let (($x237 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x234 (= input.ind-%var1415X (_ bv0 32))))
 (let ((?x160 (ite $x234 ?x36 (_ bv0 32))))
 (let ((?x233 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1415X)))
 (let (($x158 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1415X)))
 (=> $x158 (= ?x233 ?x160))))))))
 ))
 (let (($x206 (and $x237 $x209)))
 (let (($x162 (= $x206 true)))
 (let (($x41 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1406X)))
 (= $x268 false)))
 ))
 (let (($x231 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1407X)))
 (=> $x268 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1407X) (_ bv0 32)))))
 ))
 (let (($x228 (and $x231 $x41)))
 (let (($x282 (= $x228 true)))
 (let (($x258 (forall ((input.ind-%var1401X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x234 (= input.ind-%var1401X (_ bv0 32))))
 (let ((?x160 (ite $x234 ?x36 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x242 (= input.ind-%var1401X (_ bv1 32))))
 (let ((?x280 (ite $x242 ?x22 ?x160)))
 (let ((?x166 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1401X)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1401X)))
 (=> $x156 (= ?x166 ?x280)))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let (($x242 (= input.ind-%var1400X (_ bv1 32))))
 (let (($x234 (= input.ind-%var1400X (_ bv0 32))))
 (let (($x149 (or $x234 $x242)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1400X)))
 (= $x156 $x149))))))
 ))
 (let (($x194 (and $x196 $x258)))
 (let (($x273 (= $x194 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x22 ?x7)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x144 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x205 (=> $x144 $x213)))
 (let (($x214 (or $x13 $x15)))
 (let ((?x132 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x132 (_ bv1 32))))
 (let (($x184 (= $x144 $x173)))
 (let (($x153 (= ?x132 (_ bv0 32))))
 (let (($x61 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x200 (= $x61 $x153)))
 (let (($x49 (= false false)))
 (let (($x172 (=> $x61 $x49)))
 (let (($x215 (and (and (and $x172 $x200) $x184) $x205)))
 (let (($x185 (= $x215 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x19 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x18 (ite $x19 ?x22 ?x21)))
 (let (($x58 (= input.spec-%tmpvar-16.L2%25%d.2 ?x18)))
 (let (($x137 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x152 (=> $x137 $x58)))
 (let (($x32 (or $x8 $x19)))
 (let ((?x130 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x130 (_ bv0 32))))
 (let (($x136 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x133 (= $x136 $x45)))
 (let (($x143 (and (and (and (= $x137 (bvuge ?x130 (_ bv1 32))) (=> $x136 $x49)) $x133) $x152)))
 (let (($x171 (= $x143 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x107 (concat ?x109 (concat ?x121 ?x128)))))
 (let (($x114 (= ?x118 input.dst.llvm-%x)))
 (let (($x125 (= $x114 true)))
 (let (($x126 (= $x125 true)))
 (let (($x115 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x116 (= $x115 true)))
 (let (($x122 (= $x116 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x92)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x97 $x101)))
 (let (($x95 (and $x89 $x96)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x85 $x95)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x72)))))))
 (let (($x117 (and $x87 $x111)))
 (let (($x90 (= $x117 true)))
 (let (($x112 (= $x90 true)))
 (let (($x119 (= $x112 true)))
 (let (($x99 (and $x119 $x123)))
 (let (($x135 (and $x99 $x126)))
 (let (($x138 (and $x135 $x171)))
 (let (($x225 (and $x138 $x185)))
 (let (($x148 (and $x225 $x273)))
 (let (($x252 (and $x148 $x282)))
 (let (($x244 (and $x252 $x162)))
 (let (($x216 (and $x244 $x104)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x102 (and $x70 $x216)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x227 (and $x16 $x102)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x161 (and $x60 $x227)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x187 (and $x10 $x161)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x159 (and $x37 $x187)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x278 (and $x35 $x159)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x267 (and $x9 $x278)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x221 (and $x33 $x267)))
 (let (($x44 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x55 (and $x44 $x221)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x197 (and $x28 $x55)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x52 (and $x27 $x197)))
 (let (($x30 (and $x49 $x52)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x142 (and $x63 $x30)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x210 (and $x25 $x142)))
 (let (($x251 (and $x49 $x210)))
 (let (($x34 (= input.spec-%var-y-1.L2%31%bbentry ?x18)))
 (let (($x232 (and $x34 $x251)))
 (let (($x236 (=> $x232 $x279)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x223 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x88 (not $x223)))
 (let (($x208 (or $x223 $x88)))
 (let (($x262 (= $x208 true)))
 (let (($x279 (= $x262 true)))
 (let (($x167 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x234 (= input.ind-%var1425X (_ bv0 32))))
 (let ((?x160 (ite $x234 ?x36 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x242 (= input.ind-%var1425X (_ bv1 32))))
 (let ((?x280 (ite $x242 ?x22 ?x160)))
 (let ((?x177 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1425X)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1425X)))
 (=> $x240 (= ?x177 ?x280)))))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x242 (= input.ind-%var1424X (_ bv1 32))))
 (let (($x234 (= input.ind-%var1424X (_ bv0 32))))
 (let (($x149 (or $x234 $x242)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1424X)))
 (= $x240 $x149))))))
 ))
 (let (($x186 (and $x103 $x167)))
 (let (($x104 (= $x186 true)))
 (let (($x209 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x234 (= input.ind-%var1414X (_ bv0 32))))
 (let (($x158 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1414X)))
 (= $x158 $x234))))
 ))
 (let (($x237 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x234 (= input.ind-%var1415X (_ bv0 32))))
 (let ((?x160 (ite $x234 ?x36 (_ bv0 32))))
 (let ((?x233 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1415X)))
 (let (($x158 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1415X)))
 (=> $x158 (= ?x233 ?x160))))))))
 ))
 (let (($x206 (and $x237 $x209)))
 (let (($x162 (= $x206 true)))
 (let (($x41 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1406X)))
 (= $x268 false)))
 ))
 (let (($x231 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1407X)))
 (=> $x268 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1407X) (_ bv0 32)))))
 ))
 (let (($x228 (and $x231 $x41)))
 (let (($x282 (= $x228 true)))
 (let (($x258 (forall ((input.ind-%var1401X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x234 (= input.ind-%var1401X (_ bv0 32))))
 (let ((?x160 (ite $x234 ?x36 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x242 (= input.ind-%var1401X (_ bv1 32))))
 (let ((?x280 (ite $x242 ?x22 ?x160)))
 (let ((?x166 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1401X)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1401X)))
 (=> $x156 (= ?x166 ?x280)))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let (($x242 (= input.ind-%var1400X (_ bv1 32))))
 (let (($x234 (= input.ind-%var1400X (_ bv0 32))))
 (let (($x149 (or $x234 $x242)))
 (let (($x156 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1400X)))
 (= $x156 $x149))))))
 ))
 (let (($x194 (and $x196 $x258)))
 (let (($x273 (= $x194 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x22 ?x7)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x144 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x205 (=> $x144 $x213)))
 (let (($x214 (or $x13 $x15)))
 (let ((?x132 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x132 (_ bv1 32))))
 (let (($x184 (= $x144 $x173)))
 (let (($x153 (= ?x132 (_ bv0 32))))
 (let (($x61 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x200 (= $x61 $x153)))
 (let (($x49 (= false false)))
 (let (($x172 (=> $x61 $x49)))
 (let (($x215 (and (and (and $x172 $x200) $x184) $x205)))
 (let (($x185 (= $x215 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x19 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x18 (ite $x19 ?x22 ?x21)))
 (let (($x58 (= input.spec-%tmpvar-16.L2%25%d.2 ?x18)))
 (let (($x137 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x152 (=> $x137 $x58)))
 (let (($x32 (or $x8 $x19)))
 (let ((?x130 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x130 (_ bv0 32))))
 (let (($x136 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x133 (= $x136 $x45)))
 (let (($x143 (and (and (and (= $x137 (bvuge ?x130 (_ bv1 32))) (=> $x136 $x49)) $x133) $x152)))
 (let (($x171 (= $x143 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x107 (concat ?x109 (concat ?x121 ?x128)))))
 (let (($x114 (= ?x118 input.dst.llvm-%x)))
 (let (($x125 (= $x114 true)))
 (let (($x126 (= $x125 true)))
 (let (($x115 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x116 (= $x115 true)))
 (let (($x122 (= $x116 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x92)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x97 $x101)))
 (let (($x95 (and $x89 $x96)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x85 $x95)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x72)))))))
 (let (($x117 (and $x87 $x111)))
 (let (($x90 (= $x117 true)))
 (let (($x112 (= $x90 true)))
 (let (($x119 (= $x112 true)))
 (let (($x99 (and $x119 $x123)))
 (let (($x135 (and $x99 $x126)))
 (let (($x138 (and $x135 $x171)))
 (let (($x225 (and $x138 $x185)))
 (let (($x148 (and $x225 $x273)))
 (let (($x252 (and $x148 $x282)))
 (let (($x244 (and $x252 $x162)))
 (let (($x216 (and $x244 $x104)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x102 (and $x70 $x216)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x227 (and $x16 $x102)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x161 (and $x60 $x227)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x187 (and $x10 $x161)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x159 (and $x37 $x187)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x278 (and $x35 $x159)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x267 (and $x9 $x278)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x221 (and $x33 $x267)))
 (let (($x44 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x55 (and $x44 $x221)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x197 (and $x28 $x55)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x52 (and $x27 $x197)))
 (let (($x30 (and $x49 $x52)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x142 (and $x63 $x30)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x210 (and $x25 $x142)))
 (let (($x251 (and $x49 $x210)))
 (let (($x34 (= input.spec-%var-y-1.L2%31%bbentry ?x18)))
 (let (($x232 (and $x34 $x251)))
 (let (($x236 (=> $x232 $x279)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x271 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x235 (not $x271)))
 (let (($x67 (or $x271 $x235)))
 (let (($x77 (not $x67)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x150 (and true $x195)))
 (let (($x165 (not $x195)))
 (let (($x141 (or $x165 $x150)))
 (let (($x263 (or $x141 $x77)))
 (let (($x176 (= $x263 true)))
 (let (($x203 (= $x176 true)))
 (let (($x238 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x258 (= input.ind-%var1519X (_ bv0 32))))
 (let ((?x233 (ite $x258 ?x36 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x265 (= input.ind-%var1519X (_ bv1 32))))
 (let ((?x229 (ite $x265 ?x20 ?x233)))
 (let ((?x174 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1519X)))
 (let (($x257 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1519X)))
 (=> $x257 (= ?x174 ?x229)))))))))))
 ))
 (let (($x245 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x265 (= input.ind-%var1518X (_ bv1 32))))
 (let (($x258 (= input.ind-%var1518X (_ bv0 32))))
 (let (($x194 (or $x258 $x265)))
 (let (($x257 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1518X)))
 (= $x257 $x194))))))
 ))
 (let (($x189 (and $x245 $x238)))
 (let (($x155 (= $x189 true)))
 (let (($x145 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x258 (= input.ind-%var1509X (_ bv0 32))))
 (let ((?x233 (ite $x258 ?x36 (_ bv0 32))))
 (let ((?x279 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1509X)))
 (let (($x30 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1509X)))
 (=> $x30 (= ?x279 ?x233))))))))
 ))
 (let (($x223 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x258 (= input.ind-%var1508X (_ bv0 32))))
 (let (($x30 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1508X)))
 (= $x30 $x258))))
 ))
 (let (($x56 (and $x223 $x145)))
 (let (($x226 (= $x56 true)))
 (let (($x278 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1500X)))
 (= $x207 false)))
 ))
 (let (($x102 (forall ((input.ind-%var1501X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1501X)))
 (=> $x207 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1501X) (_ bv0 32)))))
 ))
 (let (($x267 (and $x102 $x278)))
 (let (($x221 (= $x267 true)))
 (let (($x183 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x258 (= input.ind-%var1495X (_ bv0 32))))
 (let ((?x233 (ite $x258 ?x36 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x265 (= input.ind-%var1495X (_ bv1 32))))
 (let ((?x229 (ite $x265 ?x20 ?x233)))
 (let ((?x79 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1495X)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1495X)))
 (=> $x74 (= ?x79 ?x229)))))))))))
 ))
 (let (($x148 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let (($x265 (= input.ind-%var1494X (_ bv1 32))))
 (let (($x258 (= input.ind-%var1494X (_ bv0 32))))
 (let (($x194 (or $x258 $x265)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1494X)))
 (= $x74 $x194))))))
 ))
 (let (($x209 (and $x148 $x183)))
 (let (($x206 (= $x209 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x20 ?x7)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x173 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x205 (=> $x173 $x213)))
 (let (($x153 (or $x13 $x15)))
 (let ((?x200 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x200 (_ bv1 32))))
 (let (($x249 (= $x173 $x184)))
 (let (($x239 (= ?x200 (_ bv0 32))))
 (let (($x214 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x144 (= $x214 $x239)))
 (let (($x34 (= false false)))
 (let (($x132 (=> $x214 $x34)))
 (let (($x225 (and (and (and $x132 $x144) $x249) $x205)))
 (let (($x261 (= $x225 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x75 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x19 (ite $x75 ?x20 ?x21)))
 (let (($x58 (= input.spec-%tmpvar-16.L2%25%d.2 ?x19)))
 (let (($x134 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x152 (=> $x134 $x58)))
 (let (($x131 (or $x8 $x75)))
 (let ((?x136 (ite $x131 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x136 (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x6 (= $x170 $x133)))
 (let (($x138 (and (and (and (= $x134 (bvuge ?x136 (_ bv1 32))) (=> $x170 $x34)) $x6) $x152)))
 (let (($x169 (= $x138 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x125 (concat ?x91 (concat ?x120 ?x5)))))
 (let (($x135 (= ?x126 input.dst.llvm-%x)))
 (let (($x129 (= $x135 true)))
 (let (($x137 (= $x129 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x123 (= $x122 true)))
 (let (($x99 (= $x123 true)))
 (let (($x106 (= $x99 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x95)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x100 $x92)))
 (let (($x117 (and $x96 $x111)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x71 $x117)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x86)))))))
 (let (($x112 (and $x98 $x90)))
 (let (($x119 (= $x112 true)))
 (let (($x108 (= $x119 true)))
 (let (($x115 (= $x108 true)))
 (let (($x46 (and $x115 $x106)))
 (let (($x32 (and $x46 $x137)))
 (let (($x61 (and $x32 $x169)))
 (let (($x156 (and $x61 $x261)))
 (let (($x162 (and $x156 $x206)))
 (let (($x55 (and $x162 $x221)))
 (let (($x241 (and $x55 $x226)))
 (let (($x217 (and $x241 $x155)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x270 (and $x70 $x217)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x154 (and $x16 $x270)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x105 (and $x60 $x154)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x259 (and $x10 $x105)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x151 (and $x37 $x259)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x275 (and $x35 $x151)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x255 (and $x9 $x275)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x199 (and $x33 $x255)))
 (let (($x44 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x256 (and $x44 $x199)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x204 (and $x28 $x256)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x140 (and $x27 $x204)))
 (let (($x157 (and $x34 $x140)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x230 (and $x63 $x157)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x175 (and $x25 $x230)))
 (let (($x82 (and $x34 $x175)))
 (let (($x18 (= input.spec-%var-y-1.L2%31%bbentry ?x19)))
 (let (($x272 (and $x18 $x82)))
 (let (($x93 (=> $x272 $x203)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x271 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x235 (not $x271)))
 (let (($x67 (or $x271 $x235)))
 (let (($x77 (not $x67)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x150 (and true $x195)))
 (let (($x165 (not $x195)))
 (let (($x141 (or $x165 $x150)))
 (let (($x263 (or $x141 $x77)))
 (let (($x176 (= $x263 true)))
 (let (($x203 (= $x176 true)))
 (let (($x238 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x258 (= input.ind-%var1519X (_ bv0 32))))
 (let ((?x233 (ite $x258 ?x36 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x265 (= input.ind-%var1519X (_ bv1 32))))
 (let ((?x229 (ite $x265 ?x20 ?x233)))
 (let ((?x174 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1519X)))
 (let (($x257 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1519X)))
 (=> $x257 (= ?x174 ?x229)))))))))))
 ))
 (let (($x245 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x265 (= input.ind-%var1518X (_ bv1 32))))
 (let (($x258 (= input.ind-%var1518X (_ bv0 32))))
 (let (($x194 (or $x258 $x265)))
 (let (($x257 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1518X)))
 (= $x257 $x194))))))
 ))
 (let (($x189 (and $x245 $x238)))
 (let (($x155 (= $x189 true)))
 (let (($x145 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x258 (= input.ind-%var1509X (_ bv0 32))))
 (let ((?x233 (ite $x258 ?x36 (_ bv0 32))))
 (let ((?x279 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1509X)))
 (let (($x30 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1509X)))
 (=> $x30 (= ?x279 ?x233))))))))
 ))
 (let (($x223 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x258 (= input.ind-%var1508X (_ bv0 32))))
 (let (($x30 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1508X)))
 (= $x30 $x258))))
 ))
 (let (($x56 (and $x223 $x145)))
 (let (($x226 (= $x56 true)))
 (let (($x278 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1500X)))
 (= $x207 false)))
 ))
 (let (($x102 (forall ((input.ind-%var1501X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1501X)))
 (=> $x207 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1501X) (_ bv0 32)))))
 ))
 (let (($x267 (and $x102 $x278)))
 (let (($x221 (= $x267 true)))
 (let (($x183 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x258 (= input.ind-%var1495X (_ bv0 32))))
 (let ((?x233 (ite $x258 ?x36 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x265 (= input.ind-%var1495X (_ bv1 32))))
 (let ((?x229 (ite $x265 ?x20 ?x233)))
 (let ((?x79 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1495X)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1495X)))
 (=> $x74 (= ?x79 ?x229)))))))))))
 ))
 (let (($x148 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let (($x265 (= input.ind-%var1494X (_ bv1 32))))
 (let (($x258 (= input.ind-%var1494X (_ bv0 32))))
 (let (($x194 (or $x258 $x265)))
 (let (($x74 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1494X)))
 (= $x74 $x194))))))
 ))
 (let (($x209 (and $x148 $x183)))
 (let (($x206 (= $x209 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x20 ?x7)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x173 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x205 (=> $x173 $x213)))
 (let (($x153 (or $x13 $x15)))
 (let ((?x200 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x200 (_ bv1 32))))
 (let (($x249 (= $x173 $x184)))
 (let (($x239 (= ?x200 (_ bv0 32))))
 (let (($x214 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x144 (= $x214 $x239)))
 (let (($x34 (= false false)))
 (let (($x132 (=> $x214 $x34)))
 (let (($x225 (and (and (and $x132 $x144) $x249) $x205)))
 (let (($x261 (= $x225 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x75 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x19 (ite $x75 ?x20 ?x21)))
 (let (($x58 (= input.spec-%tmpvar-16.L2%25%d.2 ?x19)))
 (let (($x134 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x152 (=> $x134 $x58)))
 (let (($x131 (or $x8 $x75)))
 (let ((?x136 (ite $x131 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x136 (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x6 (= $x170 $x133)))
 (let (($x138 (and (and (and (= $x134 (bvuge ?x136 (_ bv1 32))) (=> $x170 $x34)) $x6) $x152)))
 (let (($x169 (= $x138 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x125 (concat ?x91 (concat ?x120 ?x5)))))
 (let (($x135 (= ?x126 input.dst.llvm-%x)))
 (let (($x129 (= $x135 true)))
 (let (($x137 (= $x129 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x123 (= $x122 true)))
 (let (($x99 (= $x123 true)))
 (let (($x106 (= $x99 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x95)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x100 $x92)))
 (let (($x117 (and $x96 $x111)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x71 $x117)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x86)))))))
 (let (($x112 (and $x98 $x90)))
 (let (($x119 (= $x112 true)))
 (let (($x108 (= $x119 true)))
 (let (($x115 (= $x108 true)))
 (let (($x46 (and $x115 $x106)))
 (let (($x32 (and $x46 $x137)))
 (let (($x61 (and $x32 $x169)))
 (let (($x156 (and $x61 $x261)))
 (let (($x162 (and $x156 $x206)))
 (let (($x55 (and $x162 $x221)))
 (let (($x241 (and $x55 $x226)))
 (let (($x217 (and $x241 $x155)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x270 (and $x70 $x217)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x154 (and $x16 $x270)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x105 (and $x60 $x154)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x259 (and $x10 $x105)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x151 (and $x37 $x259)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x275 (and $x35 $x151)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x255 (and $x9 $x275)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x199 (and $x33 $x255)))
 (let (($x44 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x256 (and $x44 $x199)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x204 (and $x28 $x256)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x140 (and $x27 $x204)))
 (let (($x157 (and $x34 $x140)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x230 (and $x63 $x157)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x175 (and $x25 $x230)))
 (let (($x82 (and $x34 $x175)))
 (let (($x18 (= input.spec-%var-y-1.L2%31%bbentry ?x19)))
 (let (($x272 (and $x18 $x82)))
 (let (($x93 (=> $x272 $x203)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x57 (= (_ bv0 32) ?x222)))
 (let (($x168 (= $x57 true)))
 (let (($x277 (= $x168 true)))
 (let (($x251 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x223 (= input.ind-%var1613X (_ bv0 32))))
 (let ((?x189 (ite $x223 ?x36 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x232 (= input.ind-%var1613X (_ bv1 32))))
 (let ((?x155 (ite $x232 ?x64 ?x189)))
 (let ((?x281 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1613X)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1613X)))
 (=> $x219 (= ?x281 ?x155)))))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x232 (= input.ind-%var1612X (_ bv1 32))))
 (let (($x223 (= input.ind-%var1612X (_ bv0 32))))
 (let (($x279 (or $x223 $x232)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1612X)))
 (= $x219 $x279))))))
 ))
 (let (($x240 (and $x52 $x251)))
 (let (($x186 (= $x240 true)))
 (let (($x177 (forall ((input.ind-%var1603X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x223 (= input.ind-%var1603X (_ bv0 32))))
 (let ((?x189 (ite $x223 ?x36 (_ bv0 32))))
 (let ((?x211 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1603X)))
 (let (($x182 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1603X)))
 (=> $x182 (= ?x211 ?x189))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1602X (_ BitVec 32)) )(let (($x223 (= input.ind-%var1602X (_ bv0 32))))
 (let (($x182 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1602X)))
 (= $x182 $x223))))
 ))
 (let (($x88 (and $x103 $x177)))
 (let (($x262 (= $x88 true)))
 (let (($x67 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1594X)))
 (= $x199 false)))
 ))
 (let (($x165 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1595X)))
 (=> $x199 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1595X) (_ bv0 32)))))
 ))
 (let (($x77 (and $x165 $x67)))
 (let (($x263 (= $x77 true)))
 (let (($x154 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x223 (= input.ind-%var1589X (_ bv0 32))))
 (let ((?x189 (ite $x223 ?x36 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x232 (= input.ind-%var1589X (_ bv1 32))))
 (let ((?x155 (ite $x232 ?x64 ?x189)))
 (let ((?x241 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1589X)))
 (let (($x159 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1589X)))
 (=> $x159 (= ?x241 ?x155)))))))))))
 ))
 (let (($x113 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x232 (= input.ind-%var1588X (_ bv1 32))))
 (let (($x223 (= input.ind-%var1588X (_ bv0 32))))
 (let (($x279 (or $x223 $x232)))
 (let (($x159 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1588X)))
 (= $x159 $x279))))))
 ))
 (let (($x105 (and $x113 $x154)))
 (let (($x259 (= $x105 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x64 ?x7)))
 (let (($x237 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x79 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x183 (=> $x79 $x237)))
 (let (($x265 (or $x13 $x15)))
 (let ((?x194 (ite $x265 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x194 (_ bv1 32))))
 (let (($x229 (= $x79 $x233)))
 (let (($x273 (= ?x194 (_ bv0 32))))
 (let (($x74 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x148 (= $x74 $x273)))
 (let (($x18 (= false false)))
 (let (($x258 (=> $x74 $x18)))
 (let (($x162 (and (and (and $x258 $x148) $x229) $x183)))
 (let (($x207 (= $x162 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x75 (ite $x22 ?x64 ?x21)))
 (let (($x185 (= input.spec-%tmpvar-16.L2%25%d.2 ?x75)))
 (let (($x214 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x201 (=> $x214 $x185)))
 (let (($x132 (or $x8 $x22)))
 (let ((?x153 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x153 (_ bv0 32))))
 (let (($x144 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x184 (= $x144 $x173)))
 (let (($x225 (and (and (and (= $x214 (bvuge ?x153 (_ bv1 32))) (=> $x144 $x18)) $x184) $x201)))
 (let (($x261 (= $x225 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x134 (concat ?x137 (concat ?x118 ?x5)))))
 (let (($x152 (= ?x131 input.dst.llvm-%x)))
 (let (($x138 (= $x152 true)))
 (let (($x169 (= $x138 true)))
 (let (($x91 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x6 (= $x91 true)))
 (let (($x171 (= $x6 true)))
 (let (($x139 (= $x171 true)))
 (let (($x136 (= input.dst.llvm-%x ?x131)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x119)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x95 $x90)))
 (let (($x115 (and $x112 $x108)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x72 $x115)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x69)))))))
 (let (($x170 (and (and (and $x96 $x91) $x116) $x136)))
 (let (($x34 (= $x170 true)))
 (let (($x45 (= $x34 true)))
 (let (($x143 (= $x45 true)))
 (let (($x107 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x114 (= $x107 true)))
 (let (($x125 (= $x114 true)))
 (let (($x128 (= $x125 true)))
 (let (($x122 (and $x96 $x116)))
 (let (($x123 (= $x122 true)))
 (let (($x99 (= $x123 true)))
 (let (($x106 (= $x99 true)))
 (let (($x124 (and $x106 $x128)))
 (let (($x133 (and $x124 $x143)))
 (let (($x58 (and $x133 $x139)))
 (let (($x61 (and $x58 $x169)))
 (let (($x156 (and $x61 $x261)))
 (let (($x276 (and $x156 $x207)))
 (let (($x151 (and $x276 $x259)))
 (let (($x176 (and $x151 $x263)))
 (let (($x242 (and $x176 $x262)))
 (let (($x212 (and $x242 $x186)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x48 (and $x97 $x212)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x208 (and $x70 $x48)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x188 (and $x16 $x208)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x247 (and $x60 $x188)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x180 (and $x10 $x247)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x198 (and $x37 $x180)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x253 (and $x35 $x198)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x283 (and $x9 $x253)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x246 (and $x33 $x283)))
 (let (($x44 (= ?x64 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x243 (and $x44 $x246)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x254 (and $x28 $x243)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x178 (and $x27 $x254)))
 (let (($x179 (and $x18 $x178)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x274 (and $x63 $x179)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x191 (and $x25 $x274)))
 (let (($x65 (and $x18 $x191)))
 (let (($x19 (= input.spec-%var-y-1.L2%31%bbentry ?x75)))
 (let (($x260 (and $x19 $x65)))
 (let (($x202 (=> $x260 $x277)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x57 (= (_ bv0 32) ?x222)))
 (let (($x168 (= $x57 true)))
 (let (($x277 (= $x168 true)))
 (let (($x251 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x223 (= input.ind-%var1613X (_ bv0 32))))
 (let ((?x189 (ite $x223 ?x36 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x232 (= input.ind-%var1613X (_ bv1 32))))
 (let ((?x155 (ite $x232 ?x64 ?x189)))
 (let ((?x281 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1613X)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1613X)))
 (=> $x219 (= ?x281 ?x155)))))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x232 (= input.ind-%var1612X (_ bv1 32))))
 (let (($x223 (= input.ind-%var1612X (_ bv0 32))))
 (let (($x279 (or $x223 $x232)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1612X)))
 (= $x219 $x279))))))
 ))
 (let (($x240 (and $x52 $x251)))
 (let (($x186 (= $x240 true)))
 (let (($x177 (forall ((input.ind-%var1603X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x223 (= input.ind-%var1603X (_ bv0 32))))
 (let ((?x189 (ite $x223 ?x36 (_ bv0 32))))
 (let ((?x211 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1603X)))
 (let (($x182 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1603X)))
 (=> $x182 (= ?x211 ?x189))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1602X (_ BitVec 32)) )(let (($x223 (= input.ind-%var1602X (_ bv0 32))))
 (let (($x182 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1602X)))
 (= $x182 $x223))))
 ))
 (let (($x88 (and $x103 $x177)))
 (let (($x262 (= $x88 true)))
 (let (($x67 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1594X)))
 (= $x199 false)))
 ))
 (let (($x165 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1595X)))
 (=> $x199 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1595X) (_ bv0 32)))))
 ))
 (let (($x77 (and $x165 $x67)))
 (let (($x263 (= $x77 true)))
 (let (($x154 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x223 (= input.ind-%var1589X (_ bv0 32))))
 (let ((?x189 (ite $x223 ?x36 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x232 (= input.ind-%var1589X (_ bv1 32))))
 (let ((?x155 (ite $x232 ?x64 ?x189)))
 (let ((?x241 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1589X)))
 (let (($x159 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1589X)))
 (=> $x159 (= ?x241 ?x155)))))))))))
 ))
 (let (($x113 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x232 (= input.ind-%var1588X (_ bv1 32))))
 (let (($x223 (= input.ind-%var1588X (_ bv0 32))))
 (let (($x279 (or $x223 $x232)))
 (let (($x159 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1588X)))
 (= $x159 $x279))))))
 ))
 (let (($x105 (and $x113 $x154)))
 (let (($x259 (= $x105 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x64 ?x7)))
 (let (($x237 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x79 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x183 (=> $x79 $x237)))
 (let (($x265 (or $x13 $x15)))
 (let ((?x194 (ite $x265 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x194 (_ bv1 32))))
 (let (($x229 (= $x79 $x233)))
 (let (($x273 (= ?x194 (_ bv0 32))))
 (let (($x74 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x148 (= $x74 $x273)))
 (let (($x18 (= false false)))
 (let (($x258 (=> $x74 $x18)))
 (let (($x162 (and (and (and $x258 $x148) $x229) $x183)))
 (let (($x207 (= $x162 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x75 (ite $x22 ?x64 ?x21)))
 (let (($x185 (= input.spec-%tmpvar-16.L2%25%d.2 ?x75)))
 (let (($x214 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x201 (=> $x214 $x185)))
 (let (($x132 (or $x8 $x22)))
 (let ((?x153 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x153 (_ bv0 32))))
 (let (($x144 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x184 (= $x144 $x173)))
 (let (($x225 (and (and (and (= $x214 (bvuge ?x153 (_ bv1 32))) (=> $x144 $x18)) $x184) $x201)))
 (let (($x261 (= $x225 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x134 (concat ?x137 (concat ?x118 ?x5)))))
 (let (($x152 (= ?x131 input.dst.llvm-%x)))
 (let (($x138 (= $x152 true)))
 (let (($x169 (= $x138 true)))
 (let (($x91 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x6 (= $x91 true)))
 (let (($x171 (= $x6 true)))
 (let (($x139 (= $x171 true)))
 (let (($x136 (= input.dst.llvm-%x ?x131)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x119)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x95 $x90)))
 (let (($x115 (and $x112 $x108)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x72 $x115)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x69)))))))
 (let (($x170 (and (and (and $x96 $x91) $x116) $x136)))
 (let (($x34 (= $x170 true)))
 (let (($x45 (= $x34 true)))
 (let (($x143 (= $x45 true)))
 (let (($x107 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x114 (= $x107 true)))
 (let (($x125 (= $x114 true)))
 (let (($x128 (= $x125 true)))
 (let (($x122 (and $x96 $x116)))
 (let (($x123 (= $x122 true)))
 (let (($x99 (= $x123 true)))
 (let (($x106 (= $x99 true)))
 (let (($x124 (and $x106 $x128)))
 (let (($x133 (and $x124 $x143)))
 (let (($x58 (and $x133 $x139)))
 (let (($x61 (and $x58 $x169)))
 (let (($x156 (and $x61 $x261)))
 (let (($x276 (and $x156 $x207)))
 (let (($x151 (and $x276 $x259)))
 (let (($x176 (and $x151 $x263)))
 (let (($x242 (and $x176 $x262)))
 (let (($x212 (and $x242 $x186)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x48 (and $x97 $x212)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x208 (and $x70 $x48)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x188 (and $x16 $x208)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x247 (and $x60 $x188)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x180 (and $x10 $x247)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x198 (and $x37 $x180)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x253 (and $x35 $x198)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x283 (and $x9 $x253)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x246 (and $x33 $x283)))
 (let (($x44 (= ?x64 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x243 (and $x44 $x246)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x254 (and $x28 $x243)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x178 (and $x27 $x254)))
 (let (($x179 (and $x18 $x178)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x274 (and $x63 $x179)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x191 (and $x25 $x274)))
 (let (($x65 (and $x18 $x191)))
 (let (($x19 (= input.spec-%var-y-1.L2%31%bbentry ?x75)))
 (let (($x260 (and $x19 $x65)))
 (let (($x202 (=> $x260 $x277)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x252 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x187 (= (_ bv0 32) ?x252)))
 (let (($x166 (= $x187 true)))
 (let (($x269 (= $x166 true)))
 (let (($x30 (forall ((input.ind-%var1707X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= input.ind-%var1707X (_ bv0 32))))
 (let ((?x103 (ite $x105 ?x36 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1707X (_ bv1 32))))
 (let ((?x211 (ite $x154 ?x54 ?x103)))
 (let ((?x150 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1707X)))
 (let (($x104 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1707X)))
 (=> $x104 (= ?x150 ?x211)))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1706X (_ bv1 32))))
 (let (($x105 (= input.ind-%var1706X (_ bv0 32))))
 (let (($x259 (or $x105 $x154)))
 (let (($x104 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1706X)))
 (= $x104 $x259))))))
 ))
 (let (($x210 (and $x216 $x30)))
 (let (($x245 (= $x210 true)))
 (let (($x53 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= input.ind-%var1697X (_ bv0 32))))
 (let ((?x103 (ite $x105 ?x36 (_ bv0 32))))
 (let ((?x202 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1697X)))
 (let (($x179 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1697X)))
 (=> $x179 (= ?x202 ?x103))))))))
 ))
 (let (($x222 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x105 (= input.ind-%var1696X (_ bv0 32))))
 (let (($x179 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1696X)))
 (= $x179 $x105))))
 ))
 (let (($x192 (and $x222 $x53)))
 (let (($x227 (= $x192 true)))
 (let (($x253 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1688X)))
 (= $x52 false)))
 ))
 (let (($x208 (forall ((input.ind-%var1689X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1689X)))
 (=> $x52 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1689X) (_ bv0 32)))))
 ))
 (let (($x283 (and $x208 $x253)))
 (let (($x246 (= $x283 true)))
 (let (($x177 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= input.ind-%var1683X (_ bv0 32))))
 (let ((?x103 (ite $x105 ?x36 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1683X (_ bv1 32))))
 (let ((?x211 (ite $x154 ?x54 ?x103)))
 (let ((?x165 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1683X)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1683X)))
 (=> $x113 (= ?x165 ?x211)))))))))))
 ))
 (let (($x199 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1682X (_ bv1 32))))
 (let (($x105 (= input.ind-%var1682X (_ bv0 32))))
 (let (($x259 (or $x105 $x154)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1682X)))
 (= $x113 $x259))))))
 ))
 (let (($x88 (and $x199 $x177)))
 (let (($x262 (= $x88 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x54 ?x7)))
 (let (($x183 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x229 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x162 (=> $x229 $x183)))
 (let (($x148 (or $x13 $x15)))
 (let ((?x209 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x209 (_ bv1 32))))
 (let (($x146 (= $x229 $x206)))
 (let (($x79 (= ?x209 (_ bv0 32))))
 (let (($x194 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x233 (= $x194 $x79)))
 (let (($x19 (= false false)))
 (let (($x273 (=> $x194 $x19)))
 (let (($x102 (and (and (and $x273 $x233) $x146) $x162)))
 (let (($x159 (= $x102 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x22 (ite $x20 ?x54 ?x21)))
 (let (($x201 (= input.spec-%tmpvar-16.L2%25%d.2 ?x22)))
 (let (($x239 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x225 (=> $x239 $x201)))
 (let (($x144 (or $x8 $x20)))
 (let ((?x18 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x18 (_ bv0 32))))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x249 (= $x173 $x205)))
 (let (($x149 (and (and (and (= $x239 (bvuge ?x18 (_ bv1 32))) (=> $x173 $x19)) $x249) $x225)))
 (let (($x74 (= $x149 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x136 (concat ?x126 (concat ?x137 ?x135)))))
 (let (($x172 (= ?x170 input.dst.llvm-%x)))
 (let (($x214 (= $x172 true)))
 (let (($x132 (= $x214 true)))
 (let (($x109 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x152 (= $x109 true)))
 (let (($x138 (= $x152 true)))
 (let (($x169 (= $x138 true)))
 (let (($x34 (= input.dst.llvm-%x ?x170)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x117 $x119)))
 (let (($x122 (and $x108 $x116)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x87 $x122)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x101)))))))
 (let (($x133 (and (and (and $x111 $x109) $x123) $x34)))
 (let (($x6 (= $x133 true)))
 (let (($x171 (= $x6 true)))
 (let (($x139 (= $x171 true)))
 (let (($x125 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x128 (not $x125)))
 (let (($x124 (= $x128 true)))
 (let (($x91 (= $x124 true)))
 (let (($x49 (= $x91 true)))
 (let (($x99 (and $x111 $x123)))
 (let (($x106 (= $x99 true)))
 (let (($x46 (= $x106 true)))
 (let (($x107 (= $x46 true)))
 (let (($x29 (and $x107 $x49)))
 (let (($x58 (and $x29 $x139)))
 (let (($x61 (and $x58 $x169)))
 (let (($x153 (and $x61 $x132)))
 (let (($x258 (and $x153 $x74)))
 (let (($x223 (and $x258 $x159)))
 (let (($x242 (and $x223 $x262)))
 (let (($x243 (and $x242 $x246)))
 (let (($x164 (and $x243 $x227)))
 (let (($x174 (and $x164 $x245)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x266 (and $x97 $x174)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x248 (and $x70 $x266)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x271 (and $x16 $x248)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x56 (and $x60 $x271)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x238 (and $x10 $x56)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x230 (and $x37 $x238)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x231 (and $x35 $x230)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x255 (and $x9 $x231)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x175 (and $x33 $x255)))
 (let (($x44 (= ?x54 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x234 (and $x44 $x175)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x161 (and $x28 $x234)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x142 (and $x27 $x161)))
 (let (($x160 (and $x19 $x142)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x181 (and $x63 $x160)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x193 (and $x25 $x181)))
 (let (($x228 (and $x19 $x193)))
 (let (($x75 (= input.spec-%var-y-1.L2%31%bbentry ?x22)))
 (let (($x282 (and $x75 $x228)))
 (let (($x264 (=> $x282 $x269)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x252 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x187 (= (_ bv0 32) ?x252)))
 (let (($x166 (= $x187 true)))
 (let (($x269 (= $x166 true)))
 (let (($x30 (forall ((input.ind-%var1707X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= input.ind-%var1707X (_ bv0 32))))
 (let ((?x103 (ite $x105 ?x36 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1707X (_ bv1 32))))
 (let ((?x211 (ite $x154 ?x54 ?x103)))
 (let ((?x150 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1707X)))
 (let (($x104 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1707X)))
 (=> $x104 (= ?x150 ?x211)))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1706X (_ bv1 32))))
 (let (($x105 (= input.ind-%var1706X (_ bv0 32))))
 (let (($x259 (or $x105 $x154)))
 (let (($x104 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1706X)))
 (= $x104 $x259))))))
 ))
 (let (($x210 (and $x216 $x30)))
 (let (($x245 (= $x210 true)))
 (let (($x53 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= input.ind-%var1697X (_ bv0 32))))
 (let ((?x103 (ite $x105 ?x36 (_ bv0 32))))
 (let ((?x202 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1697X)))
 (let (($x179 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1697X)))
 (=> $x179 (= ?x202 ?x103))))))))
 ))
 (let (($x222 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x105 (= input.ind-%var1696X (_ bv0 32))))
 (let (($x179 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1696X)))
 (= $x179 $x105))))
 ))
 (let (($x192 (and $x222 $x53)))
 (let (($x227 (= $x192 true)))
 (let (($x253 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1688X)))
 (= $x52 false)))
 ))
 (let (($x208 (forall ((input.ind-%var1689X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1689X)))
 (=> $x52 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1689X) (_ bv0 32)))))
 ))
 (let (($x283 (and $x208 $x253)))
 (let (($x246 (= $x283 true)))
 (let (($x177 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x105 (= input.ind-%var1683X (_ bv0 32))))
 (let ((?x103 (ite $x105 ?x36 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x154 (= input.ind-%var1683X (_ bv1 32))))
 (let ((?x211 (ite $x154 ?x54 ?x103)))
 (let ((?x165 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1683X)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1683X)))
 (=> $x113 (= ?x165 ?x211)))))))))))
 ))
 (let (($x199 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x154 (= input.ind-%var1682X (_ bv1 32))))
 (let (($x105 (= input.ind-%var1682X (_ bv0 32))))
 (let (($x259 (or $x105 $x154)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1682X)))
 (= $x113 $x259))))))
 ))
 (let (($x88 (and $x199 $x177)))
 (let (($x262 (= $x88 true)))
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x54 ?x7)))
 (let (($x183 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x229 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x162 (=> $x229 $x183)))
 (let (($x148 (or $x13 $x15)))
 (let ((?x209 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x209 (_ bv1 32))))
 (let (($x146 (= $x229 $x206)))
 (let (($x79 (= ?x209 (_ bv0 32))))
 (let (($x194 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x233 (= $x194 $x79)))
 (let (($x19 (= false false)))
 (let (($x273 (=> $x194 $x19)))
 (let (($x102 (and (and (and $x273 $x233) $x146) $x162)))
 (let (($x159 (= $x102 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x22 (ite $x20 ?x54 ?x21)))
 (let (($x201 (= input.spec-%tmpvar-16.L2%25%d.2 ?x22)))
 (let (($x239 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x225 (=> $x239 $x201)))
 (let (($x144 (or $x8 $x20)))
 (let ((?x18 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x18 (_ bv0 32))))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x249 (= $x173 $x205)))
 (let (($x149 (and (and (and (= $x239 (bvuge ?x18 (_ bv1 32))) (=> $x173 $x19)) $x249) $x225)))
 (let (($x74 (= $x149 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x136 (concat ?x126 (concat ?x137 ?x135)))))
 (let (($x172 (= ?x170 input.dst.llvm-%x)))
 (let (($x214 (= $x172 true)))
 (let (($x132 (= $x214 true)))
 (let (($x109 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x152 (= $x109 true)))
 (let (($x138 (= $x152 true)))
 (let (($x169 (= $x138 true)))
 (let (($x34 (= input.dst.llvm-%x ?x170)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x117 $x119)))
 (let (($x122 (and $x108 $x116)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x87 $x122)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x101)))))))
 (let (($x133 (and (and (and $x111 $x109) $x123) $x34)))
 (let (($x6 (= $x133 true)))
 (let (($x171 (= $x6 true)))
 (let (($x139 (= $x171 true)))
 (let (($x125 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x128 (not $x125)))
 (let (($x124 (= $x128 true)))
 (let (($x91 (= $x124 true)))
 (let (($x49 (= $x91 true)))
 (let (($x99 (and $x111 $x123)))
 (let (($x106 (= $x99 true)))
 (let (($x46 (= $x106 true)))
 (let (($x107 (= $x46 true)))
 (let (($x29 (and $x107 $x49)))
 (let (($x58 (and $x29 $x139)))
 (let (($x61 (and $x58 $x169)))
 (let (($x153 (and $x61 $x132)))
 (let (($x258 (and $x153 $x74)))
 (let (($x223 (and $x258 $x159)))
 (let (($x242 (and $x223 $x262)))
 (let (($x243 (and $x242 $x246)))
 (let (($x164 (and $x243 $x227)))
 (let (($x174 (and $x164 $x245)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x266 (and $x97 $x174)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x248 (and $x70 $x266)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x271 (and $x16 $x248)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x56 (and $x60 $x271)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x238 (and $x10 $x56)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x230 (and $x37 $x238)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x231 (and $x35 $x230)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x255 (and $x9 $x231)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x175 (and $x33 $x255)))
 (let (($x44 (= ?x54 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x234 (and $x44 $x175)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x161 (and $x28 $x234)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x142 (and $x27 $x161)))
 (let (($x160 (and $x19 $x142)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x181 (and $x63 $x160)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x193 (and $x25 $x181)))
 (let (($x228 (and $x19 $x193)))
 (let (($x75 (= input.spec-%var-y-1.L2%31%bbentry ?x22)))
 (let (($x282 (and $x75 $x228)))
 (let (($x264 (=> $x282 $x269)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x64 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x64 ?x80 ?x21)))
 (let ((?x204 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x147 (= ?x204 ?x20)))
 (let (($x280 (= $x147 true)))
 (let (($x197 (= $x280 true)))
 (let (($x275 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x103 (= input.ind-%var1801X (_ bv0 32))))
 (let ((?x283 (ite $x103 ?x36 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x165 (= input.ind-%var1801X (_ bv1 32))))
 (let ((?x246 (ite $x165 ?x80 ?x283)))
 (let ((?x277 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1801X)))
 (let (($x190 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1801X)))
 (=> $x190 (= ?x277 ?x246)))))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x165 (= input.ind-%var1800X (_ bv1 32))))
 (let (($x103 (= input.ind-%var1800X (_ bv0 32))))
 (let (($x211 (or $x103 $x165)))
 (let (($x190 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1800X)))
 (= $x190 $x211))))))
 ))
 (let (($x178 (and $x67 $x275)))
 (let (($x73 (= $x178 true)))
 (let (($x241 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x103 (= input.ind-%var1791X (_ bv0 32))))
 (let ((?x283 (ite $x103 ?x36 (_ bv0 32))))
 (let ((?x282 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1791X)))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1791X)))
 (=> $x255 (= ?x282 ?x283))))))))
 ))
 (let (($x160 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x103 (= input.ind-%var1790X (_ bv0 32))))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1790X)))
 (= $x255 $x103))))
 ))
 (let (($x235 (and $x160 $x241)))
 (let (($x134 (= $x235 true)))
 (let (($x248 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1782X)))
 (= $x192 false)))
 ))
 (let (($x30 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1783X)))
 (=> $x192 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x271 (and $x30 $x248)))
 (let (($x56 (= $x271 true)))
 (let (($x260 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x103 (= input.ind-%var1777X (_ bv0 32))))
 (let ((?x283 (ite $x103 ?x36 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x165 (= input.ind-%var1777X (_ bv1 32))))
 (let ((?x246 (ite $x165 ?x80 ?x283)))
 (let ((?x242 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1777X)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1777X)))
 (=> $x113 (= ?x242 ?x246)))))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x165 (= input.ind-%var1776X (_ bv1 32))))
 (let (($x103 (= input.ind-%var1776X (_ bv0 32))))
 (let (($x211 (or $x103 $x165)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1776X)))
 (= $x113 $x211))))))
 ))
 (let (($x222 (and $x244 $x260)))
 (let (($x202 (= $x222 true)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x80 ?x7)))
 (let (($x206 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x79 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x146 (=> $x79 $x206)))
 (let (($x194 (or $x13 $x15)))
 (let ((?x273 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x273 (_ bv1 32))))
 (let (($x207 (= $x79 $x233)))
 (let (($x148 (= ?x273 (_ bv0 32))))
 (let (($x258 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x209 (= $x258 $x148)))
 (let (($x75 (= false false)))
 (let (($x265 (=> $x258 $x75)))
 (let (($x183 (and (and (and $x265 $x209) $x207) $x146)))
 (let (($x162 (= $x183 true)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x200 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x249 (=> $x200 $x205)))
 (let (($x239 (or $x8 $x64)))
 (let ((?x144 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x144 (_ bv0 32))))
 (let (($x213 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x184 (= $x213 $x19)))
 (let (($x201 (and (and (and (= $x200 (bvuge ?x144 (_ bv1 32))) (=> $x213 $x75)) $x184) $x249)))
 (let (($x225 (= $x201 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x137 (concat ?x5 (concat ?x130 ?x45)))))
 (let (($x61 (= ?x135 input.dst.llvm-%x)))
 (let (($x172 (= $x61 true)))
 (let (($x214 (= $x172 true)))
 (let (($x49 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x58 (= $x49 true)))
 (let (($x152 (= $x58 true)))
 (let (($x138 (= $x152 true)))
 (let (($x121 (= input.dst.llvm-%x ?x135)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x108)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x87 $x112)))
 (let (($x116 (and $x119 $x115)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x85 $x116)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x101)))))))
 (let (($x34 (and (and (and $x92 $x49) $x122) $x121)))
 (let (($x133 (= $x34 true)))
 (let (($x6 (= $x133 true)))
 (let (($x171 (= $x6 true)))
 (let (($x114 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x125 (= $x114 true)))
 (let (($x128 (= $x125 true)))
 (let (($x124 (= $x128 true)))
 (let (($x123 (and $x92 $x122)))
 (let (($x99 (= $x123 true)))
 (let (($x106 (= $x99 true)))
 (let (($x46 (= $x106 true)))
 (let (($x91 (and $x46 $x124)))
 (let (($x139 (and $x91 $x171)))
 (let (($x169 (and $x139 $x138)))
 (let (($x132 (and $x169 $x214)))
 (let (($x149 (and $x132 $x225)))
 (let (($x102 (and $x149 $x162)))
 (let (($x256 (and $x102 $x202)))
 (let (($x238 (and $x256 $x56)))
 (let (($x281 (and $x238 $x134)))
 (let (($x189 (and $x281 $x73)))
 (let (($x270 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x189)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x226 (and $x70 $x270)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x77 (and $x16 $x226)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x263 (and $x60 $x77)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x176 (and $x10 $x263)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x182 (and $x37 $x176)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x180 (and $x35 $x182)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x82 (and $x9 $x180)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x110 (and $x33 $x82)))
 (let (($x44 (= ?x80 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x240 (and $x44 $x110)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x65 (and $x28 $x240)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x250 (and $x27 $x65)))
 (let (($x186 (and $x75 $x250)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x257 (and $x63 $x186)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x218 (and $x25 $x257)))
 (let (($x168 (and $x75 $x218)))
 (let (($x22 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x120 (and $x22 $x168)))
 (let (($x66 (=> $x120 $x197)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x64 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x64 ?x80 ?x21)))
 (let ((?x204 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x147 (= ?x204 ?x20)))
 (let (($x280 (= $x147 true)))
 (let (($x197 (= $x280 true)))
 (let (($x275 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x103 (= input.ind-%var1801X (_ bv0 32))))
 (let ((?x283 (ite $x103 ?x36 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x165 (= input.ind-%var1801X (_ bv1 32))))
 (let ((?x246 (ite $x165 ?x80 ?x283)))
 (let ((?x277 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1801X)))
 (let (($x190 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1801X)))
 (=> $x190 (= ?x277 ?x246)))))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x165 (= input.ind-%var1800X (_ bv1 32))))
 (let (($x103 (= input.ind-%var1800X (_ bv0 32))))
 (let (($x211 (or $x103 $x165)))
 (let (($x190 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1800X)))
 (= $x190 $x211))))))
 ))
 (let (($x178 (and $x67 $x275)))
 (let (($x73 (= $x178 true)))
 (let (($x241 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x103 (= input.ind-%var1791X (_ bv0 32))))
 (let ((?x283 (ite $x103 ?x36 (_ bv0 32))))
 (let ((?x282 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1791X)))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1791X)))
 (=> $x255 (= ?x282 ?x283))))))))
 ))
 (let (($x160 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x103 (= input.ind-%var1790X (_ bv0 32))))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1790X)))
 (= $x255 $x103))))
 ))
 (let (($x235 (and $x160 $x241)))
 (let (($x134 (= $x235 true)))
 (let (($x248 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1782X)))
 (= $x192 false)))
 ))
 (let (($x30 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1783X)))
 (=> $x192 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x271 (and $x30 $x248)))
 (let (($x56 (= $x271 true)))
 (let (($x260 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x103 (= input.ind-%var1777X (_ bv0 32))))
 (let ((?x283 (ite $x103 ?x36 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x165 (= input.ind-%var1777X (_ bv1 32))))
 (let ((?x246 (ite $x165 ?x80 ?x283)))
 (let ((?x242 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1777X)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1777X)))
 (=> $x113 (= ?x242 ?x246)))))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x165 (= input.ind-%var1776X (_ bv1 32))))
 (let (($x103 (= input.ind-%var1776X (_ bv0 32))))
 (let (($x211 (or $x103 $x165)))
 (let (($x113 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1776X)))
 (= $x113 $x211))))))
 ))
 (let (($x222 (and $x244 $x260)))
 (let (($x202 (= $x222 true)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x80 ?x7)))
 (let (($x206 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x79 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x146 (=> $x79 $x206)))
 (let (($x194 (or $x13 $x15)))
 (let ((?x273 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x273 (_ bv1 32))))
 (let (($x207 (= $x79 $x233)))
 (let (($x148 (= ?x273 (_ bv0 32))))
 (let (($x258 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x209 (= $x258 $x148)))
 (let (($x75 (= false false)))
 (let (($x265 (=> $x258 $x75)))
 (let (($x183 (and (and (and $x265 $x209) $x207) $x146)))
 (let (($x162 (= $x183 true)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x200 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x249 (=> $x200 $x205)))
 (let (($x239 (or $x8 $x64)))
 (let ((?x144 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x144 (_ bv0 32))))
 (let (($x213 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x184 (= $x213 $x19)))
 (let (($x201 (and (and (and (= $x200 (bvuge ?x144 (_ bv1 32))) (=> $x213 $x75)) $x184) $x249)))
 (let (($x225 (= $x201 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x137 (concat ?x5 (concat ?x130 ?x45)))))
 (let (($x61 (= ?x135 input.dst.llvm-%x)))
 (let (($x172 (= $x61 true)))
 (let (($x214 (= $x172 true)))
 (let (($x49 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x58 (= $x49 true)))
 (let (($x152 (= $x58 true)))
 (let (($x138 (= $x152 true)))
 (let (($x121 (= input.dst.llvm-%x ?x135)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x108)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x87 $x112)))
 (let (($x116 (and $x119 $x115)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x85 $x116)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x101)))))))
 (let (($x34 (and (and (and $x92 $x49) $x122) $x121)))
 (let (($x133 (= $x34 true)))
 (let (($x6 (= $x133 true)))
 (let (($x171 (= $x6 true)))
 (let (($x114 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x125 (= $x114 true)))
 (let (($x128 (= $x125 true)))
 (let (($x124 (= $x128 true)))
 (let (($x123 (and $x92 $x122)))
 (let (($x99 (= $x123 true)))
 (let (($x106 (= $x99 true)))
 (let (($x46 (= $x106 true)))
 (let (($x91 (and $x46 $x124)))
 (let (($x139 (and $x91 $x171)))
 (let (($x169 (and $x139 $x138)))
 (let (($x132 (and $x169 $x214)))
 (let (($x149 (and $x132 $x225)))
 (let (($x102 (and $x149 $x162)))
 (let (($x256 (and $x102 $x202)))
 (let (($x238 (and $x256 $x56)))
 (let (($x281 (and $x238 $x134)))
 (let (($x189 (and $x281 $x73)))
 (let (($x270 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x189)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x226 (and $x70 $x270)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x77 (and $x16 $x226)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x263 (and $x60 $x77)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x176 (and $x10 $x263)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x182 (and $x37 $x176)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x180 (and $x35 $x182)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x82 (and $x9 $x180)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x110 (and $x33 $x82)))
 (let (($x44 (= ?x80 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x240 (and $x44 $x110)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x65 (and $x28 $x240)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x250 (and $x27 $x65)))
 (let (($x186 (and $x75 $x250)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x257 (and $x63 $x186)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x218 (and $x25 $x257)))
 (let (($x168 (and $x75 $x218)))
 (let (($x22 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x120 (and $x22 $x168)))
 (let (($x66 (=> $x120 $x197)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x54 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x64 (ite $x54 ?x86 ?x21)))
 (let ((?x188 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x247 (= ?x188 ?x64)))
 (let (($x158 (= $x247 true)))
 (let (($x278 (= $x158 true)))
 (let (($x151 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x260 (= input.ind-%var1895X (_ bv0 32))))
 (let ((?x142 (ite $x260 ?x36 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x179 (= input.ind-%var1895X (_ bv1 32))))
 (let ((?x160 (ite $x179 ?x86 ?x142)))
 (let ((?x187 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1895X)))
 (let (($x262 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1895X)))
 (=> $x262 (= ?x187 ?x160)))))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x179 (= input.ind-%var1894X (_ bv1 32))))
 (let (($x260 (= input.ind-%var1894X (_ bv0 32))))
 (let (($x222 (or $x260 $x179)))
 (let (($x262 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1894X)))
 (= $x262 $x222))))))
 ))
 (let (($x199 (and $x228 $x151)))
 (let (($x274 (= $x199 true)))
 (let (($x236 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x260 (= input.ind-%var1885X (_ bv0 32))))
 (let ((?x142 (ite $x260 ?x36 (_ bv0 32))))
 (let ((?x197 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1885X)))
 (let (($x250 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1885X)))
 (=> $x250 (= ?x197 ?x142))))))))
 ))
 (let (($x120 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x260 (= input.ind-%var1884X (_ bv0 32))))
 (let (($x250 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1884X)))
 (= $x250 $x260))))
 ))
 (let (($x175 (and $x120 $x236)))
 (let (($x252 (= $x175 true)))
 (let (($x182 (forall ((input.ind-%var1876X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1876X)))
 (= $x155 false)))
 ))
 (let (($x270 (forall ((input.ind-%var1877X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1877X)))
 (=> $x155 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1877X) (_ bv0 32)))))
 ))
 (let (($x180 (and $x270 $x182)))
 (let (($x82 (= $x180 true)))
 (let (($x76 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x260 (= input.ind-%var1871X (_ bv0 32))))
 (let ((?x142 (ite $x260 ?x36 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x179 (= input.ind-%var1871X (_ bv1 32))))
 (let ((?x160 (ite $x179 ?x86 ?x142)))
 (let ((?x55 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1871X)))
 (let (($x224 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1871X)))
 (=> $x224 (= ?x55 ?x160)))))))))))
 ))
 (let (($x256 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x179 (= input.ind-%var1870X (_ bv1 32))))
 (let (($x260 (= input.ind-%var1870X (_ bv0 32))))
 (let (($x222 (or $x260 $x179)))
 (let (($x224 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1870X)))
 (= $x224 $x222))))))
 ))
 (let (($x241 (and $x256 $x76)))
 (let (($x235 (= $x241 true)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x86 ?x7)))
 (let (($x206 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x233 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x146 (=> $x233 $x206)))
 (let (($x148 (or $x13 $x15)))
 (let ((?x209 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x209 (_ bv1 32))))
 (let (($x237 (= $x233 $x207)))
 (let (($x276 (= ?x209 (_ bv0 32))))
 (let (($x194 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x79 (= $x194 $x276)))
 (let (($x22 (= false false)))
 (let (($x273 (=> $x194 $x22)))
 (let (($x102 (and (and (and $x273 $x79) $x237) $x146)))
 (let (($x127 (= $x102 true)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x64)))
 (let (($x18 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x249 (=> $x18 $x205)))
 (let (($x215 (or $x8 $x54)))
 (let ((?x213 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x213 (_ bv0 32))))
 (let (($x156 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x185 (= $x156 $x184)))
 (let (($x149 (and (and (and (= $x18 (bvuge ?x213 (_ bv1 32))) (=> $x156 $x22)) $x185) $x249)))
 (let (($x74 (= $x149 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x135 (concat ?x45 (concat ?x118 ?x137)))))
 (let (($x132 (= ?x121 input.dst.llvm-%x)))
 (let (($x153 (= $x132 true)))
 (let (($x200 (= $x153 true)))
 (let (($x170 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x169 (= $x170 true)))
 (let (($x61 (= $x169 true)))
 (let (($x172 (= $x61 true)))
 (let (($x34 (= input.dst.llvm-%x ?x121)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x117 $x119)))
 (let (($x122 (and $x108 $x116)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x111 $x122)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x171 (and (and (and $x87 $x170) $x123) $x34)))
 (let (($x139 (= $x171 true)))
 (let (($x58 (= $x139 true)))
 (let (($x152 (= $x58 true)))
 (let (($x125 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x128 (not $x125)))
 (let (($x124 (= $x128 true)))
 (let (($x91 (= $x124 true)))
 (let (($x49 (= $x91 true)))
 (let (($x99 (and $x87 $x123)))
 (let (($x106 (= $x99 true)))
 (let (($x46 (= $x106 true)))
 (let (($x107 (= $x46 true)))
 (let (($x32 (and $x107 $x49)))
 (let (($x138 (and $x32 $x152)))
 (let (($x214 (and $x138 $x172)))
 (let (($x239 (and $x214 $x200)))
 (let (($x258 (and $x239 $x74)))
 (let (($x113 (and $x258 $x127)))
 (let (($x134 (and $x113 $x235)))
 (let (($x110 (and $x134 $x82)))
 (let (($x221 (and $x110 $x252)))
 (let (($x212 (and $x221 $x274)))
 (let (($x208 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x212)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x198 (and $x70 $x208)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x174 (and $x16 $x198)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x88 (and $x60 $x174)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x253 (and $x10 $x88)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x216 (and $x37 $x253)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x161 (and $x35 $x216)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x53 (and $x9 $x161)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x150 (and $x33 $x53)))
 (let (($x44 (= ?x86 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x269 (and $x44 $x150)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x141 (and $x28 $x269)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x193 (and $x27 $x141)))
 (let (($x264 (and $x22 $x193)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x272 (and $x63 $x264)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x232 (and $x25 $x272)))
 (let (($x191 (and $x22 $x232)))
 (let (($x20 (= input.spec-%var-y-1.L2%31%bbentry ?x64)))
 (let (($x38 (and $x20 $x191)))
 (let (($x203 (=> $x38 $x278)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x54 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x64 (ite $x54 ?x86 ?x21)))
 (let ((?x188 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x247 (= ?x188 ?x64)))
 (let (($x158 (= $x247 true)))
 (let (($x278 (= $x158 true)))
 (let (($x151 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x260 (= input.ind-%var1895X (_ bv0 32))))
 (let ((?x142 (ite $x260 ?x36 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x179 (= input.ind-%var1895X (_ bv1 32))))
 (let ((?x160 (ite $x179 ?x86 ?x142)))
 (let ((?x187 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1895X)))
 (let (($x262 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1895X)))
 (=> $x262 (= ?x187 ?x160)))))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x179 (= input.ind-%var1894X (_ bv1 32))))
 (let (($x260 (= input.ind-%var1894X (_ bv0 32))))
 (let (($x222 (or $x260 $x179)))
 (let (($x262 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1894X)))
 (= $x262 $x222))))))
 ))
 (let (($x199 (and $x228 $x151)))
 (let (($x274 (= $x199 true)))
 (let (($x236 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x260 (= input.ind-%var1885X (_ bv0 32))))
 (let ((?x142 (ite $x260 ?x36 (_ bv0 32))))
 (let ((?x197 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1885X)))
 (let (($x250 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1885X)))
 (=> $x250 (= ?x197 ?x142))))))))
 ))
 (let (($x120 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x260 (= input.ind-%var1884X (_ bv0 32))))
 (let (($x250 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1884X)))
 (= $x250 $x260))))
 ))
 (let (($x175 (and $x120 $x236)))
 (let (($x252 (= $x175 true)))
 (let (($x182 (forall ((input.ind-%var1876X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1876X)))
 (= $x155 false)))
 ))
 (let (($x270 (forall ((input.ind-%var1877X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1877X)))
 (=> $x155 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1877X) (_ bv0 32)))))
 ))
 (let (($x180 (and $x270 $x182)))
 (let (($x82 (= $x180 true)))
 (let (($x76 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x260 (= input.ind-%var1871X (_ bv0 32))))
 (let ((?x142 (ite $x260 ?x36 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x179 (= input.ind-%var1871X (_ bv1 32))))
 (let ((?x160 (ite $x179 ?x86 ?x142)))
 (let ((?x55 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1871X)))
 (let (($x224 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1871X)))
 (=> $x224 (= ?x55 ?x160)))))))))))
 ))
 (let (($x256 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x179 (= input.ind-%var1870X (_ bv1 32))))
 (let (($x260 (= input.ind-%var1870X (_ bv0 32))))
 (let (($x222 (or $x260 $x179)))
 (let (($x224 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1870X)))
 (= $x224 $x222))))))
 ))
 (let (($x241 (and $x256 $x76)))
 (let (($x235 (= $x241 true)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x86 ?x7)))
 (let (($x206 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x233 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x146 (=> $x233 $x206)))
 (let (($x148 (or $x13 $x15)))
 (let ((?x209 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x209 (_ bv1 32))))
 (let (($x237 (= $x233 $x207)))
 (let (($x276 (= ?x209 (_ bv0 32))))
 (let (($x194 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x79 (= $x194 $x276)))
 (let (($x22 (= false false)))
 (let (($x273 (=> $x194 $x22)))
 (let (($x102 (and (and (and $x273 $x79) $x237) $x146)))
 (let (($x127 (= $x102 true)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x64)))
 (let (($x18 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x249 (=> $x18 $x205)))
 (let (($x215 (or $x8 $x54)))
 (let ((?x213 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x213 (_ bv0 32))))
 (let (($x156 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x185 (= $x156 $x184)))
 (let (($x149 (and (and (and (= $x18 (bvuge ?x213 (_ bv1 32))) (=> $x156 $x22)) $x185) $x249)))
 (let (($x74 (= $x149 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x135 (concat ?x45 (concat ?x118 ?x137)))))
 (let (($x132 (= ?x121 input.dst.llvm-%x)))
 (let (($x153 (= $x132 true)))
 (let (($x200 (= $x153 true)))
 (let (($x170 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x169 (= $x170 true)))
 (let (($x61 (= $x169 true)))
 (let (($x172 (= $x61 true)))
 (let (($x34 (= input.dst.llvm-%x ?x121)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x117 $x119)))
 (let (($x122 (and $x108 $x116)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x111 $x122)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x171 (and (and (and $x87 $x170) $x123) $x34)))
 (let (($x139 (= $x171 true)))
 (let (($x58 (= $x139 true)))
 (let (($x152 (= $x58 true)))
 (let (($x125 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x128 (not $x125)))
 (let (($x124 (= $x128 true)))
 (let (($x91 (= $x124 true)))
 (let (($x49 (= $x91 true)))
 (let (($x99 (and $x87 $x123)))
 (let (($x106 (= $x99 true)))
 (let (($x46 (= $x106 true)))
 (let (($x107 (= $x46 true)))
 (let (($x32 (and $x107 $x49)))
 (let (($x138 (and $x32 $x152)))
 (let (($x214 (and $x138 $x172)))
 (let (($x239 (and $x214 $x200)))
 (let (($x258 (and $x239 $x74)))
 (let (($x113 (and $x258 $x127)))
 (let (($x134 (and $x113 $x235)))
 (let (($x110 (and $x134 $x82)))
 (let (($x221 (and $x110 $x252)))
 (let (($x212 (and $x221 $x274)))
 (let (($x208 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x212)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x198 (and $x70 $x208)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x174 (and $x16 $x198)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x88 (and $x60 $x174)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x253 (and $x10 $x88)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x216 (and $x37 $x253)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x161 (and $x35 $x216)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x53 (and $x9 $x161)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x150 (and $x33 $x53)))
 (let (($x44 (= ?x86 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x269 (and $x44 $x150)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x141 (and $x28 $x269)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x193 (and $x27 $x141)))
 (let (($x264 (and $x22 $x193)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x272 (and $x63 $x264)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x232 (and $x25 $x272)))
 (let (($x191 (and $x22 $x232)))
 (let (($x20 (= input.spec-%var-y-1.L2%31%bbentry ?x64)))
 (let (($x38 (and $x20 $x191)))
 (let (($x203 (=> $x38 $x278)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x81 ?x7)))
 (let ((?x166 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x57 (= ?x166 ?x68)))
 (let (($x251 (= $x57 true)))
 (let (($x140 (= $x251 true)))
 (let (($x242 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x220 (= input.ind-%var1989X (_ bv0 32))))
 (let ((?x250 (ite $x220 ?x36 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1989X (_ bv1 32))))
 (let ((?x168 (ite $x282 ?x81 ?x250)))
 (let ((?x257 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1989X)))
 (let (($x192 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1989X)))
 (=> $x192 (= ?x257 ?x168)))))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1988X (_ bv1 32))))
 (let (($x220 (= input.ind-%var1988X (_ bv0 32))))
 (let (($x76 (or $x220 $x282)))
 (let (($x192 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1988X)))
 (= $x192 $x76))))))
 ))
 (let (($x246 (and $x204 $x242)))
 (let (($x243 (= $x246 true)))
 (let (($x67 (forall ((input.ind-%var1979X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x220 (= input.ind-%var1979X (_ bv0 32))))
 (let ((?x250 (ite $x220 ?x36 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1979X)))
 (let (($x141 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1979X)))
 (=> $x141 (= ?x158 ?x250))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let (($x220 (= input.ind-%var1978X (_ bv0 32))))
 (let (($x141 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1978X)))
 (= $x141 $x220))))
 ))
 (let (($x145 (and $x191 $x67)))
 (let (($x186 (= $x145 true)))
 (let (($x253 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1970X)))
 (= $x262 false)))
 ))
 (let (($x212 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1971X)))
 (=> $x262 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x216 (and $x212 $x253)))
 (let (($x161 (= $x216 true)))
 (let (($x109 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x220 (= input.ind-%var1965X (_ bv0 32))))
 (let ((?x250 (ite $x220 ?x36 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1965X (_ bv1 32))))
 (let ((?x168 (ite $x282 ?x81 ?x250)))
 (let ((?x73 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1965X)))
 (let (($x222 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1965X)))
 (=> $x222 (= ?x73 ?x168)))))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1964X (_ bv1 32))))
 (let (($x220 (= input.ind-%var1964X (_ bv0 32))))
 (let (($x76 (or $x220 $x282)))
 (let (($x222 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1964X)))
 (= $x222 $x76))))))
 ))
 (let (($x227 (and $x235 $x109)))
 (let (($x236 (= $x227 true)))
 (let (($x229 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x233 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x206 (=> $x233 $x229)))
 (let (($x209 (or $x13 $x15)))
 (let ((?x276 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x276 (_ bv1 32))))
 (let (($x237 (= $x233 $x207)))
 (let (($x79 (= ?x276 (_ bv0 32))))
 (let (($x273 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x183 (= $x273 $x79)))
 (let (($x20 (= false false)))
 (let (($x148 (=> $x273 $x20)))
 (let (($x127 (and (and (and $x148 $x183) $x237) $x206)))
 (let (($x113 (= $x127 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x80 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x54 (ite $x80 ?x81 ?x21)))
 (let (($x261 (= input.spec-%tmpvar-16.L2%25%d.2 ?x54)))
 (let (($x213 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x205 (=> $x213 $x261)))
 (let (($x75 (or $x8 $x80)))
 (let ((?x173 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (let (($x19 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x185 (= $x19 $x184)))
 (let (($x74 (and (and (and (= $x213 (bvuge ?x173 (_ bv1 32))) (=> $x19 $x20)) $x185) $x205)))
 (let (($x258 (= $x74 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x131 (concat ?x118 (concat ?x143 ?x126)))))
 (let (($x200 (= ?x121 input.dst.llvm-%x)))
 (let (($x239 (= $x200 true)))
 (let (($x144 (= $x239 true)))
 (let (($x133 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x172 (= $x133 true)))
 (let (($x214 (= $x172 true)))
 (let (($x132 (= $x214 true)))
 (let (($x34 (= input.dst.llvm-%x ?x121)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x122)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x112 $x115)))
 (let (($x99 (and $x116 $x123)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x69 $x99)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x92)))))))
 (let (($x58 (and (and (and $x90 $x133) $x106) $x34)))
 (let (($x152 (= $x58 true)))
 (let (($x138 (= $x152 true)))
 (let (($x169 (= $x138 true)))
 (let (($x124 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x91 (= $x124 true)))
 (let (($x49 (= $x91 true)))
 (let (($x32 (= $x49 true)))
 (let (($x46 (and $x90 $x106)))
 (let (($x107 (= $x46 true)))
 (let (($x114 (= $x107 true)))
 (let (($x125 (= $x114 true)))
 (let (($x170 (and $x125 $x32)))
 (let (($x61 (and $x170 $x169)))
 (let (($x153 (and $x61 $x132)))
 (let (($x18 (and $x153 $x144)))
 (let (($x265 (and $x18 $x258)))
 (let (($x211 (and $x265 $x113)))
 (let (($x175 (and $x211 $x236)))
 (let (($x53 (and $x175 $x161)))
 (let (($x66 (and $x53 $x186)))
 (let (($x177 (and $x66 $x243)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (and true $x195)))
 (let (($x248 (and $x48 $x177)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x271 (and $x70 $x248)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x56 (and $x16 $x271)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x238 (and $x60 $x56)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x263 (and $x10 $x238)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x104 (and $x37 $x263)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x255 (and $x35 $x104)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x275 (and $x9 $x255)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x218 (and $x33 $x275)))
 (let (($x44 (= ?x81 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x190 (and $x44 $x218)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x178 (and $x28 $x190)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x105 (and $x27 $x178)))
 (let (($x259 (and $x20 $x105)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x147 (and $x63 $x259)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x52 (and $x25 $x147)))
 (let (($x157 (and $x20 $x52)))
 (let (($x64 (= input.spec-%var-y-1.L2%31%bbentry ?x54)))
 (let (($x164 (and $x64 $x157)))
 (let (($x230 (=> $x164 $x140)))
 (not $x230)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x81 ?x7)))
 (let ((?x166 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x57 (= ?x166 ?x68)))
 (let (($x251 (= $x57 true)))
 (let (($x140 (= $x251 true)))
 (let (($x242 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x220 (= input.ind-%var1989X (_ bv0 32))))
 (let ((?x250 (ite $x220 ?x36 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1989X (_ bv1 32))))
 (let ((?x168 (ite $x282 ?x81 ?x250)))
 (let ((?x257 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1989X)))
 (let (($x192 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1989X)))
 (=> $x192 (= ?x257 ?x168)))))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1988X (_ bv1 32))))
 (let (($x220 (= input.ind-%var1988X (_ bv0 32))))
 (let (($x76 (or $x220 $x282)))
 (let (($x192 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1988X)))
 (= $x192 $x76))))))
 ))
 (let (($x246 (and $x204 $x242)))
 (let (($x243 (= $x246 true)))
 (let (($x67 (forall ((input.ind-%var1979X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x220 (= input.ind-%var1979X (_ bv0 32))))
 (let ((?x250 (ite $x220 ?x36 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1979X)))
 (let (($x141 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1979X)))
 (=> $x141 (= ?x158 ?x250))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let (($x220 (= input.ind-%var1978X (_ bv0 32))))
 (let (($x141 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1978X)))
 (= $x141 $x220))))
 ))
 (let (($x145 (and $x191 $x67)))
 (let (($x186 (= $x145 true)))
 (let (($x253 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1970X)))
 (= $x262 false)))
 ))
 (let (($x212 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1971X)))
 (=> $x262 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x216 (and $x212 $x253)))
 (let (($x161 (= $x216 true)))
 (let (($x109 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x220 (= input.ind-%var1965X (_ bv0 32))))
 (let ((?x250 (ite $x220 ?x36 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x282 (= input.ind-%var1965X (_ bv1 32))))
 (let ((?x168 (ite $x282 ?x81 ?x250)))
 (let ((?x73 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1965X)))
 (let (($x222 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1965X)))
 (=> $x222 (= ?x73 ?x168)))))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x282 (= input.ind-%var1964X (_ bv1 32))))
 (let (($x220 (= input.ind-%var1964X (_ bv0 32))))
 (let (($x76 (or $x220 $x282)))
 (let (($x222 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1964X)))
 (= $x222 $x76))))))
 ))
 (let (($x227 (and $x235 $x109)))
 (let (($x236 (= $x227 true)))
 (let (($x229 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x233 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x206 (=> $x233 $x229)))
 (let (($x209 (or $x13 $x15)))
 (let ((?x276 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x276 (_ bv1 32))))
 (let (($x237 (= $x233 $x207)))
 (let (($x79 (= ?x276 (_ bv0 32))))
 (let (($x273 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x183 (= $x273 $x79)))
 (let (($x20 (= false false)))
 (let (($x148 (=> $x273 $x20)))
 (let (($x127 (and (and (and $x148 $x183) $x237) $x206)))
 (let (($x113 (= $x127 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x80 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x54 (ite $x80 ?x81 ?x21)))
 (let (($x261 (= input.spec-%tmpvar-16.L2%25%d.2 ?x54)))
 (let (($x213 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x205 (=> $x213 $x261)))
 (let (($x75 (or $x8 $x80)))
 (let ((?x173 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (let (($x19 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x185 (= $x19 $x184)))
 (let (($x74 (and (and (and (= $x213 (bvuge ?x173 (_ bv1 32))) (=> $x19 $x20)) $x185) $x205)))
 (let (($x258 (= $x74 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x131 (concat ?x118 (concat ?x143 ?x126)))))
 (let (($x200 (= ?x121 input.dst.llvm-%x)))
 (let (($x239 (= $x200 true)))
 (let (($x144 (= $x239 true)))
 (let (($x133 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x172 (= $x133 true)))
 (let (($x214 (= $x172 true)))
 (let (($x132 (= $x214 true)))
 (let (($x34 (= input.dst.llvm-%x ?x121)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x122)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x112 $x115)))
 (let (($x99 (and $x116 $x123)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x69 $x99)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x92)))))))
 (let (($x58 (and (and (and $x90 $x133) $x106) $x34)))
 (let (($x152 (= $x58 true)))
 (let (($x138 (= $x152 true)))
 (let (($x169 (= $x138 true)))
 (let (($x124 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x91 (= $x124 true)))
 (let (($x49 (= $x91 true)))
 (let (($x32 (= $x49 true)))
 (let (($x46 (and $x90 $x106)))
 (let (($x107 (= $x46 true)))
 (let (($x114 (= $x107 true)))
 (let (($x125 (= $x114 true)))
 (let (($x170 (and $x125 $x32)))
 (let (($x61 (and $x170 $x169)))
 (let (($x153 (and $x61 $x132)))
 (let (($x18 (and $x153 $x144)))
 (let (($x265 (and $x18 $x258)))
 (let (($x211 (and $x265 $x113)))
 (let (($x175 (and $x211 $x236)))
 (let (($x53 (and $x175 $x161)))
 (let (($x66 (and $x53 $x186)))
 (let (($x177 (and $x66 $x243)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (and true $x195)))
 (let (($x248 (and $x48 $x177)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x271 (and $x70 $x248)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x56 (and $x16 $x271)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x238 (and $x60 $x56)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x263 (and $x10 $x238)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x104 (and $x37 $x263)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x255 (and $x35 $x104)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x275 (and $x9 $x255)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x218 (and $x33 $x275)))
 (let (($x44 (= ?x81 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x190 (and $x44 $x218)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x178 (and $x28 $x190)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x105 (and $x27 $x178)))
 (let (($x259 (and $x20 $x105)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x147 (and $x63 $x259)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x52 (and $x25 $x147)))
 (let (($x157 (and $x20 $x52)))
 (let (($x64 (= input.spec-%var-y-1.L2%31%bbentry ?x54)))
 (let (($x164 (and $x64 $x157)))
 (let (($x230 (=> $x164 $x140)))
 (not $x230)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x217 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x217 ?x7)))
 (let ((?x234 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x279 (= ?x234 ?x68)))
 (let (($x165 (= $x279 true)))
 (let (($x167 (= $x165 true)))
 (let (($x160 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x227 (= input.ind-%var2083X (_ bv0 32))))
 (let ((?x191 (ite $x227 ?x36 (_ bv0 32))))
 (let ((?x217 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var2083X (_ bv1 32))))
 (let ((?x158 (ite $x109 ?x217 ?x191)))
 (let ((?x208 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2083X)))
 (let (($x224 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2083X)))
 (=> $x224 (= ?x208 ?x158)))))))))))
 ))
 (let (($x260 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x109 (= input.ind-%var2082X (_ bv1 32))))
 (let (($x227 (= input.ind-%var2082X (_ bv0 32))))
 (let (($x236 (or $x227 $x109)))
 (let (($x224 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2082X)))
 (= $x224 $x236))))))
 ))
 (let (($x210 (and $x260 $x160)))
 (let (($x176 (= $x210 true)))
 (let (($x193 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x227 (= input.ind-%var2073X (_ bv0 32))))
 (let ((?x191 (ite $x227 ?x36 (_ bv0 32))))
 (let ((?x230 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2073X)))
 (let (($x259 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2073X)))
 (=> $x259 (= ?x230 ?x191))))))))
 ))
 (let (($x166 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x227 (= input.ind-%var2072X (_ bv0 32))))
 (let (($x259 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2072X)))
 (= $x259 $x227))))
 ))
 (let (($x278 (and $x166 $x193)))
 (let (($x267 (= $x278 true)))
 (let (($x255 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2064X)))
 (= $x204 false)))
 ))
 (let (($x271 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2065X)))
 (=> $x204 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2065X) (_ bv0 32)))))
 ))
 (let (($x275 (and $x271 $x255)))
 (let (($x218 (= $x275 true)))
 (let (($x67 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x227 (= input.ind-%var2059X (_ bv0 32))))
 (let ((?x191 (ite $x227 ?x36 (_ bv0 32))))
 (let ((?x217 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var2059X (_ bv1 32))))
 (let ((?x158 (ite $x109 ?x217 ?x191)))
 (let ((?x212 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2059X)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2059X)))
 (=> $x235 (= ?x212 ?x158)))))))))))
 ))
 (let (($x262 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x109 (= input.ind-%var2058X (_ bv1 32))))
 (let (($x227 (= input.ind-%var2058X (_ bv0 32))))
 (let (($x236 (or $x227 $x109)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2058X)))
 (= $x235 $x236))))))
 ))
 (let (($x145 (and $x262 $x67)))
 (let (($x186 (= $x145 true)))
 (let (($x206 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x237 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x127 (=> $x237 $x206)))
 (let (($x183 (or $x13 $x15)))
 (let ((?x146 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x146 (_ bv1 32))))
 (let (($x162 (= $x237 $x102)))
 (let (($x233 (= ?x146 (_ bv0 32))))
 (let (($x276 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x207 (= $x276 $x233)))
 (let (($x64 (= false false)))
 (let (($x79 (=> $x276 $x64)))
 (let (($x179 (and (and (and $x79 $x207) $x162) $x127)))
 (let (($x222 (= $x179 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x80 (ite $x86 ?x217 ?x21)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x80)))
 (let (($x22 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x74 (=> $x22 $x205)))
 (let (($x19 (or $x8 $x86)))
 (let ((?x20 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x20 (_ bv0 32))))
 (let (($x184 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x225 (= $x184 $x149)))
 (let (($x194 (and (and (and (= $x22 (bvuge ?x20 (_ bv1 32))) (=> $x184 $x64)) $x225) $x74)))
 (let (($x273 (= $x194 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x34 (concat ?x130 (concat ?x118 ?x45)))))
 (let (($x215 (= ?x58 input.dst.llvm-%x)))
 (let (($x213 (= $x215 true)))
 (let (($x75 (= $x213 true)))
 (let (($x6 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x200 (= $x6 true)))
 (let (($x239 (= $x200 true)))
 (let (($x144 (= $x239 true)))
 (let (($x152 (= input.dst.llvm-%x ?x58)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x99)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x108 $x122)))
 (let (($x46 (and $x123 $x106)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x71 $x46)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x95)))))))
 (let (($x61 (and (and (and $x119 $x6) $x107) $x152)))
 (let (($x172 (= $x61 true)))
 (let (($x214 (= $x172 true)))
 (let (($x132 (= $x214 true)))
 (let (($x49 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x32 (not $x49)))
 (let (($x170 (= $x32 true)))
 (let (($x133 (= $x170 true)))
 (let (($x171 (= $x133 true)))
 (let (($x114 (and $x119 $x107)))
 (let (($x125 (= $x114 true)))
 (let (($x128 (= $x125 true)))
 (let (($x124 (= $x128 true)))
 (let (($x139 (and $x124 $x171)))
 (let (($x153 (and $x139 $x132)))
 (let (($x18 (and $x153 $x144)))
 (let (($x173 (and $x18 $x75)))
 (let (($x148 (and $x173 $x273)))
 (let (($x220 (and $x148 $x222)))
 (let (($x66 (and $x220 $x186)))
 (let (($x190 (and $x66 $x218)))
 (let (($x93 (and $x190 $x267)))
 (let (($x182 (and $x93 $x176)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (and true $x195)))
 (let (($x180 (and $x48 $x182)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x82 (and $x70 $x180)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x174 (and $x16 $x82)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x155 (and $x60 $x174)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x110 (and $x10 $x155)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x154 (and $x37 $x110)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x272 (and $x35 $x154)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x221 (and $x9 $x272)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x151 (and $x33 $x221)))
 (let (($x44 (= ?x217 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x98 (and $x44 $x151)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x103 (and $x28 $x98)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x188 (and $x27 $x103)))
 (let (($x244 (and $x64 $x188)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x266 (and $x63 $x244)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x281 (and $x25 $x266)))
 (let (($x77 (and $x64 $x281)))
 (let (($x54 (= input.spec-%var-y-1.L2%31%bbentry ?x80)))
 (let (($x83 (and $x54 $x77)))
 (let (($x223 (=> $x83 $x167)))
 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x7 (ite $x13 ?x36 (_ bv0 32))))
 (let ((?x217 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x68 (ite $x15 ?x217 ?x7)))
 (let ((?x234 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x279 (= ?x234 ?x68)))
 (let (($x165 (= $x279 true)))
 (let (($x167 (= $x165 true)))
 (let (($x160 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x227 (= input.ind-%var2083X (_ bv0 32))))
 (let ((?x191 (ite $x227 ?x36 (_ bv0 32))))
 (let ((?x217 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var2083X (_ bv1 32))))
 (let ((?x158 (ite $x109 ?x217 ?x191)))
 (let ((?x208 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2083X)))
 (let (($x224 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2083X)))
 (=> $x224 (= ?x208 ?x158)))))))))))
 ))
 (let (($x260 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x109 (= input.ind-%var2082X (_ bv1 32))))
 (let (($x227 (= input.ind-%var2082X (_ bv0 32))))
 (let (($x236 (or $x227 $x109)))
 (let (($x224 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2082X)))
 (= $x224 $x236))))))
 ))
 (let (($x210 (and $x260 $x160)))
 (let (($x176 (= $x210 true)))
 (let (($x193 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x227 (= input.ind-%var2073X (_ bv0 32))))
 (let ((?x191 (ite $x227 ?x36 (_ bv0 32))))
 (let ((?x230 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2073X)))
 (let (($x259 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2073X)))
 (=> $x259 (= ?x230 ?x191))))))))
 ))
 (let (($x166 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x227 (= input.ind-%var2072X (_ bv0 32))))
 (let (($x259 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2072X)))
 (= $x259 $x227))))
 ))
 (let (($x278 (and $x166 $x193)))
 (let (($x267 (= $x278 true)))
 (let (($x255 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2064X)))
 (= $x204 false)))
 ))
 (let (($x271 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2065X)))
 (=> $x204 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2065X) (_ bv0 32)))))
 ))
 (let (($x275 (and $x271 $x255)))
 (let (($x218 (= $x275 true)))
 (let (($x67 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x36 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x227 (= input.ind-%var2059X (_ bv0 32))))
 (let ((?x191 (ite $x227 ?x36 (_ bv0 32))))
 (let ((?x217 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var2059X (_ bv1 32))))
 (let ((?x158 (ite $x109 ?x217 ?x191)))
 (let ((?x212 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2059X)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2059X)))
 (=> $x235 (= ?x212 ?x158)))))))))))
 ))
 (let (($x262 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x109 (= input.ind-%var2058X (_ bv1 32))))
 (let (($x227 (= input.ind-%var2058X (_ bv0 32))))
 (let (($x236 (or $x227 $x109)))
 (let (($x235 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2058X)))
 (= $x235 $x236))))))
 ))
 (let (($x145 (and $x262 $x67)))
 (let (($x186 (= $x145 true)))
 (let (($x206 (= input.spec-%tmpvar-12.L2%17%d.2 ?x68)))
 (let (($x237 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x127 (=> $x237 $x206)))
 (let (($x183 (or $x13 $x15)))
 (let ((?x146 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x146 (_ bv1 32))))
 (let (($x162 (= $x237 $x102)))
 (let (($x233 (= ?x146 (_ bv0 32))))
 (let (($x276 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x207 (= $x276 $x233)))
 (let (($x64 (= false false)))
 (let (($x79 (=> $x276 $x64)))
 (let (($x179 (and (and (and $x79 $x207) $x162) $x127)))
 (let (($x222 (= $x179 true)))
 (let (($x8 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite $x8 ?x36 (_ bv0 32))))
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x80 (ite $x86 ?x217 ?x21)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x80)))
 (let (($x22 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x74 (=> $x22 $x205)))
 (let (($x19 (or $x8 $x86)))
 (let ((?x20 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x20 (_ bv0 32))))
 (let (($x184 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x225 (= $x184 $x149)))
 (let (($x194 (and (and (and (= $x22 (bvuge ?x20 (_ bv1 32))) (=> $x184 $x64)) $x225) $x74)))
 (let (($x273 (= $x194 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x34 (concat ?x130 (concat ?x118 ?x45)))))
 (let (($x215 (= ?x58 input.dst.llvm-%x)))
 (let (($x213 (= $x215 true)))
 (let (($x75 (= $x213 true)))
 (let (($x6 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x200 (= $x6 true)))
 (let (($x239 (= $x200 true)))
 (let (($x144 (= $x239 true)))
 (let (($x152 (= input.dst.llvm-%x ?x58)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x99)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x108 $x122)))
 (let (($x46 (and $x123 $x106)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x71 $x46)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x95)))))))
 (let (($x61 (and (and (and $x119 $x6) $x107) $x152)))
 (let (($x172 (= $x61 true)))
 (let (($x214 (= $x172 true)))
 (let (($x132 (= $x214 true)))
 (let (($x49 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x32 (not $x49)))
 (let (($x170 (= $x32 true)))
 (let (($x133 (= $x170 true)))
 (let (($x171 (= $x133 true)))
 (let (($x114 (and $x119 $x107)))
 (let (($x125 (= $x114 true)))
 (let (($x128 (= $x125 true)))
 (let (($x124 (= $x128 true)))
 (let (($x139 (and $x124 $x171)))
 (let (($x153 (and $x139 $x132)))
 (let (($x18 (and $x153 $x144)))
 (let (($x173 (and $x18 $x75)))
 (let (($x148 (and $x173 $x273)))
 (let (($x220 (and $x148 $x222)))
 (let (($x66 (and $x220 $x186)))
 (let (($x190 (and $x66 $x218)))
 (let (($x93 (and $x190 $x267)))
 (let (($x182 (and $x93 $x176)))
 (let (($x195 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (and true $x195)))
 (let (($x180 (and $x48 $x182)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x195)))
 (let (($x82 (and $x70 $x180)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x174 (and $x16 $x82)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x155 (and $x60 $x174)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x110 (and $x10 $x155)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x154 (and $x37 $x110)))
 (let (($x35 (= ?x36 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x272 (and $x35 $x154)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x221 (and $x9 $x272)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x151 (and $x33 $x221)))
 (let (($x44 (= ?x217 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x98 (and $x44 $x151)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x103 (and $x28 $x98)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x188 (and $x27 $x103)))
 (let (($x244 (and $x64 $x188)))
 (let (($x63 (= input.spec-%var-y-0.L2%23%bbentry ?x68)))
 (let (($x266 (and $x63 $x244)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x281 (and $x25 $x266)))
 (let (($x77 (and $x64 $x281)))
 (let (($x54 (= input.spec-%var-y-1.L2%31%bbentry ?x80)))
 (let (($x83 (and $x54 $x77)))
 (let (($x223 (=> $x83 $x167)))
 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171471/query
