=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%8%d L2%9%bbentry L2%11%bbentry L2%13%d L2%14%bbentry L2%16%bbentry L2%18%bbentry L2%19%bbentry E0%0%d
=Edges:
L0%0%d => L2%8%d
L2%8%d => L2%11%bbentry
L2%8%d => L2%9%bbentry
L2%9%bbentry => L2%19%bbentry
L2%11%bbentry => L2%13%d
L2%13%d => L2%16%bbentry
L2%13%d => L2%14%bbentry
L2%14%bbentry => L2%18%bbentry
L2%16%bbentry => L2%18%bbentry
L2%18%bbentry => L2%19%bbentry
L2%19%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%8%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%11%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%13%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%14%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%16%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%18%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%19%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-0 : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-y-0 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-5.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : input.spec-%var-x-0 : BV:32
4 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
5 : map_init(4) : MAP[BV:32 -> BV:32]
6 : input.spec-%var-y-0 : BV:32
7 : bvadd(3, 6) : BV:32
8 : map_set(5, 6, 7) : MAP[BV:32 -> BV:32]
9 : map_set(2, 3, 8) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
10 : map_get(9, 3) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=spec-%tmpvar-1.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-0.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-2.L2%8%d
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : input.spec-%var-y-0 : BV:32
4 : input.spec-%var-x-0 : BV:32
5 : bvadd(4, 3) : BV:32
6 : map_set(2, 3, 5) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-4.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : input.spec-%var-x-0 : BV:32
4 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
5 : map_init(4) : MAP[BV:32 -> BV:32]
6 : input.spec-%var-y-0 : BV:32
7 : bvadd(3, 6) : BV:32
8 : map_set(5, 6, 7) : MAP[BV:32 -> BV:32]
9 : map_set(2, 3, 8) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%var-m-0.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : input.spec-%var-x-0 : BV:32
4 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
5 : map_init(4) : MAP[BV:32 -> BV:32]
6 : input.spec-%var-y-0 : BV:32
7 : bvadd(3, 6) : BV:32
8 : map_set(5, 6, 7) : MAP[BV:32 -> BV:32]
9 : map_set(2, 3, 8) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((func_head*ctor_map)*ctor_map)*intrinsic_app_bvadd)*intrinsic_app_map_set)*((intrinsic_app_map_set*letin_def)*intrinsic_app_map_get))
tfg_edge_comment end

=Edge: L2%8%d => L2%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%8%d => L2%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:10:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%9%bbentry => L2%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%var-x-0 : BV:32
=spec-%var-u-0.L2%19%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%11%bbentry => L2%13%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : input.spec-%var-y-0 : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=spec-%var-m1-0.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%13%d => L2%16%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:17:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%13%d => L2%14%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:15:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%14%bbentry => L2%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%var-y-0 : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%16%bbentry => L2%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-m2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%18%bbentry => L2%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%19%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*letin_body)*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-0
1 : input.spec-%var-x-0 : BV:32
=Loc 2 in src.spec.foo.
REGMEM
spec-%var-y-0
1 : input.spec-%var-y-0 : BV:32
=Loc 19 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 20 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 21 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 22 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L2%8%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L2%13%d
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-m1-0.L2%13%d
1 : input.spec-%var-m1-0.L2%13%d : MAP[BV:32 -> BV:32]
=Loc 28 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%8%d
1 : input.spec-%tmpvar-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%8%d
1 : input.spec-%tmpvar-1.L2%8%d : MAP[BV:32 -> BV:32]
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%8%d
1 : input.spec-%tmpvar-2.L2%8%d : BV:32
=Loc 31 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%8%d
1 : input.spec-%tmpvar-3.L2%8%d : MAP[BV:32 -> BV:32]
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L2%8%d
1 : input.spec-%tmpvar-4.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 33 in src.spec.foo.
REGMEM
spec-%var-m-0.L2%8%d
1 : input.spec-%var-m-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%var-u2-0.L2%18%bbentry : UNIT
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-m2-0.L2%18%bbentry
1 : input.spec-%var-m2-0.L2%18%bbentry : BV:32
=Loc 37 in src.spec.foo.
REGMEM
spec-%var-u-0.L2%19%bbentry
1 : input.spec-%var-u-0.L2%19%bbentry : UNIT
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 2, 
=live locs at L2%8%d
1, 2, 22, 
=live locs at L2%9%bbentry
1, 
=live locs at L2%11%bbentry
2, 22, 
=live locs at L2%13%d
2, 23, 
=live locs at L2%14%bbentry
2, 
=live locs at L2%16%bbentry
23, 
=live locs at L2%18%bbentry
34, 
=live locs at L2%19%bbentry
25, 
=live locs at E0%0%d
24[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 2, 19, 20, 21
=loc definedness at L2%8%d
1, 2, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33
=loc definedness at L2%9%bbentry
1, 2, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33
=loc definedness at L2%11%bbentry
1, 2, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33
=loc definedness at L2%13%d
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33
=loc definedness at L2%14%bbentry
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33
=loc definedness at L2%16%bbentry
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33
=loc definedness at L2%18%bbentry
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34
=loc definedness at L2%19%bbentry
1, 2, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33
=loc definedness at E0%0%d
1, 2, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1, 2
=branch affecting variable locs at L2%8%d
2, 22
=branch affecting variable locs at L2%9%bbentry

=branch affecting variable locs at L2%11%bbentry
2, 22
=branch affecting variable locs at L2%13%d
23
=branch affecting variable locs at L2%14%bbentry

=branch affecting variable locs at L2%16%bbentry

=branch affecting variable locs at L2%18%bbentry

=branch affecting variable locs at L2%19%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 22 {input.spec-%tmpvar-5.L2%8%d }
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 28 {input.spec-%tmpvar-0.L2%8%d }
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 29 {input.spec-%tmpvar-1.L2%8%d }
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 30 {input.spec-%tmpvar-2.L2%8%d }
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 31 {input.spec-%tmpvar-3.L2%8%d }
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-y-0 : BV:32
10 : input.spec-%var-x-0 : BV:32
11 : bvadd(10, 9) : BV:32
12 : map_set(8, 9, 11) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 32 {input.spec-%tmpvar-4.L2%8%d }
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 33 {input.spec-%var-m-0.L2%8%d }
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry for loc_id 25 {input.spec-%tmpvar-8.L2%19%bbentry }
1 : input.spec-%var-x-0 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry for loc_id 37 {input.spec-%var-u-0.L2%19%bbentry }
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d for loc_id 23 {input.spec-%tmpvar-6.L2%13%d }
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : input.spec-%var-y-0 : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d for loc_id 27 {input.spec-%var-m1-0.L2%13%d }
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d done
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%14%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%14%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%16%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%16%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry for loc_id 34 {input.spec-%tmpvar-7.L2%18%bbentry }
1 : input.spec-%var-y-0 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry for loc_id 35 {input.spec-%var-u2-0.L2%18%bbentry }
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry for loc_id 34 {input.spec-%tmpvar-7.L2%18%bbentry }
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry for loc_id 36 {input.spec-%var-m2-0.L2%18%bbentry }
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%19%bbentry for loc_id 25 {input.spec-%tmpvar-8.L2%19%bbentry }
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%8%d:
vacuous mls at L2%9%bbentry:
vacuous mls at L2%11%bbentry:
vacuous mls at L2%13%d:
vacuous mls at L2%14%bbentry:
vacuous mls at L2%16%bbentry:
vacuous mls at L2%18%bbentry:
vacuous mls at L2%19%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%8%d:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at L2%11%bbentry:
non-vacuous mls at L2%13%d:
non-vacuous mls at L2%14%bbentry:
non-vacuous mls at L2%16%bbentry:
non-vacuous mls at L2%18%bbentry:
non-vacuous mls at L2%19%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 2
=loc_expr
140274 : input.spec-%var-y-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 22
=loc_expr
140324 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 23
=loc_expr
140327 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_get(25, 26) : MAP[BV:32 -> BV:32]
28 : map_get(27, 21) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 27
=loc_expr
140339 : input.spec-%var-m1-0.L2%13%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_get(25, 26) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 28
=loc_expr
140340 : input.spec-%tmpvar-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 29
=loc_expr
140341 : input.spec-%tmpvar-1.L2%8%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 30
=loc_expr
140342 : input.spec-%tmpvar-2.L2%8%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 31
=loc_expr
140343 : input.spec-%tmpvar-3.L2%8%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-y-0 : BV:32
10 : input.spec-%var-x-0 : BV:32
11 : bvadd(10, 9) : BV:32
12 : map_set(8, 9, 11) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 32
=loc_expr
140596 : input.spec-%tmpvar-4.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 33
=loc_expr
140597 : input.spec-%var-m-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 35
=loc_expr
140598 : input.spec-%var-u2-0.L2%18%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_get(25, 26) : MAP[BV:32 -> BV:32]
28 : map_get(27, 21) : SUM[UNIT,BV:32]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : sum_get(28, 29) : UNIT
=avail_exprs_val.end
=loc 36
=loc_expr
140599 : input.spec-%var-m2-0.L2%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_get(25, 26) : MAP[BV:32 -> BV:32]
28 : map_get(27, 21) : SUM[UNIT,BV:32]
29 : sum_get(28, 26) : BV:32
=avail_exprs_val.end
=loc 37
=loc_expr
140601 : input.spec-%var-u-0.L2%19%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 0 { 0x0 +1.0e1025 } : INT
27 : sum_get(25, 26) : UNIT
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 28 expr
1 : input.spec-%tmpvar-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=loc 28 spreled-expr
140602 : Lambda92 : BV:32
140319 : 0 { 0x0 } : BOOL
140603 : lambda(140602, 140319) : FUNCTION[BV:32 -> BOOL]
140619 : Lambda95 : BV:32
140604 : Lambda93 : BV:32
140605 : lambda(140604, 140319) : FUNCTION[BV:32 -> BOOL]
140616 : Lambda94 : BV:32
140311 : 0 { 0x0 +1.0e129 } : BV:32
140617 : lambda(140616, 140311) : FUNCTION[BV:32 -> BV:32]
140618 : map(140605, 140617) : MAP[BV:32 -> BV:32]
140627 : lambda(140619, 140618) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
140628 : map(140603, 140627) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140634 : sym_const(140628) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=loc 29 expr
1 : input.spec-%tmpvar-1.L2%8%d : MAP[BV:32 -> BV:32]
=loc 29 spreled-expr
140635 : Lambda96 : BV:32
140319 : 0 { 0x0 } : BOOL
140637 : lambda(140635, 140319) : FUNCTION[BV:32 -> BOOL]
140638 : Lambda97 : BV:32
140311 : 0 { 0x0 +1.0e129 } : BV:32
140639 : lambda(140638, 140311) : FUNCTION[BV:32 -> BV:32]
140640 : map(140637, 140639) : MAP[BV:32 -> BV:32]
140641 : sym_const(140640) : MAP[BV:32 -> BV:32]
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 2 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 28 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%9%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%11%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>L2%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%11%bbentry=>L2%13%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%d=>L2%14%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%d=>L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%14%bbentry=>L2%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%16%bbentry=>L2%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%18%bbentry=>L2%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%19%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%8%d
=spec-%tmpvar-5.L2%8%d
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=spec-%tmpvar-1.L2%8%d
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-0.L2%8%d
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-2.L2%8%d
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%8%d
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-y-0 : BV:32
10 : input.spec-%var-x-0 : BV:32
11 : bvadd(10, 9) : BV:32
12 : map_set(8, 9, 11) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-4.L2%8%d
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%var-m-0.L2%8%d
1 : Lambda92 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda95 : BV:32
5 : Lambda93 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda94 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>L2%19%bbentry
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%var-x-0 : BV:32
=spec-%var-u-0.L2%19%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%11%bbentry=>L2%13%d
=spec-%tmpvar-6.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : input.spec-%var-y-0 : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=spec-%var-m1-0.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%d=>L2%14%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%d=>L2%16%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%14%bbentry=>L2%18%bbentry
=spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%var-y-0 : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%16%bbentry=>L2%18%bbentry
=spec-%var-m2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%18%bbentry=>L2%19%bbentry
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%19%bbentry=>E0%0%d
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%8%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%8%d done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%13%d
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%13%d done
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%14%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%14%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%16%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%16%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%19%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%19%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%8%d for src.spec.foo
=suffixpath_at_L2%8%d.graph_edge_composition
(L0%0%d=>L2%8%d)
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*(L2%8%d=>L2%9%bbentry))
=suffixpath_at_L2%11%bbentry for src.spec.foo
=suffixpath_at_L2%11%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*(L2%8%d=>L2%11%bbentry))
=suffixpath_at_L2%13%d for src.spec.foo
=suffixpath_at_L2%13%d.graph_edge_composition
((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*(L2%11%bbentry=>L2%13%d)))
=suffixpath_at_L2%14%bbentry for src.spec.foo
=suffixpath_at_L2%14%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*(L2%13%d=>L2%14%bbentry))))
=suffixpath_at_L2%16%bbentry for src.spec.foo
=suffixpath_at_L2%16%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*(L2%13%d=>L2%16%bbentry))))
=suffixpath_at_L2%18%bbentry for src.spec.foo
=suffixpath_at_L2%18%bbentry.graph_edge_composition
(((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%18%bbentry)))))+((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry))))))
=suffixpath_at_L2%19%bbentry for src.spec.foo
=suffixpath_at_L2%19%bbentry.graph_edge_composition
(((L0%0%d=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%19%bbentry)))+((((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%18%bbentry)))))+((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry))))))*(L2%18%bbentry=>L2%19%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%19%bbentry)))+((((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%18%bbentry)))))+((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry))))))*(L2%18%bbentry=>L2%19%bbentry)))*(L2%19%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%8%d
tfg.assumes_around_edge at L0%0%d=>L2%8%d done
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry done
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry done
tfg.assumes_around_edge at L2%9%bbentry=>L2%19%bbentry
tfg.assumes_around_edge at L2%9%bbentry=>L2%19%bbentry done
tfg.assumes_around_edge at L2%11%bbentry=>L2%13%d
tfg.assumes_around_edge at L2%11%bbentry=>L2%13%d done
tfg.assumes_around_edge at L2%13%d=>L2%14%bbentry
tfg.assumes_around_edge at L2%13%d=>L2%14%bbentry done
tfg.assumes_around_edge at L2%13%d=>L2%16%bbentry
tfg.assumes_around_edge at L2%13%d=>L2%16%bbentry done
tfg.assumes_around_edge at L2%14%bbentry=>L2%18%bbentry
tfg.assumes_around_edge at L2%14%bbentry=>L2%18%bbentry done
tfg.assumes_around_edge at L2%16%bbentry=>L2%18%bbentry
tfg.assumes_around_edge at L2%16%bbentry=>L2%18%bbentry done
tfg.assumes_around_edge at L2%18%bbentry=>L2%19%bbentry
tfg.assumes_around_edge at L2%18%bbentry=>L2%19%bbentry done
tfg.assumes_around_edge at L2%19%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%19%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.llvm-%y
1 : input.dst.llvm-%y : BV:32
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%y : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%add.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 4 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%y : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%add.E0%0%d
1 : input.dst.llvm-%x : BV:32
2 : input.dst.llvm-%y : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%x : BV:32
2 : input.dst.llvm-%y : BV:32
3 : bvadd(1, 2) : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((start_pc_edge*  %add = add nsw i32 %x, %y, !dbg !16)*  ret i32 %add, !dbg !17)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%y : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100003 in dst.llvm.foo.
REGMEM
dst.llvm-%y
1 : input.dst.llvm-%y : BV:32
=Loc 100004 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100007 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100008 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100009 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100016 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100017 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100018 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100019 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100020 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.llvm-%add.E0%0%d
1 : input.dst.llvm-%add.E0%0%d : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100023 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100025 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.E0%0%d
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100003, 100018, 
=live locs at E0%0%d
100018, 100021[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100003, 100013, 100014, 100016, 100017, 100018, 100019, 100020
=loc definedness at E0%0%d
100002, 100003, 100013, 100014, 100016, 100017, 100018, 100019, 100020, 100021, 100022, 100023, 100024, 100025, 100026

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--arg.1
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100021 {input.dst.llvm-%add.E0%0%d }
1 : input.dst.llvm-%y : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100022 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100023 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%y : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100024 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100025 {input.dst.local_alloc_count.E0%0%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100026 {input.dst.cur_rounding_mode.E0%0%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140356 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100003
=loc_expr
140355 : input.dst.llvm-%y : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100004
=loc_expr
140574 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100006
=loc_expr
140575 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140577 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140579 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140581 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140572 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140738 : input.dst.llvm-%add.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%y : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100022
=loc_expr
140740 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100023
=loc_expr
140741 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%y : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100024
=loc_expr
140742 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100025
=loc_expr
140743 : input.dst.local_alloc_count.E0%0%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100026
=loc_expr
140747 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100024 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100024 spreled-expr
140267 : retaddr_const : BV:32
=loc 100025 expr
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=loc 100025 spreled-expr
140572 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100026 expr
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=loc 100026 spreled-expr
140571 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100003 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100004 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100007 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100009 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100018 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100024 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100026 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%add.E0%0%d
1 : input.dst.llvm-%y : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%y : BV:32
2 : input.dst.llvm-%x : BV:32
3 : bvadd(1, 2) : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 1
=pc
Lentry%2%d
=linename
line 1
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 34
=pc
Lentry%2%d
=column_name
 at column 25
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 1 at column 34)
=pc
Lentry%2%d
=line_and_column
(line 1 at column 25)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : (y' + x')
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%y : L0%0%d : y'
input.dst.llvm-%x : L0%0%d : x'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%add : L0%0%d : (x' + y')
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%add
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%add.E0%0%d : L0%0%d : (y' + x')
input.dst.local_alloc_count.E0%0%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.cur_rounding_mode.E0%0%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%add
=dst.llvm-%add loop pc: L0%0%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
1 : input.dst.llvm-%x : BV32
2 : input.dst.llvm-%y : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
1 : input.dst.llvm-%x : BV32
2 : input.dst.llvm-%y : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%y : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%y : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%add.E0%0%d : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%y
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%add.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.E0%0%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename edge3.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg1
=LhsExpr
1 : $spec-arg-1 : BV:32
2 : $llvm-arg-1 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%y : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 4 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%y : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L2%8%d#{0,0})*((((L2%8%d#{0,0}=>L2%9%bbentry#{0,0})*(L2%9%bbentry#{0,0}=>L2%19%bbentry#{0,0}))+((L2%8%d#{0,0}=>L2%11%bbentry#{0,0})*((L2%11%bbentry#{0,0}=>L2%13%d#{0,0})*((((L2%13%d#{0,0}=>L2%14%bbentry#{0,0})*(L2%14%bbentry#{0,0}=>L2%18%bbentry#{0,0}))+((L2%13%d#{0,0}=>L2%16%bbentry#{0,0})*(L2%16%bbentry#{0,0}=>L2%18%bbentry#{0,0})))*(L2%18%bbentry#{0,0}=>L2%19%bbentry#{0,0})))))*(L2%19%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg1
=LhsExpr
1 : input.spec-%var-y-0 : BV:32
2 : input.dst.llvm-%y : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-x-0 : BV:32
2 : input.dst.llvm-%x : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%y : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--arg.1
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 8fd48bde1195825763d73d60ceeace6
=input.spec-%var-x-0
1 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
=input.spec-%var-y-0
1 : 1136 { 0x470 +1.13542e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 255975931 ] -> 4, [ 255975932; 255975932 ] -> 112, [ 255975933; 255975933 ] -> 4, [ 255975934; 255975935 ] -> 0, [ 255975936; 3607234615 ] -> 4, [ 3607234616; 3607234616 ] -> 20, [ 3607234617; 3607234618 ] -> 2, [ 3607234619; 3607234619 ] -> 32, [ 3607234620; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-m1-0.L2%13%d
1 : Lambda241 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1135 { 0x46f +1.13530e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 1136 { 0x470 +1.13542e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 1137 { 0x471 +1.13554e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda242 : BV:32
23 : bvule(2, 22) : BOOL
24 : bvule(22, 4) : BOOL
25 : and(23, 24) : BOOL
26 : 5 { 0x5 +1.59e129 } : BV:32
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
31 : bvule(13, 22) : BOOL
32 : bvule(22, 15) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 26, 26) : BV:32
35 : ite(29, 30, 34) : BV:32
36 : ite(25, 26, 35) : BV:32
37 : lambda(22, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(21, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L2%8%d
1 : Lambda248 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda251 : BV:32
11 : Lambda249 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda250 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-1.L2%8%d
1 : Lambda254 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda255 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.L2%8%d
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
2 : unit : UNIT
3 : Lambda237 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1135 { 0x46f +1.13530e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : 1136 { 0x470 +1.13542e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 1137 { 0x471 +1.13554e129 } : BV:32
16 : bvule(15, 3) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(3, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 9, 9) : BOOL
21 : ite(13, 14, 20) : BOOL
22 : ite(8, 9, 21) : BOOL
23 : lambda(3, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda238 : BV:32
25 : bvule(4, 24) : BOOL
26 : bvule(24, 6) : BOOL
27 : and(25, 26) : BOOL
28 : 6 { 0x6 +1.71e129 } : BV:32
29 : bvule(10, 24) : BOOL
30 : bvule(24, 10) : BOOL
31 : and(29, 30) : BOOL
32 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
33 : bvule(15, 24) : BOOL
34 : bvule(24, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 28, 28) : BV:32
37 : ite(31, 32, 36) : BV:32
38 : ite(27, 28, 37) : BV:32
39 : lambda(24, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(23, 39) : MAP[BV:32 -> BV:32]
41 : sum(1, 2, 40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
42 : sym_const(41) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem.alloc
1 : ([ 0; 255975931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 255975932; 255975935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 255975936; 3607234615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3607234616; 3607234619 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3607234620; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%y
1 : 1136 { 0x470 +1.13542e129 } : BV:32
=input.spec-%var-m-0.L2%8%d
1 : Lambda266 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 537002515 { 0x20020213 +1.1568830e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 537002517 { 0x20020215 +1.1568853e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda269 : BV:32
23 : Lambda267 : BV:32
24 : bvule(2, 22) : BOOL
25 : bvule(22, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(13, 22) : BOOL
31 : bvule(22, 15) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 2, 2) : BV:32
34 : ite(29, 8, 33) : BV:32
35 : ite(26, 2, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : bvule(2, 23) : BOOL
38 : 1135 { 0x46f +1.13530e129 } : BV:32
39 : bvule(23, 38) : BOOL
40 : and(37, 39) : BOOL
41 : 1136 { 0x470 +1.13542e129 } : BV:32
42 : bvule(41, 23) : BOOL
43 : bvule(23, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 1137 { 0x471 +1.13554e129 } : BV:32
46 : bvule(45, 23) : BOOL
47 : bvule(23, 15) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 2, 2) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 2, 50) : BV:32
52 : eq(51, 41) : BOOL
53 : and(36, 52) : BOOL
54 : ite(53, 12, 7) : BOOL
55 : lambda(23, 54) : FUNCTION[BV:32 -> BOOL]
56 : Lambda268 : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 38) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(41, 56) : BOOL
61 : bvule(56, 41) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(45, 56) : BOOL
64 : bvule(56, 15) : BOOL
65 : and(63, 64) : BOOL
66 : ite(65, 2, 2) : BV:32
67 : ite(62, 41, 66) : BV:32
68 : ite(59, 2, 67) : BV:32
69 : eq(68, 41) : BOOL
70 : and(36, 69) : BOOL
71 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
72 : 7 { 0x7 +1.83e129 } : BV:32
73 : ite(70, 71, 72) : BV:32
74 : lambda(56, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(55, 74) : MAP[BV:32 -> BV:32]
76 : lambda(22, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(21, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-2.L2%8%d
1 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
=input.spec-%tmpvar-6.L2%13%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-4.L2%8%d
1 : Lambda261 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 537002515 { 0x20020213 +1.1568830e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 537002517 { 0x20020215 +1.1568853e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda264 : BV:32
23 : Lambda262 : BV:32
24 : bvule(2, 22) : BOOL
25 : bvule(22, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(13, 22) : BOOL
31 : bvule(22, 15) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 2, 2) : BV:32
34 : ite(29, 8, 33) : BV:32
35 : ite(26, 2, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : bvule(2, 23) : BOOL
38 : 1135 { 0x46f +1.13530e129 } : BV:32
39 : bvule(23, 38) : BOOL
40 : and(37, 39) : BOOL
41 : 1136 { 0x470 +1.13542e129 } : BV:32
42 : bvule(41, 23) : BOOL
43 : bvule(23, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 1137 { 0x471 +1.13554e129 } : BV:32
46 : bvule(45, 23) : BOOL
47 : bvule(23, 15) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 2, 2) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 2, 50) : BV:32
52 : eq(51, 41) : BOOL
53 : and(36, 52) : BOOL
54 : ite(53, 12, 7) : BOOL
55 : lambda(23, 54) : FUNCTION[BV:32 -> BOOL]
56 : Lambda263 : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 38) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(41, 56) : BOOL
61 : bvule(56, 41) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(45, 56) : BOOL
64 : bvule(56, 15) : BOOL
65 : and(63, 64) : BOOL
66 : ite(65, 2, 2) : BV:32
67 : ite(62, 41, 66) : BV:32
68 : ite(59, 2, 67) : BV:32
69 : eq(68, 41) : BOOL
70 : and(36, 69) : BOOL
71 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
72 : 4 { 0x4 +1.47e129 } : BV:32
73 : ite(70, 71, 72) : BV:32
74 : lambda(56, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(55, 74) : MAP[BV:32 -> BV:32]
76 : lambda(22, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(21, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-5.L2%8%d.2.1.1
1 : ([ 0; 1135 ] -> 6, [ 1136; 1136 ] -> 537003652, [ 1137; 4294967295 ] -> 6, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-3.L2%8%d
1 : Lambda258 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1135 { 0x46f +1.13530e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 1136 { 0x470 +1.13542e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 1137 { 0x471 +1.13554e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda259 : BV:32
23 : bvule(2, 22) : BOOL
24 : bvule(22, 4) : BOOL
25 : and(23, 24) : BOOL
26 : 8 { 0x8 +1.95e129 } : BV:32
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
31 : bvule(13, 22) : BOOL
32 : bvule(22, 15) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 26, 26) : BV:32
35 : ite(29, 30, 34) : BV:32
36 : ite(25, 26, 35) : BV:32
37 : lambda(22, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(21, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-0.L2%18%bbentry
1 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
=input.spec-%tmpvar-5.L2%8%d.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-6.L2%13%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%8%d.2.0.1
1 : ([ 0; 1135 ] -> false, [ 1136; 1136 ] -> true, [ 1137; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-%x
1 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3607234616 { 0xd7020838 -687732680 -1.1587581e47 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 255975932 { 0xf41e1fc +1.51470899e159 } : BV:32
=input.spec-%tmpvar-6.L2%13%d.2
1 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 255975935 { 0xf41e1ff +1.51470935e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 255975932 { 0xf41e1fc +1.51470899e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3607234619 { 0xd702083b -687732677 -1.1587617e47 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3607234616 { 0xd7020838 -687732680 -1.1587581e47 } : BV:32
=input.spec-%var-m1-0.L2%13%d.0.1
1 : ([ 0; 1135 ] -> false, [ 1136; 1136 ] -> true, [ 1137; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-0.L2%13%d.1.1
1 : ([ 0; 1135 ] -> 5, [ 1136; 1136 ] -> 537003652, [ 1137; 4294967295 ] -> 5, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L2%8%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L2%8%d.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-0.L2%8%d.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%8%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-1.L2%8%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-3.L2%8%d.0.1
1 : ([ 0; 1135 ] -> false, [ 1136; 1136 ] -> true, [ 1137; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L2%8%d.1.1
1 : ([ 0; 1135 ] -> 8, [ 1136; 1136 ] -> 537003652, [ 1137; 4294967295 ] -> 8, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L2%8%d.0.1
1 : ([ 0; 537002515 ] -> false, [ 537002516; 537002516 ] -> true, [ 537002517; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-4.L2%8%d.1.1.0.1
1 : Lambda147 : BV:32
2 : Lambda148 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 537002515 { 0x20020213 +1.1568830e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 537002517 { 0x20020215 +1.1568853e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1135 { 0x46f +1.13530e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1136 { 0x470 +1.13542e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1137 { 0x471 +1.13554e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-4.L2%8%d.1.1.1.1
1 : Lambda152 : BV:32
2 : Lambda153 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 537002515 { 0x20020213 +1.1568830e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 537002517 { 0x20020215 +1.1568853e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1135 { 0x46f +1.13530e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1136 { 0x470 +1.13542e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1137 { 0x471 +1.13554e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
39 : 4 { 0x4 +1.47e129 } : BV:32
40 : ite(37, 38, 39) : BV:32
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BV:32]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-m-0.L2%8%d.0.1
1 : ([ 0; 537002515 ] -> false, [ 537002516; 537002516 ] -> true, [ 537002517; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L2%8%d.1.1.0.1
1 : Lambda159 : BV:32
2 : Lambda160 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 537002515 { 0x20020213 +1.1568830e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 537002517 { 0x20020215 +1.1568853e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1135 { 0x46f +1.13530e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1136 { 0x470 +1.13542e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1137 { 0x471 +1.13554e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-m-0.L2%8%d.1.1.1.1
1 : Lambda164 : BV:32
2 : Lambda165 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 537002515 { 0x20020213 +1.1568830e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 537002516 { 0x20020214 +1.1568841e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 537002517 { 0x20020215 +1.1568853e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1135 { 0x46f +1.13530e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1136 { 0x470 +1.13542e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1137 { 0x471 +1.13554e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 537003652 { 0x20020684 +1.1582384e193 } : BV:32
39 : 7 { 0x7 +1.83e129 } : BV:32
40 : ite(37, 38, 39) : BV:32
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BV:32]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1678626727
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 e99ae62de95e3db5de68d167b6a2a518
=input.spec-%var-x-0
1 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
=input.spec-%var-y-0
1 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 34305 ] -> 0, [ 34306; 34306 ] -> 68, [ 34307; 34307 ] -> 80, [ 34308; 906112480 ] -> 0, [ 906112481; 906112481 ] -> 5, [ 906112482; 906112482 ] -> 210, [ 906112483; 906112483 ] -> 2, [ 906112484; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-m1-0.L2%13%d
1 : Lambda296 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda297 : BV:32
23 : bvule(2, 22) : BOOL
24 : bvule(22, 4) : BOOL
25 : and(23, 24) : BOOL
26 : 7 { 0x7 +1.83e129 } : BV:32
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
31 : bvule(13, 22) : BOOL
32 : bvule(22, 15) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 26, 26) : BV:32
35 : ite(29, 30, 34) : BV:32
36 : ite(25, 26, 35) : BV:32
37 : lambda(22, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(21, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L2%8%d
1 : Lambda303 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda306 : BV:32
11 : Lambda304 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda305 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-1.L2%8%d
1 : Lambda309 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda310 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.L2%8%d
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
2 : unit : UNIT
3 : Lambda292 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
16 : bvule(15, 3) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(3, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 9, 9) : BOOL
21 : ite(13, 14, 20) : BOOL
22 : ite(8, 9, 21) : BOOL
23 : lambda(3, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda293 : BV:32
25 : bvule(4, 24) : BOOL
26 : bvule(24, 6) : BOOL
27 : and(25, 26) : BOOL
28 : 6 { 0x6 +1.71e129 } : BV:32
29 : bvule(10, 24) : BOOL
30 : bvule(24, 10) : BOOL
31 : and(29, 30) : BOOL
32 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
33 : bvule(15, 24) : BOOL
34 : bvule(24, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 28, 28) : BV:32
37 : ite(31, 32, 36) : BV:32
38 : ite(27, 28, 37) : BV:32
39 : lambda(24, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(23, 39) : MAP[BV:32 -> BV:32]
41 : sum(1, 2, 40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
42 : sym_const(41) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem.alloc
1 : ([ 0; 34303 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34304; 34307 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 34308; 906112479 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 906112480; 906112483 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 906112484; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%y
1 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
=input.spec-%var-m-0.L2%8%d
1 : Lambda321 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 47318271 { 0x2d204ff +1.64077746e134 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 47318273 { 0x2d20501 +1.64077770e134 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda324 : BV:32
23 : Lambda322 : BV:32
24 : bvule(2, 22) : BOOL
25 : bvule(22, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(13, 22) : BOOL
31 : bvule(22, 15) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 2, 2) : BV:32
34 : ite(29, 8, 33) : BV:32
35 : ite(26, 2, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : bvule(2, 23) : BOOL
38 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
39 : bvule(23, 38) : BOOL
40 : and(37, 39) : BOOL
41 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
42 : bvule(41, 23) : BOOL
43 : bvule(23, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
46 : bvule(45, 23) : BOOL
47 : bvule(23, 15) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 2, 2) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 2, 50) : BV:32
52 : eq(51, 41) : BOOL
53 : and(36, 52) : BOOL
54 : ite(53, 12, 7) : BOOL
55 : lambda(23, 54) : FUNCTION[BV:32 -> BOOL]
56 : Lambda323 : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 38) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(41, 56) : BOOL
61 : bvule(56, 41) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(45, 56) : BOOL
64 : bvule(56, 15) : BOOL
65 : and(63, 64) : BOOL
66 : ite(65, 2, 2) : BV:32
67 : ite(62, 41, 66) : BV:32
68 : ite(59, 2, 67) : BV:32
69 : eq(68, 41) : BOOL
70 : and(36, 69) : BOOL
71 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
72 : 8 { 0x8 +1.95e129 } : BV:32
73 : ite(70, 71, 72) : BV:32
74 : lambda(56, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(55, 74) : MAP[BV:32 -> BV:32]
76 : lambda(22, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(21, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-2.L2%8%d
1 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
=input.spec-%tmpvar-6.L2%13%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-4.L2%8%d
1 : Lambda316 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 47318271 { 0x2d204ff +1.64077746e134 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 47318273 { 0x2d20501 +1.64077770e134 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda319 : BV:32
23 : Lambda317 : BV:32
24 : bvule(2, 22) : BOOL
25 : bvule(22, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(13, 22) : BOOL
31 : bvule(22, 15) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 2, 2) : BV:32
34 : ite(29, 8, 33) : BV:32
35 : ite(26, 2, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : bvule(2, 23) : BOOL
38 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
39 : bvule(23, 38) : BOOL
40 : and(37, 39) : BOOL
41 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
42 : bvule(41, 23) : BOOL
43 : bvule(23, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
46 : bvule(45, 23) : BOOL
47 : bvule(23, 15) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 2, 2) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 2, 50) : BV:32
52 : eq(51, 41) : BOOL
53 : and(36, 52) : BOOL
54 : ite(53, 12, 7) : BOOL
55 : lambda(23, 54) : FUNCTION[BV:32 -> BOOL]
56 : Lambda318 : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 38) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(41, 56) : BOOL
61 : bvule(56, 41) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(45, 56) : BOOL
64 : bvule(56, 15) : BOOL
65 : and(63, 64) : BOOL
66 : ite(65, 2, 2) : BV:32
67 : ite(62, 41, 66) : BV:32
68 : ite(59, 2, 67) : BV:32
69 : eq(68, 41) : BOOL
70 : and(36, 69) : BOOL
71 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
72 : 4 { 0x4 +1.47e129 } : BV:32
73 : ite(70, 71, 72) : BV:32
74 : lambda(56, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(55, 74) : MAP[BV:32 -> BV:32]
76 : lambda(22, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(21, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-5.L2%8%d.2.1.1
1 : ([ 0; 1346633727 ] -> 6, [ 1346633728; 1346633728 ] -> 1393952000, [ 1346633729; 4294967295 ] -> 6, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-3.L2%8%d
1 : Lambda313 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1 { 0x1 } : BOOL
13 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : ite(17, 7, 7) : BOOL
19 : ite(11, 12, 18) : BOOL
20 : ite(6, 7, 19) : BOOL
21 : lambda(1, 20) : FUNCTION[BV:32 -> BOOL]
22 : Lambda314 : BV:32
23 : bvule(2, 22) : BOOL
24 : bvule(22, 4) : BOOL
25 : and(23, 24) : BOOL
26 : 5 { 0x5 +1.59e129 } : BV:32
27 : bvule(8, 22) : BOOL
28 : bvule(22, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
31 : bvule(13, 22) : BOOL
32 : bvule(22, 15) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 26, 26) : BV:32
35 : ite(29, 30, 34) : BV:32
36 : ite(25, 26, 35) : BV:32
37 : lambda(22, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(21, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-0.L2%18%bbentry
1 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
=input.spec-%tmpvar-5.L2%8%d.0
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.spec-%tmpvar-6.L2%13%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%8%d.2.0.1
1 : ([ 0; 1346633727 ] -> false, [ 1346633728; 1346633728 ] -> true, [ 1346633729; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-%x
1 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 906112480 { 0x36022de0 +1.1702499e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 34304 { 0x8600 +1.408935e129 } : BV:32
=input.spec-%tmpvar-6.L2%13%d.2
1 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 34307 { 0x8603 +1.408971e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 34304 { 0x8600 +1.408935e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 906112483 { 0x36022de3 +1.1702535e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 906112480 { 0x36022de0 +1.1702499e237 } : BV:32
=input.spec-%var-m1-0.L2%13%d.0.1
1 : ([ 0; 1346633727 ] -> false, [ 1346633728; 1346633728 ] -> true, [ 1346633729; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-0.L2%13%d.1.1
1 : ([ 0; 1346633727 ] -> 7, [ 1346633728; 1346633728 ] -> 1393952000, [ 1346633729; 4294967295 ] -> 7, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L2%8%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L2%8%d.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-0.L2%8%d.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%8%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-1.L2%8%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-3.L2%8%d.0.1
1 : ([ 0; 1346633727 ] -> false, [ 1346633728; 1346633728 ] -> true, [ 1346633729; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L2%8%d.1.1
1 : ([ 0; 1346633727 ] -> 5, [ 1346633728; 1346633728 ] -> 1393952000, [ 1346633729; 4294967295 ] -> 5, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L2%8%d.0.1
1 : ([ 0; 47318271 ] -> false, [ 47318272; 47318272 ] -> true, [ 47318273; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-4.L2%8%d.1.1.0.1
1 : Lambda194 : BV:32
2 : Lambda195 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 47318271 { 0x2d204ff +1.64077746e134 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 47318273 { 0x2d20501 +1.64077770e134 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-4.L2%8%d.1.1.1.1
1 : Lambda199 : BV:32
2 : Lambda200 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 47318271 { 0x2d204ff +1.64077746e134 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 47318273 { 0x2d20501 +1.64077770e134 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
39 : 4 { 0x4 +1.47e129 } : BV:32
40 : ite(37, 38, 39) : BV:32
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BV:32]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-m-0.L2%8%d.0.1
1 : ([ 0; 47318271 ] -> false, [ 47318272; 47318272 ] -> true, [ 47318273; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L2%8%d.1.1.0.1
1 : Lambda206 : BV:32
2 : Lambda207 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 47318271 { 0x2d204ff +1.64077746e134 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 47318273 { 0x2d20501 +1.64077770e134 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-m-0.L2%8%d.1.1.1.1
1 : Lambda211 : BV:32
2 : Lambda212 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 47318271 { 0x2d204ff +1.64077746e134 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 47318272 { 0x2d20500 +1.64077758e134 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 47318273 { 0x2d20501 +1.64077770e134 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 3, 3) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 8) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1346633727 { 0x5043ffff +1.53124988e33 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1346633728 { 0x50440000 +1.53125000e33 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1346633729 { 0x50440001 +1.53125011e33 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 25) : BOOL
37 : and(20, 36) : BOOL
38 : 1393952000 { 0x53160500 +1.17202758e39 } : BV:32
39 : 8 { 0x8 +1.95e129 } : BV:32
40 : ite(37, 38, 39) : BV:32
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BV:32]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3460697125
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%add.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : Lambda92 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda95 : BV:32
7 : Lambda93 : BV:32
8 : lambda(7, 4) : FUNCTION[BV:32 -> BOOL]
9 : Lambda94 : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : lambda(9, 10) : FUNCTION[BV:32 -> BV:32]
12 : map(8, 11) : MAP[BV:32 -> BV:32]
13 : lambda(6, 12) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
14 : map(5, 13) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
15 : sym_const(14) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
16 : input.spec-%var-x-0 : BV:32
17 : Lambda96 : BV:32
18 : lambda(17, 4) : FUNCTION[BV:32 -> BOOL]
19 : Lambda97 : BV:32
20 : lambda(19, 10) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : sym_const(21) : MAP[BV:32 -> BV:32]
23 : input.spec-%var-y-0 : BV:32
24 : bvadd(16, 23) : BV:32
25 : map_set(22, 23, 24) : MAP[BV:32 -> BV:32]
26 : map_set(15, 16, 25) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
27 : map_get(26, 16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : sum_is(27, 28) : BOOL
30 : 1 { 0x1 +1.0e1025 } : INT
31 : sum_is(27, 30) : BOOL
32 : sum_get(27, 30) : MAP[BV:32 -> BV:32]
33 : map_get(32, 23) : SUM[UNIT,BV:32]
34 : sum_is(33, 28) : BOOL
35 : sum_is(33, 30) : BOOL
36 : or(34, 35) : BOOL
37 : and(31, 36) : BOOL
38 : or(29, 37) : BOOL
39 : or(2, 38) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
2 : input.dst.llvm-%add.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140354 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140353 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140583 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140584 : 4 { 0x4 +1.0e1025 } : INT
140319 : 0 { 0x0 } : BOOL
140585 : select(140354, 140353, 140583, 140358, 140584, 140319) : BV:32
=RhsExpr
140355 : input.dst.llvm-%y : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140354 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140353 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140586 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140584 : 4 { 0x4 +1.0e1025 } : INT
140319 : 0 { 0x0 } : BOOL
140587 : select(140354, 140353, 140586, 140357, 140584, 140319) : BV:32
=RhsExpr
140356 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
equal-arg1
=LhsExpr
140274 : input.spec-%var-y-0 : BV:32
140355 : input.dst.llvm-%y : BV:32
140842 : eq(140274, 140355) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.pred
=Comment
precond-mlasserts
=LhsExpr
140764 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140765 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140766 : bvule(140764, 140765) : BOOL
140748 : 4 { 0x4 +1.47e129 } : BV:32
140767 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140769 : bvadd(140748, 140767) : BV:32
140770 : bvadd(140764, 140769) : BV:32
140771 : eq(140765, 140770) : BOOL
140772 : and(140766, 140771) : BOOL
140773 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140774 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140775 : bvule(140773, 140774) : BOOL
140776 : and(140772, 140775) : BOOL
140777 : bvadd(140773, 140769) : BV:32
140778 : eq(140774, 140777) : BOOL
140779 : and(140776, 140778) : BOOL
140782 : bvuge(140764, 140773) : BOOL
140787 : bvule(140764, 140774) : BOOL
140788 : and(140782, 140787) : BOOL
140795 : bvuge(140765, 140773) : BOOL
140796 : bvule(140765, 140774) : BOOL
140797 : and(140795, 140796) : BOOL
140798 : not(140797) : BOOL
140801 : andnot1(140788, 140798) : BOOL
140792 : bvuge(140773, 140764) : BOOL
140802 : bvule(140773, 140765) : BOOL
140804 : and(140792, 140802) : BOOL
140806 : bvuge(140774, 140764) : BOOL
140807 : bvule(140774, 140765) : BOOL
140811 : and(140806, 140807) : BOOL
140812 : not(140811) : BOOL
140819 : andnot1(140804, 140812) : BOOL
140805 : and(140801, 140819) : BOOL
140820 : and(140779, 140805) : BOOL
140358 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140823 : 3 { 0x3 +1.35e129 } : BV:32
140824 : bvand(140358, 140823) : BV:32
140311 : 0 { 0x0 +1.0e129 } : BV:32
140825 : eq(140824, 140311) : BOOL
140357 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140827 : bvand(140357, 140823) : BV:32
140828 : eq(140827, 140311) : BOOL
140831 : and(140825, 140828) : BOOL
140832 : and(140820, 140831) : BOOL
140833 : eq(140358, 140764) : BOOL
140835 : eq(140357, 140773) : BOOL
140836 : and(140833, 140835) : BOOL
140839 : and(140832, 140836) : BOOL
140353 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140687 : 1 { 0x1 +1.11e129 } : BV:32
140359 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140840 : region_agrees_with_memlabel(140353, 140311, 140687, 140359) : BOOL
140841 : and(140839, 140840) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-x-0 : BV:32
140356 : input.dst.llvm-%x : BV:32
140843 : eq(140273, 140356) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
