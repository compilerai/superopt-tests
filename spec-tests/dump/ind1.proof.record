==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x101 (not $x100)))
 (let (($x299 (or $x100 $x101)))
 (let (($x300 (= $x299 false)))
 (let (($x301 (= $x300 true)))
 (let (($x282 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x281 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x283 (= $x281 $x282)))
 (let (($x211 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x175 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x270 (and $x175 $x211)))
 (let (($x284 (=> $x270 $x283)))
 (let (($x278 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x276 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x276 $x278)))
 (let (($x280 (=> $x270 $x279)))
 (let (($x273 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x274 (=> $x270 $x273)))
 (let (($x267 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x268 (= $x211 $x267)))
 (let (($x269 (=> $x175 $x268)))
 (let (($x35 (= false false)))
 (let (($x194 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x241 (and $x175 $x194)))
 (let (($x242 (=> $x241 $x35)))
 (let (($x264 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x265 (= $x194 $x264)))
 (let (($x266 (=> $x175 $x265)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x262 (=> $x175 $x261)))
 (let (($x258 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x259 (= $x175 $x258)))
 (let (($x157 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x231 (=> $x157 $x35)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x257 (= $x157 $x256)))
 (let (($x290 (and (and (and (and (and (and $x257 $x231) $x259) $x262) $x266) $x242) $x269)))
 (let (($x293 (and (and (and $x290 $x274) $x280) $x284)))
 (let (($x294 (= $x293 true)))
 (let (($x243 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x211 $x243)))
 (let (($x245 (=> $x175 $x244)))
 (let (($x238 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x239 (= $x194 $x238)))
 (let (($x240 (=> $x175 $x239)))
 (let (($x235 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x236 (=> $x175 $x235)))
 (let (($x232 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x233 (= $x175 $x232)))
 (let (($x229 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x230 (= $x157 $x229)))
 (let (($x227 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x251 (and (and (and (and (and (and $x227 $x230) $x231) $x233) $x236) $x240) $x242)))
 (let (($x252 (and $x251 $x245)))
 (let (($x253 (= $x252 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x161 (concat ?x160 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x167 (concat ?x166 (concat ?x163 ?x161))))
 (let ((?x195 (bvadd ?x167 (_ bv4 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x199))))
 (let (($x206 (= (_ bv0 32) ?x205)))
 (let ((?x207 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x207 (_ bv1 32))))
 (let (($x213 (= $x211 $x212)))
 (let (($x142 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x179 (and $x142 $x175)))
 (let (($x214 (=> $x179 $x213)))
 (let (($x208 (= ?x207 (_ bv0 32))))
 (let (($x209 (= $x194 $x208)))
 (let (($x210 (=> $x179 $x209)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x184))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.0 ?x190)))
 (let (($x192 (=> $x179 $x191)))
 (let (($x168 (= (_ bv0 32) ?x167)))
 (let ((?x169 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x169 (_ bv1 32))))
 (let (($x177 (= $x175 $x176)))
 (let (($x178 (=> $x142 $x177)))
 (let (($x173 (and $x142 $x157)))
 (let (($x174 (=> $x173 $x35)))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x171 (= $x157 $x170)))
 (let (($x172 (=> $x142 $x171)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x148)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x154 (= input.spec-%var-l-0.2.0 ?x153)))
 (let (($x155 (=> $x142 $x154)))
 (let ((?x138 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x138 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x137 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x141 (=> $x137 $x35)))
 (let (($x139 (= ?x138 (_ bv0 32))))
 (let (($x140 (= $x137 $x139)))
 (let (($x220 (and (and (and (and (and (and $x140 $x141) $x144) $x155) $x172) $x174) $x178)))
 (let (($x223 (and (and (and $x220 $x192) $x210) $x214)))
 (let (($x224 (= $x223 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x131 (concat ?x128 (concat ?x125 ?x123)))))
 (let (($x133 (= ?x132 input.dst.llvm-%l)))
 (let (($x134 (= $x133 true)))
 (let (($x114 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x110 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x118 (or false (or false (and (and true (or $x109 $x110)) (or $x113 $x114))))))
 (let (($x120 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x118)))
 (let (($x104 (=> (and $x101 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x118)))
 (let (($x105 (= $x104 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x91 (concat ?x90 ?x87)))))
 (let (($x96 (= ?x95 input.dst.llvm-%val)))
 (let (($x97 (= $x96 true)))
 (let ((?x54 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x54)))
 (let ((?x15 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x15)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x39 $x32)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x61 $x49)))
 (let (($x38 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x48 $x44)))
 (let (($x40 (not $x71)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x50 $x66)))
 (let (($x6 (and (not $x78) $x40)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x24 $x46)))
 (let (($x47 (not $x23)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x62 $x10)))
 (let (($x41 (and (not $x79) $x47)))
 (let (($x37 (and (and (and (and (and (and $x41 $x6) $x45) $x38) $x22) $x83) $x20)))
 (let (($x74 (and $x37 $x60)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x53 (or false (or false (and (and true (or $x34 $x18)) (or $x19 $x31))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x53)))
 (let (($x69 (and $x13 $x74)))
 (let (($x30 (= $x69 true)))
 (let (($x43 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x25 (= $x43 true)))
 (let (($x52 (and $x25 $x30)))
 (let (($x98 (and $x52 $x97)))
 (let (($x121 (and $x98 $x105)))
 (let (($x135 (and $x121 $x134)))
 (let (($x225 (and $x135 $x224)))
 (let (($x254 (and $x225 $x253)))
 (let (($x295 (and $x254 $x294)))
 (let (($x296 (and $x35 $x295)))
 (let (($x29 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x297 (and $x29 $x296)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x298 (and $x12 $x297)))
 (let (($x302 (=> $x298 $x301)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x101 (not $x100)))
 (let (($x299 (or $x100 $x101)))
 (let (($x300 (= $x299 false)))
 (let (($x301 (= $x300 true)))
 (let (($x282 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x281 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x283 (= $x281 $x282)))
 (let (($x211 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x175 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x270 (and $x175 $x211)))
 (let (($x284 (=> $x270 $x283)))
 (let (($x278 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x276 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x276 $x278)))
 (let (($x280 (=> $x270 $x279)))
 (let (($x273 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x274 (=> $x270 $x273)))
 (let (($x267 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x268 (= $x211 $x267)))
 (let (($x269 (=> $x175 $x268)))
 (let (($x35 (= false false)))
 (let (($x194 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x241 (and $x175 $x194)))
 (let (($x242 (=> $x241 $x35)))
 (let (($x264 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x265 (= $x194 $x264)))
 (let (($x266 (=> $x175 $x265)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x262 (=> $x175 $x261)))
 (let (($x258 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x259 (= $x175 $x258)))
 (let (($x157 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x231 (=> $x157 $x35)))
 (let (($x256 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x257 (= $x157 $x256)))
 (let (($x290 (and (and (and (and (and (and $x257 $x231) $x259) $x262) $x266) $x242) $x269)))
 (let (($x293 (and (and (and $x290 $x274) $x280) $x284)))
 (let (($x294 (= $x293 true)))
 (let (($x243 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x211 $x243)))
 (let (($x245 (=> $x175 $x244)))
 (let (($x238 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x239 (= $x194 $x238)))
 (let (($x240 (=> $x175 $x239)))
 (let (($x235 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x236 (=> $x175 $x235)))
 (let (($x232 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x233 (= $x175 $x232)))
 (let (($x229 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x230 (= $x157 $x229)))
 (let (($x227 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x251 (and (and (and (and (and (and $x227 $x230) $x231) $x233) $x236) $x240) $x242)))
 (let (($x252 (and $x251 $x245)))
 (let (($x253 (= $x252 true)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x161 (concat ?x160 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x167 (concat ?x166 (concat ?x163 ?x161))))
 (let ((?x195 (bvadd ?x167 (_ bv4 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x199))))
 (let (($x206 (= (_ bv0 32) ?x205)))
 (let ((?x207 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x207 (_ bv1 32))))
 (let (($x213 (= $x211 $x212)))
 (let (($x142 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x179 (and $x142 $x175)))
 (let (($x214 (=> $x179 $x213)))
 (let (($x208 (= ?x207 (_ bv0 32))))
 (let (($x209 (= $x194 $x208)))
 (let (($x210 (=> $x179 $x209)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x184))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.0 ?x190)))
 (let (($x192 (=> $x179 $x191)))
 (let (($x168 (= (_ bv0 32) ?x167)))
 (let ((?x169 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x169 (_ bv1 32))))
 (let (($x177 (= $x175 $x176)))
 (let (($x178 (=> $x142 $x177)))
 (let (($x173 (and $x142 $x157)))
 (let (($x174 (=> $x173 $x35)))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x171 (= $x157 $x170)))
 (let (($x172 (=> $x142 $x171)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x148)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x154 (= input.spec-%var-l-0.2.0 ?x153)))
 (let (($x155 (=> $x142 $x154)))
 (let ((?x138 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x138 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x137 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x141 (=> $x137 $x35)))
 (let (($x139 (= ?x138 (_ bv0 32))))
 (let (($x140 (= $x137 $x139)))
 (let (($x220 (and (and (and (and (and (and $x140 $x141) $x144) $x155) $x172) $x174) $x178)))
 (let (($x223 (and (and (and $x220 $x192) $x210) $x214)))
 (let (($x224 (= $x223 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x131 (concat ?x128 (concat ?x125 ?x123)))))
 (let (($x133 (= ?x132 input.dst.llvm-%l)))
 (let (($x134 (= $x133 true)))
 (let (($x114 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x110 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x118 (or false (or false (and (and true (or $x109 $x110)) (or $x113 $x114))))))
 (let (($x120 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x118)))
 (let (($x104 (=> (and $x101 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x118)))
 (let (($x105 (= $x104 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x91 (concat ?x90 ?x87)))))
 (let (($x96 (= ?x95 input.dst.llvm-%val)))
 (let (($x97 (= $x96 true)))
 (let ((?x54 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x54)))
 (let ((?x15 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x15)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x39 $x32)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x61 $x49)))
 (let (($x38 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x48 $x44)))
 (let (($x40 (not $x71)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x50 $x66)))
 (let (($x6 (and (not $x78) $x40)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x24 $x46)))
 (let (($x47 (not $x23)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x62 $x10)))
 (let (($x41 (and (not $x79) $x47)))
 (let (($x37 (and (and (and (and (and (and $x41 $x6) $x45) $x38) $x22) $x83) $x20)))
 (let (($x74 (and $x37 $x60)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x53 (or false (or false (and (and true (or $x34 $x18)) (or $x19 $x31))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x53)))
 (let (($x69 (and $x13 $x74)))
 (let (($x30 (= $x69 true)))
 (let (($x43 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x25 (= $x43 true)))
 (let (($x52 (and $x25 $x30)))
 (let (($x98 (and $x52 $x97)))
 (let (($x121 (and $x98 $x105)))
 (let (($x135 (and $x121 $x134)))
 (let (($x225 (and $x135 $x224)))
 (let (($x254 (and $x225 $x253)))
 (let (($x295 (and $x254 $x294)))
 (let (($x296 (and $x35 $x295)))
 (let (($x29 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x297 (and $x29 $x296)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x298 (and $x12 $x297)))
 (let (($x302 (=> $x298 $x301)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4244635904 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4244635907 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4244635904 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv4244635655 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv4244635652 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv4244635652 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfbfff96c)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00ff6168)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00ff616b)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfbfff96f)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00ff6168)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfbfff96c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x107 (not $x106)))
 (let (($x313 (or $x106 $x107)))
 (let (($x314 (= $x313 false)))
 (let (($x315 (= $x314 true)))
 (let (($x293 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x219 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x256 (and $x219 $x208)))
 (let (($x299 (and $x256 $x293)))
 (let (($x300 (not $x299)))
 (let (($x292 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x297 (and $x256 $x292)))
 (let (($x298 (not $x297)))
 (let (($x294 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x295 (= $x293 $x294)))
 (let (($x296 (=> $x256 $x295)))
 (let (($x282 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x283 (= $x292 $x282)))
 (let (($x284 (=> $x256 $x283)))
 (let (($x278 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x279 (=> $x256 $x278)))
 (let (($x274 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x291 (= $x208 $x274)))
 (let (($x275 (=> $x219 $x291)))
 (let (($x47 (= false false)))
 (let (($x192 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x245 (and $x219 $x192)))
 (let (($x252 (=> $x245 $x47)))
 (let (($x271 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x272 (= $x192 $x271)))
 (let (($x273 (=> $x219 $x272)))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x290 (=> $x219 $x269)))
 (let (($x289 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x267 (= $x219 $x289)))
 (let (($x165 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (=> $x165 $x47)))
 (let (($x266 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x288 (= $x165 $x266)))
 (let (($x86 (and (and (and (and (and (and $x288 $x237) $x267) $x290) $x273) $x252) $x275)))
 (let (($x307 (and (and (and (and (and $x86 $x279) $x284) $x296) $x298) $x300)))
 (let (($x308 (= $x307 true)))
 (let (($x257 (not $x256)))
 (let (($x253 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x254 (= $x208 $x253)))
 (let (($x255 (=> $x219 $x254)))
 (let (($x251 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x243 (= $x192 $x251)))
 (let (($x244 (=> $x219 $x243)))
 (let (($x250 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x241 (=> $x219 $x250)))
 (let (($x238 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x239 (= $x219 $x238)))
 (let (($x236 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x249 (= $x165 $x236)))
 (let (($x234 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x261 (and (and (and (and (and (and $x234 $x249) $x237) $x239) $x241) $x244) $x252)))
 (let (($x287 (and (and $x261 $x255) $x257)))
 (let (($x263 (= $x287 true)))
 (let (($x216 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x178 (and $x216 $x219)))
 (let (($x213 (and $x178 $x192)))
 (let (($x214 (not $x213)))
 (let (($x211 (and $x178 $x208)))
 (let (($x212 (not $x211)))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x163 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x167 (concat ?x158 ?x159))))
 (let ((?x221 (bvadd ?x168 (_ bv4 32))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x203))))
 (let (($x199 (= (_ bv0 32) ?x196)))
 (let ((?x202 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x202 (_ bv1 32))))
 (let (($x210 (= $x208 $x209)))
 (let (($x222 (=> $x178 $x210)))
 (let (($x205 (= ?x202 (_ bv0 32))))
 (let (($x206 (= $x192 $x205)))
 (let (($x207 (=> $x178 $x206)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x189))))
 (let (($x187 (= input.spec-%var-l-0.2.1.2.0 ?x184)))
 (let (($x190 (=> $x178 $x187)))
 (let (($x169 (= (_ bv0 32) ?x168)))
 (let ((?x170 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x170 (_ bv1 32))))
 (let (($x176 (= $x219 $x175)))
 (let (($x177 (=> $x216 $x176)))
 (let (($x173 (and $x216 $x165)))
 (let (($x174 (=> $x173 $x47)))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x172 (= $x165 $x171)))
 (let (($x218 (=> $x216 $x172)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x145)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x217 (= input.spec-%var-l-0.2.0 ?x155)))
 (let (($x156 (=> $x216 $x217)))
 (let ((?x215 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x215 (_ bv1 32))))
 (let (($x149 (= $x216 $x152)))
 (let (($x141 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x144 (=> $x141 $x47)))
 (let (($x142 (= ?x215 (_ bv0 32))))
 (let (($x143 (= $x141 $x142)))
 (let (($x228 (and (and (and (and (and (and $x143 $x144) $x149) $x156) $x218) $x174) $x177)))
 (let (($x247 (and (and (and (and (and $x228 $x190) $x207) $x222) $x212) $x214)))
 (let (($x232 (= $x247 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x136 (concat ?x133 (concat ?x126 ?x125)))))
 (let (($x138 (= ?x137 input.dst.llvm-%l)))
 (let (($x139 (= $x138 true)))
 (let (($x120 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x115 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x130 (or false (or false (and (and true (or $x114 $x115)) (or $x118 $x120))))))
 (let (($x127 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x130)))
 (let (($x109 (=> (and $x107 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x130)))
 (let (($x110 (= $x109 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x92 (concat ?x88 ?x59)))))
 (let (($x99 (= ?x98 input.dst.llvm-%val)))
 (let (($x100 (= $x99 true)))
 (let ((?x67 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x67)))
 (let ((?x17 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x17)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x61 $x9)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x64 $x32)))
 (let (($x38 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x79 $x71)))
 (let (($x6 (not $x40)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x68 $x41)))
 (let (($x73 (and (not $x63) $x6)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x13 $x62)))
 (let (($x76 (not $x34)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x43 $x21)))
 (let (($x10 (and (not $x53) $x76)))
 (let (($x69 (and (and (and (and (and (and $x10 $x73) $x42) $x38) $x49) $x80) $x83)))
 (let (($x30 (and $x69 $x15)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x36)))
 (let (($x72 (or false (or false (and (and true (or $x24 $x66)) (or $x78 $x28))))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x52 (and $x25 $x30)))
 (let (($x85 (= $x52 true)))
 (let (($x11 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x82 (= $x11 true)))
 (let (($x93 (and $x82 $x85)))
 (let (($x101 (and $x93 $x100)))
 (let (($x128 (and $x101 $x110)))
 (let (($x140 (and $x128 $x139)))
 (let (($x233 (and $x140 $x232)))
 (let (($x264 (and $x233 $x263)))
 (let (($x309 (and $x264 $x308)))
 (let (($x310 (and $x47 $x309)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x311 (and $x8 $x310)))
 (let (($x14 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x312 (and $x14 $x311)))
 (let (($x316 (=> $x312 $x315)))
 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x107 (not $x106)))
 (let (($x313 (or $x106 $x107)))
 (let (($x314 (= $x313 false)))
 (let (($x315 (= $x314 true)))
 (let (($x293 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x219 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x256 (and $x219 $x208)))
 (let (($x299 (and $x256 $x293)))
 (let (($x300 (not $x299)))
 (let (($x292 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x297 (and $x256 $x292)))
 (let (($x298 (not $x297)))
 (let (($x294 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x295 (= $x293 $x294)))
 (let (($x296 (=> $x256 $x295)))
 (let (($x282 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x283 (= $x292 $x282)))
 (let (($x284 (=> $x256 $x283)))
 (let (($x278 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x279 (=> $x256 $x278)))
 (let (($x274 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x291 (= $x208 $x274)))
 (let (($x275 (=> $x219 $x291)))
 (let (($x47 (= false false)))
 (let (($x192 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x245 (and $x219 $x192)))
 (let (($x252 (=> $x245 $x47)))
 (let (($x271 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x272 (= $x192 $x271)))
 (let (($x273 (=> $x219 $x272)))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x290 (=> $x219 $x269)))
 (let (($x289 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x267 (= $x219 $x289)))
 (let (($x165 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (=> $x165 $x47)))
 (let (($x266 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x288 (= $x165 $x266)))
 (let (($x86 (and (and (and (and (and (and $x288 $x237) $x267) $x290) $x273) $x252) $x275)))
 (let (($x307 (and (and (and (and (and $x86 $x279) $x284) $x296) $x298) $x300)))
 (let (($x308 (= $x307 true)))
 (let (($x257 (not $x256)))
 (let (($x253 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x254 (= $x208 $x253)))
 (let (($x255 (=> $x219 $x254)))
 (let (($x251 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x243 (= $x192 $x251)))
 (let (($x244 (=> $x219 $x243)))
 (let (($x250 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x241 (=> $x219 $x250)))
 (let (($x238 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x239 (= $x219 $x238)))
 (let (($x236 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x249 (= $x165 $x236)))
 (let (($x234 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x261 (and (and (and (and (and (and $x234 $x249) $x237) $x239) $x241) $x244) $x252)))
 (let (($x287 (and (and $x261 $x255) $x257)))
 (let (($x263 (= $x287 true)))
 (let (($x216 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x178 (and $x216 $x219)))
 (let (($x213 (and $x178 $x192)))
 (let (($x214 (not $x213)))
 (let (($x211 (and $x178 $x208)))
 (let (($x212 (not $x211)))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x163 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x167 (concat ?x158 ?x159))))
 (let ((?x221 (bvadd ?x168 (_ bv4 32))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x203))))
 (let (($x199 (= (_ bv0 32) ?x196)))
 (let ((?x202 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x202 (_ bv1 32))))
 (let (($x210 (= $x208 $x209)))
 (let (($x222 (=> $x178 $x210)))
 (let (($x205 (= ?x202 (_ bv0 32))))
 (let (($x206 (= $x192 $x205)))
 (let (($x207 (=> $x178 $x206)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x189))))
 (let (($x187 (= input.spec-%var-l-0.2.1.2.0 ?x184)))
 (let (($x190 (=> $x178 $x187)))
 (let (($x169 (= (_ bv0 32) ?x168)))
 (let ((?x170 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x170 (_ bv1 32))))
 (let (($x176 (= $x219 $x175)))
 (let (($x177 (=> $x216 $x176)))
 (let (($x173 (and $x216 $x165)))
 (let (($x174 (=> $x173 $x47)))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x172 (= $x165 $x171)))
 (let (($x218 (=> $x216 $x172)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x145)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x153)))
 (let (($x217 (= input.spec-%var-l-0.2.0 ?x155)))
 (let (($x156 (=> $x216 $x217)))
 (let ((?x215 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x215 (_ bv1 32))))
 (let (($x149 (= $x216 $x152)))
 (let (($x141 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x144 (=> $x141 $x47)))
 (let (($x142 (= ?x215 (_ bv0 32))))
 (let (($x143 (= $x141 $x142)))
 (let (($x228 (and (and (and (and (and (and $x143 $x144) $x149) $x156) $x218) $x174) $x177)))
 (let (($x247 (and (and (and (and (and $x228 $x190) $x207) $x222) $x212) $x214)))
 (let (($x232 (= $x247 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x136 (concat ?x133 (concat ?x126 ?x125)))))
 (let (($x138 (= ?x137 input.dst.llvm-%l)))
 (let (($x139 (= $x138 true)))
 (let (($x120 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x115 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x130 (or false (or false (and (and true (or $x114 $x115)) (or $x118 $x120))))))
 (let (($x127 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x130)))
 (let (($x109 (=> (and $x107 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x130)))
 (let (($x110 (= $x109 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x92 (concat ?x88 ?x59)))))
 (let (($x99 (= ?x98 input.dst.llvm-%val)))
 (let (($x100 (= $x99 true)))
 (let ((?x67 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x67)))
 (let ((?x17 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x17)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x61 $x9)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x64 $x32)))
 (let (($x38 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x79 $x71)))
 (let (($x6 (not $x40)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x68 $x41)))
 (let (($x73 (and (not $x63) $x6)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x13 $x62)))
 (let (($x76 (not $x34)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x43 $x21)))
 (let (($x10 (and (not $x53) $x76)))
 (let (($x69 (and (and (and (and (and (and $x10 $x73) $x42) $x38) $x49) $x80) $x83)))
 (let (($x30 (and $x69 $x15)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x36)))
 (let (($x72 (or false (or false (and (and true (or $x24 $x66)) (or $x78 $x28))))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x52 (and $x25 $x30)))
 (let (($x85 (= $x52 true)))
 (let (($x11 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x82 (= $x11 true)))
 (let (($x93 (and $x82 $x85)))
 (let (($x101 (and $x93 $x100)))
 (let (($x128 (and $x101 $x110)))
 (let (($x140 (and $x128 $x139)))
 (let (($x233 (and $x140 $x232)))
 (let (($x264 (and $x233 $x263)))
 (let (($x309 (and $x264 $x308)))
 (let (($x310 (and $x47 $x309)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x311 (and $x8 $x310)))
 (let (($x14 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x312 (and $x14 $x311)))
 (let (($x316 (=> $x312 $x315)))
 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv2147352579 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147352576 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv2147352576 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffe1f7c)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04fe1738)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04fe173b)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffe1f7f)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04fe1738)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffe1f7c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x26 (not $x108)))
 (let (($x308 (or $x108 $x26)))
 (let (($x309 (not $x308)))
 (let (($x152 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x151 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x307 (or $x151 $x152)))
 (let (($x310 (or $x307 $x309)))
 (let (($x311 (= $x310 true)))
 (let (($x122 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x279 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x279 $x122)))
 (let (($x230 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x272 (and $x176 $x230)))
 (let (($x292 (=> $x272 $x280)))
 (let (($x276 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x275 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x275 $x276)))
 (let (($x278 (=> $x272 $x277)))
 (let (($x84 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x274 (=> $x272 $x84)))
 (let (($x303 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x270 (= $x230 $x303)))
 (let (($x271 (=> $x176 $x270)))
 (let (($x89 (= false false)))
 (let (($x192 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x251 (and $x176 $x192)))
 (let (($x243 (=> $x251 $x89)))
 (let (($x268 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x269 (= $x192 $x268)))
 (let (($x290 (=> $x176 $x269)))
 (let (($x289 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x267 (=> $x176 $x289)))
 (let (($x266 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x288 (= $x176 $x266)))
 (let (($x158 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (=> $x158 $x89)))
 (let (($x264 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x265 (= $x158 $x264)))
 (let (($x293 (and (and (and (and (and (and $x265 $x237) $x288) $x267) $x290) $x243) $x271)))
 (let (($x296 (and (and (and $x293 $x274) $x278) $x292)))
 (let (($x305 (= $x296 true)))
 (let (($x244 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x260 (= $x230 $x244)))
 (let (($x245 (=> $x176 $x260)))
 (let (($x241 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x286 (= $x192 $x241)))
 (let (($x242 (=> $x176 $x286)))
 (let (($x259 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x240 (=> $x176 $x259)))
 (let (($x258 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x238 (= $x176 $x258)))
 (let (($x249 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x285 (= $x158 $x249)))
 (let (($x235 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x262 (and (and (and (and (and (and $x235 $x285) $x237) $x238) $x240) $x242) $x243)))
 (let (($x256 (and $x262 $x245)))
 (let (($x257 (= $x256 true)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x168 ?x159))))
 (let ((?x221 (bvadd ?x172 (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x200))))
 (let (($x199 (= (_ bv0 32) ?x196)))
 (let ((?x202 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x202 (_ bv1 32))))
 (let (($x209 (= $x230 $x208)))
 (let (($x220 (and $x151 $x176)))
 (let (($x210 (=> $x220 $x209)))
 (let (($x205 (= ?x202 (_ bv0 32))))
 (let (($x206 (= $x192 $x205)))
 (let (($x207 (=> $x220 $x206)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x180))))
 (let (($x190 (= input.spec-%var-l-0.2.1.2.0 ?x187)))
 (let (($x229 (=> $x220 $x190)))
 (let (($x218 (= (_ bv0 32) ?x172)))
 (let ((?x226 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x226 (_ bv1 32))))
 (let (($x228 (= $x176 $x177)))
 (let (($x178 (=> $x151 $x228)))
 (let (($x219 (and $x151 $x158)))
 (let (($x175 (=> $x219 $x89)))
 (let (($x173 (= ?x226 (_ bv0 32))))
 (let (($x174 (= $x158 $x173)))
 (let (($x227 (=> $x151 $x174)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x155)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x225)))
 (let (($x164 (= input.spec-%var-l-0.2.0 ?x165)))
 (let (($x167 (=> $x151 $x164)))
 (let ((?x149 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x149 (_ bv1 32))))
 (let (($x147 (= $x151 $x146)))
 (let (($x212 (and (and (and (and (= $x152 (= ?x149 (_ bv0 32))) (=> $x152 $x89)) $x147) $x167) $x227)))
 (let (($x232 (and (and (and (and (and $x212 $x175) $x178) $x229) $x207) $x210)))
 (let (($x233 (= $x232 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x142 (concat ?x35 (concat ?x138 ?x134)))))
 (let (($x47 (= ?x143 input.dst.llvm-%l)))
 (let (($x144 (= $x47 true)))
 (let (($x123 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x126 (= $x123 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x121 (concat ?x118 ?x116)))))
 (let (($x128 (= ?x110 input.dst.llvm-%val)))
 (let (($x135 (= $x128 true)))
 (let ((?x98 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x90 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x90)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x92 (and $x97 $x58)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x96 $x92)))
 (let (($x94 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x17 $x83)))
 (let (($x67 (not $x69)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x22 $x80)))
 (let (($x30 (and (not $x74) $x67)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x39 $x56)))
 (let (($x32 (not $x9)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x68 $x41)))
 (let (($x60 (and (not $x61) $x32)))
 (let (($x119 (and (and (and (and (and (and $x60 $x30) $x85) $x94) $x91) $x59) $x95)))
 (let (($x111 (and $x119 $x99)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x38 (or false (or false (and (and true (or $x71 $x40)) (or $x20 $x45))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x38)))
 (let (($x112 (and $x64 $x111)))
 (let (($x131 (= $x112 true)))
 (let (($x34 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x76 (= $x34 true)))
 (let (($x113 (and $x76 $x131)))
 (let (($x136 (and $x113 $x135)))
 (let (($x125 (and $x136 $x126)))
 (let (($x223 (and $x125 $x144)))
 (let (($x248 (and $x223 $x233)))
 (let (($x287 (and $x248 $x257)))
 (let (($x297 (and $x287 $x305)))
 (let (($x298 (and $x89 $x297)))
 (let (($x53 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x306 (and $x53 $x298)))
 (let (($x43 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x299 (and $x43 $x306)))
 (let (($x78 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x24 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x23 (or false (or false (and (and true (or $x36 $x24)) (or $x31 $x78))))))
 (let (($x72 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x23)))
 (let (($x29 (=> (and $x26 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x23)))
 (let (($x300 (and $x29 $x299)))
 (let (($x312 (=> $x300 $x311)))
 (not $x312))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x26 (not $x108)))
 (let (($x308 (or $x108 $x26)))
 (let (($x309 (not $x308)))
 (let (($x152 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x151 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x307 (or $x151 $x152)))
 (let (($x310 (or $x307 $x309)))
 (let (($x311 (= $x310 true)))
 (let (($x122 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x279 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x279 $x122)))
 (let (($x230 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x272 (and $x176 $x230)))
 (let (($x292 (=> $x272 $x280)))
 (let (($x276 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x275 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x275 $x276)))
 (let (($x278 (=> $x272 $x277)))
 (let (($x84 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x274 (=> $x272 $x84)))
 (let (($x303 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x270 (= $x230 $x303)))
 (let (($x271 (=> $x176 $x270)))
 (let (($x89 (= false false)))
 (let (($x192 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x251 (and $x176 $x192)))
 (let (($x243 (=> $x251 $x89)))
 (let (($x268 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x269 (= $x192 $x268)))
 (let (($x290 (=> $x176 $x269)))
 (let (($x289 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x267 (=> $x176 $x289)))
 (let (($x266 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x288 (= $x176 $x266)))
 (let (($x158 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (=> $x158 $x89)))
 (let (($x264 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x265 (= $x158 $x264)))
 (let (($x293 (and (and (and (and (and (and $x265 $x237) $x288) $x267) $x290) $x243) $x271)))
 (let (($x296 (and (and (and $x293 $x274) $x278) $x292)))
 (let (($x305 (= $x296 true)))
 (let (($x244 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x260 (= $x230 $x244)))
 (let (($x245 (=> $x176 $x260)))
 (let (($x241 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x286 (= $x192 $x241)))
 (let (($x242 (=> $x176 $x286)))
 (let (($x259 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x240 (=> $x176 $x259)))
 (let (($x258 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x238 (= $x176 $x258)))
 (let (($x249 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x285 (= $x158 $x249)))
 (let (($x235 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x262 (and (and (and (and (and (and $x235 $x285) $x237) $x238) $x240) $x242) $x243)))
 (let (($x256 (and $x262 $x245)))
 (let (($x257 (= $x256 true)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x168 ?x159))))
 (let ((?x221 (bvadd ?x172 (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x200))))
 (let (($x199 (= (_ bv0 32) ?x196)))
 (let ((?x202 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x202 (_ bv1 32))))
 (let (($x209 (= $x230 $x208)))
 (let (($x220 (and $x151 $x176)))
 (let (($x210 (=> $x220 $x209)))
 (let (($x205 (= ?x202 (_ bv0 32))))
 (let (($x206 (= $x192 $x205)))
 (let (($x207 (=> $x220 $x206)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x180))))
 (let (($x190 (= input.spec-%var-l-0.2.1.2.0 ?x187)))
 (let (($x229 (=> $x220 $x190)))
 (let (($x218 (= (_ bv0 32) ?x172)))
 (let ((?x226 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x226 (_ bv1 32))))
 (let (($x228 (= $x176 $x177)))
 (let (($x178 (=> $x151 $x228)))
 (let (($x219 (and $x151 $x158)))
 (let (($x175 (=> $x219 $x89)))
 (let (($x173 (= ?x226 (_ bv0 32))))
 (let (($x174 (= $x158 $x173)))
 (let (($x227 (=> $x151 $x174)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x155)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x225)))
 (let (($x164 (= input.spec-%var-l-0.2.0 ?x165)))
 (let (($x167 (=> $x151 $x164)))
 (let ((?x149 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x149 (_ bv1 32))))
 (let (($x147 (= $x151 $x146)))
 (let (($x212 (and (and (and (and (= $x152 (= ?x149 (_ bv0 32))) (=> $x152 $x89)) $x147) $x167) $x227)))
 (let (($x232 (and (and (and (and (and $x212 $x175) $x178) $x229) $x207) $x210)))
 (let (($x233 (= $x232 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x142 (concat ?x35 (concat ?x138 ?x134)))))
 (let (($x47 (= ?x143 input.dst.llvm-%l)))
 (let (($x144 (= $x47 true)))
 (let (($x123 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x126 (= $x123 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x121 (concat ?x118 ?x116)))))
 (let (($x128 (= ?x110 input.dst.llvm-%val)))
 (let (($x135 (= $x128 true)))
 (let ((?x98 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x90 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x90)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x92 (and $x97 $x58)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x96 $x92)))
 (let (($x94 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x17 $x83)))
 (let (($x67 (not $x69)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x22 $x80)))
 (let (($x30 (and (not $x74) $x67)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x39 $x56)))
 (let (($x32 (not $x9)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x68 $x41)))
 (let (($x60 (and (not $x61) $x32)))
 (let (($x119 (and (and (and (and (and (and $x60 $x30) $x85) $x94) $x91) $x59) $x95)))
 (let (($x111 (and $x119 $x99)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x38 (or false (or false (and (and true (or $x71 $x40)) (or $x20 $x45))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x38)))
 (let (($x112 (and $x64 $x111)))
 (let (($x131 (= $x112 true)))
 (let (($x34 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x76 (= $x34 true)))
 (let (($x113 (and $x76 $x131)))
 (let (($x136 (and $x113 $x135)))
 (let (($x125 (and $x136 $x126)))
 (let (($x223 (and $x125 $x144)))
 (let (($x248 (and $x223 $x233)))
 (let (($x287 (and $x248 $x257)))
 (let (($x297 (and $x287 $x305)))
 (let (($x298 (and $x89 $x297)))
 (let (($x53 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x306 (and $x53 $x298)))
 (let (($x43 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x299 (and $x43 $x306)))
 (let (($x78 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x24 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x23 (or false (or false (and (and true (or $x36 $x24)) (or $x31 $x78))))))
 (let (($x72 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x23)))
 (let (($x29 (=> (and $x26 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x23)))
 (let (($x300 (and $x29 $x299)))
 (let (($x312 (=> $x300 $x311)))
 (not $x312))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x42)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x127)))
 (let (($x105 (= input.spec-%var-l-0.2.0 ?x104)))
 (let (($x387 (= $x105 true)))
 (let (($x365 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x364 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x366 (= $x364 $x365)))
 (let (($x296 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x353 (and $x259 $x296)))
 (let (($x367 (=> $x353 $x366)))
 (let (($x361 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x359 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x359 $x361)))
 (let (($x363 (=> $x353 $x362)))
 (let (($x356 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x357 (=> $x353 $x356)))
 (let (($x350 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x351 (= $x296 $x350)))
 (let (($x352 (=> $x259 $x351)))
 (let (($x37 (= false false)))
 (let (($x250 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x323 (and $x259 $x250)))
 (let (($x324 (=> $x323 $x37)))
 (let (($x347 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x348 (= $x250 $x347)))
 (let (($x349 (=> $x259 $x348)))
 (let (($x344 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x345 (=> $x259 $x344)))
 (let (($x271 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x27 (=> $x271 $x37)))
 (let (($x341 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x342 (= $x259 $x341)))
 (let (($x339 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x340 (= $x271 $x339)))
 (let (($x373 (and (and (and (and (and (and $x340 $x342) $x27) $x345) $x349) $x324) $x352)))
 (let (($x376 (and (and (and $x373 $x357) $x363) $x367)))
 (let (($x21 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x377 (=> $x21 $x376)))
 (let (($x378 (= $x377 true)))
 (let (($x325 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x326 (= $x296 $x325)))
 (let (($x327 (=> $x259 $x326)))
 (let (($x320 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x250 $x320)))
 (let (($x322 (=> $x259 $x321)))
 (let (($x124 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x318 (=> $x259 $x124)))
 (let (($x317 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x33 (= $x259 $x317)))
 (let (($x315 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x316 (= $x271 $x315)))
 (let (($x129 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x333 (and (and (and (and (and (and $x129 $x316) $x33) $x27) $x318) $x322) $x324)))
 (let (($x334 (and $x333 $x327)))
 (let (($x335 (=> $x21 $x334)))
 (let (($x336 (= $x335 true)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x247 (concat ?x207 (concat ?x202 ?x196))))
 (let ((?x241 (bvadd ?x247 (_ bv4 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x251))))
 (let ((?x257 (bvadd ?x256 (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x265))))
 (let (($x267 (= (_ bv0 32) ?x289)))
 (let ((?x283 (ite $x267 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x283 (_ bv1 32))))
 (let (($x297 (= $x296 $x305)))
 (let (($x240 (and $x21 $x259)))
 (let (($x298 (=> $x240 $x297)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x86))))
 (let (($x280 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x122)))
 (let (($x292 (=> $x240 $x280)))
 (let (($x290 (= (_ bv0 32) ?x256)))
 (let ((?x284 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (= ?x284 (_ bv0 32))))
 (let (($x81 (= $x271 $x273)))
 (let (($x84 (=> $x21 $x81)))
 (let (($x293 (and $x21 $x271)))
 (let (($x272 (=> $x293 $x37)))
 (let (($x304 (bvuge ?x284 (_ bv1 32))))
 (let (($x303 (= $x259 $x304)))
 (let (($x270 (=> $x21 $x303)))
 (let (($x93 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x100 (=> $x93 $x37)))
 (let (($x302 (= ?x283 (_ bv0 32))))
 (let (($x268 (= $x250 $x302)))
 (let (($x269 (=> $x240 $x268)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x236))))
 (let (($x238 (= input.spec-%var-l-0.2.1.2.0 ?x258)))
 (let (($x253 (=> $x21 $x238)))
 (let (($x230 (= (_ bv0 32) ?x247)))
 (let ((?x208 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x208 (_ bv1 32))))
 (let (($x233 (= $x21 $x232)))
 (let (($x209 (= ?x208 (_ bv0 32))))
 (let (($x210 (= $x93 $x209)))
 (let (($x309 (and (and (and (and (and (and $x210 $x233) $x253) $x269) $x100) $x270) $x272)))
 (let (($x312 (and (and (and $x309 $x84) $x292) $x298)))
 (let (($x99 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x313 (=> $x99 $x312)))
 (let (($x12 (= $x313 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x228 (concat ?x231 (concat ?x212 ?x174)))))
 (let (($x195 (= ?x178 input.dst.llvm-%l)))
 (let (($x198 (= $x195 true)))
 (let (($x214 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x189 (and true $x180)))
 (let (($x187 (and $x180 $x189)))
 (let (($x191 (and $x187 $x214)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x14 (not $x11)))
 (let (($x192 (=> $x14 $x191)))
 (let (($x213 (= input.dst.llvm-%l ?x178)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x20 (concat ?x40 (concat ?x61 ?x62)))))
 (let (($x226 (= input.dst.llvm-%val ?x59)))
 (let ((?x161 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x161)))
 (let ((?x170 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x170)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x225 $x164)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x155 $x167)))
 (let (($x150 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x146 $x147)))
 (let (($x157 (not $x246)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x148 $x222)))
 (let (($x156 (and (not $x151) $x157)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x216 $x152)))
 (let (($x224 (not $x149)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x132 $x133)))
 (let (($x89 (and (not $x223) $x224)))
 (let (($x172 (and (and (and (and (and (and $x89 $x156) $x145) $x150) $x211) $x158) $x171)))
 (let (($x218 (and $x172 $x168)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x143 (or false (or false (and (and true (or $x215 $x142)) (or $x137 $x138))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x182 (and (and (and $x144 $x218) $x226) $x213)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x184 (and $x135 $x182)))
 (let (($x106 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x188 (and $x106 $x184)))
 (let (($x221 (and $x188 $x192)))
 (let (($x118 (=> $x99 $x105)))
 (let ((?x49 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (let (($x54 (= $x99 $x131)))
 (let (($x74 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x112 (=> $x74 $x37)))
 (let (($x32 (= ?x49 (_ bv0 32))))
 (let (($x13 (= $x74 $x32)))
 (let (($x63 (and (and (and $x13 $x112) $x54) $x118)))
 (let (($x203 (and $x63 $x221)))
 (let (($x201 (= $x203 true)))
 (let (($x68 (= $x14 true)))
 (let (($x114 (= $x106 true)))
 (let (($x101 (= ?x59 input.dst.llvm-%val)))
 (let (($x22 (= $x101 true)))
 (let (($x45 (and $x22 $x114)))
 (let (($x91 (and $x45 $x68)))
 (let (($x194 (and $x91 $x201)))
 (let (($x204 (and $x194 $x198)))
 (let (($x10 (and $x204 $x12)))
 (let (($x337 (and $x10 $x336)))
 (let (($x379 (and $x337 $x378)))
 (let (($x380 (and $x99 $x379)))
 (let (($x381 (and $x37 $x380)))
 (let (($x98 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x382 (and $x98 $x381)))
 (let (($x103 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x24 (= $x21 $x103)))
 (let (($x130 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x48 (= $x93 $x130)))
 (let (($x120 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x15 (and (and (and $x120 $x48) $x100) $x24)))
 (let (($x383 (and $x15 $x382)))
 (let (($x41 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x70 (=> $x21 $x41)))
 (let (($x19 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x119 (= $x21 $x19)))
 (let (($x108 (and (and (= $x93 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x100) $x119)))
 (let (($x28 (and $x108 $x70)))
 (let (($x384 (and $x28 $x383)))
 (let (($x34 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x385 (and $x34 $x384)))
 (let (($x113 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x71 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x73 (or false (or false (and (and true (or $x8 $x71)) (or $x29 $x113))))))
 (let (($x26 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x73)))
 (let (($x82 (=> (and $x14 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x73)))
 (let (($x386 (and $x82 $x385)))
 (let (($x388 (=> $x386 $x387)))
 (not $x388))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x42)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x127)))
 (let (($x105 (= input.spec-%var-l-0.2.0 ?x104)))
 (let (($x387 (= $x105 true)))
 (let (($x365 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x364 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x366 (= $x364 $x365)))
 (let (($x296 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x353 (and $x259 $x296)))
 (let (($x367 (=> $x353 $x366)))
 (let (($x361 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x359 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x359 $x361)))
 (let (($x363 (=> $x353 $x362)))
 (let (($x356 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x357 (=> $x353 $x356)))
 (let (($x350 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x351 (= $x296 $x350)))
 (let (($x352 (=> $x259 $x351)))
 (let (($x37 (= false false)))
 (let (($x250 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x323 (and $x259 $x250)))
 (let (($x324 (=> $x323 $x37)))
 (let (($x347 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x348 (= $x250 $x347)))
 (let (($x349 (=> $x259 $x348)))
 (let (($x344 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x345 (=> $x259 $x344)))
 (let (($x271 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x27 (=> $x271 $x37)))
 (let (($x341 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x342 (= $x259 $x341)))
 (let (($x339 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x340 (= $x271 $x339)))
 (let (($x373 (and (and (and (and (and (and $x340 $x342) $x27) $x345) $x349) $x324) $x352)))
 (let (($x376 (and (and (and $x373 $x357) $x363) $x367)))
 (let (($x21 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x377 (=> $x21 $x376)))
 (let (($x378 (= $x377 true)))
 (let (($x325 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x326 (= $x296 $x325)))
 (let (($x327 (=> $x259 $x326)))
 (let (($x320 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x250 $x320)))
 (let (($x322 (=> $x259 $x321)))
 (let (($x124 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x318 (=> $x259 $x124)))
 (let (($x317 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x33 (= $x259 $x317)))
 (let (($x315 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x316 (= $x271 $x315)))
 (let (($x129 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x333 (and (and (and (and (and (and $x129 $x316) $x33) $x27) $x318) $x322) $x324)))
 (let (($x334 (and $x333 $x327)))
 (let (($x335 (=> $x21 $x334)))
 (let (($x336 (= $x335 true)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x247 (concat ?x207 (concat ?x202 ?x196))))
 (let ((?x241 (bvadd ?x247 (_ bv4 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x251))))
 (let ((?x257 (bvadd ?x256 (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x265))))
 (let (($x267 (= (_ bv0 32) ?x289)))
 (let ((?x283 (ite $x267 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x283 (_ bv1 32))))
 (let (($x297 (= $x296 $x305)))
 (let (($x240 (and $x21 $x259)))
 (let (($x298 (=> $x240 $x297)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x86))))
 (let (($x280 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x122)))
 (let (($x292 (=> $x240 $x280)))
 (let (($x290 (= (_ bv0 32) ?x256)))
 (let ((?x284 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (= ?x284 (_ bv0 32))))
 (let (($x81 (= $x271 $x273)))
 (let (($x84 (=> $x21 $x81)))
 (let (($x293 (and $x21 $x271)))
 (let (($x272 (=> $x293 $x37)))
 (let (($x304 (bvuge ?x284 (_ bv1 32))))
 (let (($x303 (= $x259 $x304)))
 (let (($x270 (=> $x21 $x303)))
 (let (($x93 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x100 (=> $x93 $x37)))
 (let (($x302 (= ?x283 (_ bv0 32))))
 (let (($x268 (= $x250 $x302)))
 (let (($x269 (=> $x240 $x268)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x236))))
 (let (($x238 (= input.spec-%var-l-0.2.1.2.0 ?x258)))
 (let (($x253 (=> $x21 $x238)))
 (let (($x230 (= (_ bv0 32) ?x247)))
 (let ((?x208 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x208 (_ bv1 32))))
 (let (($x233 (= $x21 $x232)))
 (let (($x209 (= ?x208 (_ bv0 32))))
 (let (($x210 (= $x93 $x209)))
 (let (($x309 (and (and (and (and (and (and $x210 $x233) $x253) $x269) $x100) $x270) $x272)))
 (let (($x312 (and (and (and $x309 $x84) $x292) $x298)))
 (let (($x99 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x313 (=> $x99 $x312)))
 (let (($x12 (= $x313 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x228 (concat ?x231 (concat ?x212 ?x174)))))
 (let (($x195 (= ?x178 input.dst.llvm-%l)))
 (let (($x198 (= $x195 true)))
 (let (($x214 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x189 (and true $x180)))
 (let (($x187 (and $x180 $x189)))
 (let (($x191 (and $x187 $x214)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x14 (not $x11)))
 (let (($x192 (=> $x14 $x191)))
 (let (($x213 (= input.dst.llvm-%l ?x178)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x20 (concat ?x40 (concat ?x61 ?x62)))))
 (let (($x226 (= input.dst.llvm-%val ?x59)))
 (let ((?x161 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x161)))
 (let ((?x170 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x170)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x225 $x164)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x155 $x167)))
 (let (($x150 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x146 $x147)))
 (let (($x157 (not $x246)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x148 $x222)))
 (let (($x156 (and (not $x151) $x157)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x216 $x152)))
 (let (($x224 (not $x149)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x132 $x133)))
 (let (($x89 (and (not $x223) $x224)))
 (let (($x172 (and (and (and (and (and (and $x89 $x156) $x145) $x150) $x211) $x158) $x171)))
 (let (($x218 (and $x172 $x168)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x143 (or false (or false (and (and true (or $x215 $x142)) (or $x137 $x138))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x182 (and (and (and $x144 $x218) $x226) $x213)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x184 (and $x135 $x182)))
 (let (($x106 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x188 (and $x106 $x184)))
 (let (($x221 (and $x188 $x192)))
 (let (($x118 (=> $x99 $x105)))
 (let ((?x49 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (let (($x54 (= $x99 $x131)))
 (let (($x74 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x112 (=> $x74 $x37)))
 (let (($x32 (= ?x49 (_ bv0 32))))
 (let (($x13 (= $x74 $x32)))
 (let (($x63 (and (and (and $x13 $x112) $x54) $x118)))
 (let (($x203 (and $x63 $x221)))
 (let (($x201 (= $x203 true)))
 (let (($x68 (= $x14 true)))
 (let (($x114 (= $x106 true)))
 (let (($x101 (= ?x59 input.dst.llvm-%val)))
 (let (($x22 (= $x101 true)))
 (let (($x45 (and $x22 $x114)))
 (let (($x91 (and $x45 $x68)))
 (let (($x194 (and $x91 $x201)))
 (let (($x204 (and $x194 $x198)))
 (let (($x10 (and $x204 $x12)))
 (let (($x337 (and $x10 $x336)))
 (let (($x379 (and $x337 $x378)))
 (let (($x380 (and $x99 $x379)))
 (let (($x381 (and $x37 $x380)))
 (let (($x98 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x382 (and $x98 $x381)))
 (let (($x103 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x24 (= $x21 $x103)))
 (let (($x130 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x48 (= $x93 $x130)))
 (let (($x120 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x15 (and (and (and $x120 $x48) $x100) $x24)))
 (let (($x383 (and $x15 $x382)))
 (let (($x41 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x70 (=> $x21 $x41)))
 (let (($x19 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x119 (= $x21 $x19)))
 (let (($x108 (and (and (= $x93 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x100) $x119)))
 (let (($x28 (and $x108 $x70)))
 (let (($x384 (and $x28 $x383)))
 (let (($x34 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x385 (and $x34 $x384)))
 (let (($x113 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x71 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x73 (or false (or false (and (and true (or $x8 $x71)) (or $x29 $x113))))))
 (let (($x26 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x73)))
 (let (($x82 (=> (and $x14 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x73)))
 (let (($x386 (and $x82 $x385)))
 (let (($x388 (=> $x386 $x387)))
 (not $x388))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x43 (= $x136 true)))
 (let (($x362 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x361 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x363 (= $x361 $x362)))
 (let (($x122 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x254 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x352 (and $x254 $x122)))
 (let (($x375 (=> $x352 $x363)))
 (let (($x358 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x357 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x359 (= $x357 $x358)))
 (let (($x360 (=> $x352 $x359)))
 (let (($x354 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x355 (=> $x352 $x354)))
 (let (($x372 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x350 (= $x122 $x372)))
 (let (($x351 (=> $x254 $x350)))
 (let (($x100 (= false false)))
 (let (($x260 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x332 (and $x254 $x260)))
 (let (($x323 (=> $x332 $x100)))
 (let (($x348 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x349 (= $x260 $x348)))
 (let (($x371 (=> $x254 $x349)))
 (let (($x370 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x346 (=> $x254 $x370)))
 (let (($x308 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x57 (=> $x308 $x100)))
 (let (($x343 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x344 (= $x254 $x343)))
 (let (($x368 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x369 (= $x308 $x368)))
 (let (($x377 (and (and (and (and (and (and $x369 $x344) $x57) $x346) $x371) $x323) $x351)))
 (let (($x380 (and (and (and $x377 $x355) $x360) $x375)))
 (let (($x21 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x381 (=> $x21 $x380)))
 (let (($x382 (= $x381 true)))
 (let (($x324 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x333 (= $x122 $x324)))
 (let (($x325 (=> $x254 $x333)))
 (let (($x320 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x260 $x320)))
 (let (($x322 (=> $x254 $x321)))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x331 (=> $x254 $x318)))
 (let (($x27 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x330 (= $x254 $x27)))
 (let (($x33 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x329 (= $x308 $x33)))
 (let (($x328 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x337 (and (and (and (and (and (and $x328 $x329) $x330) $x57) $x331) $x322) $x323)))
 (let (($x338 (and $x337 $x325)))
 (let (($x339 (=> $x21 $x338)))
 (let (($x340 (= $x339 true)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x210 (concat ?x209 (concat ?x247 ?x196))))
 (let ((?x245 (bvadd ?x210 (_ bv4 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x255))))
 (let ((?x301 (bvadd ?x282 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x264))))
 (let (($x302 (= (_ bv0 32) ?x283)))
 (let ((?x268 (ite $x302 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x268 (_ bv1 32))))
 (let (($x292 (= $x122 $x280)))
 (let (($x250 (and $x21 $x254)))
 (let (($x311 (=> $x250 $x292)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem ?x282))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv2 32))) ?x295))))
 (let (($x86 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x294)))
 (let (($x278 (=> $x250 $x86)))
 (let (($x290 (= (_ bv0 32) ?x282)))
 (let ((?x284 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (= ?x284 (_ bv0 32))))
 (let (($x309 (= $x308 $x272)))
 (let (($x273 (=> $x21 $x309)))
 (let (($x271 (and $x21 $x308)))
 (let (($x293 (=> $x271 $x100)))
 (let (($x304 (bvuge ?x284 (_ bv1 32))))
 (let (($x303 (= $x254 $x304)))
 (let (($x270 (=> $x21 $x303)))
 (let (($x80 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x80 $x100)))
 (let (($x269 (= ?x268 (_ bv0 32))))
 (let (($x300 (= $x260 $x269)))
 (let (($x307 (=> $x250 $x300)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x248))))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.0 ?x299)))
 (let (($x259 (=> $x21 $x239)))
 (let (($x232 (= (_ bv0 32) ?x210)))
 (let ((?x233 (ite $x232 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x233 (_ bv1 32))))
 (let (($x249 (= $x21 $x261)))
 (let (($x306 (= ?x233 (_ bv0 32))))
 (let (($x237 (= $x80 $x306)))
 (let (($x313 (and (and (and (and (and (and $x237 $x249) $x259) $x307) $x51) $x270) $x293)))
 (let (($x115 (and (and (and $x313 $x273) $x278) $x311)))
 (let (($x88 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x129 (=> $x88 $x115)))
 (let (($x314 (= $x129 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x213 (concat ?x178 (concat ?x174 (concat ?x231 ?x228)))))
 (let (($x207 (= ?x213 input.dst.llvm-%val)))
 (let (($x199 (= $x207 true)))
 (let (($x203 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x229 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x214 (and true $x229)))
 (let (($x191 (and $x229 $x214)))
 (let (($x201 (and $x191 $x203)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x78 (not $x16)))
 (let (($x194 (=> $x78 $x201)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x68 (concat ?x106 (concat ?x101 ?x59)))))
 (let (($x184 (= input.dst.llvm-%l ?x91)))
 (let (($x182 (= input.dst.llvm-%val ?x213)))
 (let ((?x170 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x170)))
 (let ((?x158 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x158)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x225 $x164)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x155 $x167)))
 (let (($x162 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x246 $x157)))
 (let (($x163 (not $x156)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x217 $x146)))
 (let (($x166 (and (not $x147) $x163)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x149 $x224)))
 (let (($x148 (not $x89)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x125 $x215)))
 (let (($x151 (and (not $x152) $x148)))
 (let (($x226 (and (and (and (and (and (and $x151 $x166) $x150) $x162) $x211) $x160) $x169)))
 (let (($x183 (and $x226 $x171)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x223 (or false (or false (and (and true (or $x137 $x138)) (or $x141 $x143))))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x179 (and (and (and $x216 $x183) $x182) $x184)))
 (let (($x126 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x186 (and $x126 $x179)))
 (let (($x40 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x181 (and $x40 $x186)))
 (let (($x195 (and $x181 $x194)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x96)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x77)))
 (let (($x104 (= input.spec-%var-l-0.2.0 ?x127)))
 (let (($x105 (=> $x88 $x104)))
 (let ((?x13 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x13 (_ bv1 32))))
 (let (($x54 (= $x88 $x131)))
 (let (($x32 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x99 (=> $x32 $x100)))
 (let (($x112 (= ?x13 (_ bv0 32))))
 (let (($x92 (= $x32 $x112)))
 (let (($x9 (and (and (and $x92 $x99) $x54) $x105)))
 (let (($x198 (and $x9 $x195)))
 (let (($x204 (= $x198 true)))
 (let (($x111 (= ?x91 input.dst.llvm-%l)))
 (let (($x74 (= $x111 true)))
 (let (($x6 (= $x40 true)))
 (let (($x20 (= $x16 true)))
 (let (($x61 (and $x20 $x6)))
 (let (($x49 (and $x61 $x74)))
 (let (($x206 (and $x49 $x204)))
 (let (($x202 (and $x206 $x199)))
 (let (($x315 (and $x202 $x314)))
 (let (($x341 (and $x315 $x340)))
 (let (($x383 (and $x341 $x382)))
 (let (($x384 (and $x88 $x383)))
 (let (($x385 (and $x100 $x384)))
 (let (($x128 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x386 (and $x128 $x385)))
 (let (($x110 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x103 (= $x21 $x110)))
 (let (($x48 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x7 (= $x80 $x48)))
 (let (($x67 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x85 (and (and (and $x67 $x7) $x51) $x103)))
 (let (($x387 (and $x85 $x386)))
 (let (($x52 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x41 (=> $x21 $x52)))
 (let (($x19 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x119 (= $x21 $x19)))
 (let (($x28 (and (and (= $x80 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x51) $x119)))
 (let (($x72 (and $x28 $x41)))
 (let (($x388 (and $x72 $x387)))
 (let (($x107 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x389 (and $x107 $x388)))
 (let (($x30 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x82 (or false (or false (and (and true (or $x64 $x36)) (or $x94 $x30))))))
 (let (($x39 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x82)))
 (let (($x58 (=> (and $x78 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x82)))
 (let (($x116 (and $x58 $x389)))
 (let (($x173 (=> $x116 $x43)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x43 (= $x136 true)))
 (let (($x362 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x361 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x363 (= $x361 $x362)))
 (let (($x122 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x254 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x352 (and $x254 $x122)))
 (let (($x375 (=> $x352 $x363)))
 (let (($x358 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x357 (= input.spec-%var-l-0.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x359 (= $x357 $x358)))
 (let (($x360 (=> $x352 $x359)))
 (let (($x354 (= input.spec-%var-l-0.2.1.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.2.0)))
 (let (($x355 (=> $x352 $x354)))
 (let (($x372 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x350 (= $x122 $x372)))
 (let (($x351 (=> $x254 $x350)))
 (let (($x100 (= false false)))
 (let (($x260 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x332 (and $x254 $x260)))
 (let (($x323 (=> $x332 $x100)))
 (let (($x348 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x349 (= $x260 $x348)))
 (let (($x371 (=> $x254 $x349)))
 (let (($x370 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x346 (=> $x254 $x370)))
 (let (($x308 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x57 (=> $x308 $x100)))
 (let (($x343 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x344 (= $x254 $x343)))
 (let (($x368 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x369 (= $x308 $x368)))
 (let (($x377 (and (and (and (and (and (and $x369 $x344) $x57) $x346) $x371) $x323) $x351)))
 (let (($x380 (and (and (and $x377 $x355) $x360) $x375)))
 (let (($x21 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x381 (=> $x21 $x380)))
 (let (($x382 (= $x381 true)))
 (let (($x324 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x333 (= $x122 $x324)))
 (let (($x325 (=> $x254 $x333)))
 (let (($x320 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x260 $x320)))
 (let (($x322 (=> $x254 $x321)))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.1.2.0)))
 (let (($x331 (=> $x254 $x318)))
 (let (($x27 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x330 (= $x254 $x27)))
 (let (($x33 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x329 (= $x308 $x33)))
 (let (($x328 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x337 (and (and (and (and (and (and $x328 $x329) $x330) $x57) $x331) $x322) $x323)))
 (let (($x338 (and $x337 $x325)))
 (let (($x339 (=> $x21 $x338)))
 (let (($x340 (= $x339 true)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x210 (concat ?x209 (concat ?x247 ?x196))))
 (let ((?x245 (bvadd ?x210 (_ bv4 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x255))))
 (let ((?x301 (bvadd ?x282 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x264))))
 (let (($x302 (= (_ bv0 32) ?x283)))
 (let ((?x268 (ite $x302 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x268 (_ bv1 32))))
 (let (($x292 (= $x122 $x280)))
 (let (($x250 (and $x21 $x254)))
 (let (($x311 (=> $x250 $x292)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem ?x282))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv2 32))) ?x295))))
 (let (($x86 (= input.spec-%var-l-0.2.1.2.1.2.0 ?x294)))
 (let (($x278 (=> $x250 $x86)))
 (let (($x290 (= (_ bv0 32) ?x282)))
 (let ((?x284 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (= ?x284 (_ bv0 32))))
 (let (($x309 (= $x308 $x272)))
 (let (($x273 (=> $x21 $x309)))
 (let (($x271 (and $x21 $x308)))
 (let (($x293 (=> $x271 $x100)))
 (let (($x304 (bvuge ?x284 (_ bv1 32))))
 (let (($x303 (= $x254 $x304)))
 (let (($x270 (=> $x21 $x303)))
 (let (($x80 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x80 $x100)))
 (let (($x269 (= ?x268 (_ bv0 32))))
 (let (($x300 (= $x260 $x269)))
 (let (($x307 (=> $x250 $x300)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x248))))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.0 ?x299)))
 (let (($x259 (=> $x21 $x239)))
 (let (($x232 (= (_ bv0 32) ?x210)))
 (let ((?x233 (ite $x232 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x233 (_ bv1 32))))
 (let (($x249 (= $x21 $x261)))
 (let (($x306 (= ?x233 (_ bv0 32))))
 (let (($x237 (= $x80 $x306)))
 (let (($x313 (and (and (and (and (and (and $x237 $x249) $x259) $x307) $x51) $x270) $x293)))
 (let (($x115 (and (and (and $x313 $x273) $x278) $x311)))
 (let (($x88 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x129 (=> $x88 $x115)))
 (let (($x314 (= $x129 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x213 (concat ?x178 (concat ?x174 (concat ?x231 ?x228)))))
 (let (($x207 (= ?x213 input.dst.llvm-%val)))
 (let (($x199 (= $x207 true)))
 (let (($x203 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x229 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x214 (and true $x229)))
 (let (($x191 (and $x229 $x214)))
 (let (($x201 (and $x191 $x203)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x78 (not $x16)))
 (let (($x194 (=> $x78 $x201)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x68 (concat ?x106 (concat ?x101 ?x59)))))
 (let (($x184 (= input.dst.llvm-%l ?x91)))
 (let (($x182 (= input.dst.llvm-%val ?x213)))
 (let ((?x170 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x170)))
 (let ((?x158 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x158)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x225 $x164)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x155 $x167)))
 (let (($x162 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x246 $x157)))
 (let (($x163 (not $x156)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x217 $x146)))
 (let (($x166 (and (not $x147) $x163)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x149 $x224)))
 (let (($x148 (not $x89)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x125 $x215)))
 (let (($x151 (and (not $x152) $x148)))
 (let (($x226 (and (and (and (and (and (and $x151 $x166) $x150) $x162) $x211) $x160) $x169)))
 (let (($x183 (and $x226 $x171)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x223 (or false (or false (and (and true (or $x137 $x138)) (or $x141 $x143))))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x179 (and (and (and $x216 $x183) $x182) $x184)))
 (let (($x126 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x186 (and $x126 $x179)))
 (let (($x40 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x181 (and $x40 $x186)))
 (let (($x195 (and $x181 $x194)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x96)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x77)))
 (let (($x104 (= input.spec-%var-l-0.2.0 ?x127)))
 (let (($x105 (=> $x88 $x104)))
 (let ((?x13 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x13 (_ bv1 32))))
 (let (($x54 (= $x88 $x131)))
 (let (($x32 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x99 (=> $x32 $x100)))
 (let (($x112 (= ?x13 (_ bv0 32))))
 (let (($x92 (= $x32 $x112)))
 (let (($x9 (and (and (and $x92 $x99) $x54) $x105)))
 (let (($x198 (and $x9 $x195)))
 (let (($x204 (= $x198 true)))
 (let (($x111 (= ?x91 input.dst.llvm-%l)))
 (let (($x74 (= $x111 true)))
 (let (($x6 (= $x40 true)))
 (let (($x20 (= $x16 true)))
 (let (($x61 (and $x20 $x6)))
 (let (($x49 (and $x61 $x74)))
 (let (($x206 (and $x49 $x204)))
 (let (($x202 (and $x206 $x199)))
 (let (($x315 (and $x202 $x314)))
 (let (($x341 (and $x315 $x340)))
 (let (($x383 (and $x341 $x382)))
 (let (($x384 (and $x88 $x383)))
 (let (($x385 (and $x100 $x384)))
 (let (($x128 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x386 (and $x128 $x385)))
 (let (($x110 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x103 (= $x21 $x110)))
 (let (($x48 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x7 (= $x80 $x48)))
 (let (($x67 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x85 (and (and (and $x67 $x7) $x51) $x103)))
 (let (($x387 (and $x85 $x386)))
 (let (($x52 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x41 (=> $x21 $x52)))
 (let (($x19 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x119 (= $x21 $x19)))
 (let (($x28 (and (and (= $x80 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))) $x51) $x119)))
 (let (($x72 (and $x28 $x41)))
 (let (($x388 (and $x72 $x387)))
 (let (($x107 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x389 (and $x107 $x388)))
 (let (($x30 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x82 (or false (or false (and (and true (or $x64 $x36)) (or $x94 $x30))))))
 (let (($x39 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x82)))
 (let (($x58 (=> (and $x78 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x82)))
 (let (($x116 (and $x58 $x389)))
 (let (($x173 (=> $x116 $x43)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x228)))
 (let (($x323 (= input.spec-%var-val-0 ?x219)))
 (let (($x337 (= $x323 true)))
 (let (($x317 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x328 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x33 (= $x328 $x317)))
 (let (($x254 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x278 (and $x204 $x254)))
 (let (($x329 (=> $x278 $x33)))
 (let (($x314 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x315 (= $x115 $x314)))
 (let (($x316 (=> $x278 $x315)))
 (let (($x280 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x292 (=> $x278 $x280)))
 (let (($x277 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x254 $x277)))
 (let (($x86 (=> $x204 $x294)))
 (let (($x42 (= false false)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x307 (and $x204 $x261)))
 (let (($x297 (=> $x307 $x42)))
 (let (($x274 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x84 (= $x261 $x274)))
 (let (($x295 (=> $x204 $x84)))
 (let (($x279 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x276 (=> $x204 $x279)))
 (let (($x81 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x291 (= $x204 $x81)))
 (let (($x184 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x266 (=> $x184 $x42)))
 (let (($x273 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x12 (= $x184 $x273)))
 (let (($x334 (and (and (and (and (and (and $x12 $x266) $x291) $x276) $x295) $x297) $x86)))
 (let (($x331 (and (and (and $x334 $x292) $x316) $x329)))
 (let (($x335 (= $x331 true)))
 (let (($x298 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x290 (= $x254 $x298)))
 (let (($x284 (=> $x204 $x290)))
 (let (($x268 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x269 (= $x261 $x268)))
 (let (($x300 (=> $x204 $x269)))
 (let (($x288 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x283 (=> $x204 $x288)))
 (let (($x263 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x281 (= $x204 $x263)))
 (let (($x287 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x265 (= $x184 $x287)))
 (let (($x289 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x271 (and (and (and (and (and (and $x289 $x265) $x266) $x281) $x283) $x300) $x297)))
 (let (($x293 (and $x271 $x284)))
 (let (($x313 (= $x293 true)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x214 (concat ?x187 ?x189))))
 (let ((?x249 (bvadd ?x191 (_ bv4 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x236))))
 (let (($x299 (= (_ bv0 32) ?x258)))
 (let ((?x239 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x239 (_ bv1 32))))
 (let (($x241 (= $x254 $x250)))
 (let (($x171 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x202 (and $x171 $x204)))
 (let (($x260 (=> $x202 $x241)))
 (let (($x259 (= ?x239 (_ bv0 32))))
 (let (($x305 (= $x261 $x259)))
 (let (($x240 (=> $x202 $x305)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x193))))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.0 ?x232)))
 (let (($x306 (=> $x202 $x233)))
 (let (($x192 (= (_ bv0 32) ?x191)))
 (let ((?x221 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x221 (_ bv1 32))))
 (let (($x207 (= $x204 $x206)))
 (let (($x199 (=> $x171 $x207)))
 (let (($x195 (and $x171 $x184)))
 (let (($x198 (=> $x195 $x42)))
 (let (($x203 (= ?x221 (_ bv0 32))))
 (let (($x201 (= $x184 $x203)))
 (let (($x194 (=> $x171 $x201)))
 (let (($x213 (= input.spec-%var-l-0.2.0 ?x219)))
 (let (($x182 (=> $x171 $x213)))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x158 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x158 (_ bv1 32))))
 (let (($x188 (= $x171 $x183)))
 (let (($x93 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x170 (=> $x93 $x42)))
 (let (($x169 (= ?x158 (_ bv0 32))))
 (let (($x226 (= $x93 $x169)))
 (let (($x262 (and (and (and (and (and (and $x226 $x170) $x188) $x182) $x194) $x198) $x199)))
 (let (($x255 (and (and (and $x262 $x306) $x240) $x260)))
 (let (($x244 (= $x255 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x148 (concat ?x149 (concat ?x215 ?x216)))))
 (let (($x159 (= ?x151 input.dst.llvm-%l)))
 (let (($x160 (= $x159 true)))
 (let (($x155 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x153 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x150 (and true $x153)))
 (let (($x161 (and $x153 $x150)))
 (let (($x225 (and $x161 $x155)))
 (let (($x11 (not $x135)))
 (let (($x165 (=> $x11 $x225)))
 (let (($x217 (= input.dst.llvm-%l ?x151)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x58 (concat ?x82 (concat ?x90 ?x113)))))
 (let (($x133 (= input.dst.llvm-%val ?x76)))
 (let ((?x35 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x35)))
 (let ((?x140 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x140)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x127 $x105)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x77 $x9)))
 (let (($x96 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x79 $x91)))
 (let (($x65 (not $x111)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x112 $x114)))
 (let (($x109 (and (not $x49) $x65)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x6 $x61)))
 (let (($x118 (not $x74)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x106 $x25)))
 (let (($x99 (and (not $x103) $x118)))
 (let (($x144 (and (and (and (and (and (and $x99 $x109) $x53) $x96) $x123) $x142) $x154)))
 (let (($x132 (and $x144 $x137)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x69 (or false (or false (and (and true (or $x56 $x46)) (or $x20 $x40))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x69)))
 (let (($x145 (and (and (and $x110 $x132) $x133) $x217)))
 (let (($x60 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x246 (and $x60 $x145)))
 (let (($x52 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x157 (and $x52 $x246)))
 (let (($x164 (and $x157 $x165)))
 (let (($x167 (and true $x164)))
 (let (($x211 (= $x167 true)))
 (let (($x13 (= $x11 true)))
 (let (($x72 (= $x52 true)))
 (let (($x119 (= ?x76 input.dst.llvm-%val)))
 (let (($x28 (= $x119 true)))
 (let (($x120 (and $x28 $x72)))
 (let (($x68 (and $x120 $x13)))
 (let (($x218 (and $x68 $x211)))
 (let (($x220 (and $x218 $x160)))
 (let (($x282 (and $x220 $x244)))
 (let (($x272 (and $x282 $x313)))
 (let (($x319 (and $x272 $x335)))
 (let (($x320 (and $x93 $x319)))
 (let (($x321 (and $x42 $x320)))
 (let (($x41 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x322 (and $x41 $x321)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x336 (and $x21 $x322)))
 (let (($x85 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x50 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x63 (or false (or false (and (and true (or $x36 $x50)) (or $x7 $x85))))))
 (let (($x51 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x63)))
 (let (($x95 (=> (and $x11 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x63)))
 (let (($x332 (and $x95 $x336)))
 (let (($x324 (=> $x332 $x337)))
 (not $x324)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x228)))
 (let (($x323 (= input.spec-%var-val-0 ?x219)))
 (let (($x337 (= $x323 true)))
 (let (($x317 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x328 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x33 (= $x328 $x317)))
 (let (($x254 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x278 (and $x204 $x254)))
 (let (($x329 (=> $x278 $x33)))
 (let (($x314 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x315 (= $x115 $x314)))
 (let (($x316 (=> $x278 $x315)))
 (let (($x280 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x292 (=> $x278 $x280)))
 (let (($x277 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x254 $x277)))
 (let (($x86 (=> $x204 $x294)))
 (let (($x42 (= false false)))
 (let (($x261 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x307 (and $x204 $x261)))
 (let (($x297 (=> $x307 $x42)))
 (let (($x274 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x84 (= $x261 $x274)))
 (let (($x295 (=> $x204 $x84)))
 (let (($x279 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x276 (=> $x204 $x279)))
 (let (($x81 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x291 (= $x204 $x81)))
 (let (($x184 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x266 (=> $x184 $x42)))
 (let (($x273 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x12 (= $x184 $x273)))
 (let (($x334 (and (and (and (and (and (and $x12 $x266) $x291) $x276) $x295) $x297) $x86)))
 (let (($x331 (and (and (and $x334 $x292) $x316) $x329)))
 (let (($x335 (= $x331 true)))
 (let (($x298 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x290 (= $x254 $x298)))
 (let (($x284 (=> $x204 $x290)))
 (let (($x268 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x269 (= $x261 $x268)))
 (let (($x300 (=> $x204 $x269)))
 (let (($x288 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x283 (=> $x204 $x288)))
 (let (($x263 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x281 (= $x204 $x263)))
 (let (($x287 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x265 (= $x184 $x287)))
 (let (($x289 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x271 (and (and (and (and (and (and $x289 $x265) $x266) $x281) $x283) $x300) $x297)))
 (let (($x293 (and $x271 $x284)))
 (let (($x313 (= $x293 true)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x214 (concat ?x187 ?x189))))
 (let ((?x249 (bvadd ?x191 (_ bv4 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x236))))
 (let (($x299 (= (_ bv0 32) ?x258)))
 (let ((?x239 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x239 (_ bv1 32))))
 (let (($x241 (= $x254 $x250)))
 (let (($x171 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x202 (and $x171 $x204)))
 (let (($x260 (=> $x202 $x241)))
 (let (($x259 (= ?x239 (_ bv0 32))))
 (let (($x305 (= $x261 $x259)))
 (let (($x240 (=> $x202 $x305)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x193))))
 (let (($x233 (= input.spec-%var-l-0.2.1.2.0 ?x232)))
 (let (($x306 (=> $x202 $x233)))
 (let (($x192 (= (_ bv0 32) ?x191)))
 (let ((?x221 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x221 (_ bv1 32))))
 (let (($x207 (= $x204 $x206)))
 (let (($x199 (=> $x171 $x207)))
 (let (($x195 (and $x171 $x184)))
 (let (($x198 (=> $x195 $x42)))
 (let (($x203 (= ?x221 (_ bv0 32))))
 (let (($x201 (= $x184 $x203)))
 (let (($x194 (=> $x171 $x201)))
 (let (($x213 (= input.spec-%var-l-0.2.0 ?x219)))
 (let (($x182 (=> $x171 $x213)))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x158 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x158 (_ bv1 32))))
 (let (($x188 (= $x171 $x183)))
 (let (($x93 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x170 (=> $x93 $x42)))
 (let (($x169 (= ?x158 (_ bv0 32))))
 (let (($x226 (= $x93 $x169)))
 (let (($x262 (and (and (and (and (and (and $x226 $x170) $x188) $x182) $x194) $x198) $x199)))
 (let (($x255 (and (and (and $x262 $x306) $x240) $x260)))
 (let (($x244 (= $x255 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x148 (concat ?x149 (concat ?x215 ?x216)))))
 (let (($x159 (= ?x151 input.dst.llvm-%l)))
 (let (($x160 (= $x159 true)))
 (let (($x155 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x153 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x150 (and true $x153)))
 (let (($x161 (and $x153 $x150)))
 (let (($x225 (and $x161 $x155)))
 (let (($x11 (not $x135)))
 (let (($x165 (=> $x11 $x225)))
 (let (($x217 (= input.dst.llvm-%l ?x151)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x58 (concat ?x82 (concat ?x90 ?x113)))))
 (let (($x133 (= input.dst.llvm-%val ?x76)))
 (let ((?x35 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x35)))
 (let ((?x140 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x140)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x127 $x105)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x77 $x9)))
 (let (($x96 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x79 $x91)))
 (let (($x65 (not $x111)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x112 $x114)))
 (let (($x109 (and (not $x49) $x65)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x6 $x61)))
 (let (($x118 (not $x74)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x106 $x25)))
 (let (($x99 (and (not $x103) $x118)))
 (let (($x144 (and (and (and (and (and (and $x99 $x109) $x53) $x96) $x123) $x142) $x154)))
 (let (($x132 (and $x144 $x137)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x69 (or false (or false (and (and true (or $x56 $x46)) (or $x20 $x40))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x69)))
 (let (($x145 (and (and (and $x110 $x132) $x133) $x217)))
 (let (($x60 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x246 (and $x60 $x145)))
 (let (($x52 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x157 (and $x52 $x246)))
 (let (($x164 (and $x157 $x165)))
 (let (($x167 (and true $x164)))
 (let (($x211 (= $x167 true)))
 (let (($x13 (= $x11 true)))
 (let (($x72 (= $x52 true)))
 (let (($x119 (= ?x76 input.dst.llvm-%val)))
 (let (($x28 (= $x119 true)))
 (let (($x120 (and $x28 $x72)))
 (let (($x68 (and $x120 $x13)))
 (let (($x218 (and $x68 $x211)))
 (let (($x220 (and $x218 $x160)))
 (let (($x282 (and $x220 $x244)))
 (let (($x272 (and $x282 $x313)))
 (let (($x319 (and $x272 $x335)))
 (let (($x320 (and $x93 $x319)))
 (let (($x321 (and $x42 $x320)))
 (let (($x41 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x322 (and $x41 $x321)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x336 (and $x21 $x322)))
 (let (($x85 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x50 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x63 (or false (or false (and (and true (or $x36 $x50)) (or $x7 $x85))))))
 (let (($x51 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x63)))
 (let (($x95 (=> (and $x11 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x63)))
 (let (($x332 (and $x95 $x336)))
 (let (($x324 (=> $x332 $x337)))
 (not $x324)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x18 (= $x46 true)))
 (let (($x316 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x315 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x318 (= $x315 $x316)))
 (let (($x305 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x334 (and $x204 $x305)))
 (let (($x328 (=> $x334 $x318)))
 (let (($x115 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x124 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x124 $x115)))
 (let (($x314 (=> $x334 $x129)))
 (let (($x122 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x280 (=> $x334 $x122)))
 (let (($x277 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x305 $x277)))
 (let (($x86 (=> $x204 $x294)))
 (let (($x117 (= false false)))
 (let (($x242 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x307 (and $x204 $x242)))
 (let (($x297 (=> $x307 $x117)))
 (let (($x295 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x327 (= $x242 $x295)))
 (let (($x57 (=> $x204 $x327)))
 (let (($x310 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x274 (=> $x204 $x310)))
 (let (($x279 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x276 (= $x204 $x279)))
 (let (($x214 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x270 (=> $x214 $x117)))
 (let (($x27 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x275 (= $x214 $x27)))
 (let (($x319 (and (and (and (and (and (and $x275 $x270) $x276) $x274) $x57) $x297) $x86)))
 (let (($x322 (and (and (and $x319 $x280) $x314) $x328)))
 (let (($x336 (= $x322 true)))
 (let (($x271 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x305 $x271)))
 (let (($x290 (=> $x204 $x298)))
 (let (($x269 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x300 (= $x242 $x269)))
 (let (($x308 (=> $x204 $x300)))
 (let (($x312 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x302 (=> $x204 $x312)))
 (let (($x264 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x288 (= $x204 $x264)))
 (let (($x263 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x281 (= $x214 $x263)))
 (let (($x266 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x273 (and (and (and (and (and (and $x266 $x281) $x270) $x288) $x302) $x308) $x297)))
 (let (($x12 (and $x273 $x290)))
 (let (($x326 (= $x12 true)))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x186 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x221 (concat ?x192 (concat ?x189 ?x181))))
 (let ((?x237 (bvadd ?x221 (_ bv4 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x248))))
 (let (($x235 (= (_ bv0 32) ?x236)))
 (let ((?x258 (ite $x235 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x258 (_ bv1 32))))
 (let (($x243 (= $x305 $x240)))
 (let (($x227 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x262 (and $x227 $x204)))
 (let (($x254 (=> $x262 $x243)))
 (let (($x299 (= ?x258 (_ bv0 32))))
 (let (($x239 (= $x242 $x299)))
 (let (($x259 (=> $x262 $x239)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x197))))
 (let (($x232 (= input.spec-%var-l-0.2.1.2.0 ?x196)))
 (let (($x233 (=> $x262 $x232)))
 (let (($x203 (= (_ bv0 32) ?x221)))
 (let ((?x201 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x201 (_ bv1 32))))
 (let (($x207 (= $x204 $x206)))
 (let (($x199 (=> $x227 $x207)))
 (let (($x198 (and $x227 $x214)))
 (let (($x251 (=> $x198 $x117)))
 (let (($x194 (= ?x201 (_ bv0 32))))
 (let (($x286 (= $x214 $x194)))
 (let (($x195 (=> $x227 $x286)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x213)))
 (let (($x185 (= input.spec-%var-l-0.2.0 ?x257)))
 (let (($x184 (=> $x227 $x185)))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x171 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x171 (_ bv1 32))))
 (let (($x231 (= $x227 $x175)))
 (let (($x121 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x256 (=> $x121 $x117)))
 (let (($x183 (= ?x171 (_ bv0 32))))
 (let (($x188 (= $x121 $x183)))
 (let (($x282 (and (and (and (and (and (and $x188 $x256) $x231) $x184) $x195) $x251) $x199)))
 (let (($x267 (and (and (and $x282 $x233) $x259) $x254)))
 (let (($x287 (= $x267 true)))
 (let ((?x215 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x157 (concat ?x217 (concat ?x152 ?x215)))))
 (let (($x42 (= ?x163 input.dst.llvm-%val)))
 (let (($x170 (= $x42 true)))
 (let (($x160 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x164 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x167 (and true $x164)))
 (let (($x211 (and $x164 $x167)))
 (let (($x220 (and $x211 $x160)))
 (let (($x11 (not $x135)))
 (let (($x107 (=> $x11 $x220)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x45 (concat ?x120 (concat ?x108 ?x119)))))
 (let (($x166 (= input.dst.llvm-%l ?x60)))
 (let (($x156 (= input.dst.llvm-%val ?x163)))
 (let ((?x137 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x137)))
 (let ((?x144 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x144)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x123 $x126)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x9 $x142)))
 (let (($x105 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x53 $x134)))
 (let (($x96 (not $x83)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x65 $x109)))
 (let (($x77 (and (not $x138) $x96)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x114 $x49)))
 (let (($x79 (not $x87)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x98 $x20)))
 (let (($x111 (and (not $x112) $x79)))
 (let (($x222 (and (and (and (and (and (and $x111 $x77) $x104) $x105) $x143) $x154) $x35)))
 (let (($x149 (and $x222 $x132)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x74 (or false (or false (and (and true (or $x54 $x69)) (or $x25 $x103))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x150 (and (and (and $x99 $x149) $x156) $x166)))
 (let (($x161 (and $x46 $x150)))
 (let (($x90 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x162 (and $x90 $x161)))
 (let (($x93 (and $x162 $x107)))
 (let (($x158 (and true $x93)))
 (let (($x169 (= $x158 true)))
 (let (($x55 (= ?x60 input.dst.llvm-%l)))
 (let (($x101 (= $x55 true)))
 (let (($x113 (= $x90 true)))
 (let (($x26 (= $x135 true)))
 (let (($x73 (and $x26 $x113)))
 (let (($x15 (and $x73 $x101)))
 (let (($x226 (and $x15 $x169)))
 (let (($x245 (and $x226 $x170)))
 (let (($x265 (and $x245 $x287)))
 (let (($x81 (and $x265 $x326)))
 (let (($x332 (and $x81 $x336)))
 (let (($x323 (and $x121 $x332)))
 (let (($x337 (and $x117 $x323)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x324 (and $x94 $x337)))
 (let (($x41 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x333 (and $x41 $x324)))
 (let (($x32 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x30 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x31 (or false (or false (and (and true (or $x130 $x30)) (or $x22 $x32))))))
 (let (($x21 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x5 (=> (and $x11 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x102 (and $x5 $x333)))
 (let (($x62 (=> $x102 $x18)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x18 (= $x46 true)))
 (let (($x316 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x315 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x318 (= $x315 $x316)))
 (let (($x305 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x334 (and $x204 $x305)))
 (let (($x328 (=> $x334 $x318)))
 (let (($x115 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x124 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x124 $x115)))
 (let (($x314 (=> $x334 $x129)))
 (let (($x122 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x280 (=> $x334 $x122)))
 (let (($x277 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x305 $x277)))
 (let (($x86 (=> $x204 $x294)))
 (let (($x117 (= false false)))
 (let (($x242 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x307 (and $x204 $x242)))
 (let (($x297 (=> $x307 $x117)))
 (let (($x295 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x327 (= $x242 $x295)))
 (let (($x57 (=> $x204 $x327)))
 (let (($x310 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x274 (=> $x204 $x310)))
 (let (($x279 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x276 (= $x204 $x279)))
 (let (($x214 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x270 (=> $x214 $x117)))
 (let (($x27 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x275 (= $x214 $x27)))
 (let (($x319 (and (and (and (and (and (and $x275 $x270) $x276) $x274) $x57) $x297) $x86)))
 (let (($x322 (and (and (and $x319 $x280) $x314) $x328)))
 (let (($x336 (= $x322 true)))
 (let (($x271 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x305 $x271)))
 (let (($x290 (=> $x204 $x298)))
 (let (($x269 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x300 (= $x242 $x269)))
 (let (($x308 (=> $x204 $x300)))
 (let (($x312 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x302 (=> $x204 $x312)))
 (let (($x264 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x288 (= $x204 $x264)))
 (let (($x263 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x281 (= $x214 $x263)))
 (let (($x266 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x273 (and (and (and (and (and (and $x266 $x281) $x270) $x288) $x302) $x308) $x297)))
 (let (($x12 (and $x273 $x290)))
 (let (($x326 (= $x12 true)))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x186 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x221 (concat ?x192 (concat ?x189 ?x181))))
 (let ((?x237 (bvadd ?x221 (_ bv4 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x248))))
 (let (($x235 (= (_ bv0 32) ?x236)))
 (let ((?x258 (ite $x235 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x258 (_ bv1 32))))
 (let (($x243 (= $x305 $x240)))
 (let (($x227 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x262 (and $x227 $x204)))
 (let (($x254 (=> $x262 $x243)))
 (let (($x299 (= ?x258 (_ bv0 32))))
 (let (($x239 (= $x242 $x299)))
 (let (($x259 (=> $x262 $x239)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x197))))
 (let (($x232 (= input.spec-%var-l-0.2.1.2.0 ?x196)))
 (let (($x233 (=> $x262 $x232)))
 (let (($x203 (= (_ bv0 32) ?x221)))
 (let ((?x201 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x201 (_ bv1 32))))
 (let (($x207 (= $x204 $x206)))
 (let (($x199 (=> $x227 $x207)))
 (let (($x198 (and $x227 $x214)))
 (let (($x251 (=> $x198 $x117)))
 (let (($x194 (= ?x201 (_ bv0 32))))
 (let (($x286 (= $x214 $x194)))
 (let (($x195 (=> $x227 $x286)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x213)))
 (let (($x185 (= input.spec-%var-l-0.2.0 ?x257)))
 (let (($x184 (=> $x227 $x185)))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x171 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x171 (_ bv1 32))))
 (let (($x231 (= $x227 $x175)))
 (let (($x121 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x256 (=> $x121 $x117)))
 (let (($x183 (= ?x171 (_ bv0 32))))
 (let (($x188 (= $x121 $x183)))
 (let (($x282 (and (and (and (and (and (and $x188 $x256) $x231) $x184) $x195) $x251) $x199)))
 (let (($x267 (and (and (and $x282 $x233) $x259) $x254)))
 (let (($x287 (= $x267 true)))
 (let ((?x215 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x157 (concat ?x217 (concat ?x152 ?x215)))))
 (let (($x42 (= ?x163 input.dst.llvm-%val)))
 (let (($x170 (= $x42 true)))
 (let (($x160 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x164 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x167 (and true $x164)))
 (let (($x211 (and $x164 $x167)))
 (let (($x220 (and $x211 $x160)))
 (let (($x11 (not $x135)))
 (let (($x107 (=> $x11 $x220)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x45 (concat ?x120 (concat ?x108 ?x119)))))
 (let (($x166 (= input.dst.llvm-%l ?x60)))
 (let (($x156 (= input.dst.llvm-%val ?x163)))
 (let ((?x137 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x137)))
 (let ((?x144 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x144)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x123 $x126)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x9 $x142)))
 (let (($x105 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x53 $x134)))
 (let (($x96 (not $x83)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x65 $x109)))
 (let (($x77 (and (not $x138) $x96)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x114 $x49)))
 (let (($x79 (not $x87)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x98 $x20)))
 (let (($x111 (and (not $x112) $x79)))
 (let (($x222 (and (and (and (and (and (and $x111 $x77) $x104) $x105) $x143) $x154) $x35)))
 (let (($x149 (and $x222 $x132)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x74 (or false (or false (and (and true (or $x54 $x69)) (or $x25 $x103))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x150 (and (and (and $x99 $x149) $x156) $x166)))
 (let (($x161 (and $x46 $x150)))
 (let (($x90 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x162 (and $x90 $x161)))
 (let (($x93 (and $x162 $x107)))
 (let (($x158 (and true $x93)))
 (let (($x169 (= $x158 true)))
 (let (($x55 (= ?x60 input.dst.llvm-%l)))
 (let (($x101 (= $x55 true)))
 (let (($x113 (= $x90 true)))
 (let (($x26 (= $x135 true)))
 (let (($x73 (and $x26 $x113)))
 (let (($x15 (and $x73 $x101)))
 (let (($x226 (and $x15 $x169)))
 (let (($x245 (and $x226 $x170)))
 (let (($x265 (and $x245 $x287)))
 (let (($x81 (and $x265 $x326)))
 (let (($x332 (and $x81 $x336)))
 (let (($x323 (and $x121 $x332)))
 (let (($x337 (and $x117 $x323)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x324 (and $x94 $x337)))
 (let (($x41 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x333 (and $x41 $x324)))
 (let (($x32 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x30 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x31 (or false (or false (and (and true (or $x130 $x30)) (or $x22 $x32))))))
 (let (($x21 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x5 (=> (and $x11 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x102 (and $x5 $x333)))
 (let (($x62 (=> $x102 $x18)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x11 (not $x135)))
 (let (($x280 (or $x135 $x11)))
 (let (($x320 (= $x280 true)))
 (let (($x330 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x310 (= $x33 $x330)))
 (let (($x230 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x257 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x298 (and $x257 $x230)))
 (let (($x274 (=> $x298 $x310)))
 (let (($x317 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x27 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x27 $x317)))
 (let (($x276 (=> $x298 $x279)))
 (let (($x326 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x81 (=> $x298 $x326)))
 (let (($x297 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x273 (= $x230 $x297)))
 (let (($x271 (=> $x257 $x273)))
 (let (($x80 (= false false)))
 (let (($x286 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x243 (and $x257 $x286)))
 (let (($x254 (=> $x243 $x80)))
 (let (($x308 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x309 (= $x286 $x308)))
 (let (($x307 (=> $x257 $x309)))
 (let (($x268 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x269 (=> $x257 $x268)))
 (let (($x312 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x302 (= $x257 $x312)))
 (let (($x171 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x238 (=> $x171 $x80)))
 (let (($x313 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x283 (= $x171 $x313)))
 (let (($x331 (and (and (and (and (and (and $x283 $x238) $x302) $x269) $x307) $x254) $x271)))
 (let (($x294 (and (and (and $x331 $x81) $x276) $x274)))
 (let (($x86 (= $x294 true)))
 (let (($x267 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x287 (= $x230 $x267)))
 (let (($x265 (=> $x257 $x287)))
 (let (($x289 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x305 (= $x286 $x289)))
 (let (($x240 (=> $x257 $x305)))
 (let (($x299 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x239 (=> $x257 $x299)))
 (let (($x236 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x235 (= $x257 $x236)))
 (let (($x261 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x248 (= $x171 $x261)))
 (let (($x249 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x284 (and (and (and (and (and (and $x249 $x248) $x238) $x235) $x239) $x240) $x254)))
 (let (($x270 (and $x284 $x265)))
 (let (($x293 (= $x270 true)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x256 (concat ?x117 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x182 (concat ?x241 (concat ?x227 ?x256))))
 (let ((?x195 (bvadd ?x182 (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x244))))
 (let (($x202 (= (_ bv0 32) ?x262)))
 (let ((?x209 (ite $x202 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x209 (_ bv1 32))))
 (let (($x208 (= $x230 $x210)))
 (let (($x211 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x229 (and $x211 $x257)))
 (let (($x197 (=> $x229 $x208)))
 (let (($x193 (= ?x209 (_ bv0 32))))
 (let (($x200 (= $x286 $x193)))
 (let (($x205 (=> $x229 $x200)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x189))))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 ?x221)))
 (let (($x201 (=> $x229 $x203)))
 (let (($x228 (= (_ bv0 32) ?x182)))
 (let ((?x219 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x219 (_ bv1 32))))
 (let (($x184 (= $x257 $x185)))
 (let (($x260 (=> $x211 $x184)))
 (let (($x174 (and $x211 $x171)))
 (let (($x213 (=> $x174 $x80)))
 (let (($x212 (= ?x219 (_ bv0 32))))
 (let (($x176 (= $x171 $x212)))
 (let (($x178 (=> $x211 $x176)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x93)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x226)))
 (let (($x245 (= input.spec-%var-l-0.2.0 ?x170)))
 (let (($x58 (=> $x211 $x245)))
 (let ((?x225 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge ?x225 (_ bv1 32))))
 (let (($x159 (= $x211 $x218)))
 (let (($x168 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x167 (=> $x168 $x80)))
 (let (($x165 (= ?x225 (_ bv0 32))))
 (let (($x164 (= $x168 $x165)))
 (let (($x306 (and (and (and (and (and (and $x164 $x167) $x159) $x58) $x178) $x213) $x260)))
 (let (($x253 (and (and (and $x306 $x201) $x205) $x197)))
 (let (($x296 (= $x253 true)))
 (let ((?x217 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x153 (concat ?x145 (concat ?x152 ?x217)))))
 (let (($x150 (= ?x166 input.dst.llvm-%l)))
 (let (($x161 (= $x150 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x132 (concat ?x35 (concat ?x140 ?x143)))))
 (let (($x172 (= ?x149 input.dst.llvm-%val)))
 (let (($x246 (= $x172 true)))
 (let ((?x83 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x83)))
 (let ((?x53 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x53)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x87 $x111)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x49 $x65)))
 (let (($x114 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x92 $x6)))
 (let (($x74 (not $x61)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x106 $x25)))
 (let (($x98 (and (not $x103) $x74)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x88 $x118)))
 (let (($x54 (not $x131)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x68 $x45)))
 (let (($x110 (and (not $x40) $x54)))
 (let (($x105 (and (and (and (and (and (and $x110 $x98) $x112) $x114) $x109) $x139) $x134)))
 (let (($x147 (and $x105 $x96)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x128 (or false (or false (and (and true (or $x28 $x108)) (or $x13 $x60))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x9 (and $x46 $x147)))
 (let (($x123 (= $x9 true)))
 (let (($x73 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x39 (= $x73 true)))
 (let (($x141 (and $x39 $x123)))
 (let (($x157 (and $x141 $x246)))
 (let (($x162 (and $x157 $x161)))
 (let (($x252 (and $x162 $x296)))
 (let (($x264 (and $x252 $x293)))
 (let (($x319 (and $x264 $x86)))
 (let (($x334 (and $x80 $x319)))
 (let (($x82 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x278 (and $x82 $x334)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x10 (and $x94 $x278)))
 (let (($x95 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x85 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x100 (or false (or false (and (and true (or $x48 $x85)) (or $x51 $x95))))))
 (let (($x41 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x100)))
 (let (($x8 (=> (and $x11 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x100)))
 (let (($x122 (and $x8 $x10)))
 (let (($x292 (=> $x122 $x320)))
 (not $x292)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x11 (not $x135)))
 (let (($x280 (or $x135 $x11)))
 (let (($x320 (= $x280 true)))
 (let (($x330 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x310 (= $x33 $x330)))
 (let (($x230 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x257 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x298 (and $x257 $x230)))
 (let (($x274 (=> $x298 $x310)))
 (let (($x317 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x27 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x27 $x317)))
 (let (($x276 (=> $x298 $x279)))
 (let (($x326 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x81 (=> $x298 $x326)))
 (let (($x297 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x273 (= $x230 $x297)))
 (let (($x271 (=> $x257 $x273)))
 (let (($x80 (= false false)))
 (let (($x286 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x243 (and $x257 $x286)))
 (let (($x254 (=> $x243 $x80)))
 (let (($x308 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x309 (= $x286 $x308)))
 (let (($x307 (=> $x257 $x309)))
 (let (($x268 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x269 (=> $x257 $x268)))
 (let (($x312 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x302 (= $x257 $x312)))
 (let (($x171 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x238 (=> $x171 $x80)))
 (let (($x313 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x283 (= $x171 $x313)))
 (let (($x331 (and (and (and (and (and (and $x283 $x238) $x302) $x269) $x307) $x254) $x271)))
 (let (($x294 (and (and (and $x331 $x81) $x276) $x274)))
 (let (($x86 (= $x294 true)))
 (let (($x267 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x287 (= $x230 $x267)))
 (let (($x265 (=> $x257 $x287)))
 (let (($x289 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x305 (= $x286 $x289)))
 (let (($x240 (=> $x257 $x305)))
 (let (($x299 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x239 (=> $x257 $x299)))
 (let (($x236 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x235 (= $x257 $x236)))
 (let (($x261 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x248 (= $x171 $x261)))
 (let (($x249 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x284 (and (and (and (and (and (and $x249 $x248) $x238) $x235) $x239) $x240) $x254)))
 (let (($x270 (and $x284 $x265)))
 (let (($x293 (= $x270 true)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x256 (concat ?x117 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x182 (concat ?x241 (concat ?x227 ?x256))))
 (let ((?x195 (bvadd ?x182 (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x244))))
 (let (($x202 (= (_ bv0 32) ?x262)))
 (let ((?x209 (ite $x202 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x209 (_ bv1 32))))
 (let (($x208 (= $x230 $x210)))
 (let (($x211 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x229 (and $x211 $x257)))
 (let (($x197 (=> $x229 $x208)))
 (let (($x193 (= ?x209 (_ bv0 32))))
 (let (($x200 (= $x286 $x193)))
 (let (($x205 (=> $x229 $x200)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x189))))
 (let (($x203 (= input.spec-%var-l-0.2.1.2.0 ?x221)))
 (let (($x201 (=> $x229 $x203)))
 (let (($x228 (= (_ bv0 32) ?x182)))
 (let ((?x219 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x219 (_ bv1 32))))
 (let (($x184 (= $x257 $x185)))
 (let (($x260 (=> $x211 $x184)))
 (let (($x174 (and $x211 $x171)))
 (let (($x213 (=> $x174 $x80)))
 (let (($x212 (= ?x219 (_ bv0 32))))
 (let (($x176 (= $x171 $x212)))
 (let (($x178 (=> $x211 $x176)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x93)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x226)))
 (let (($x245 (= input.spec-%var-l-0.2.0 ?x170)))
 (let (($x58 (=> $x211 $x245)))
 (let ((?x225 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge ?x225 (_ bv1 32))))
 (let (($x159 (= $x211 $x218)))
 (let (($x168 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x167 (=> $x168 $x80)))
 (let (($x165 (= ?x225 (_ bv0 32))))
 (let (($x164 (= $x168 $x165)))
 (let (($x306 (and (and (and (and (and (and $x164 $x167) $x159) $x58) $x178) $x213) $x260)))
 (let (($x253 (and (and (and $x306 $x201) $x205) $x197)))
 (let (($x296 (= $x253 true)))
 (let ((?x217 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x153 (concat ?x145 (concat ?x152 ?x217)))))
 (let (($x150 (= ?x166 input.dst.llvm-%l)))
 (let (($x161 (= $x150 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x132 (concat ?x35 (concat ?x140 ?x143)))))
 (let (($x172 (= ?x149 input.dst.llvm-%val)))
 (let (($x246 (= $x172 true)))
 (let ((?x83 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x83)))
 (let ((?x53 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x53)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x87 $x111)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x49 $x65)))
 (let (($x114 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x92 $x6)))
 (let (($x74 (not $x61)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x106 $x25)))
 (let (($x98 (and (not $x103) $x74)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x88 $x118)))
 (let (($x54 (not $x131)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x68 $x45)))
 (let (($x110 (and (not $x40) $x54)))
 (let (($x105 (and (and (and (and (and (and $x110 $x98) $x112) $x114) $x109) $x139) $x134)))
 (let (($x147 (and $x105 $x96)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x128 (or false (or false (and (and true (or $x28 $x108)) (or $x13 $x60))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x9 (and $x46 $x147)))
 (let (($x123 (= $x9 true)))
 (let (($x73 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x39 (= $x73 true)))
 (let (($x141 (and $x39 $x123)))
 (let (($x157 (and $x141 $x246)))
 (let (($x162 (and $x157 $x161)))
 (let (($x252 (and $x162 $x296)))
 (let (($x264 (and $x252 $x293)))
 (let (($x319 (and $x264 $x86)))
 (let (($x334 (and $x80 $x319)))
 (let (($x82 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x278 (and $x82 $x334)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x10 (and $x94 $x278)))
 (let (($x95 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x85 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x100 (or false (or false (and (and true (or $x48 $x85)) (or $x51 $x95))))))
 (let (($x41 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x100)))
 (let (($x8 (=> (and $x11 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x100)))
 (let (($x122 (and $x8 $x10)))
 (let (($x292 (=> $x122 $x320)))
 (not $x292)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087404/query
